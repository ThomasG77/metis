// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var $$String   = require("bs-platform/lib/js/string.js");
var Caml_obj   = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function numberEql(n, n$prime) {
  if (n.tag) {
    if (n$prime.tag) {
      return +(n[0] === n$prime[0]);
    } else {
      return /* false */0;
    }
  } else if (n$prime.tag) {
    return /* false */0;
  } else {
    return +(n[0] === n$prime[0]);
  }
}

function fIdEql(id, id$prime) {
  if (id.tag) {
    if (id$prime.tag) {
      return +(id[0] === id$prime[0]);
    } else {
      return /* false */0;
    }
  } else if (id$prime.tag) {
    return /* false */0;
  } else {
    return +(id[0] === id$prime[0]);
  }
}

var aggEql = Caml_obj.caml_equal;

function constOrColEql(e, e$prime) {
  switch (e.tag | 0) {
    case 0 : 
        if (e$prime.tag) {
          return /* false */0;
        } else {
          return +(e[0] === e$prime[0]);
        }
        break;
    case 1 : 
        if (e$prime.tag === 1) {
          return +(e[0] === e$prime[0]);
        } else {
          return /* false */0;
        }
        break;
    case 2 : 
        if (e$prime.tag === 2) {
          return +(e[0] === e$prime[0]);
        } else {
          return /* false */0;
        }
        break;
    case 3 : 
        return /* false */0;
    
  }
}

function fExpTypeEql(e, e$prime) {
  var exit = 0;
  var a;
  var a$prime;
  var b;
  var b$prime;
  switch (e.tag | 0) {
    case 0 : 
        if (e$prime.tag) {
          return /* false */0;
        } else {
          a = e[0];
          a$prime = e[1];
          b = e$prime[0];
          b$prime = e$prime[1];
          exit = 1;
        }
        break;
    case 1 : 
        if (e$prime.tag === 1) {
          a = e[0];
          a$prime = e[1];
          b = e$prime[0];
          b$prime = e$prime[1];
          exit = 1;
        } else {
          return /* false */0;
        }
        break;
    case 2 : 
        if (e$prime.tag === 2) {
          a = e[0];
          a$prime = e[1];
          b = e$prime[0];
          b$prime = e$prime[1];
          exit = 1;
        } else {
          return /* false */0;
        }
        break;
    case 3 : 
        if (e$prime.tag === 3) {
          a = e[0];
          a$prime = e[1];
          b = e$prime[0];
          b$prime = e$prime[1];
          exit = 1;
        } else {
          return /* false */0;
        }
        break;
    case 4 : 
        if (e$prime.tag === 4) {
          a = e[0];
          a$prime = e[1];
          b = e$prime[0];
          b$prime = e$prime[1];
          exit = 1;
        } else {
          return /* false */0;
        }
        break;
    case 5 : 
        if (e$prime.tag === 5) {
          a = e[0];
          a$prime = e[1];
          b = e$prime[0];
          b$prime = e$prime[1];
          exit = 1;
        } else {
          return /* false */0;
        }
        break;
    case 6 : 
        if (e$prime.tag === 6) {
          a = e[0];
          a$prime = e[1];
          b = e$prime[0];
          b$prime = e$prime[1];
          exit = 1;
        } else {
          return /* false */0;
        }
        break;
    case 7 : 
        if (e$prime.tag === 7) {
          a = e[0];
          a$prime = e[1];
          b = e$prime[0];
          b$prime = e$prime[1];
          exit = 1;
        } else {
          return /* false */0;
        }
        break;
    case 8 : 
        if (e$prime.tag === 8) {
          a = e[0];
          a$prime = e[1];
          b = e$prime[0];
          b$prime = e$prime[1];
          exit = 1;
        } else {
          return /* false */0;
        }
        break;
    
  }
  if (exit === 1) {
    if (constOrColEql(a, b)) {
      return constOrColEql(a$prime, b$prime);
    } else {
      return /* false */0;
    }
  }
  
}

function fOperationExpEql(f, f$prime) {
  if (f.tag) {
    if (f$prime.tag) {
      return List.for_all2(fOperationExpEql, f[0], f$prime[0]);
    } else {
      return /* false */0;
    }
  } else if (!f$prime.tag && fExpTypeEql(f[0], f$prime[0])) {
    return Caml_obj.caml_equal(f[1], f$prime[1]);
  } else {
    return /* false */0;
  }
}

function sortOrderEql(s, s$prime) {
  if (s !== 0) {
    if (s$prime !== 0) {
      return /* true */1;
    } else {
      return /* false */0;
    }
  } else if (s$prime !== 0) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function collectEql(c, c$prime) {
  if (c.tag) {
    if (!c$prime.tag || c[0] !== c$prime[0]) {
      return /* false */0;
    } else {
      return Caml_obj.caml_equal(c[1], c$prime[1]);
    }
  } else if (!c$prime.tag && c[0] === c$prime[0]) {
    return Caml_obj.caml_equal(c[1], c$prime[1]);
  } else {
    return /* false */0;
  }
}

function fEqualsEql(e, e$prime) {
  switch (e.tag | 0) {
    case 0 : 
        if (e$prime.tag) {
          return /* false */0;
        } else {
          return +(e[0] === e$prime[0]);
        }
        break;
    case 1 : 
        if (e$prime.tag === 1) {
          return +(e[0] === e$prime[0]);
        } else {
          return /* false */0;
        }
        break;
    case 2 : 
        if (e$prime.tag === 2) {
          return +(e[0] === e$prime[0]);
        } else {
          return /* false */0;
        }
        break;
    case 3 : 
        if (e$prime.tag === 3) {
          return List.for_all2(fEqualsEql, e[0], e$prime[0]);
        } else {
          return /* false */0;
        }
        break;
    
  }
}

function filterEql(f, f$prime) {
  switch (f.tag | 0) {
    case 0 : 
        if (!f$prime.tag && Caml_obj.caml_equal(f[0], f$prime[0])) {
          return Caml_obj.caml_equal(f[1], f$prime[1]);
        } else {
          return /* false */0;
        }
        break;
    case 1 : 
        if (f$prime.tag === 1 && fIdEql(f[0], f$prime[0]) && Caml_obj.caml_equal(f[1], f$prime[1])) {
          return fEqualsEql(f[2], f$prime[2]);
        } else {
          return /* false */0;
        }
        break;
    case 2 : 
        if (f$prime.tag === 2) {
          var match = f$prime[2][0];
          var match$1 = f[2][0];
          if (fIdEql(f[0], f$prime[0]) && Caml_obj.caml_equal(f[1], f$prime[1]) && constOrColEql(match$1[0], match[0])) {
            return constOrColEql(match$1[1], match[1]);
          } else {
            return /* false */0;
          }
        } else {
          return /* false */0;
        }
        break;
    case 3 : 
        if (f$prime.tag === 3 && fIdEql(f[0], f$prime[0])) {
          return fOperationExpEql(f[1], f$prime[1]);
        } else {
          return /* false */0;
        }
        break;
    
  }
}

function formulaEql(f, f$prime) {
  switch (f.tag | 0) {
    case 0 : 
        switch (f$prime.tag | 0) {
          case 0 : 
              if (f[0] === f$prime[0]) {
                return Caml_obj.caml_equal(f[1], f$prime[1]);
              } else {
                return /* false */0;
              }
          case 1 : 
          case 2 : 
              return /* false */0;
          
        }
        break;
    case 1 : 
        switch (f$prime.tag | 0) {
          case 1 : 
              if (Caml_obj.caml_equal(f[0], f$prime[0])) {
                return Caml_obj.caml_equal(f[1], f$prime[1]);
              } else {
                return /* false */0;
              }
          case 0 : 
          case 2 : 
              return /* false */0;
          
        }
        break;
    case 2 : 
        switch (f$prime.tag | 0) {
          case 0 : 
          case 1 : 
              return /* false */0;
          case 2 : 
              if (Caml_obj.caml_equal(f[0], f$prime[0])) {
                return Caml_obj.caml_equal(f[1], f$prime[1]);
              } else {
                return /* false */0;
              }
          
        }
        break;
    
  }
}

function ignoreTypeEql(i, i$prime) {
  switch (i.tag | 0) {
    case 0 : 
        switch (i$prime.tag | 0) {
          case 0 : 
              return +(i[0] === i$prime[0]);
          case 1 : 
          case 2 : 
              return /* false */0;
          
        }
        break;
    case 1 : 
        switch (i$prime.tag | 0) {
          case 1 : 
              return +(i[0] === i$prime[0]);
          case 0 : 
          case 2 : 
              return /* false */0;
          
        }
        break;
    case 2 : 
        switch (i$prime.tag | 0) {
          case 0 : 
          case 1 : 
              return /* false */0;
          case 2 : 
              return +(i[0] === i$prime[0]);
          
        }
        break;
    
  }
}

function transformEql(t, t$prime) {
  switch (t.tag | 0) {
    case 0 : 
        if (t$prime.tag) {
          return /* false */0;
        } else {
          return Caml_obj.caml_equal(t[0], t$prime[0]);
        }
        break;
    case 1 : 
        if (t$prime.tag === 1 && t[0] === t$prime[0] && Caml_obj.caml_equal(t[1], t$prime[1]) && t[2] === t$prime[2]) {
          return +(t[3] === t$prime[3]);
        } else {
          return /* false */0;
        }
        break;
    case 2 : 
        if (t$prime.tag === 2) {
          return collectEql(t[0], t$prime[0]);
        } else {
          return /* false */0;
        }
        break;
    case 3 : 
        if (t$prime.tag === 3) {
          return filterEql(t[0], t$prime[0]);
        } else {
          return /* false */0;
        }
        break;
    case 4 : 
        if (t$prime.tag === 4) {
          return formulaEql(t[0], t$prime[0]);
        } else {
          return /* false */0;
        }
        break;
    case 5 : 
        if (t$prime.tag === 5) {
          var match = t$prime[0];
          var match$1 = t[0];
          if (numberEql(match$1[0], match[0])) {
            return numberEql(match$1[1], match[1]);
          } else {
            return /* false */0;
          }
        } else {
          return /* false */0;
        }
        break;
    case 6 : 
        if (t$prime.tag === 6 && t[0] === t$prime[0]) {
          return List.for_all2(filterEql, t[1], t$prime[1]);
        } else {
          return /* false */0;
        }
        break;
    case 7 : 
        if (t$prime.tag === 7 && t[0] === t$prime[0]) {
          return List.for_all2(ignoreTypeEql, t[1], t$prime[1]);
        } else {
          return /* false */0;
        }
        break;
    
  }
}

function sqlAstEql(s, s$prime) {
  var t$prime = s$prime[1];
  var t = s[1];
  if (s[0] === s$prime[0]) {
    if (t) {
      if (t$prime) {
        return List.for_all2(transformEql, t[0], t$prime[0]);
      } else {
        return /* false */0;
      }
    } else if (t$prime) {
      return /* false */0;
    } else {
      return /* true */1;
    }
  } else {
    return /* false */0;
  }
}

function indentStr(indent, s) {
  return $$String.make(indent, /* " " */32) + s;
}

function optionToString(op, toS) {
  if (op) {
    return "Some(" + (Curry._1(toS, op[0]) + ")");
  } else {
    return "None";
  }
}

function numberToString(param) {
  if (param.tag) {
    return "Float(" + (Pervasives.string_of_float(param[0]) + ")");
  } else {
    return "Int(" + (Pervasives.string_of_int(param[0]) + ")");
  }
}

function constOrColToString(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "Id(" + (param[0] + ")");
    case 1 : 
        return "Int(" + (Pervasives.string_of_int(param[0]) + ")");
    case 2 : 
        return "Float(" + (Pervasives.string_of_float(param[0]) + ")");
    case 3 : 
        return "String(" + (param[0] + ")");
    
  }
}

function aggToString(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "AVG(" + (constOrColToString(param[0]) + ")");
    case 1 : 
        return "COUNT(" + (constOrColToString(param[0]) + ")");
    case 2 : 
        return "MIN(" + (constOrColToString(param[0]) + ")");
    case 3 : 
        return "MAX(" + (constOrColToString(param[0]) + ")");
    case 4 : 
        return "SUM(" + (constOrColToString(param[0]) + ")");
    
  }
}

function extractToString(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "EYear(" + (param[0] + ")");
    case 1 : 
        return "EQuarter(" + (param[0] + ")");
    case 2 : 
        return "EMonth(" + (param[0] + ")");
    case 3 : 
        return "EDom(" + (param[0] + ")");
    case 4 : 
        return "EDow(" + (param[0] + ")");
    case 5 : 
        return "EHour(" + (param[0] + ")");
    case 6 : 
        return "EMinute(" + (param[0] + ")");
    
  }
}

function dateTruncToString(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "DTYear(" + (param[0] + ")");
    case 1 : 
        return "DTQuarter(" + (param[0] + ")");
    case 2 : 
        return "DTMonth(" + (param[0] + ")");
    case 3 : 
        return "DTWeek(" + (param[0] + ")");
    case 4 : 
        return "DTDay(" + (param[0] + ")");
    case 5 : 
        return "DTHour(" + (param[0] + ")");
    
  }
}

function sortOrderToString(param) {
  if (param !== 0) {
    return "DSC";
  } else {
    return "ASC";
  }
}

function fExpTypeToString(param) {
  switch (param.tag | 0) {
    case 0 : 
        return $$String.concat("", /* :: */[
                    "FEqual(",
                    /* :: */[
                      constOrColToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          constOrColToString(param[1]),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 1 : 
        return $$String.concat("", /* :: */[
                    "FNotEqual(",
                    /* :: */[
                      constOrColToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          constOrColToString(param[1]),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 2 : 
        return $$String.concat("", /* :: */[
                    "FGreaterThan(",
                    /* :: */[
                      constOrColToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          constOrColToString(param[1]),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 3 : 
        return $$String.concat("", /* :: */[
                    "FLessThan(",
                    /* :: */[
                      constOrColToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          constOrColToString(param[1]),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 4 : 
        return $$String.concat("", /* :: */[
                    "FGreaterThanEq(",
                    /* :: */[
                      constOrColToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          constOrColToString(param[1]),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 5 : 
        return $$String.concat("", /* :: */[
                    "FLessThanEq(",
                    /* :: */[
                      constOrColToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          constOrColToString(param[1]),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 6 : 
        return $$String.concat("", /* :: */[
                    "FIlike(",
                    /* :: */[
                      constOrColToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          constOrColToString(param[1]),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 7 : 
        return $$String.concat("", /* :: */[
                    "FLike(",
                    /* :: */[
                      constOrColToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          constOrColToString(param[1]),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 8 : 
        return $$String.concat("", /* :: */[
                    "FBetween(",
                    /* :: */[
                      constOrColToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          constOrColToString(param[1]),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    
  }
}

function fIdToString(param) {
  if (param.tag) {
    return "Int(" + (Pervasives.string_of_int(param[0]) + ")");
  } else {
    return "String(" + (param[0] + ")");
  }
}

function fEqualsToString(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "String(" + (param[0] + ")");
    case 1 : 
        return "Int(" + (Pervasives.string_of_int(param[0]) + ")");
    case 2 : 
        return "Float(" + (Pervasives.string_of_float(param[0]) + ")");
    case 3 : 
        return "List(" + ($$String.concat(", ", List.map(fEqualsToString, param[0])) + ")");
    
  }
}

function fOperationExpToString(param) {
  if (param.tag) {
    return "FOperationExpList(" + ($$String.concat(", ", List.map(fOperationExpToString, param[0])) + ")");
  } else {
    return $$String.concat("", /* :: */[
                "FOperationExp(",
                /* :: */[
                  fExpTypeToString(param[0]),
                  /* :: */[
                    ", ",
                    /* :: */[
                      optionToString(param[1], Pervasives.string_of_bool),
                      /* :: */[
                        ")",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]);
  }
}

function filterToString(param) {
  switch (param.tag | 0) {
    case 0 : 
        return $$String.concat("", /* :: */[
                    "FExpression(",
                    /* :: */[
                      fIdToString(param[0]),
                      /* :: */[
                        ",",
                        /* :: */[
                          "ExprSTR(",
                          /* :: */[
                            param[1][0],
                            /* :: */[
                              "))",
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 1 : 
        return $$String.concat("", /* :: */[
                    "FExact(",
                    /* :: */[
                      fIdToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          constOrColToString(param[1]),
                          /* :: */[
                            ", ",
                            /* :: */[
                              fEqualsToString(param[2]),
                              /* :: */[
                                ")",
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 2 : 
        var match = param[2][0];
        return $$String.concat("", /* :: */[
                    "FRange(",
                    /* :: */[
                      fIdToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          constOrColToString(param[1]),
                          /* :: */[
                            ", ",
                            /* :: */[
                              "MinMax(",
                              /* :: */[
                                constOrColToString(match[0]),
                                /* :: */[
                                  ", ",
                                  /* :: */[
                                    constOrColToString(match[1]),
                                    /* :: */[
                                      ")",
                                      /* :: */[
                                        ")",
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 3 : 
        return $$String.concat("", /* :: */[
                    "FOperation(",
                    /* :: */[
                      fIdToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          fOperationExpToString(param[1]),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    
  }
}

function collectToString(param) {
  if (param.tag) {
    return $$String.concat("", /* :: */[
                "CLimit(",
                /* :: */[
                  Pervasives.string_of_int(param[0]),
                  /* :: */[
                    ", ",
                    /* :: */[
                      optionToString(param[1], Pervasives.string_of_int),
                      /* :: */[
                        ")",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]);
  } else {
    return $$String.concat("", /* :: */[
                "CSort(",
                /* :: */[
                  param[0],
                  /* :: */[
                    ", ",
                    /* :: */[
                      optionToString(param[1], sortOrderToString),
                      /* :: */[
                        ")",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]);
  }
}

function formulaToString(param) {
  switch (param.tag | 0) {
    case 0 : 
        return $$String.concat("", /* :: */[
                    "FExp(",
                    /* :: */[
                      param[0],
                      /* :: */[
                        ", ",
                        /* :: */[
                          optionToString(param[1], (function (x) {
                                  return x;
                                })),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 1 : 
        return $$String.concat("", /* :: */[
                    "FDateTrunc(",
                    /* :: */[
                      dateTruncToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          optionToString(param[1], (function (x) {
                                  return x;
                                })),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 2 : 
        return $$String.concat("", /* :: */[
                    "FExtract(",
                    /* :: */[
                      extractToString(param[0]),
                      /* :: */[
                        ", ",
                        /* :: */[
                          optionToString(param[1], (function (x) {
                                  return x;
                                })),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    
  }
}

function sampleToString(param) {
  return $$String.concat("", /* :: */[
              "SMultiplicative(",
              /* :: */[
                numberToString(param[0]),
                /* :: */[
                  ", ",
                  /* :: */[
                    numberToString(param[1]),
                    /* :: */[
                      ")",
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

function ignoreTypeToString(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "STR(" + (param[0] + ")");
    case 1 : 
        return "Int(" + (Pervasives.string_of_int(param[0]) + ")");
    case 2 : 
        return "Float(" + (Pervasives.string_of_float(param[0]) + ")");
    
  }
}

function transFormToString(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "Aggregate(" + (aggToString(param[0]) + ")");
    case 1 : 
        var match = param[1][0];
        return "Bin(" + (param[0] + (", MinMax(" + (numberToString(match[0]) + ("," + (numberToString(match[1]) + (")," + (Pervasives.string_of_int(param[2]) + (", " + (param[3] + ")")))))))));
    case 2 : 
        return "Collect(" + (collectToString(param[0]) + ")");
    case 3 : 
        return "Filter(" + (filterToString(param[0]) + ")");
    case 4 : 
        return "Formula(" + (formulaToString(param[0]) + ")");
    case 5 : 
        return "Sample(" + (sampleToString(param[0]) + ")");
    case 6 : 
        return $$String.concat("", /* :: */[
                    "Crossfilter(",
                    /* :: */[
                      param[0],
                      /* :: */[
                        ",<",
                        /* :: */[
                          $$String.concat(", ", List.map(filterToString, param[1])),
                          /* :: */[
                            ">)",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 7 : 
        return $$String.concat("", /* :: */[
                    "ResolveFilter(",
                    /* :: */[
                      param[0],
                      /* :: */[
                        ",<",
                        /* :: */[
                          $$String.concat(", ", List.map(ignoreTypeToString, param[1])),
                          /* :: */[
                            ">)",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    
  }
}

function sqlToString(param) {
  var match = param[1];
  var datum = param[0];
  if (match) {
    return "SQL(" + (datum + ("\n" + ($$String.concat(", \n", List.map(transFormToString, match[0])) + ")")));
  } else {
    return "SQL(" + (datum + ", None)");
  }
}

exports.numberEql             = numberEql;
exports.fIdEql                = fIdEql;
exports.aggEql                = aggEql;
exports.constOrColEql         = constOrColEql;
exports.fExpTypeEql           = fExpTypeEql;
exports.fOperationExpEql      = fOperationExpEql;
exports.sortOrderEql          = sortOrderEql;
exports.collectEql            = collectEql;
exports.fEqualsEql            = fEqualsEql;
exports.filterEql             = filterEql;
exports.formulaEql            = formulaEql;
exports.ignoreTypeEql         = ignoreTypeEql;
exports.transformEql          = transformEql;
exports.sqlAstEql             = sqlAstEql;
exports.indentStr             = indentStr;
exports.optionToString        = optionToString;
exports.numberToString        = numberToString;
exports.constOrColToString    = constOrColToString;
exports.aggToString           = aggToString;
exports.extractToString       = extractToString;
exports.dateTruncToString     = dateTruncToString;
exports.sortOrderToString     = sortOrderToString;
exports.fExpTypeToString      = fExpTypeToString;
exports.fIdToString           = fIdToString;
exports.fEqualsToString       = fEqualsToString;
exports.fOperationExpToString = fOperationExpToString;
exports.filterToString        = filterToString;
exports.collectToString       = collectToString;
exports.formulaToString       = formulaToString;
exports.sampleToString        = sampleToString;
exports.ignoreTypeToString    = ignoreTypeToString;
exports.transFormToString     = transFormToString;
exports.sqlToString           = sqlToString;
/* No side effect */
