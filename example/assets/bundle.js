/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/assets/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 27);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var ROW = exports.ROW = "ROW";
var SCATTER = exports.SCATTER = "SCATTER";
var LINE = exports.LINE = "LINE";
var DATA_NAME = exports.DATA_NAME = "SOURCE";

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatch = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.list = list;
exports.register = register;

var _crossfilter = __webpack_require__(15);

var _crossfilter2 = _interopRequireDefault(_crossfilter);

var _constants = __webpack_require__(0);

var constants = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var chartRegistry = {};
var ids = [];

var dispatch = exports.dispatch = d3.dispatch("xfilter", "filterAll", "renderAll", "redrawAll");

dispatch.on("filterAll", function () {
  _crossfilter2.default.filterAll();
  ids.forEach(function (id) {
    return chartRegistry[id].filterAll();
  });
  dispatch.call("redrawAll");
});

dispatch.on("renderAll", function () {
  return Promise.all(ids.map(function (id) {
    return chartRegistry[id].render();
  }));
});

dispatch.on("redrawAll", function () {
  return Promise.all(ids.map(function (id) {
    return chartRegistry[id].redraw();
  }));
});

dispatch.on("xfilter", function (_ref) {
  var type = _ref.type,
      id = _ref.id,
      field = _ref.field,
      filter = _ref.filter;

  if (type === "filter.exact") {
    _crossfilter2.default.filter(id, { type: type, field: field, equals: filter });
  } else if (type === "filter.range") {
    _crossfilter2.default.filter(id, { type: type, field: field, range: filter });
  }
  dispatch.call("redrawAll");
});

function list(id) {
  return id ? chartRegistry : chartRegistry[id];
}

function register(id) {
  var _this = this;

  var _data = null;
  var _filters = [];
  var _filterReducer = null;

  var _dispatch = d3.dispatch("render", "redraw", "filter", "filterAll");

  _dispatch.on("filter", function (filterAction) {
    _filters = _filterReducer(_filters, filterAction);
    dispatch.call("xfilter", _this, _extends({}, filterAction, { filter: _filters }));
  });

  var chart = {
    on: function on(event, handler) {
      _dispatch.on(event, handler);
    },
    trigger: function trigger(event, context, value) {
      _dispatch.call(event, context, value);
    },
    data: function data(_data2) {
      return !arguments.length ? _data : _data = _data2;
    },
    render: function render() {
      return _data.values().then(function (data) {
        _dispatch.call("render", chart, data);
      });
    },
    redraw: function redraw() {
      return _data.values().then(function (data) {
        _dispatch.call("redraw", chart, data);
      });
    },
    filterReduce: function filterReduce(reducer) {
      return !arguments.length ? _filterReducer : _filterReducer = reducer;
    },
    filter: function filter(filterAction) {
      return !arguments.length ? _filters : _dispatch.call("filter", chart, filterAction);
    },
    filterAll: function filterAll() {
      _filters = [];
      _dispatch.call("filterAll", chart);
    }
  };

  ids.push(id);
  chartRegistry[id] = chart;

  return chart;
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lineDataNode = exports.scatterDataNode = exports.rowDataNode = exports.xfilterDataNode = undefined;

var _constants = __webpack_require__(0);

var constants = _interopRequireWildcard(_constants);

var _dataGraph = __webpack_require__(16);

var _connector = __webpack_require__(4);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var graph = (0, _dataGraph.createDataGraph)({ query: _connector.query, tables: ["flights_donotmodify"] });
var xfilterDataNode = exports.xfilterDataNode = graph.data({
  source: "flights_donotmodify",
  name: "xfilter",
  transform: [{
    type: "crossfilter",
    signal: "vega",
    filter: []
  }]
});

var rowDataNode = exports.rowDataNode = graph.data({
  source: "xfilter",
  name: "row",
  transform: [{
    type: "aggregate",
    fields: ["dest_state"],
    groupby: ["dest_state"]
  }, {
    type: "aggregate",
    fields: ["*"],
    ops: ["count"],
    as: ["records"]
  }, {
    type: "collect.sort",
    sort: {
      field: ["records"],
      order: ["descending"]
    }
  }, {
    type: "collect.limit",
    limit: {
      row: 20
    }
  }, {
    type: "resolvefilter",
    filter: { signal: "vega" },
    ignore: constants.ROW
  }]
});

var scatterDataNode = exports.scatterDataNode = graph.data({
  source: "xfilter",
  name: "scatter",
  transform: [{
    type: "aggregate",
    fields: ["carrier_name"],
    as: ["key0"],
    groupby: "key0"
  }, {
    type: "aggregate",
    fields: ["depdelay", "arrdelay", "*"],
    as: ["x", "y", "size"],
    ops: ["average", "average", "count"]
  }, {
    type: "filter",
    id: "test",
    expr: "depdelay IS NOT NULL"
  }, {
    type: "filter",
    id: "test",
    expr: "arrdelay IS NOT NULL"
  }, {
    type: "collect.sort",
    sort: {
      field: ["size"],
      order: ["descending"]
    }
  }, {
    type: "collect.limit",
    limit: {
      row: 15
    }
  }, {
    type: "resolvefilter",
    filter: { signal: "vega" },
    ignore: constants.SCATTER
  }]
});

var lineDataNode = exports.lineDataNode = graph.data({
  source: "xfilter",
  name: "line",
  transform: [{
    type: "formula.date_trunc",
    unit: "month",
    field: "dep_timestamp",
    as: "x"
  }, {
    type: "aggregate",
    fields: ["*"],
    ops: ["count"],
    as: ["y"],
    groupby: "x"
  }, {
    type: "collect.sort",
    sort: { field: ["x"] }
  }, {
    type: "filter.range",
    id: "test",
    field: "dep_timestamp",
    range: ["TIMESTAMP(0) '1987-10-01 00:03:00'", "TIMESTAMP(0) '2008-12-31 23:59:00'"]
  }, {
    type: "resolvefilter",
    filter: { signal: "vega" },
    ignore: constants.LINE
  }]
});

exports.default = graph;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(src) {
	if (typeof execScript !== "undefined")
		execScript(src);
	else
		eval.call(null, src);
}


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.query = query;
exports.connect = connect;
var connection = new MapdCon().protocol("https").host("metis.mapd.com").port("443").dbName("mapd").user("mapd").password("HyperInteractive");

connection.logging(true);

function query(stmt) {
  return new Promise(function (resolve, reject) {
    return connection.query(stmt, null, function (error, result) {
      return error ? reject(error) : resolve(result);
    });
  });
}

function connect() {
  return new Promise(function (resolve, reject) {
    return connection.connect(function (error, result) {
      return error ? reject(error) : resolve(result);
    });
  });
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(3)(__webpack_require__(10))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(3)(__webpack_require__(11))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _connector = __webpack_require__(4);

var _chartRegistry = __webpack_require__(1);

var _chartRow = __webpack_require__(13);

var _chartRow2 = _interopRequireDefault(_chartRow);

var _chartScatter = __webpack_require__(14);

var _chartScatter2 = _interopRequireDefault(_chartScatter);

var _chartLine = __webpack_require__(12);

var _chartLine2 = _interopRequireDefault(_chartLine);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _connector.connect)().then(function () {
  (0, _chartRow2.default)();
  (0, _chartScatter2.default)();
  (0, _chartLine2.default)();
  _chartRegistry.dispatch.call("renderAll");
}).then(function () {
  document.getElementById("filter-all").addEventListener("click", function () {
    _chartRegistry.dispatch.call("filterAll");
  });
});

/***/ }),
/* 9 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = "/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1);\n\t__webpack_require__(4);\n\t__webpack_require__(6);\n\tmodule.exports = __webpack_require__(8);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(2)(__webpack_require__(3))\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tmodule.exports = function(src) {\r\n\t\tif (typeof execScript !== \"undefined\")\r\n\t\t\texecScript(src);\r\n\t\telse\r\n\t\t\teval.call(null, src);\r\n\t}\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"\\\"use strict\\\";\\n/*\\n * Licensed to the Apache Software Foundation (ASF) under one\\n * or more contributor license agreements. See the NOTICE file\\n * distributed with this work for additional information\\n * regarding copyright ownership. The ASF licenses this file\\n * to you under the Apache License, Version 2.0 (the\\n * \\\"License\\\"); you may not use this file except in compliance\\n * with the License. You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing,\\n * software distributed under the License is distributed on an\\n * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n * KIND, either express or implied. See the License for the\\n * specific language governing permissions and limitations\\n * under the License.\\n */\\n\\n/*jshint evil:true*/\\n\\n/**\\n * The Thrift namespace houses the Apache Thrift JavaScript library\\n * elements providing JavaScript bindings for the Apache Thrift RPC\\n * system. End users will typically only directly make use of the\\n * Transport (TXHRTransport/TWebSocketTransport) and Protocol\\n * (TJSONPRotocol/TBinaryProtocol) constructors.\\n *\\n * Object methods beginning with a __ (e.g. __onOpen()) are internal\\n * and should not be called outside of the object's own methods.\\n *\\n * This library creates one global object: Thrift\\n * Code in this library must never create additional global identifiers,\\n * all features must be scoped within the Thrift namespace.\\n * @namespace\\n * @example\\n *     var transport = new Thrift.Transport(\\\"http://localhost:8585\\\");\\n *     var protocol  = new Thrift.Protocol(transport);\\n *     var client = new MyThriftSvcClient(protocol);\\n *     var result = client.MyMethod();\\n */\\n\\nvar Thrift = {\\n    /**\\n     * Thrift JavaScript library version.\\n     * @readonly\\n     * @const {string} Version\\n     * @memberof Thrift\\n     */\\n    Version: '0.9.3',\\n\\n    /**\\n     * Thrift IDL type string to Id mapping.\\n     * @readonly\\n     * @property {number}  STOP   - End of a set of fields.\\n     * @property {number}  VOID   - No value (only legal for return types).\\n     * @property {number}  BOOL   - True/False integer.\\n     * @property {number}  BYTE   - Signed 8 bit integer.\\n     * @property {number}  I08    - Signed 8 bit integer.\\n     * @property {number}  DOUBLE - 64 bit IEEE 854 floating point.\\n     * @property {number}  I16    - Signed 16 bit integer.\\n     * @property {number}  I32    - Signed 32 bit integer.\\n     * @property {number}  I64    - Signed 64 bit integer.\\n     * @property {number}  STRING - Array of bytes representing a string of characters.\\n     * @property {number}  UTF7   - Array of bytes representing a string of UTF7 encoded characters.\\n     * @property {number}  STRUCT - A multifield type.\\n     * @property {number}  MAP    - A collection type (map/associative-array/dictionary).\\n     * @property {number}  SET    - A collection type (unordered and without repeated values).\\n     * @property {number}  LIST   - A collection type (unordered).\\n     * @property {number}  UTF8   - Array of bytes representing a string of UTF8 encoded characters.\\n     * @property {number}  UTF16  - Array of bytes representing a string of UTF16 encoded characters.\\n     */\\n    Type: {\\n        'STOP': 0,\\n        'VOID': 1,\\n        'BOOL': 2,\\n        'BYTE': 3,\\n        'I08': 3,\\n        'DOUBLE': 4,\\n        'I16': 6,\\n        'I32': 8,\\n        'I64': 10,\\n        'STRING': 11,\\n        'UTF7': 11,\\n        'STRUCT': 12,\\n        'MAP': 13,\\n        'SET': 14,\\n        'LIST': 15,\\n        'UTF8': 16,\\n        'UTF16': 17\\n    },\\n\\n    /**\\n     * Thrift RPC message type string to Id mapping.\\n     * @readonly\\n     * @property {number}  CALL      - RPC call sent from client to server.\\n     * @property {number}  REPLY     - RPC call normal response from server to client.\\n     * @property {number}  EXCEPTION - RPC call exception response from server to client.\\n     * @property {number}  ONEWAY    - Oneway RPC call from client to server with no response.\\n     */\\n    MessageType: {\\n        'CALL': 1,\\n        'REPLY': 2,\\n        'EXCEPTION': 3,\\n        'ONEWAY': 4\\n    },\\n\\n    /**\\n     * Utility function returning the count of an object's own properties.\\n     * @param {object} obj - Object to test.\\n     * @returns {number} number of object's own properties\\n     */\\n    objectLength: function objectLength(obj) {\\n        var length = 0;\\n        for (var k in obj) {\\n            if (obj.hasOwnProperty(k)) {\\n                length++;\\n            }\\n        }\\n        return length;\\n    },\\n\\n    /**\\n     * Utility function to establish prototype inheritance.\\n     * @see {@link http://javascript.crockford.com/prototypal.html|Prototypal Inheritance}\\n     * @param {function} constructor - Contstructor function to set as derived.\\n     * @param {function} superConstructor - Contstructor function to set as base.\\n     * @param {string} [name] - Type name to set as name property in derived prototype.\\n     */\\n    inherits: function inherits(constructor, superConstructor, name) {\\n        function F() {}\\n        F.prototype = superConstructor.prototype;\\n        constructor.prototype = new F();\\n        constructor.prototype.name = name || \\\"\\\";\\n    }\\n};\\n\\n/**\\n * Initializes a Thrift TException instance.\\n * @constructor\\n * @augments Error\\n * @param {string} message - The TException message (distinct from the Error message).\\n * @classdesc TException is the base class for all Thrift exceptions types.\\n */\\nThrift.TException = function (message) {\\n    this.message = message;\\n};\\nThrift.inherits(Thrift.TException, Error, 'TException');\\n\\n/**\\n * Returns the message set on the exception.\\n * @readonly\\n * @returns {string} exception message\\n */\\nThrift.TException.prototype.getMessage = function () {\\n    return this.message;\\n};\\n\\n/**\\n * Thrift Application Exception type string to Id mapping.\\n * @readonly\\n * @property {number}  UNKNOWN                 - Unknown/undefined.\\n * @property {number}  UNKNOWN_METHOD          - Client attempted to call a method unknown to the server.\\n * @property {number}  INVALID_MESSAGE_TYPE    - Client passed an unknown/unsupported MessageType.\\n * @property {number}  WRONG_METHOD_NAME       - Unused.\\n * @property {number}  BAD_SEQUENCE_ID         - Unused in Thrift RPC, used to flag proprietary sequence number errors.\\n * @property {number}  MISSING_RESULT          - Raised by a server processor if a handler fails to supply the required return result.\\n * @property {number}  INTERNAL_ERROR          - Something bad happened.\\n * @property {number}  PROTOCOL_ERROR          - The protocol layer failed to serialize or deserialize data.\\n * @property {number}  INVALID_TRANSFORM       - Unused.\\n * @property {number}  INVALID_PROTOCOL        - The protocol (or version) is not supported.\\n * @property {number}  UNSUPPORTED_CLIENT_TYPE - Unused.\\n */\\nThrift.TApplicationExceptionType = {\\n    'UNKNOWN': 0,\\n    'UNKNOWN_METHOD': 1,\\n    'INVALID_MESSAGE_TYPE': 2,\\n    'WRONG_METHOD_NAME': 3,\\n    'BAD_SEQUENCE_ID': 4,\\n    'MISSING_RESULT': 5,\\n    'INTERNAL_ERROR': 6,\\n    'PROTOCOL_ERROR': 7,\\n    'INVALID_TRANSFORM': 8,\\n    'INVALID_PROTOCOL': 9,\\n    'UNSUPPORTED_CLIENT_TYPE': 10\\n};\\n\\n/**\\n * Initializes a Thrift TApplicationException instance.\\n * @constructor\\n * @augments Thrift.TException\\n * @param {string} message - The TApplicationException message (distinct from the Error message).\\n * @param {Thrift.TApplicationExceptionType} [code] - The TApplicationExceptionType code.\\n * @classdesc TApplicationException is the exception class used to propagate exceptions from an RPC server back to a calling client.\\n*/\\nThrift.TApplicationException = function (message, code) {\\n    this.message = message;\\n    this.code = typeof code === \\\"number\\\" ? code : 0;\\n};\\nThrift.inherits(Thrift.TApplicationException, Thrift.TException, 'TApplicationException');\\n\\n/**\\n * Read a TApplicationException from the supplied protocol.\\n * @param {object} input - The input protocol to read from.\\n */\\nThrift.TApplicationException.prototype.read = function (input) {\\n    while (1) {\\n        var ret = input.readFieldBegin();\\n\\n        if (ret.ftype == Thrift.Type.STOP) {\\n            break;\\n        }\\n\\n        var fid = ret.fid;\\n\\n        switch (fid) {\\n            case 1:\\n                if (ret.ftype == Thrift.Type.STRING) {\\n                    ret = input.readString();\\n                    this.message = ret.value;\\n                } else {\\n                    ret = input.skip(ret.ftype);\\n                }\\n                break;\\n            case 2:\\n                if (ret.ftype == Thrift.Type.I32) {\\n                    ret = input.readI32();\\n                    this.code = ret.value;\\n                } else {\\n                    ret = input.skip(ret.ftype);\\n                }\\n                break;\\n            default:\\n                ret = input.skip(ret.ftype);\\n                break;\\n        }\\n\\n        input.readFieldEnd();\\n    }\\n\\n    input.readStructEnd();\\n};\\n\\n/**\\n * Wite a TApplicationException to the supplied protocol.\\n * @param {object} output - The output protocol to write to.\\n */\\nThrift.TApplicationException.prototype.write = function (output) {\\n    output.writeStructBegin('TApplicationException');\\n\\n    if (this.message) {\\n        output.writeFieldBegin('message', Thrift.Type.STRING, 1);\\n        output.writeString(this.getMessage());\\n        output.writeFieldEnd();\\n    }\\n\\n    if (this.code) {\\n        output.writeFieldBegin('type', Thrift.Type.I32, 2);\\n        output.writeI32(this.code);\\n        output.writeFieldEnd();\\n    }\\n\\n    output.writeFieldStop();\\n    output.writeStructEnd();\\n};\\n\\n/**\\n * Returns the application exception code set on the exception.\\n * @readonly\\n * @returns {Thrift.TApplicationExceptionType} exception code\\n */\\nThrift.TApplicationException.prototype.getCode = function () {\\n    return this.code;\\n};\\n\\n/**\\n * Constructor Function for the XHR transport.\\n * If you do not specify a url then you must handle XHR operations on\\n * your own. This type can also be constructed using the Transport alias\\n * for backward compatibility.\\n * @constructor\\n * @param {string} [url] - The URL to connect to.\\n * @classdesc The Apache Thrift Transport layer performs byte level I/O\\n * between RPC clients and servers. The JavaScript TXHRTransport object\\n * uses Http[s]/XHR. Target servers must implement the http[s] transport\\n * (see: node.js example server_http.js).\\n * @example\\n *     var transport = new Thrift.TXHRTransport(\\\"http://localhost:8585\\\");\\n */\\nThrift.Transport = Thrift.TXHRTransport = function (url, options) {\\n    this.url = url;\\n    this.wpos = 0;\\n    this.rpos = 0;\\n    this.useCORS = options && options.useCORS;\\n    this.send_buf = '';\\n    this.recv_buf = '';\\n};\\n\\nThrift.TXHRTransport.prototype = {\\n    /**\\n     * Gets the browser specific XmlHttpRequest Object.\\n     * @returns {object} the browser XHR interface object\\n     */\\n    getXmlHttpRequestObject: function getXmlHttpRequestObject() {\\n        try {\\n            return new XMLHttpRequest();\\n        } catch (e1) {}\\n        try {\\n            return new ActiveXObject('Msxml2.XMLHTTP');\\n        } catch (e2) {}\\n        try {\\n            return new ActiveXObject('Microsoft.XMLHTTP');\\n        } catch (e3) {}\\n\\n        throw \\\"Your browser doesn't support XHR.\\\";\\n    },\\n\\n    /**\\n     * Sends the current XRH request if the transport was created with a URL\\n     * and the async parameter is false. If the transport was not created with\\n     * a URL, or the async parameter is True and no callback is provided, or\\n     * the URL is an empty string, the current send buffer is returned.\\n     * @param {object} async - If true the current send buffer is returned.\\n     * @param {object} callback - Optional async completion callback\\n     * @returns {undefined|string} Nothing or the current send buffer.\\n     * @throws {string} If XHR fails.\\n     */\\n    flush: function flush(async, callback) {\\n        var self = this;\\n        if (async && !callback || this.url === undefined || this.url === '') {\\n            return this.send_buf;\\n        }\\n\\n        var xreq = this.getXmlHttpRequestObject();\\n\\n        if (xreq.overrideMimeType) {\\n            xreq.overrideMimeType('application/vnd.apache.thrift.json; charset=utf-8');\\n        }\\n\\n        if (callback) {\\n            //Ignore XHR callbacks until the data arrives, then call the\\n            //  client's callback\\n            xreq.onreadystatechange = function () {\\n                var clientCallback = callback;\\n                return function () {\\n                    if (this.readyState == 4 && this.status == 200) {\\n                        self.setRecvBuffer(this.responseText);\\n                        clientCallback();\\n                    }\\n                };\\n            }();\\n        }\\n\\n        xreq.open('POST', this.url, !!async);\\n\\n        if (xreq.setRequestHeader) {\\n            xreq.setRequestHeader('Accept', 'application/vnd.apache.thrift.json; charset=utf-8');\\n            xreq.setRequestHeader('Content-Type', 'application/vnd.apache.thrift.json; charset=utf-8');\\n        }\\n\\n        xreq.send(this.send_buf);\\n        if (async && callback) {\\n            return;\\n        }\\n\\n        if (xreq.readyState != 4) {\\n            throw 'encountered an unknown ajax ready state: ' + xreq.readyState;\\n        }\\n\\n        if (xreq.status != 200) {\\n            throw 'encountered a unknown request status: ' + xreq.status;\\n        }\\n\\n        this.recv_buf = xreq.responseText;\\n        this.recv_buf_sz = this.recv_buf.length;\\n        this.wpos = this.recv_buf.length;\\n        this.rpos = 0;\\n    },\\n\\n    /**\\n     * Creates a jQuery XHR object to be used for a Thrift server call.\\n     * @param {object} client - The Thrift Service client object generated by the IDL compiler.\\n     * @param {object} postData - The message to send to the server.\\n     * @param {function} args - The original call arguments with the success call back at the end.\\n     * @param {function} recv_method - The Thrift Service Client receive method for the call.\\n     * @returns {object} A new jQuery XHR object.\\n     * @throws {string} If the jQuery version is prior to 1.5 or if jQuery is not found.\\n     */\\n    jqRequest: function jqRequest(client, postData, args, recv_method) {\\n        if (typeof jQuery === 'undefined' || typeof jQuery.Deferred === 'undefined') {\\n            throw 'Thrift.js requires jQuery 1.5+ to use asynchronous requests';\\n        }\\n\\n        var thriftTransport = this;\\n\\n        var jqXHR = jQuery.ajax({\\n            url: this.url,\\n            data: postData,\\n            type: 'POST',\\n            cache: false,\\n            contentType: 'application/vnd.apache.thrift.json; charset=utf-8',\\n            dataType: 'text thrift',\\n            converters: {\\n                'text thrift': function textThrift(responseData) {\\n                    thriftTransport.setRecvBuffer(responseData);\\n                    var value = recv_method.call(client);\\n                    return value;\\n                }\\n            },\\n            context: client,\\n            success: jQuery.makeArray(args).pop()\\n        });\\n\\n        return jqXHR;\\n    },\\n\\n    /**\\n     * Sets the buffer to provide the protocol when deserializing.\\n     * @param {string} buf - The buffer to supply the protocol.\\n     */\\n    setRecvBuffer: function setRecvBuffer(buf) {\\n        this.recv_buf = buf;\\n        this.recv_buf_sz = this.recv_buf.length;\\n        this.wpos = this.recv_buf.length;\\n        this.rpos = 0;\\n    },\\n\\n    /**\\n     * Returns true if the transport is open, XHR always returns true.\\n     * @readonly\\n     * @returns {boolean} Always True.\\n     */\\n    isOpen: function isOpen() {\\n        return true;\\n    },\\n\\n    /**\\n     * Opens the transport connection, with XHR this is a nop.\\n     */\\n    open: function open() {},\\n\\n    /**\\n     * Closes the transport connection, with XHR this is a nop.\\n     */\\n    close: function close() {},\\n\\n    /**\\n     * Returns the specified number of characters from the response\\n     * buffer.\\n     * @param {number} len - The number of characters to return.\\n     * @returns {string} Characters sent by the server.\\n     */\\n    read: function read(len) {\\n        var avail = this.wpos - this.rpos;\\n\\n        if (avail === 0) {\\n            return '';\\n        }\\n\\n        var give = len;\\n\\n        if (avail < len) {\\n            give = avail;\\n        }\\n\\n        var ret = this.read_buf.substr(this.rpos, give);\\n        this.rpos += give;\\n\\n        //clear buf when complete?\\n        return ret;\\n    },\\n\\n    /**\\n     * Returns the entire response buffer.\\n     * @returns {string} Characters sent by the server.\\n     */\\n    readAll: function readAll() {\\n        return this.recv_buf;\\n    },\\n\\n    /**\\n     * Sets the send buffer to buf.\\n     * @param {string} buf - The buffer to send.\\n     */\\n    write: function write(buf) {\\n        this.send_buf = buf;\\n    },\\n\\n    /**\\n     * Returns the send buffer.\\n     * @readonly\\n     * @returns {string} The send buffer.\\n     */\\n    getSendBuffer: function getSendBuffer() {\\n        return this.send_buf;\\n    }\\n\\n};\\n\\n/**\\n * Constructor Function for the WebSocket transport.\\n * @constructor\\n * @param {string} [url] - The URL to connect to.\\n * @classdesc The Apache Thrift Transport layer performs byte level I/O\\n * between RPC clients and servers. The JavaScript TWebSocketTransport object\\n * uses the WebSocket protocol. Target servers must implement WebSocket.\\n * (see: node.js example server_http.js).\\n * @example\\n *   var transport = new Thrift.TWebSocketTransport(\\\"http://localhost:8585\\\");\\n */\\nThrift.TWebSocketTransport = function (url) {\\n    this.__reset(url);\\n};\\n\\nThrift.TWebSocketTransport.prototype = {\\n    __reset: function __reset(url) {\\n        this.url = url; //Where to connect\\n        this.socket = null; //The web socket\\n        this.callbacks = []; //Pending callbacks\\n        this.send_pending = []; //Buffers/Callback pairs waiting to be sent\\n        this.send_buf = ''; //Outbound data, immutable until sent\\n        this.recv_buf = ''; //Inbound data\\n        this.rb_wpos = 0; //Network write position in receive buffer\\n        this.rb_rpos = 0; //Client read position in receive buffer\\n    },\\n\\n    /**\\n     * Sends the current WS request and registers callback. The async\\n     * parameter is ignored (WS flush is always async) and the callback\\n     * function parameter is required.\\n     * @param {object} async - Ignored.\\n     * @param {object} callback - The client completion callback.\\n     * @returns {undefined|string} Nothing (undefined)\\n     */\\n    flush: function flush(async, callback) {\\n        var self = this;\\n        if (this.isOpen()) {\\n            //Send data and register a callback to invoke the client callback\\n            this.socket.send(this.send_buf);\\n            this.callbacks.push(function () {\\n                var clientCallback = callback;\\n                return function (msg) {\\n                    self.setRecvBuffer(msg);\\n                    clientCallback();\\n                };\\n            }());\\n        } else {\\n            //Queue the send to go out __onOpen\\n            this.send_pending.push({\\n                buf: this.send_buf,\\n                cb: callback\\n            });\\n        }\\n    },\\n\\n    __onOpen: function __onOpen() {\\n        var self = this;\\n        if (this.send_pending.length > 0) {\\n            //If the user made calls before the connection was fully\\n            //open, send them now\\n            this.send_pending.forEach(function (elem) {\\n                this.socket.send(elem.buf);\\n                this.callbacks.push(function () {\\n                    var clientCallback = elem.cb;\\n                    return function (msg) {\\n                        self.setRecvBuffer(msg);\\n                        clientCallback();\\n                    };\\n                }());\\n            });\\n            this.send_pending = [];\\n        }\\n    },\\n\\n    __onClose: function __onClose(evt) {\\n        this.__reset(this.url);\\n    },\\n\\n    __onMessage: function __onMessage(evt) {\\n        if (this.callbacks.length) {\\n            this.callbacks.shift()(evt.data);\\n        }\\n    },\\n\\n    __onError: function __onError(evt) {\\n        console.log(\\\"Thrift WebSocket Error: \\\" + evt.toString());\\n        this.socket.close();\\n    },\\n\\n    /**\\n     * Sets the buffer to use when receiving server responses.\\n     * @param {string} buf - The buffer to receive server responses.\\n     */\\n    setRecvBuffer: function setRecvBuffer(buf) {\\n        this.recv_buf = buf;\\n        this.recv_buf_sz = this.recv_buf.length;\\n        this.wpos = this.recv_buf.length;\\n        this.rpos = 0;\\n    },\\n\\n    /**\\n     * Returns true if the transport is open\\n     * @readonly\\n     * @returns {boolean}\\n     */\\n    isOpen: function isOpen() {\\n        return this.socket && this.socket.readyState == this.socket.OPEN;\\n    },\\n\\n    /**\\n     * Opens the transport connection\\n     */\\n    open: function open() {\\n        //If OPEN/CONNECTING/CLOSING ignore additional opens\\n        if (this.socket && this.socket.readyState != this.socket.CLOSED) {\\n            return;\\n        }\\n        //If there is no socket or the socket is closed:\\n        this.socket = new WebSocket(this.url);\\n        this.socket.onopen = this.__onOpen.bind(this);\\n        this.socket.onmessage = this.__onMessage.bind(this);\\n        this.socket.onerror = this.__onError.bind(this);\\n        this.socket.onclose = this.__onClose.bind(this);\\n    },\\n\\n    /**\\n     * Closes the transport connection\\n     */\\n    close: function close() {\\n        this.socket.close();\\n    },\\n\\n    /**\\n     * Returns the specified number of characters from the response\\n     * buffer.\\n     * @param {number} len - The number of characters to return.\\n     * @returns {string} Characters sent by the server.\\n     */\\n    read: function read(len) {\\n        var avail = this.wpos - this.rpos;\\n\\n        if (avail === 0) {\\n            return '';\\n        }\\n\\n        var give = len;\\n\\n        if (avail < len) {\\n            give = avail;\\n        }\\n\\n        var ret = this.read_buf.substr(this.rpos, give);\\n        this.rpos += give;\\n\\n        //clear buf when complete?\\n        return ret;\\n    },\\n\\n    /**\\n     * Returns the entire response buffer.\\n     * @returns {string} Characters sent by the server.\\n     */\\n    readAll: function readAll() {\\n        return this.recv_buf;\\n    },\\n\\n    /**\\n     * Sets the send buffer to buf.\\n     * @param {string} buf - The buffer to send.\\n     */\\n    write: function write(buf) {\\n        this.send_buf = buf;\\n    },\\n\\n    /**\\n     * Returns the send buffer.\\n     * @readonly\\n     * @returns {string} The send buffer.\\n     */\\n    getSendBuffer: function getSendBuffer() {\\n        return this.send_buf;\\n    }\\n\\n};\\n\\n/**\\n * Initializes a Thrift JSON protocol instance.\\n * @constructor\\n * @param {Thrift.Transport} transport - The transport to serialize to/from.\\n * @classdesc Apache Thrift Protocols perform serialization which enables cross\\n * language RPC. The Protocol type is the JavaScript browser implementation\\n * of the Apache Thrift TJSONProtocol.\\n * @example\\n *     var protocol  = new Thrift.Protocol(transport);\\n */\\nThrift.TJSONProtocol = Thrift.Protocol = function (transport) {\\n    this.tstack = [];\\n    this.tpos = [];\\n    this.transport = transport;\\n};\\n\\n/**\\n * Thrift IDL type Id to string mapping.\\n * @readonly\\n * @see {@link Thrift.Type}\\n */\\nThrift.Protocol.Type = {};\\nThrift.Protocol.Type[Thrift.Type.BOOL] = '\\\"tf\\\"';\\nThrift.Protocol.Type[Thrift.Type.BYTE] = '\\\"i8\\\"';\\nThrift.Protocol.Type[Thrift.Type.I16] = '\\\"i16\\\"';\\nThrift.Protocol.Type[Thrift.Type.I32] = '\\\"i32\\\"';\\nThrift.Protocol.Type[Thrift.Type.I64] = '\\\"i64\\\"';\\nThrift.Protocol.Type[Thrift.Type.DOUBLE] = '\\\"dbl\\\"';\\nThrift.Protocol.Type[Thrift.Type.STRUCT] = '\\\"rec\\\"';\\nThrift.Protocol.Type[Thrift.Type.STRING] = '\\\"str\\\"';\\nThrift.Protocol.Type[Thrift.Type.MAP] = '\\\"map\\\"';\\nThrift.Protocol.Type[Thrift.Type.LIST] = '\\\"lst\\\"';\\nThrift.Protocol.Type[Thrift.Type.SET] = '\\\"set\\\"';\\n\\n/**\\n * Thrift IDL type string to Id mapping.\\n * @readonly\\n * @see {@link Thrift.Type}\\n */\\nThrift.Protocol.RType = {};\\nThrift.Protocol.RType.tf = Thrift.Type.BOOL;\\nThrift.Protocol.RType.i8 = Thrift.Type.BYTE;\\nThrift.Protocol.RType.i16 = Thrift.Type.I16;\\nThrift.Protocol.RType.i32 = Thrift.Type.I32;\\nThrift.Protocol.RType.i64 = Thrift.Type.I64;\\nThrift.Protocol.RType.dbl = Thrift.Type.DOUBLE;\\nThrift.Protocol.RType.rec = Thrift.Type.STRUCT;\\nThrift.Protocol.RType.str = Thrift.Type.STRING;\\nThrift.Protocol.RType.map = Thrift.Type.MAP;\\nThrift.Protocol.RType.lst = Thrift.Type.LIST;\\nThrift.Protocol.RType.set = Thrift.Type.SET;\\n\\n/**\\n * The TJSONProtocol version number.\\n * @readonly\\n * @const {number} Version\\n * @memberof Thrift.Protocol\\n */\\nThrift.Protocol.Version = 1;\\n\\nThrift.Protocol.prototype = {\\n    /**\\n     * Returns the underlying transport.\\n     * @readonly\\n     * @returns {Thrift.Transport} The underlying transport.\\n     */\\n    getTransport: function getTransport() {\\n        return this.transport;\\n    },\\n\\n    /**\\n     * Serializes the beginning of a Thrift RPC message.\\n     * @param {string} name - The service method to call.\\n     * @param {Thrift.MessageType} messageType - The type of method call.\\n     * @param {number} seqid - The sequence number of this call (always 0 in Apache Thrift).\\n     */\\n    writeMessageBegin: function writeMessageBegin(name, messageType, seqid) {\\n        this.tstack = [];\\n        this.tpos = [];\\n\\n        this.tstack.push([Thrift.Protocol.Version, '\\\"' + name + '\\\"', messageType, seqid]);\\n    },\\n\\n    /**\\n     * Serializes the end of a Thrift RPC message.\\n     */\\n    writeMessageEnd: function writeMessageEnd() {\\n        var obj = this.tstack.pop();\\n\\n        this.wobj = this.tstack.pop();\\n        this.wobj.push(obj);\\n\\n        this.wbuf = '[' + this.wobj.join(',') + ']';\\n\\n        this.transport.write(this.wbuf);\\n    },\\n\\n    /**\\n     * Serializes the beginning of a struct.\\n     * @param {string} name - The name of the struct.\\n     */\\n    writeStructBegin: function writeStructBegin(name) {\\n        this.tpos.push(this.tstack.length);\\n        this.tstack.push({});\\n    },\\n\\n    /**\\n     * Serializes the end of a struct.\\n     */\\n    writeStructEnd: function writeStructEnd() {\\n\\n        var p = this.tpos.pop();\\n        var struct = this.tstack[p];\\n        var str = '{';\\n        var first = true;\\n        for (var key in struct) {\\n            if (first) {\\n                first = false;\\n            } else {\\n                str += ',';\\n            }\\n\\n            str += key + ':' + struct[key];\\n        }\\n\\n        str += '}';\\n        this.tstack[p] = str;\\n    },\\n\\n    /**\\n     * Serializes the beginning of a struct field.\\n     * @param {string} name - The name of the field.\\n     * @param {Thrift.Protocol.Type} fieldType - The data type of the field.\\n     * @param {number} fieldId - The field's unique identifier.\\n     */\\n    writeFieldBegin: function writeFieldBegin(name, fieldType, fieldId) {\\n        this.tpos.push(this.tstack.length);\\n        this.tstack.push({ 'fieldId': '\\\"' + fieldId + '\\\"', 'fieldType': Thrift.Protocol.Type[fieldType]\\n        });\\n    },\\n\\n    /**\\n     * Serializes the end of a field.\\n     */\\n    writeFieldEnd: function writeFieldEnd() {\\n        var value = this.tstack.pop();\\n        var fieldInfo = this.tstack.pop();\\n\\n        this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' + fieldInfo.fieldType + ':' + value + '}';\\n        this.tpos.pop();\\n    },\\n\\n    /**\\n     * Serializes the end of the set of fields for a struct.\\n     */\\n    writeFieldStop: function writeFieldStop() {\\n        //na\\n    },\\n\\n    /**\\n     * Serializes the beginning of a map collection.\\n     * @param {Thrift.Type} keyType - The data type of the key.\\n     * @param {Thrift.Type} valType - The data type of the value.\\n     * @param {number} [size] - The number of elements in the map (ignored).\\n     */\\n    writeMapBegin: function writeMapBegin(keyType, valType, size) {\\n        this.tpos.push(this.tstack.length);\\n        this.tstack.push([Thrift.Protocol.Type[keyType], Thrift.Protocol.Type[valType], 0]);\\n    },\\n\\n    /**\\n     * Serializes the end of a map.\\n     */\\n    writeMapEnd: function writeMapEnd() {\\n        var p = this.tpos.pop();\\n\\n        if (p == this.tstack.length) {\\n            return;\\n        }\\n\\n        if ((this.tstack.length - p - 1) % 2 !== 0) {\\n            this.tstack.push('');\\n        }\\n\\n        var size = (this.tstack.length - p - 1) / 2;\\n\\n        this.tstack[p][this.tstack[p].length - 1] = size;\\n\\n        var map = '}';\\n        var first = true;\\n        while (this.tstack.length > p + 1) {\\n            var v = this.tstack.pop();\\n            var k = this.tstack.pop();\\n            if (first) {\\n                first = false;\\n            } else {\\n                map = ',' + map;\\n            }\\n\\n            if (!isNaN(k)) {\\n                k = '\\\"' + k + '\\\"';\\n            } //json \\\"keys\\\" need to be strings\\n            map = k + ':' + v + map;\\n        }\\n        map = '{' + map;\\n\\n        this.tstack[p].push(map);\\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\\n    },\\n\\n    /**\\n     * Serializes the beginning of a list collection.\\n     * @param {Thrift.Type} elemType - The data type of the elements.\\n     * @param {number} size - The number of elements in the list.\\n     */\\n    writeListBegin: function writeListBegin(elemType, size) {\\n        this.tpos.push(this.tstack.length);\\n        this.tstack.push([Thrift.Protocol.Type[elemType], size]);\\n    },\\n\\n    /**\\n     * Serializes the end of a list.\\n     */\\n    writeListEnd: function writeListEnd() {\\n        var p = this.tpos.pop();\\n\\n        while (this.tstack.length > p + 1) {\\n            var tmpVal = this.tstack[p + 1];\\n            this.tstack.splice(p + 1, 1);\\n            this.tstack[p].push(tmpVal);\\n        }\\n\\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\\n    },\\n\\n    /**\\n     * Serializes the beginning of a set collection.\\n     * @param {Thrift.Type} elemType - The data type of the elements.\\n     * @param {number} size - The number of elements in the list.\\n     */\\n    writeSetBegin: function writeSetBegin(elemType, size) {\\n        this.tpos.push(this.tstack.length);\\n        this.tstack.push([Thrift.Protocol.Type[elemType], size]);\\n    },\\n\\n    /**\\n     * Serializes the end of a set.\\n     */\\n    writeSetEnd: function writeSetEnd() {\\n        var p = this.tpos.pop();\\n\\n        while (this.tstack.length > p + 1) {\\n            var tmpVal = this.tstack[p + 1];\\n            this.tstack.splice(p + 1, 1);\\n            this.tstack[p].push(tmpVal);\\n        }\\n\\n        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\\n    },\\n\\n    /** Serializes a boolean */\\n    writeBool: function writeBool(value) {\\n        this.tstack.push(value ? 1 : 0);\\n    },\\n\\n    /** Serializes a number */\\n    writeByte: function writeByte(i8) {\\n        this.tstack.push(i8);\\n    },\\n\\n    /** Serializes a number */\\n    writeI16: function writeI16(i16) {\\n        this.tstack.push(i16);\\n    },\\n\\n    /** Serializes a number */\\n    writeI32: function writeI32(i32) {\\n        this.tstack.push(i32);\\n    },\\n\\n    /** Serializes a number */\\n    writeI64: function writeI64(i64) {\\n        this.tstack.push(i64);\\n    },\\n\\n    /** Serializes a number */\\n    writeDouble: function writeDouble(dbl) {\\n        this.tstack.push(dbl);\\n    },\\n\\n    /** Serializes a string */\\n    writeString: function writeString(str) {\\n        // We do not encode uri components for wire transfer:\\n        if (str === null) {\\n            this.tstack.push(null);\\n        } else {\\n            // concat may be slower than building a byte buffer\\n            var escapedString = '';\\n            for (var i = 0; i < str.length; i++) {\\n                var ch = str.charAt(i); // a single double quote: \\\"\\n                if (ch === '\\\\\\\"') {\\n                    escapedString += '\\\\\\\\\\\\\\\"'; // write out as: \\\\\\\"\\n                } else if (ch === '\\\\\\\\') {\\n                    // a single backslash\\n                    escapedString += '\\\\\\\\\\\\\\\\'; // write out as double backslash\\n                } else if (ch === '\\\\b') {\\n                    // a single backspace: invisible\\n                    escapedString += '\\\\\\\\b'; // write out as: \\\\b\\\"\\n                } else if (ch === '\\\\f') {\\n                    // a single formfeed: invisible\\n                    escapedString += '\\\\\\\\f'; // write out as: \\\\f\\\"\\n                } else if (ch === '\\\\n') {\\n                    // a single newline: invisible\\n                    escapedString += '\\\\\\\\n'; // write out as: \\\\n\\\"\\n                } else if (ch === '\\\\r') {\\n                    // a single return: invisible\\n                    escapedString += '\\\\\\\\r'; // write out as: \\\\r\\\"\\n                } else if (ch === '\\\\t') {\\n                    // a single tab: invisible\\n                    escapedString += '\\\\\\\\t'; // write out as: \\\\t\\\"\\n                } else {\\n                    escapedString += ch; // Else it need not be escaped\\n                }\\n            }\\n            this.tstack.push('\\\"' + escapedString + '\\\"');\\n        }\\n    },\\n\\n    /** Serializes a string */\\n    writeBinary: function writeBinary(str) {\\n        this.writeString(str);\\n    },\\n\\n    /**\\n       @class\\n       @name AnonReadMessageBeginReturn\\n       @property {string} fname - The name of the service method.\\n       @property {Thrift.MessageType} mtype - The type of message call.\\n       @property {number} rseqid - The sequence number of the message (0 in Thrift RPC).\\n     */\\n    /**\\n     * Deserializes the beginning of a message.\\n     * @returns {AnonReadMessageBeginReturn}\\n     */\\n    readMessageBegin: function readMessageBegin() {\\n        this.rstack = [];\\n        this.rpos = [];\\n\\n        if (typeof JSON !== 'undefined' && typeof JSON.parse === 'function') {\\n            this.robj = JSON.parse(this.transport.readAll());\\n        } else if (typeof jQuery !== 'undefined') {\\n            this.robj = jQuery.parseJSON(this.transport.readAll());\\n        } else {\\n            this.robj = eval(this.transport.readAll());\\n        }\\n\\n        var r = {};\\n        var version = this.robj.shift();\\n\\n        if (version != Thrift.Protocol.Version) {\\n            throw 'Wrong thrift protocol version: ' + version;\\n        }\\n\\n        r.fname = this.robj.shift();\\n        r.mtype = this.robj.shift();\\n        r.rseqid = this.robj.shift();\\n\\n        //get to the main obj\\n        this.rstack.push(this.robj.shift());\\n\\n        return r;\\n    },\\n\\n    /** Deserializes the end of a message. */\\n    readMessageEnd: function readMessageEnd() {},\\n\\n    /**\\n     * Deserializes the beginning of a struct.\\n     * @param {string} [name] - The name of the struct (ignored)\\n     * @returns {object} - An object with an empty string fname property\\n     */\\n    readStructBegin: function readStructBegin(name) {\\n        var r = {};\\n        r.fname = '';\\n\\n        //incase this is an array of structs\\n        if (this.rstack[this.rstack.length - 1] instanceof Array) {\\n            this.rstack.push(this.rstack[this.rstack.length - 1].shift());\\n        }\\n\\n        return r;\\n    },\\n\\n    /** Deserializes the end of a struct. */\\n    readStructEnd: function readStructEnd() {\\n        if (this.rstack[this.rstack.length - 2] instanceof Array) {\\n            this.rstack.pop();\\n        }\\n    },\\n\\n    /**\\n       @class\\n       @name AnonReadFieldBeginReturn\\n       @property {string} fname - The name of the field (always '').\\n       @property {Thrift.Type} ftype - The data type of the field.\\n       @property {number} fid - The unique identifier of the field.\\n     */\\n    /**\\n     * Deserializes the beginning of a field.\\n     * @returns {AnonReadFieldBeginReturn}\\n     */\\n    readFieldBegin: function readFieldBegin() {\\n        var r = {};\\n\\n        var fid = -1;\\n        var ftype = Thrift.Type.STOP;\\n\\n        //get a fieldId\\n        for (var f in this.rstack[this.rstack.length - 1]) {\\n            if (f === null) {\\n                continue;\\n            }\\n\\n            fid = parseInt(f, 10);\\n            this.rpos.push(this.rstack.length);\\n\\n            var field = this.rstack[this.rstack.length - 1][fid];\\n\\n            //remove so we don't see it again\\n            delete this.rstack[this.rstack.length - 1][fid];\\n\\n            this.rstack.push(field);\\n\\n            break;\\n        }\\n\\n        if (fid != -1) {\\n\\n            //should only be 1 of these but this is the only\\n            //way to match a key\\n            for (var i in this.rstack[this.rstack.length - 1]) {\\n                if (Thrift.Protocol.RType[i] === null) {\\n                    continue;\\n                }\\n\\n                ftype = Thrift.Protocol.RType[i];\\n                this.rstack[this.rstack.length - 1] = this.rstack[this.rstack.length - 1][i];\\n            }\\n        }\\n\\n        r.fname = '';\\n        r.ftype = ftype;\\n        r.fid = fid;\\n\\n        return r;\\n    },\\n\\n    /** Deserializes the end of a field. */\\n    readFieldEnd: function readFieldEnd() {\\n        var pos = this.rpos.pop();\\n\\n        //get back to the right place in the stack\\n        while (this.rstack.length > pos) {\\n            this.rstack.pop();\\n        }\\n    },\\n\\n    /**\\n       @class\\n       @name AnonReadMapBeginReturn\\n       @property {Thrift.Type} ktype - The data type of the key.\\n       @property {Thrift.Type} vtype - The data type of the value.\\n       @property {number} size - The number of elements in the map.\\n     */\\n    /**\\n     * Deserializes the beginning of a map.\\n     * @returns {AnonReadMapBeginReturn}\\n     */\\n    readMapBegin: function readMapBegin() {\\n        var map = this.rstack.pop();\\n        var first = map.shift();\\n        if (first instanceof Array) {\\n            this.rstack.push(map);\\n            map = first;\\n            first = map.shift();\\n        }\\n\\n        var r = {};\\n        r.ktype = Thrift.Protocol.RType[first];\\n        r.vtype = Thrift.Protocol.RType[map.shift()];\\n        r.size = map.shift();\\n\\n        this.rpos.push(this.rstack.length);\\n        this.rstack.push(map.shift());\\n\\n        return r;\\n    },\\n\\n    /** Deserializes the end of a map. */\\n    readMapEnd: function readMapEnd() {\\n        this.readFieldEnd();\\n    },\\n\\n    /**\\n       @class\\n       @name AnonReadColBeginReturn\\n       @property {Thrift.Type} etype - The data type of the element.\\n       @property {number} size - The number of elements in the collection.\\n     */\\n    /**\\n     * Deserializes the beginning of a list.\\n     * @returns {AnonReadColBeginReturn}\\n     */\\n    readListBegin: function readListBegin() {\\n        var list = this.rstack[this.rstack.length - 1];\\n\\n        var r = {};\\n        r.etype = Thrift.Protocol.RType[list.shift()];\\n        r.size = list.shift();\\n\\n        this.rpos.push(this.rstack.length);\\n        this.rstack.push(list.shift());\\n\\n        return r;\\n    },\\n\\n    /** Deserializes the end of a list. */\\n    readListEnd: function readListEnd() {\\n        this.readFieldEnd();\\n    },\\n\\n    /**\\n     * Deserializes the beginning of a set.\\n     * @returns {AnonReadColBeginReturn}\\n     */\\n    readSetBegin: function readSetBegin(elemType, size) {\\n        return this.readListBegin(elemType, size);\\n    },\\n\\n    /** Deserializes the end of a set. */\\n    readSetEnd: function readSetEnd() {\\n        return this.readListEnd();\\n    },\\n\\n    /** Returns an object with a value property set to\\n     *  False unless the next number in the protocol buffer\\n     *  is 1, in which case the value property is True */\\n    readBool: function readBool() {\\n        var r = this.readI32();\\n\\n        if (r !== null && r.value == '1') {\\n            r.value = true;\\n        } else {\\n            r.value = false;\\n        }\\n\\n        return r;\\n    },\\n\\n    /** Returns the an object with a value property set to the\\n        next value found in the protocol buffer */\\n    readByte: function readByte() {\\n        return this.readI32();\\n    },\\n\\n    /** Returns the an object with a value property set to the\\n        next value found in the protocol buffer */\\n    readI16: function readI16() {\\n        return this.readI32();\\n    },\\n\\n    /** Returns the an object with a value property set to the\\n        next value found in the protocol buffer */\\n    readI32: function readI32(f) {\\n        if (f === undefined) {\\n            f = this.rstack[this.rstack.length - 1];\\n        }\\n\\n        var r = {};\\n\\n        if (f instanceof Array) {\\n            if (f.length === 0) {\\n                r.value = undefined;\\n            } else {\\n                r.value = f.shift();\\n            }\\n        } else if (f instanceof Object) {\\n            for (var i in f) {\\n                if (i === null) {\\n                    continue;\\n                }\\n                this.rstack.push(f[i]);\\n                delete f[i];\\n\\n                r.value = i;\\n                break;\\n            }\\n        } else {\\n            r.value = f;\\n            this.rstack.pop();\\n        }\\n\\n        return r;\\n    },\\n\\n    /** Returns the an object with a value property set to the\\n        next value found in the protocol buffer */\\n    readI64: function readI64() {\\n        return this.readI32();\\n    },\\n\\n    /** Returns the an object with a value property set to the\\n        next value found in the protocol buffer */\\n    readDouble: function readDouble() {\\n        return this.readI32();\\n    },\\n\\n    /** Returns the an object with a value property set to the\\n        next value found in the protocol buffer */\\n    readString: function readString() {\\n        var r = this.readI32();\\n        return r;\\n    },\\n\\n    /** Returns the an object with a value property set to the\\n        next value found in the protocol buffer */\\n    readBinary: function readBinary() {\\n        return this.readString();\\n    },\\n\\n    /**\\n     * Method to arbitrarily skip over data */\\n    skip: function skip(type) {\\n        var ret, i;\\n        switch (type) {\\n            case Thrift.Type.STOP:\\n                return null;\\n\\n            case Thrift.Type.BOOL:\\n                return this.readBool();\\n\\n            case Thrift.Type.BYTE:\\n                return this.readByte();\\n\\n            case Thrift.Type.I16:\\n                return this.readI16();\\n\\n            case Thrift.Type.I32:\\n                return this.readI32();\\n\\n            case Thrift.Type.I64:\\n                return this.readI64();\\n\\n            case Thrift.Type.DOUBLE:\\n                return this.readDouble();\\n\\n            case Thrift.Type.STRING:\\n                return this.readString();\\n\\n            case Thrift.Type.STRUCT:\\n                this.readStructBegin();\\n                while (true) {\\n                    ret = this.readFieldBegin();\\n                    if (ret.ftype == Thrift.Type.STOP) {\\n                        break;\\n                    }\\n                    this.skip(ret.ftype);\\n                    this.readFieldEnd();\\n                }\\n                this.readStructEnd();\\n                return null;\\n\\n            case Thrift.Type.MAP:\\n                ret = this.readMapBegin();\\n                for (i = 0; i < ret.size; i++) {\\n                    if (i > 0) {\\n                        if (this.rstack.length > this.rpos[this.rpos.length - 1] + 1) {\\n                            this.rstack.pop();\\n                        }\\n                    }\\n                    this.skip(ret.ktype);\\n                    this.skip(ret.vtype);\\n                }\\n                this.readMapEnd();\\n                return null;\\n\\n            case Thrift.Type.SET:\\n                ret = this.readSetBegin();\\n                for (i = 0; i < ret.size; i++) {\\n                    this.skip(ret.etype);\\n                }\\n                this.readSetEnd();\\n                return null;\\n\\n            case Thrift.Type.LIST:\\n                ret = this.readListBegin();\\n                for (i = 0; i < ret.size; i++) {\\n                    this.skip(ret.etype);\\n                }\\n                this.readListEnd();\\n                return null;\\n        }\\n    }\\n};\\n\\n/**\\n * Initializes a MutilplexProtocol Implementation as a Wrapper for Thrift.Protocol\\n * @constructor\\n */\\nThrift.MultiplexProtocol = function (srvName, trans, strictRead, strictWrite) {\\n    Thrift.Protocol.call(this, trans, strictRead, strictWrite);\\n    this.serviceName = srvName;\\n};\\nThrift.inherits(Thrift.MultiplexProtocol, Thrift.Protocol, 'multiplexProtocol');\\n\\n/** Override writeMessageBegin method of prototype*/\\nThrift.MultiplexProtocol.prototype.writeMessageBegin = function (name, type, seqid) {\\n\\n    if (type === Thrift.MessageType.CALL || type === Thrift.MessageType.ONEWAY) {\\n        Thrift.Protocol.prototype.writeMessageBegin.call(this, this.serviceName + \\\":\\\" + name, type, seqid);\\n    } else {\\n        Thrift.Protocol.prototype.writeMessageBegin.call(this, name, type, seqid);\\n    }\\n};\\n\\nThrift.Multiplexer = function () {\\n    this.seqid = 0;\\n};\\n\\n/** Instantiates a multiplexed client for a specific service\\n * @constructor\\n * @param {String} serviceName - The transport to serialize to/from.\\n * @param {Thrift.ServiceClient} SCl - The Service Client Class\\n * @param {Thrift.Transport} transport - Thrift.Transport instance which provides remote host:port\\n * @example\\n *    var mp = new Thrift.Multiplexer();\\n *    var transport = new Thrift.Transport(\\\"http://localhost:9090/foo.thrift\\\");\\n *    var protocol = new Thrift.Protocol(transport);\\n *    var client = mp.createClient('AuthService', AuthServiceClient, transport);\\n*/\\nThrift.Multiplexer.prototype.createClient = function (serviceName, SCl, transport) {\\n    if (SCl.Client) {\\n        SCl = SCl.Client;\\n    }\\n    var self = this;\\n    SCl.prototype.new_seqid = function () {\\n        self.seqid += 1;\\n        return self.seqid;\\n    };\\n    var client = new SCl(new Thrift.MultiplexProtocol(serviceName, transport));\\n\\n    return client;\\n};\\n\\nvar copyList, copyMap;\\n\\nwindow.copyList = function (lst, types) {\\n\\n    if (!lst) {\\n        return lst;\\n    }\\n\\n    var type;\\n\\n    if (types.shift === undefined) {\\n        type = types;\\n    } else {\\n        type = types[0];\\n    }\\n    var Type = type;\\n\\n    var len = lst.length,\\n        result = [],\\n        i,\\n        val;\\n    for (i = 0; i < len; i++) {\\n        val = lst[i];\\n        if (type === null) {\\n            result.push(val);\\n        } else if (type === copyMap || type === copyList) {\\n            result.push(type(val, types.slice(1)));\\n        } else {\\n            result.push(new Type(val));\\n        }\\n    }\\n    return result;\\n};\\n\\nwindow.copyMap = function (obj, types) {\\n\\n    if (!obj) {\\n        return obj;\\n    }\\n\\n    var type;\\n\\n    if (types.shift === undefined) {\\n        type = types;\\n    } else {\\n        type = types[0];\\n    }\\n    var Type = type;\\n\\n    var result = {},\\n        val;\\n    for (var prop in obj) {\\n        if (obj.hasOwnProperty(prop)) {\\n            val = obj[prop];\\n            if (type === null) {\\n                result[prop] = val;\\n            } else if (type === copyMap || type === copyList) {\\n                result[prop] = type(val, types.slice(1));\\n            } else {\\n                result[prop] = new Type(val);\\n            }\\n        }\\n    }\\n    return result;\\n};\\n\\nThrift.copyMap = copyMap;\\nThrift.copyList = copyList;\\n;window.Thrift = Thrift;\"\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(2)(__webpack_require__(5))\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"\\\"use strict\\\";\\n//\\n// Autogenerated by Thrift Compiler (0.10.0)\\n//\\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\\n//\\n\\n\\nwindow.TDatumType = {\\n  'SMALLINT': 0,\\n  'INT': 1,\\n  'BIGINT': 2,\\n  'FLOAT': 3,\\n  'DECIMAL': 4,\\n  'DOUBLE': 5,\\n  'STR': 6,\\n  'TIME': 7,\\n  'TIMESTAMP': 8,\\n  'DATE': 9,\\n  'BOOL': 10,\\n  'INTERVAL_DAY_TIME': 11,\\n  'INTERVAL_YEAR_MONTH': 12\\n};\\nwindow.TEncodingType = {\\n  'NONE': 0,\\n  'FIXED': 1,\\n  'RL': 2,\\n  'DIFF': 3,\\n  'DICT': 4,\\n  'SPARSE': 5\\n};\\nwindow.TExecuteMode = {\\n  'HYBRID': 0,\\n  'GPU': 1,\\n  'CPU': 2\\n};\\nwindow.TTableType = {\\n  'DELIMITED': 0,\\n  'POLYGON': 1\\n};\\nwindow.TMergeType = {\\n  'UNION': 0,\\n  'REDUCE': 1\\n};\\nwindow.TExpressionRangeType = {\\n  'INVALID': 0,\\n  'INTEGER': 1,\\n  'FLOAT': 2,\\n  'DOUBLE': 3\\n};\\nwindow.TDatumVal = function (args) {\\n  this.int_val = null;\\n  this.real_val = null;\\n  this.str_val = null;\\n  this.arr_val = null;\\n  if (args) {\\n    if (args.int_val !== undefined && args.int_val !== null) {\\n      this.int_val = args.int_val;\\n    }\\n    if (args.real_val !== undefined && args.real_val !== null) {\\n      this.real_val = args.real_val;\\n    }\\n    if (args.str_val !== undefined && args.str_val !== null) {\\n      this.str_val = args.str_val;\\n    }\\n    if (args.arr_val !== undefined && args.arr_val !== null) {\\n      this.arr_val = Thrift.copyList(args.arr_val, [null]);\\n    }\\n  }\\n};\\nTDatumVal.prototype = {};\\nTDatumVal.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I64) {\\n          this.int_val = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.DOUBLE) {\\n          this.real_val = input.readDouble().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.str_val = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size0 = 0;\\n          var _rtmp34;\\n          this.arr_val = [];\\n          var _etype3 = 0;\\n          _rtmp34 = input.readListBegin();\\n          _etype3 = _rtmp34.etype;\\n          _size0 = _rtmp34.size;\\n          for (var _i5 = 0; _i5 < _size0; ++_i5) {\\n            var elem6 = null;\\n            elem6 = new TDatum();\\n            elem6.read(input);\\n            this.arr_val.push(elem6);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTDatumVal.prototype.write = function (output) {\\n  output.writeStructBegin('TDatumVal');\\n  if (this.int_val !== null && this.int_val !== undefined) {\\n    output.writeFieldBegin('int_val', Thrift.Type.I64, 1);\\n    output.writeI64(this.int_val);\\n    output.writeFieldEnd();\\n  }\\n  if (this.real_val !== null && this.real_val !== undefined) {\\n    output.writeFieldBegin('real_val', Thrift.Type.DOUBLE, 2);\\n    output.writeDouble(this.real_val);\\n    output.writeFieldEnd();\\n  }\\n  if (this.str_val !== null && this.str_val !== undefined) {\\n    output.writeFieldBegin('str_val', Thrift.Type.STRING, 3);\\n    output.writeString(this.str_val);\\n    output.writeFieldEnd();\\n  }\\n  if (this.arr_val !== null && this.arr_val !== undefined) {\\n    output.writeFieldBegin('arr_val', Thrift.Type.LIST, 4);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.arr_val.length);\\n    for (var iter7 in this.arr_val) {\\n      if (this.arr_val.hasOwnProperty(iter7)) {\\n        iter7 = this.arr_val[iter7];\\n        iter7.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TDatum = function (args) {\\n  this.val = null;\\n  this.is_null = null;\\n  if (args) {\\n    if (args.val !== undefined && args.val !== null) {\\n      this.val = new TDatumVal(args.val);\\n    }\\n    if (args.is_null !== undefined && args.is_null !== null) {\\n      this.is_null = args.is_null;\\n    }\\n  }\\n};\\nTDatum.prototype = {};\\nTDatum.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.val = new TDatumVal();\\n          this.val.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.is_null = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTDatum.prototype.write = function (output) {\\n  output.writeStructBegin('TDatum');\\n  if (this.val !== null && this.val !== undefined) {\\n    output.writeFieldBegin('val', Thrift.Type.STRUCT, 1);\\n    this.val.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.is_null !== null && this.is_null !== undefined) {\\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\\n    output.writeBool(this.is_null);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TStringValue = function (args) {\\n  this.str_val = null;\\n  this.is_null = null;\\n  if (args) {\\n    if (args.str_val !== undefined && args.str_val !== null) {\\n      this.str_val = args.str_val;\\n    }\\n    if (args.is_null !== undefined && args.is_null !== null) {\\n      this.is_null = args.is_null;\\n    }\\n  }\\n};\\nTStringValue.prototype = {};\\nTStringValue.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.str_val = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.is_null = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTStringValue.prototype.write = function (output) {\\n  output.writeStructBegin('TStringValue');\\n  if (this.str_val !== null && this.str_val !== undefined) {\\n    output.writeFieldBegin('str_val', Thrift.Type.STRING, 1);\\n    output.writeString(this.str_val);\\n    output.writeFieldEnd();\\n  }\\n  if (this.is_null !== null && this.is_null !== undefined) {\\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\\n    output.writeBool(this.is_null);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TTypeInfo = function (args) {\\n  this.type = null;\\n  this.encoding = null;\\n  this.nullable = null;\\n  this.is_array = null;\\n  this.precision = null;\\n  this.scale = null;\\n  this.comp_param = null;\\n  if (args) {\\n    if (args.type !== undefined && args.type !== null) {\\n      this.type = args.type;\\n    }\\n    if (args.encoding !== undefined && args.encoding !== null) {\\n      this.encoding = args.encoding;\\n    }\\n    if (args.nullable !== undefined && args.nullable !== null) {\\n      this.nullable = args.nullable;\\n    }\\n    if (args.is_array !== undefined && args.is_array !== null) {\\n      this.is_array = args.is_array;\\n    }\\n    if (args.precision !== undefined && args.precision !== null) {\\n      this.precision = args.precision;\\n    }\\n    if (args.scale !== undefined && args.scale !== null) {\\n      this.scale = args.scale;\\n    }\\n    if (args.comp_param !== undefined && args.comp_param !== null) {\\n      this.comp_param = args.comp_param;\\n    }\\n  }\\n};\\nTTypeInfo.prototype = {};\\nTTypeInfo.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I32) {\\n          this.type = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.I32) {\\n          this.encoding = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.nullable = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.is_array = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.I32) {\\n          this.precision = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 6:\\n        if (ftype == Thrift.Type.I32) {\\n          this.scale = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 7:\\n        if (ftype == Thrift.Type.I32) {\\n          this.comp_param = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTTypeInfo.prototype.write = function (output) {\\n  output.writeStructBegin('TTypeInfo');\\n  if (this.type !== null && this.type !== undefined) {\\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\\n    output.writeI32(this.type);\\n    output.writeFieldEnd();\\n  }\\n  if (this.encoding !== null && this.encoding !== undefined) {\\n    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);\\n    output.writeI32(this.encoding);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nullable !== null && this.nullable !== undefined) {\\n    output.writeFieldBegin('nullable', Thrift.Type.BOOL, 2);\\n    output.writeBool(this.nullable);\\n    output.writeFieldEnd();\\n  }\\n  if (this.is_array !== null && this.is_array !== undefined) {\\n    output.writeFieldBegin('is_array', Thrift.Type.BOOL, 3);\\n    output.writeBool(this.is_array);\\n    output.writeFieldEnd();\\n  }\\n  if (this.precision !== null && this.precision !== undefined) {\\n    output.writeFieldBegin('precision', Thrift.Type.I32, 5);\\n    output.writeI32(this.precision);\\n    output.writeFieldEnd();\\n  }\\n  if (this.scale !== null && this.scale !== undefined) {\\n    output.writeFieldBegin('scale', Thrift.Type.I32, 6);\\n    output.writeI32(this.scale);\\n    output.writeFieldEnd();\\n  }\\n  if (this.comp_param !== null && this.comp_param !== undefined) {\\n    output.writeFieldBegin('comp_param', Thrift.Type.I32, 7);\\n    output.writeI32(this.comp_param);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TColumnType = function (args) {\\n  this.col_name = null;\\n  this.col_type = null;\\n  this.is_reserved_keyword = null;\\n  this.src_name = null;\\n  if (args) {\\n    if (args.col_name !== undefined && args.col_name !== null) {\\n      this.col_name = args.col_name;\\n    }\\n    if (args.col_type !== undefined && args.col_type !== null) {\\n      this.col_type = new TTypeInfo(args.col_type);\\n    }\\n    if (args.is_reserved_keyword !== undefined && args.is_reserved_keyword !== null) {\\n      this.is_reserved_keyword = args.is_reserved_keyword;\\n    }\\n    if (args.src_name !== undefined && args.src_name !== null) {\\n      this.src_name = args.src_name;\\n    }\\n  }\\n};\\nTColumnType.prototype = {};\\nTColumnType.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.col_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.col_type = new TTypeInfo();\\n          this.col_type.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.is_reserved_keyword = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.src_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTColumnType.prototype.write = function (output) {\\n  output.writeStructBegin('TColumnType');\\n  if (this.col_name !== null && this.col_name !== undefined) {\\n    output.writeFieldBegin('col_name', Thrift.Type.STRING, 1);\\n    output.writeString(this.col_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.col_type !== null && this.col_type !== undefined) {\\n    output.writeFieldBegin('col_type', Thrift.Type.STRUCT, 2);\\n    this.col_type.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.is_reserved_keyword !== null && this.is_reserved_keyword !== undefined) {\\n    output.writeFieldBegin('is_reserved_keyword', Thrift.Type.BOOL, 3);\\n    output.writeBool(this.is_reserved_keyword);\\n    output.writeFieldEnd();\\n  }\\n  if (this.src_name !== null && this.src_name !== undefined) {\\n    output.writeFieldBegin('src_name', Thrift.Type.STRING, 4);\\n    output.writeString(this.src_name);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TRow = function (args) {\\n  this.cols = null;\\n  if (args) {\\n    if (args.cols !== undefined && args.cols !== null) {\\n      this.cols = Thrift.copyList(args.cols, [TDatum]);\\n    }\\n  }\\n};\\nTRow.prototype = {};\\nTRow.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size8 = 0;\\n          var _rtmp312;\\n          this.cols = [];\\n          var _etype11 = 0;\\n          _rtmp312 = input.readListBegin();\\n          _etype11 = _rtmp312.etype;\\n          _size8 = _rtmp312.size;\\n          for (var _i13 = 0; _i13 < _size8; ++_i13) {\\n            var elem14 = null;\\n            elem14 = new TDatum();\\n            elem14.read(input);\\n            this.cols.push(elem14);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTRow.prototype.write = function (output) {\\n  output.writeStructBegin('TRow');\\n  if (this.cols !== null && this.cols !== undefined) {\\n    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\\n    for (var iter15 in this.cols) {\\n      if (this.cols.hasOwnProperty(iter15)) {\\n        iter15 = this.cols[iter15];\\n        iter15.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TColumnData = function (args) {\\n  this.int_col = null;\\n  this.real_col = null;\\n  this.str_col = null;\\n  this.arr_col = null;\\n  if (args) {\\n    if (args.int_col !== undefined && args.int_col !== null) {\\n      this.int_col = Thrift.copyList(args.int_col, [null]);\\n    }\\n    if (args.real_col !== undefined && args.real_col !== null) {\\n      this.real_col = Thrift.copyList(args.real_col, [null]);\\n    }\\n    if (args.str_col !== undefined && args.str_col !== null) {\\n      this.str_col = Thrift.copyList(args.str_col, [null]);\\n    }\\n    if (args.arr_col !== undefined && args.arr_col !== null) {\\n      this.arr_col = Thrift.copyList(args.arr_col, [null]);\\n    }\\n  }\\n};\\nTColumnData.prototype = {};\\nTColumnData.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size16 = 0;\\n          var _rtmp320;\\n          this.int_col = [];\\n          var _etype19 = 0;\\n          _rtmp320 = input.readListBegin();\\n          _etype19 = _rtmp320.etype;\\n          _size16 = _rtmp320.size;\\n          for (var _i21 = 0; _i21 < _size16; ++_i21) {\\n            var elem22 = null;\\n            elem22 = input.readI64().value;\\n            this.int_col.push(elem22);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size23 = 0;\\n          var _rtmp327;\\n          this.real_col = [];\\n          var _etype26 = 0;\\n          _rtmp327 = input.readListBegin();\\n          _etype26 = _rtmp327.etype;\\n          _size23 = _rtmp327.size;\\n          for (var _i28 = 0; _i28 < _size23; ++_i28) {\\n            var elem29 = null;\\n            elem29 = input.readDouble().value;\\n            this.real_col.push(elem29);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size30 = 0;\\n          var _rtmp334;\\n          this.str_col = [];\\n          var _etype33 = 0;\\n          _rtmp334 = input.readListBegin();\\n          _etype33 = _rtmp334.etype;\\n          _size30 = _rtmp334.size;\\n          for (var _i35 = 0; _i35 < _size30; ++_i35) {\\n            var elem36 = null;\\n            elem36 = input.readString().value;\\n            this.str_col.push(elem36);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size37 = 0;\\n          var _rtmp341;\\n          this.arr_col = [];\\n          var _etype40 = 0;\\n          _rtmp341 = input.readListBegin();\\n          _etype40 = _rtmp341.etype;\\n          _size37 = _rtmp341.size;\\n          for (var _i42 = 0; _i42 < _size37; ++_i42) {\\n            var elem43 = null;\\n            elem43 = new TColumn();\\n            elem43.read(input);\\n            this.arr_col.push(elem43);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTColumnData.prototype.write = function (output) {\\n  output.writeStructBegin('TColumnData');\\n  if (this.int_col !== null && this.int_col !== undefined) {\\n    output.writeFieldBegin('int_col', Thrift.Type.LIST, 1);\\n    output.writeListBegin(Thrift.Type.I64, this.int_col.length);\\n    for (var iter44 in this.int_col) {\\n      if (this.int_col.hasOwnProperty(iter44)) {\\n        iter44 = this.int_col[iter44];\\n        output.writeI64(iter44);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.real_col !== null && this.real_col !== undefined) {\\n    output.writeFieldBegin('real_col', Thrift.Type.LIST, 2);\\n    output.writeListBegin(Thrift.Type.DOUBLE, this.real_col.length);\\n    for (var iter45 in this.real_col) {\\n      if (this.real_col.hasOwnProperty(iter45)) {\\n        iter45 = this.real_col[iter45];\\n        output.writeDouble(iter45);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.str_col !== null && this.str_col !== undefined) {\\n    output.writeFieldBegin('str_col', Thrift.Type.LIST, 3);\\n    output.writeListBegin(Thrift.Type.STRING, this.str_col.length);\\n    for (var iter46 in this.str_col) {\\n      if (this.str_col.hasOwnProperty(iter46)) {\\n        iter46 = this.str_col[iter46];\\n        output.writeString(iter46);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.arr_col !== null && this.arr_col !== undefined) {\\n    output.writeFieldBegin('arr_col', Thrift.Type.LIST, 4);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.arr_col.length);\\n    for (var iter47 in this.arr_col) {\\n      if (this.arr_col.hasOwnProperty(iter47)) {\\n        iter47 = this.arr_col[iter47];\\n        iter47.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TColumn = function (args) {\\n  this.data = null;\\n  this.nulls = null;\\n  if (args) {\\n    if (args.data !== undefined && args.data !== null) {\\n      this.data = new TColumnData(args.data);\\n    }\\n    if (args.nulls !== undefined && args.nulls !== null) {\\n      this.nulls = Thrift.copyList(args.nulls, [null]);\\n    }\\n  }\\n};\\nTColumn.prototype = {};\\nTColumn.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.data = new TColumnData();\\n          this.data.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size48 = 0;\\n          var _rtmp352;\\n          this.nulls = [];\\n          var _etype51 = 0;\\n          _rtmp352 = input.readListBegin();\\n          _etype51 = _rtmp352.etype;\\n          _size48 = _rtmp352.size;\\n          for (var _i53 = 0; _i53 < _size48; ++_i53) {\\n            var elem54 = null;\\n            elem54 = input.readBool().value;\\n            this.nulls.push(elem54);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTColumn.prototype.write = function (output) {\\n  output.writeStructBegin('TColumn');\\n  if (this.data !== null && this.data !== undefined) {\\n    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);\\n    this.data.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nulls !== null && this.nulls !== undefined) {\\n    output.writeFieldBegin('nulls', Thrift.Type.LIST, 2);\\n    output.writeListBegin(Thrift.Type.BOOL, this.nulls.length);\\n    for (var iter55 in this.nulls) {\\n      if (this.nulls.hasOwnProperty(iter55)) {\\n        iter55 = this.nulls[iter55];\\n        output.writeBool(iter55);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TStringRow = function (args) {\\n  this.cols = null;\\n  if (args) {\\n    if (args.cols !== undefined && args.cols !== null) {\\n      this.cols = Thrift.copyList(args.cols, [TStringValue]);\\n    }\\n  }\\n};\\nTStringRow.prototype = {};\\nTStringRow.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size56 = 0;\\n          var _rtmp360;\\n          this.cols = [];\\n          var _etype59 = 0;\\n          _rtmp360 = input.readListBegin();\\n          _etype59 = _rtmp360.etype;\\n          _size56 = _rtmp360.size;\\n          for (var _i61 = 0; _i61 < _size56; ++_i61) {\\n            var elem62 = null;\\n            elem62 = new TStringValue();\\n            elem62.read(input);\\n            this.cols.push(elem62);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTStringRow.prototype.write = function (output) {\\n  output.writeStructBegin('TStringRow');\\n  if (this.cols !== null && this.cols !== undefined) {\\n    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\\n    for (var iter63 in this.cols) {\\n      if (this.cols.hasOwnProperty(iter63)) {\\n        iter63 = this.cols[iter63];\\n        iter63.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TStepResult = function (args) {\\n  this.serialized_rows = null;\\n  this.execution_finished = null;\\n  this.merge_type = null;\\n  this.sharded = null;\\n  this.row_desc = null;\\n  this.node_id = null;\\n  if (args) {\\n    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {\\n      this.serialized_rows = args.serialized_rows;\\n    }\\n    if (args.execution_finished !== undefined && args.execution_finished !== null) {\\n      this.execution_finished = args.execution_finished;\\n    }\\n    if (args.merge_type !== undefined && args.merge_type !== null) {\\n      this.merge_type = args.merge_type;\\n    }\\n    if (args.sharded !== undefined && args.sharded !== null) {\\n      this.sharded = args.sharded;\\n    }\\n    if (args.row_desc !== undefined && args.row_desc !== null) {\\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\\n    }\\n    if (args.node_id !== undefined && args.node_id !== null) {\\n      this.node_id = args.node_id;\\n    }\\n  }\\n};\\nTStepResult.prototype = {};\\nTStepResult.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.serialized_rows = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.execution_finished = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I32) {\\n          this.merge_type = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.sharded = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size64 = 0;\\n          var _rtmp368;\\n          this.row_desc = [];\\n          var _etype67 = 0;\\n          _rtmp368 = input.readListBegin();\\n          _etype67 = _rtmp368.etype;\\n          _size64 = _rtmp368.size;\\n          for (var _i69 = 0; _i69 < _size64; ++_i69) {\\n            var elem70 = null;\\n            elem70 = new TColumnType();\\n            elem70.read(input);\\n            this.row_desc.push(elem70);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 6:\\n        if (ftype == Thrift.Type.I32) {\\n          this.node_id = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTStepResult.prototype.write = function (output) {\\n  output.writeStructBegin('TStepResult');\\n  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {\\n    output.writeFieldBegin('serialized_rows', Thrift.Type.STRING, 1);\\n    output.writeString(this.serialized_rows);\\n    output.writeFieldEnd();\\n  }\\n  if (this.execution_finished !== null && this.execution_finished !== undefined) {\\n    output.writeFieldBegin('execution_finished', Thrift.Type.BOOL, 2);\\n    output.writeBool(this.execution_finished);\\n    output.writeFieldEnd();\\n  }\\n  if (this.merge_type !== null && this.merge_type !== undefined) {\\n    output.writeFieldBegin('merge_type', Thrift.Type.I32, 3);\\n    output.writeI32(this.merge_type);\\n    output.writeFieldEnd();\\n  }\\n  if (this.sharded !== null && this.sharded !== undefined) {\\n    output.writeFieldBegin('sharded', Thrift.Type.BOOL, 4);\\n    output.writeBool(this.sharded);\\n    output.writeFieldEnd();\\n  }\\n  if (this.row_desc !== null && this.row_desc !== undefined) {\\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\\n    for (var iter71 in this.row_desc) {\\n      if (this.row_desc.hasOwnProperty(iter71)) {\\n        iter71 = this.row_desc[iter71];\\n        iter71.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.node_id !== null && this.node_id !== undefined) {\\n    output.writeFieldBegin('node_id', Thrift.Type.I32, 6);\\n    output.writeI32(this.node_id);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TRowSet = function (args) {\\n  this.row_desc = null;\\n  this.rows = null;\\n  this.columns = null;\\n  this.is_columnar = null;\\n  if (args) {\\n    if (args.row_desc !== undefined && args.row_desc !== null) {\\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\\n    }\\n    if (args.rows !== undefined && args.rows !== null) {\\n      this.rows = Thrift.copyList(args.rows, [TRow]);\\n    }\\n    if (args.columns !== undefined && args.columns !== null) {\\n      this.columns = Thrift.copyList(args.columns, [TColumn]);\\n    }\\n    if (args.is_columnar !== undefined && args.is_columnar !== null) {\\n      this.is_columnar = args.is_columnar;\\n    }\\n  }\\n};\\nTRowSet.prototype = {};\\nTRowSet.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size72 = 0;\\n          var _rtmp376;\\n          this.row_desc = [];\\n          var _etype75 = 0;\\n          _rtmp376 = input.readListBegin();\\n          _etype75 = _rtmp376.etype;\\n          _size72 = _rtmp376.size;\\n          for (var _i77 = 0; _i77 < _size72; ++_i77) {\\n            var elem78 = null;\\n            elem78 = new TColumnType();\\n            elem78.read(input);\\n            this.row_desc.push(elem78);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size79 = 0;\\n          var _rtmp383;\\n          this.rows = [];\\n          var _etype82 = 0;\\n          _rtmp383 = input.readListBegin();\\n          _etype82 = _rtmp383.etype;\\n          _size79 = _rtmp383.size;\\n          for (var _i84 = 0; _i84 < _size79; ++_i84) {\\n            var elem85 = null;\\n            elem85 = new TRow();\\n            elem85.read(input);\\n            this.rows.push(elem85);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size86 = 0;\\n          var _rtmp390;\\n          this.columns = [];\\n          var _etype89 = 0;\\n          _rtmp390 = input.readListBegin();\\n          _etype89 = _rtmp390.etype;\\n          _size86 = _rtmp390.size;\\n          for (var _i91 = 0; _i91 < _size86; ++_i91) {\\n            var elem92 = null;\\n            elem92 = new TColumn();\\n            elem92.read(input);\\n            this.columns.push(elem92);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.is_columnar = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTRowSet.prototype.write = function (output) {\\n  output.writeStructBegin('TRowSet');\\n  if (this.row_desc !== null && this.row_desc !== undefined) {\\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\\n    for (var iter93 in this.row_desc) {\\n      if (this.row_desc.hasOwnProperty(iter93)) {\\n        iter93 = this.row_desc[iter93];\\n        iter93.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.rows !== null && this.rows !== undefined) {\\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\\n    for (var iter94 in this.rows) {\\n      if (this.rows.hasOwnProperty(iter94)) {\\n        iter94 = this.rows[iter94];\\n        iter94.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.columns !== null && this.columns !== undefined) {\\n    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);\\n    for (var iter95 in this.columns) {\\n      if (this.columns.hasOwnProperty(iter95)) {\\n        iter95 = this.columns[iter95];\\n        iter95.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.is_columnar !== null && this.is_columnar !== undefined) {\\n    output.writeFieldBegin('is_columnar', Thrift.Type.BOOL, 4);\\n    output.writeBool(this.is_columnar);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TQueryResult = function (args) {\\n  this.row_set = null;\\n  this.execution_time_ms = null;\\n  this.total_time_ms = null;\\n  this.nonce = null;\\n  if (args) {\\n    if (args.row_set !== undefined && args.row_set !== null) {\\n      this.row_set = new TRowSet(args.row_set);\\n    }\\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\\n      this.execution_time_ms = args.execution_time_ms;\\n    }\\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\\n      this.total_time_ms = args.total_time_ms;\\n    }\\n    if (args.nonce !== undefined && args.nonce !== null) {\\n      this.nonce = args.nonce;\\n    }\\n  }\\n};\\nTQueryResult.prototype = {};\\nTQueryResult.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.row_set = new TRowSet();\\n          this.row_set.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.execution_time_ms = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I64) {\\n          this.total_time_ms = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.nonce = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTQueryResult.prototype.write = function (output) {\\n  output.writeStructBegin('TQueryResult');\\n  if (this.row_set !== null && this.row_set !== undefined) {\\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);\\n    this.row_set.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 2);\\n    output.writeI64(this.execution_time_ms);\\n    output.writeFieldEnd();\\n  }\\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 3);\\n    output.writeI64(this.total_time_ms);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nonce !== null && this.nonce !== undefined) {\\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\\n    output.writeString(this.nonce);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TGpuDataFrame = function (args) {\\n  this.schema = null;\\n  this.df_handle = null;\\n  this.df_size = null;\\n  if (args) {\\n    if (args.schema !== undefined && args.schema !== null) {\\n      this.schema = args.schema;\\n    }\\n    if (args.df_handle !== undefined && args.df_handle !== null) {\\n      this.df_handle = args.df_handle;\\n    }\\n    if (args.df_size !== undefined && args.df_size !== null) {\\n      this.df_size = args.df_size;\\n    }\\n  }\\n};\\nTGpuDataFrame.prototype = {};\\nTGpuDataFrame.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.schema = input.readBinary().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.df_handle = input.readBinary().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I64) {\\n          this.df_size = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTGpuDataFrame.prototype.write = function (output) {\\n  output.writeStructBegin('TGpuDataFrame');\\n  if (this.schema !== null && this.schema !== undefined) {\\n    output.writeFieldBegin('schema', Thrift.Type.STRING, 1);\\n    output.writeBinary(this.schema);\\n    output.writeFieldEnd();\\n  }\\n  if (this.df_handle !== null && this.df_handle !== undefined) {\\n    output.writeFieldBegin('df_handle', Thrift.Type.STRING, 2);\\n    output.writeBinary(this.df_handle);\\n    output.writeFieldEnd();\\n  }\\n  if (this.df_size !== null && this.df_size !== undefined) {\\n    output.writeFieldBegin('df_size', Thrift.Type.I64, 3);\\n    output.writeI64(this.df_size);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TDBInfo = function (args) {\\n  this.db_name = null;\\n  this.db_owner = null;\\n  if (args) {\\n    if (args.db_name !== undefined && args.db_name !== null) {\\n      this.db_name = args.db_name;\\n    }\\n    if (args.db_owner !== undefined && args.db_owner !== null) {\\n      this.db_owner = args.db_owner;\\n    }\\n  }\\n};\\nTDBInfo.prototype = {};\\nTDBInfo.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.db_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.db_owner = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTDBInfo.prototype.write = function (output) {\\n  output.writeStructBegin('TDBInfo');\\n  if (this.db_name !== null && this.db_name !== undefined) {\\n    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);\\n    output.writeString(this.db_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.db_owner !== null && this.db_owner !== undefined) {\\n    output.writeFieldBegin('db_owner', Thrift.Type.STRING, 2);\\n    output.writeString(this.db_owner);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TMapDException = function (args) {\\n  this.error_msg = null;\\n  if (args) {\\n    if (args.error_msg !== undefined && args.error_msg !== null) {\\n      this.error_msg = args.error_msg;\\n    }\\n  }\\n};\\nThrift.inherits(TMapDException, Thrift.TException);\\nTMapDException.prototype.name = 'TMapDException';\\nTMapDException.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.error_msg = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTMapDException.prototype.write = function (output) {\\n  output.writeStructBegin('TMapDException');\\n  if (this.error_msg !== null && this.error_msg !== undefined) {\\n    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 1);\\n    output.writeString(this.error_msg);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TRenderProperty = function (args) {\\n  this.property_type = null;\\n  this.property_value = null;\\n  if (args) {\\n    if (args.property_type !== undefined && args.property_type !== null) {\\n      this.property_type = args.property_type;\\n    }\\n    if (args.property_value !== undefined && args.property_value !== null) {\\n      this.property_value = new TDatumVal(args.property_value);\\n    }\\n  }\\n};\\nTRenderProperty.prototype = {};\\nTRenderProperty.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I32) {\\n          this.property_type = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.property_value = new TDatumVal();\\n          this.property_value.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTRenderProperty.prototype.write = function (output) {\\n  output.writeStructBegin('TRenderProperty');\\n  if (this.property_type !== null && this.property_type !== undefined) {\\n    output.writeFieldBegin('property_type', Thrift.Type.I32, 1);\\n    output.writeI32(this.property_type);\\n    output.writeFieldEnd();\\n  }\\n  if (this.property_value !== null && this.property_value !== undefined) {\\n    output.writeFieldBegin('property_value', Thrift.Type.STRUCT, 2);\\n    this.property_value.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TCopyParams = function (args) {\\n  this.delimiter = null;\\n  this.null_str = null;\\n  this.has_header = null;\\n  this.quoted = null;\\n  this.quote = null;\\n  this.escape = null;\\n  this.line_delim = null;\\n  this.array_delim = null;\\n  this.array_begin = null;\\n  this.array_end = null;\\n  this.threads = null;\\n  this.table_type = 0;\\n  if (args) {\\n    if (args.delimiter !== undefined && args.delimiter !== null) {\\n      this.delimiter = args.delimiter;\\n    }\\n    if (args.null_str !== undefined && args.null_str !== null) {\\n      this.null_str = args.null_str;\\n    }\\n    if (args.has_header !== undefined && args.has_header !== null) {\\n      this.has_header = args.has_header;\\n    }\\n    if (args.quoted !== undefined && args.quoted !== null) {\\n      this.quoted = args.quoted;\\n    }\\n    if (args.quote !== undefined && args.quote !== null) {\\n      this.quote = args.quote;\\n    }\\n    if (args.escape !== undefined && args.escape !== null) {\\n      this.escape = args.escape;\\n    }\\n    if (args.line_delim !== undefined && args.line_delim !== null) {\\n      this.line_delim = args.line_delim;\\n    }\\n    if (args.array_delim !== undefined && args.array_delim !== null) {\\n      this.array_delim = args.array_delim;\\n    }\\n    if (args.array_begin !== undefined && args.array_begin !== null) {\\n      this.array_begin = args.array_begin;\\n    }\\n    if (args.array_end !== undefined && args.array_end !== null) {\\n      this.array_end = args.array_end;\\n    }\\n    if (args.threads !== undefined && args.threads !== null) {\\n      this.threads = args.threads;\\n    }\\n    if (args.table_type !== undefined && args.table_type !== null) {\\n      this.table_type = args.table_type;\\n    }\\n  }\\n};\\nTCopyParams.prototype = {};\\nTCopyParams.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.delimiter = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.null_str = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.has_header = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.quoted = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.quote = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 6:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.escape = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 7:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.line_delim = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 8:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.array_delim = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 9:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.array_begin = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 10:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.array_end = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 11:\\n        if (ftype == Thrift.Type.I32) {\\n          this.threads = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 12:\\n        if (ftype == Thrift.Type.I32) {\\n          this.table_type = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTCopyParams.prototype.write = function (output) {\\n  output.writeStructBegin('TCopyParams');\\n  if (this.delimiter !== null && this.delimiter !== undefined) {\\n    output.writeFieldBegin('delimiter', Thrift.Type.STRING, 1);\\n    output.writeString(this.delimiter);\\n    output.writeFieldEnd();\\n  }\\n  if (this.null_str !== null && this.null_str !== undefined) {\\n    output.writeFieldBegin('null_str', Thrift.Type.STRING, 2);\\n    output.writeString(this.null_str);\\n    output.writeFieldEnd();\\n  }\\n  if (this.has_header !== null && this.has_header !== undefined) {\\n    output.writeFieldBegin('has_header', Thrift.Type.BOOL, 3);\\n    output.writeBool(this.has_header);\\n    output.writeFieldEnd();\\n  }\\n  if (this.quoted !== null && this.quoted !== undefined) {\\n    output.writeFieldBegin('quoted', Thrift.Type.BOOL, 4);\\n    output.writeBool(this.quoted);\\n    output.writeFieldEnd();\\n  }\\n  if (this.quote !== null && this.quote !== undefined) {\\n    output.writeFieldBegin('quote', Thrift.Type.STRING, 5);\\n    output.writeString(this.quote);\\n    output.writeFieldEnd();\\n  }\\n  if (this.escape !== null && this.escape !== undefined) {\\n    output.writeFieldBegin('escape', Thrift.Type.STRING, 6);\\n    output.writeString(this.escape);\\n    output.writeFieldEnd();\\n  }\\n  if (this.line_delim !== null && this.line_delim !== undefined) {\\n    output.writeFieldBegin('line_delim', Thrift.Type.STRING, 7);\\n    output.writeString(this.line_delim);\\n    output.writeFieldEnd();\\n  }\\n  if (this.array_delim !== null && this.array_delim !== undefined) {\\n    output.writeFieldBegin('array_delim', Thrift.Type.STRING, 8);\\n    output.writeString(this.array_delim);\\n    output.writeFieldEnd();\\n  }\\n  if (this.array_begin !== null && this.array_begin !== undefined) {\\n    output.writeFieldBegin('array_begin', Thrift.Type.STRING, 9);\\n    output.writeString(this.array_begin);\\n    output.writeFieldEnd();\\n  }\\n  if (this.array_end !== null && this.array_end !== undefined) {\\n    output.writeFieldBegin('array_end', Thrift.Type.STRING, 10);\\n    output.writeString(this.array_end);\\n    output.writeFieldEnd();\\n  }\\n  if (this.threads !== null && this.threads !== undefined) {\\n    output.writeFieldBegin('threads', Thrift.Type.I32, 11);\\n    output.writeI32(this.threads);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_type !== null && this.table_type !== undefined) {\\n    output.writeFieldBegin('table_type', Thrift.Type.I32, 12);\\n    output.writeI32(this.table_type);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TDetectResult = function (args) {\\n  this.row_set = null;\\n  this.copy_params = null;\\n  if (args) {\\n    if (args.row_set !== undefined && args.row_set !== null) {\\n      this.row_set = new TRowSet(args.row_set);\\n    }\\n    if (args.copy_params !== undefined && args.copy_params !== null) {\\n      this.copy_params = new TCopyParams(args.copy_params);\\n    }\\n  }\\n};\\nTDetectResult.prototype = {};\\nTDetectResult.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.row_set = new TRowSet();\\n          this.row_set.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.copy_params = new TCopyParams();\\n          this.copy_params.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTDetectResult.prototype.write = function (output) {\\n  output.writeStructBegin('TDetectResult');\\n  if (this.row_set !== null && this.row_set !== undefined) {\\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);\\n    this.row_set.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.copy_params !== null && this.copy_params !== undefined) {\\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 2);\\n    this.copy_params.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TImportStatus = function (args) {\\n  this.elapsed = null;\\n  this.rows_completed = null;\\n  this.rows_estimated = null;\\n  this.rows_rejected = null;\\n  if (args) {\\n    if (args.elapsed !== undefined && args.elapsed !== null) {\\n      this.elapsed = args.elapsed;\\n    }\\n    if (args.rows_completed !== undefined && args.rows_completed !== null) {\\n      this.rows_completed = args.rows_completed;\\n    }\\n    if (args.rows_estimated !== undefined && args.rows_estimated !== null) {\\n      this.rows_estimated = args.rows_estimated;\\n    }\\n    if (args.rows_rejected !== undefined && args.rows_rejected !== null) {\\n      this.rows_rejected = args.rows_rejected;\\n    }\\n  }\\n};\\nTImportStatus.prototype = {};\\nTImportStatus.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I64) {\\n          this.elapsed = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.rows_completed = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I64) {\\n          this.rows_estimated = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.I64) {\\n          this.rows_rejected = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTImportStatus.prototype.write = function (output) {\\n  output.writeStructBegin('TImportStatus');\\n  if (this.elapsed !== null && this.elapsed !== undefined) {\\n    output.writeFieldBegin('elapsed', Thrift.Type.I64, 1);\\n    output.writeI64(this.elapsed);\\n    output.writeFieldEnd();\\n  }\\n  if (this.rows_completed !== null && this.rows_completed !== undefined) {\\n    output.writeFieldBegin('rows_completed', Thrift.Type.I64, 2);\\n    output.writeI64(this.rows_completed);\\n    output.writeFieldEnd();\\n  }\\n  if (this.rows_estimated !== null && this.rows_estimated !== undefined) {\\n    output.writeFieldBegin('rows_estimated', Thrift.Type.I64, 3);\\n    output.writeI64(this.rows_estimated);\\n    output.writeFieldEnd();\\n  }\\n  if (this.rows_rejected !== null && this.rows_rejected !== undefined) {\\n    output.writeFieldBegin('rows_rejected', Thrift.Type.I64, 4);\\n    output.writeI64(this.rows_rejected);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TFrontendView = function (args) {\\n  this.view_name = null;\\n  this.view_state = null;\\n  this.image_hash = null;\\n  this.update_time = null;\\n  this.view_metadata = null;\\n  if (args) {\\n    if (args.view_name !== undefined && args.view_name !== null) {\\n      this.view_name = args.view_name;\\n    }\\n    if (args.view_state !== undefined && args.view_state !== null) {\\n      this.view_state = args.view_state;\\n    }\\n    if (args.image_hash !== undefined && args.image_hash !== null) {\\n      this.image_hash = args.image_hash;\\n    }\\n    if (args.update_time !== undefined && args.update_time !== null) {\\n      this.update_time = args.update_time;\\n    }\\n    if (args.view_metadata !== undefined && args.view_metadata !== null) {\\n      this.view_metadata = args.view_metadata;\\n    }\\n  }\\n};\\nTFrontendView.prototype = {};\\nTFrontendView.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.view_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.view_state = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.image_hash = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.update_time = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.view_metadata = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTFrontendView.prototype.write = function (output) {\\n  output.writeStructBegin('TFrontendView');\\n  if (this.view_name !== null && this.view_name !== undefined) {\\n    output.writeFieldBegin('view_name', Thrift.Type.STRING, 1);\\n    output.writeString(this.view_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.view_state !== null && this.view_state !== undefined) {\\n    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);\\n    output.writeString(this.view_state);\\n    output.writeFieldEnd();\\n  }\\n  if (this.image_hash !== null && this.image_hash !== undefined) {\\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);\\n    output.writeString(this.image_hash);\\n    output.writeFieldEnd();\\n  }\\n  if (this.update_time !== null && this.update_time !== undefined) {\\n    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);\\n    output.writeString(this.update_time);\\n    output.writeFieldEnd();\\n  }\\n  if (this.view_metadata !== null && this.view_metadata !== undefined) {\\n    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);\\n    output.writeString(this.view_metadata);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TServerStatus = function (args) {\\n  this.read_only = null;\\n  this.version = null;\\n  this.rendering_enabled = null;\\n  this.start_time = null;\\n  this.edition = null;\\n  if (args) {\\n    if (args.read_only !== undefined && args.read_only !== null) {\\n      this.read_only = args.read_only;\\n    }\\n    if (args.version !== undefined && args.version !== null) {\\n      this.version = args.version;\\n    }\\n    if (args.rendering_enabled !== undefined && args.rendering_enabled !== null) {\\n      this.rendering_enabled = args.rendering_enabled;\\n    }\\n    if (args.start_time !== undefined && args.start_time !== null) {\\n      this.start_time = args.start_time;\\n    }\\n    if (args.edition !== undefined && args.edition !== null) {\\n      this.edition = args.edition;\\n    }\\n  }\\n};\\nTServerStatus.prototype = {};\\nTServerStatus.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.read_only = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.version = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.rendering_enabled = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.I64) {\\n          this.start_time = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.edition = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTServerStatus.prototype.write = function (output) {\\n  output.writeStructBegin('TServerStatus');\\n  if (this.read_only !== null && this.read_only !== undefined) {\\n    output.writeFieldBegin('read_only', Thrift.Type.BOOL, 1);\\n    output.writeBool(this.read_only);\\n    output.writeFieldEnd();\\n  }\\n  if (this.version !== null && this.version !== undefined) {\\n    output.writeFieldBegin('version', Thrift.Type.STRING, 2);\\n    output.writeString(this.version);\\n    output.writeFieldEnd();\\n  }\\n  if (this.rendering_enabled !== null && this.rendering_enabled !== undefined) {\\n    output.writeFieldBegin('rendering_enabled', Thrift.Type.BOOL, 3);\\n    output.writeBool(this.rendering_enabled);\\n    output.writeFieldEnd();\\n  }\\n  if (this.start_time !== null && this.start_time !== undefined) {\\n    output.writeFieldBegin('start_time', Thrift.Type.I64, 4);\\n    output.writeI64(this.start_time);\\n    output.writeFieldEnd();\\n  }\\n  if (this.edition !== null && this.edition !== undefined) {\\n    output.writeFieldBegin('edition', Thrift.Type.STRING, 5);\\n    output.writeString(this.edition);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TPixel = function (args) {\\n  this.x = null;\\n  this.y = null;\\n  if (args) {\\n    if (args.x !== undefined && args.x !== null) {\\n      this.x = args.x;\\n    }\\n    if (args.y !== undefined && args.y !== null) {\\n      this.y = args.y;\\n    }\\n  }\\n};\\nTPixel.prototype = {};\\nTPixel.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I64) {\\n          this.x = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.y = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTPixel.prototype.write = function (output) {\\n  output.writeStructBegin('TPixel');\\n  if (this.x !== null && this.x !== undefined) {\\n    output.writeFieldBegin('x', Thrift.Type.I64, 1);\\n    output.writeI64(this.x);\\n    output.writeFieldEnd();\\n  }\\n  if (this.y !== null && this.y !== undefined) {\\n    output.writeFieldBegin('y', Thrift.Type.I64, 2);\\n    output.writeI64(this.y);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TPixelRowResult = function (args) {\\n  this.pixel = null;\\n  this.row_id = null;\\n  this.row_set = null;\\n  this.nonce = null;\\n  if (args) {\\n    if (args.pixel !== undefined && args.pixel !== null) {\\n      this.pixel = new TPixel(args.pixel);\\n    }\\n    if (args.row_id !== undefined && args.row_id !== null) {\\n      this.row_id = args.row_id;\\n    }\\n    if (args.row_set !== undefined && args.row_set !== null) {\\n      this.row_set = new TRowSet(args.row_set);\\n    }\\n    if (args.nonce !== undefined && args.nonce !== null) {\\n      this.nonce = args.nonce;\\n    }\\n  }\\n};\\nTPixelRowResult.prototype = {};\\nTPixelRowResult.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.pixel = new TPixel();\\n          this.pixel.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.row_id = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.row_set = new TRowSet();\\n          this.row_set.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.nonce = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTPixelRowResult.prototype.write = function (output) {\\n  output.writeStructBegin('TPixelRowResult');\\n  if (this.pixel !== null && this.pixel !== undefined) {\\n    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);\\n    this.pixel.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.row_id !== null && this.row_id !== undefined) {\\n    output.writeFieldBegin('row_id', Thrift.Type.I64, 2);\\n    output.writeI64(this.row_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.row_set !== null && this.row_set !== undefined) {\\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 3);\\n    this.row_set.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nonce !== null && this.nonce !== undefined) {\\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\\n    output.writeString(this.nonce);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TPixelTableRowResult = function (args) {\\n  this.pixel = null;\\n  this.vega_table_name = null;\\n  this.table_id = null;\\n  this.row_id = null;\\n  this.row_set = null;\\n  this.nonce = null;\\n  if (args) {\\n    if (args.pixel !== undefined && args.pixel !== null) {\\n      this.pixel = new TPixel(args.pixel);\\n    }\\n    if (args.vega_table_name !== undefined && args.vega_table_name !== null) {\\n      this.vega_table_name = args.vega_table_name;\\n    }\\n    if (args.table_id !== undefined && args.table_id !== null) {\\n      this.table_id = args.table_id;\\n    }\\n    if (args.row_id !== undefined && args.row_id !== null) {\\n      this.row_id = args.row_id;\\n    }\\n    if (args.row_set !== undefined && args.row_set !== null) {\\n      this.row_set = new TRowSet(args.row_set);\\n    }\\n    if (args.nonce !== undefined && args.nonce !== null) {\\n      this.nonce = args.nonce;\\n    }\\n  }\\n};\\nTPixelTableRowResult.prototype = {};\\nTPixelTableRowResult.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.pixel = new TPixel();\\n          this.pixel.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.vega_table_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I64) {\\n          this.table_id = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.I64) {\\n          this.row_id = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.row_set = new TRowSet();\\n          this.row_set.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 6:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.nonce = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTPixelTableRowResult.prototype.write = function (output) {\\n  output.writeStructBegin('TPixelTableRowResult');\\n  if (this.pixel !== null && this.pixel !== undefined) {\\n    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);\\n    this.pixel.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.vega_table_name !== null && this.vega_table_name !== undefined) {\\n    output.writeFieldBegin('vega_table_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.vega_table_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_id !== null && this.table_id !== undefined) {\\n    output.writeFieldBegin('table_id', Thrift.Type.I64, 3);\\n    output.writeI64(this.table_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.row_id !== null && this.row_id !== undefined) {\\n    output.writeFieldBegin('row_id', Thrift.Type.I64, 4);\\n    output.writeI64(this.row_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.row_set !== null && this.row_set !== undefined) {\\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 5);\\n    this.row_set.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nonce !== null && this.nonce !== undefined) {\\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 6);\\n    output.writeString(this.nonce);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TPixelRows = function (args) {\\n  this.pixel = null;\\n  this.row_set = null;\\n  if (args) {\\n    if (args.pixel !== undefined && args.pixel !== null) {\\n      this.pixel = new TPixel(args.pixel);\\n    }\\n    if (args.row_set !== undefined && args.row_set !== null) {\\n      this.row_set = new TRowSet(args.row_set);\\n    }\\n  }\\n};\\nTPixelRows.prototype = {};\\nTPixelRows.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.pixel = new TPixel();\\n          this.pixel.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.row_set = new TRowSet();\\n          this.row_set.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTPixelRows.prototype.write = function (output) {\\n  output.writeStructBegin('TPixelRows');\\n  if (this.pixel !== null && this.pixel !== undefined) {\\n    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);\\n    this.pixel.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.row_set !== null && this.row_set !== undefined) {\\n    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 2);\\n    this.row_set.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TPixelResult = function (args) {\\n  this.pixel_rows = null;\\n  this.nonce = null;\\n  if (args) {\\n    if (args.pixel_rows !== undefined && args.pixel_rows !== null) {\\n      this.pixel_rows = Thrift.copyList(args.pixel_rows, [TPixelRows]);\\n    }\\n    if (args.nonce !== undefined && args.nonce !== null) {\\n      this.nonce = args.nonce;\\n    }\\n  }\\n};\\nTPixelResult.prototype = {};\\nTPixelResult.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size96 = 0;\\n          var _rtmp3100;\\n          this.pixel_rows = [];\\n          var _etype99 = 0;\\n          _rtmp3100 = input.readListBegin();\\n          _etype99 = _rtmp3100.etype;\\n          _size96 = _rtmp3100.size;\\n          for (var _i101 = 0; _i101 < _size96; ++_i101) {\\n            var elem102 = null;\\n            elem102 = new TPixelRows();\\n            elem102.read(input);\\n            this.pixel_rows.push(elem102);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.nonce = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTPixelResult.prototype.write = function (output) {\\n  output.writeStructBegin('TPixelResult');\\n  if (this.pixel_rows !== null && this.pixel_rows !== undefined) {\\n    output.writeFieldBegin('pixel_rows', Thrift.Type.LIST, 1);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.pixel_rows.length);\\n    for (var iter103 in this.pixel_rows) {\\n      if (this.pixel_rows.hasOwnProperty(iter103)) {\\n        iter103 = this.pixel_rows[iter103];\\n        iter103.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.nonce !== null && this.nonce !== undefined) {\\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);\\n    output.writeString(this.nonce);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TRenderResult = function (args) {\\n  this.image = null;\\n  this.nonce = null;\\n  this.execution_time_ms = null;\\n  this.render_time_ms = null;\\n  this.total_time_ms = null;\\n  if (args) {\\n    if (args.image !== undefined && args.image !== null) {\\n      this.image = args.image;\\n    }\\n    if (args.nonce !== undefined && args.nonce !== null) {\\n      this.nonce = args.nonce;\\n    }\\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\\n      this.execution_time_ms = args.execution_time_ms;\\n    }\\n    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\\n      this.render_time_ms = args.render_time_ms;\\n    }\\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\\n      this.total_time_ms = args.total_time_ms;\\n    }\\n  }\\n};\\nTRenderResult.prototype = {};\\nTRenderResult.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.image = input.readBinary().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.nonce = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I64) {\\n          this.execution_time_ms = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.I64) {\\n          this.render_time_ms = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.I64) {\\n          this.total_time_ms = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTRenderResult.prototype.write = function (output) {\\n  output.writeStructBegin('TRenderResult');\\n  if (this.image !== null && this.image !== undefined) {\\n    output.writeFieldBegin('image', Thrift.Type.STRING, 1);\\n    output.writeBinary(this.image);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nonce !== null && this.nonce !== undefined) {\\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);\\n    output.writeString(this.nonce);\\n    output.writeFieldEnd();\\n  }\\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);\\n    output.writeI64(this.execution_time_ms);\\n    output.writeFieldEnd();\\n  }\\n  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\\n    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);\\n    output.writeI64(this.render_time_ms);\\n    output.writeFieldEnd();\\n  }\\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);\\n    output.writeI64(this.total_time_ms);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TGpuMemorySummary = function (args) {\\n  this.max = null;\\n  this.in_use = null;\\n  this.allocated = null;\\n  this.is_allocation_capped = null;\\n  if (args) {\\n    if (args.max !== undefined && args.max !== null) {\\n      this.max = args.max;\\n    }\\n    if (args.in_use !== undefined && args.in_use !== null) {\\n      this.in_use = args.in_use;\\n    }\\n    if (args.allocated !== undefined && args.allocated !== null) {\\n      this.allocated = args.allocated;\\n    }\\n    if (args.is_allocation_capped !== undefined && args.is_allocation_capped !== null) {\\n      this.is_allocation_capped = args.is_allocation_capped;\\n    }\\n  }\\n};\\nTGpuMemorySummary.prototype = {};\\nTGpuMemorySummary.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I64) {\\n          this.max = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.in_use = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I64) {\\n          this.allocated = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.is_allocation_capped = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTGpuMemorySummary.prototype.write = function (output) {\\n  output.writeStructBegin('TGpuMemorySummary');\\n  if (this.max !== null && this.max !== undefined) {\\n    output.writeFieldBegin('max', Thrift.Type.I64, 1);\\n    output.writeI64(this.max);\\n    output.writeFieldEnd();\\n  }\\n  if (this.in_use !== null && this.in_use !== undefined) {\\n    output.writeFieldBegin('in_use', Thrift.Type.I64, 2);\\n    output.writeI64(this.in_use);\\n    output.writeFieldEnd();\\n  }\\n  if (this.allocated !== null && this.allocated !== undefined) {\\n    output.writeFieldBegin('allocated', Thrift.Type.I64, 3);\\n    output.writeI64(this.allocated);\\n    output.writeFieldEnd();\\n  }\\n  if (this.is_allocation_capped !== null && this.is_allocation_capped !== undefined) {\\n    output.writeFieldBegin('is_allocation_capped', Thrift.Type.BOOL, 4);\\n    output.writeBool(this.is_allocation_capped);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TMemorySummary = function (args) {\\n  this.cpu_memory_in_use = null;\\n  this.gpu_summary = null;\\n  if (args) {\\n    if (args.cpu_memory_in_use !== undefined && args.cpu_memory_in_use !== null) {\\n      this.cpu_memory_in_use = args.cpu_memory_in_use;\\n    }\\n    if (args.gpu_summary !== undefined && args.gpu_summary !== null) {\\n      this.gpu_summary = Thrift.copyList(args.gpu_summary, [TGpuMemorySummary]);\\n    }\\n  }\\n};\\nTMemorySummary.prototype = {};\\nTMemorySummary.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I64) {\\n          this.cpu_memory_in_use = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size104 = 0;\\n          var _rtmp3108;\\n          this.gpu_summary = [];\\n          var _etype107 = 0;\\n          _rtmp3108 = input.readListBegin();\\n          _etype107 = _rtmp3108.etype;\\n          _size104 = _rtmp3108.size;\\n          for (var _i109 = 0; _i109 < _size104; ++_i109) {\\n            var elem110 = null;\\n            elem110 = new TGpuMemorySummary();\\n            elem110.read(input);\\n            this.gpu_summary.push(elem110);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTMemorySummary.prototype.write = function (output) {\\n  output.writeStructBegin('TMemorySummary');\\n  if (this.cpu_memory_in_use !== null && this.cpu_memory_in_use !== undefined) {\\n    output.writeFieldBegin('cpu_memory_in_use', Thrift.Type.I64, 1);\\n    output.writeI64(this.cpu_memory_in_use);\\n    output.writeFieldEnd();\\n  }\\n  if (this.gpu_summary !== null && this.gpu_summary !== undefined) {\\n    output.writeFieldBegin('gpu_summary', Thrift.Type.LIST, 2);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.gpu_summary.length);\\n    for (var iter111 in this.gpu_summary) {\\n      if (this.gpu_summary.hasOwnProperty(iter111)) {\\n        iter111 = this.gpu_summary[iter111];\\n        iter111.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TTableDetails = function (args) {\\n  this.row_desc = null;\\n  this.fragment_size = null;\\n  this.page_size = null;\\n  this.max_rows = null;\\n  this.view_sql = null;\\n  if (args) {\\n    if (args.row_desc !== undefined && args.row_desc !== null) {\\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\\n    }\\n    if (args.fragment_size !== undefined && args.fragment_size !== null) {\\n      this.fragment_size = args.fragment_size;\\n    }\\n    if (args.page_size !== undefined && args.page_size !== null) {\\n      this.page_size = args.page_size;\\n    }\\n    if (args.max_rows !== undefined && args.max_rows !== null) {\\n      this.max_rows = args.max_rows;\\n    }\\n    if (args.view_sql !== undefined && args.view_sql !== null) {\\n      this.view_sql = args.view_sql;\\n    }\\n  }\\n};\\nTTableDetails.prototype = {};\\nTTableDetails.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size112 = 0;\\n          var _rtmp3116;\\n          this.row_desc = [];\\n          var _etype115 = 0;\\n          _rtmp3116 = input.readListBegin();\\n          _etype115 = _rtmp3116.etype;\\n          _size112 = _rtmp3116.size;\\n          for (var _i117 = 0; _i117 < _size112; ++_i117) {\\n            var elem118 = null;\\n            elem118 = new TColumnType();\\n            elem118.read(input);\\n            this.row_desc.push(elem118);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.fragment_size = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I64) {\\n          this.page_size = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.I64) {\\n          this.max_rows = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.view_sql = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTTableDetails.prototype.write = function (output) {\\n  output.writeStructBegin('TTableDetails');\\n  if (this.row_desc !== null && this.row_desc !== undefined) {\\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\\n    for (var iter119 in this.row_desc) {\\n      if (this.row_desc.hasOwnProperty(iter119)) {\\n        iter119 = this.row_desc[iter119];\\n        iter119.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.fragment_size !== null && this.fragment_size !== undefined) {\\n    output.writeFieldBegin('fragment_size', Thrift.Type.I64, 2);\\n    output.writeI64(this.fragment_size);\\n    output.writeFieldEnd();\\n  }\\n  if (this.page_size !== null && this.page_size !== undefined) {\\n    output.writeFieldBegin('page_size', Thrift.Type.I64, 3);\\n    output.writeI64(this.page_size);\\n    output.writeFieldEnd();\\n  }\\n  if (this.max_rows !== null && this.max_rows !== undefined) {\\n    output.writeFieldBegin('max_rows', Thrift.Type.I64, 4);\\n    output.writeI64(this.max_rows);\\n    output.writeFieldEnd();\\n  }\\n  if (this.view_sql !== null && this.view_sql !== undefined) {\\n    output.writeFieldBegin('view_sql', Thrift.Type.STRING, 5);\\n    output.writeString(this.view_sql);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TColumnRange = function (args) {\\n  this.type = null;\\n  this.col_id = null;\\n  this.table_id = null;\\n  this.has_nulls = null;\\n  this.int_min = null;\\n  this.int_max = null;\\n  this.bucket = null;\\n  this.fp_min = null;\\n  this.fp_max = null;\\n  if (args) {\\n    if (args.type !== undefined && args.type !== null) {\\n      this.type = args.type;\\n    }\\n    if (args.col_id !== undefined && args.col_id !== null) {\\n      this.col_id = args.col_id;\\n    }\\n    if (args.table_id !== undefined && args.table_id !== null) {\\n      this.table_id = args.table_id;\\n    }\\n    if (args.has_nulls !== undefined && args.has_nulls !== null) {\\n      this.has_nulls = args.has_nulls;\\n    }\\n    if (args.int_min !== undefined && args.int_min !== null) {\\n      this.int_min = args.int_min;\\n    }\\n    if (args.int_max !== undefined && args.int_max !== null) {\\n      this.int_max = args.int_max;\\n    }\\n    if (args.bucket !== undefined && args.bucket !== null) {\\n      this.bucket = args.bucket;\\n    }\\n    if (args.fp_min !== undefined && args.fp_min !== null) {\\n      this.fp_min = args.fp_min;\\n    }\\n    if (args.fp_max !== undefined && args.fp_max !== null) {\\n      this.fp_max = args.fp_max;\\n    }\\n  }\\n};\\nTColumnRange.prototype = {};\\nTColumnRange.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I32) {\\n          this.type = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I32) {\\n          this.col_id = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I32) {\\n          this.table_id = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.has_nulls = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.I64) {\\n          this.int_min = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 6:\\n        if (ftype == Thrift.Type.I64) {\\n          this.int_max = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 7:\\n        if (ftype == Thrift.Type.I64) {\\n          this.bucket = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 8:\\n        if (ftype == Thrift.Type.DOUBLE) {\\n          this.fp_min = input.readDouble().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 9:\\n        if (ftype == Thrift.Type.DOUBLE) {\\n          this.fp_max = input.readDouble().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTColumnRange.prototype.write = function (output) {\\n  output.writeStructBegin('TColumnRange');\\n  if (this.type !== null && this.type !== undefined) {\\n    output.writeFieldBegin('type', Thrift.Type.I32, 1);\\n    output.writeI32(this.type);\\n    output.writeFieldEnd();\\n  }\\n  if (this.col_id !== null && this.col_id !== undefined) {\\n    output.writeFieldBegin('col_id', Thrift.Type.I32, 2);\\n    output.writeI32(this.col_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_id !== null && this.table_id !== undefined) {\\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\\n    output.writeI32(this.table_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.has_nulls !== null && this.has_nulls !== undefined) {\\n    output.writeFieldBegin('has_nulls', Thrift.Type.BOOL, 4);\\n    output.writeBool(this.has_nulls);\\n    output.writeFieldEnd();\\n  }\\n  if (this.int_min !== null && this.int_min !== undefined) {\\n    output.writeFieldBegin('int_min', Thrift.Type.I64, 5);\\n    output.writeI64(this.int_min);\\n    output.writeFieldEnd();\\n  }\\n  if (this.int_max !== null && this.int_max !== undefined) {\\n    output.writeFieldBegin('int_max', Thrift.Type.I64, 6);\\n    output.writeI64(this.int_max);\\n    output.writeFieldEnd();\\n  }\\n  if (this.bucket !== null && this.bucket !== undefined) {\\n    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);\\n    output.writeI64(this.bucket);\\n    output.writeFieldEnd();\\n  }\\n  if (this.fp_min !== null && this.fp_min !== undefined) {\\n    output.writeFieldBegin('fp_min', Thrift.Type.DOUBLE, 8);\\n    output.writeDouble(this.fp_min);\\n    output.writeFieldEnd();\\n  }\\n  if (this.fp_max !== null && this.fp_max !== undefined) {\\n    output.writeFieldBegin('fp_max', Thrift.Type.DOUBLE, 9);\\n    output.writeDouble(this.fp_max);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TDictionaryGeneration = function (args) {\\n  this.dict_id = null;\\n  this.entry_count = null;\\n  if (args) {\\n    if (args.dict_id !== undefined && args.dict_id !== null) {\\n      this.dict_id = args.dict_id;\\n    }\\n    if (args.entry_count !== undefined && args.entry_count !== null) {\\n      this.entry_count = args.entry_count;\\n    }\\n  }\\n};\\nTDictionaryGeneration.prototype = {};\\nTDictionaryGeneration.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I32) {\\n          this.dict_id = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.entry_count = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTDictionaryGeneration.prototype.write = function (output) {\\n  output.writeStructBegin('TDictionaryGeneration');\\n  if (this.dict_id !== null && this.dict_id !== undefined) {\\n    output.writeFieldBegin('dict_id', Thrift.Type.I32, 1);\\n    output.writeI32(this.dict_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.entry_count !== null && this.entry_count !== undefined) {\\n    output.writeFieldBegin('entry_count', Thrift.Type.I64, 2);\\n    output.writeI64(this.entry_count);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TTableGeneration = function (args) {\\n  this.table_id = null;\\n  this.tuple_count = null;\\n  this.start_rowid = null;\\n  if (args) {\\n    if (args.table_id !== undefined && args.table_id !== null) {\\n      this.table_id = args.table_id;\\n    }\\n    if (args.tuple_count !== undefined && args.tuple_count !== null) {\\n      this.tuple_count = args.tuple_count;\\n    }\\n    if (args.start_rowid !== undefined && args.start_rowid !== null) {\\n      this.start_rowid = args.start_rowid;\\n    }\\n  }\\n};\\nTTableGeneration.prototype = {};\\nTTableGeneration.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I32) {\\n          this.table_id = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.tuple_count = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I64) {\\n          this.start_rowid = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTTableGeneration.prototype.write = function (output) {\\n  output.writeStructBegin('TTableGeneration');\\n  if (this.table_id !== null && this.table_id !== undefined) {\\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 1);\\n    output.writeI32(this.table_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.tuple_count !== null && this.tuple_count !== undefined) {\\n    output.writeFieldBegin('tuple_count', Thrift.Type.I64, 2);\\n    output.writeI64(this.tuple_count);\\n    output.writeFieldEnd();\\n  }\\n  if (this.start_rowid !== null && this.start_rowid !== undefined) {\\n    output.writeFieldBegin('start_rowid', Thrift.Type.I64, 3);\\n    output.writeI64(this.start_rowid);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TPendingQuery = function (args) {\\n  this.id = null;\\n  this.column_ranges = null;\\n  this.dictionary_generations = null;\\n  this.table_generations = null;\\n  if (args) {\\n    if (args.id !== undefined && args.id !== null) {\\n      this.id = args.id;\\n    }\\n    if (args.column_ranges !== undefined && args.column_ranges !== null) {\\n      this.column_ranges = Thrift.copyList(args.column_ranges, [TColumnRange]);\\n    }\\n    if (args.dictionary_generations !== undefined && args.dictionary_generations !== null) {\\n      this.dictionary_generations = Thrift.copyList(args.dictionary_generations, [TDictionaryGeneration]);\\n    }\\n    if (args.table_generations !== undefined && args.table_generations !== null) {\\n      this.table_generations = Thrift.copyList(args.table_generations, [TTableGeneration]);\\n    }\\n  }\\n};\\nTPendingQuery.prototype = {};\\nTPendingQuery.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I64) {\\n          this.id = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size120 = 0;\\n          var _rtmp3124;\\n          this.column_ranges = [];\\n          var _etype123 = 0;\\n          _rtmp3124 = input.readListBegin();\\n          _etype123 = _rtmp3124.etype;\\n          _size120 = _rtmp3124.size;\\n          for (var _i125 = 0; _i125 < _size120; ++_i125) {\\n            var elem126 = null;\\n            elem126 = new TColumnRange();\\n            elem126.read(input);\\n            this.column_ranges.push(elem126);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size127 = 0;\\n          var _rtmp3131;\\n          this.dictionary_generations = [];\\n          var _etype130 = 0;\\n          _rtmp3131 = input.readListBegin();\\n          _etype130 = _rtmp3131.etype;\\n          _size127 = _rtmp3131.size;\\n          for (var _i132 = 0; _i132 < _size127; ++_i132) {\\n            var elem133 = null;\\n            elem133 = new TDictionaryGeneration();\\n            elem133.read(input);\\n            this.dictionary_generations.push(elem133);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size134 = 0;\\n          var _rtmp3138;\\n          this.table_generations = [];\\n          var _etype137 = 0;\\n          _rtmp3138 = input.readListBegin();\\n          _etype137 = _rtmp3138.etype;\\n          _size134 = _rtmp3138.size;\\n          for (var _i139 = 0; _i139 < _size134; ++_i139) {\\n            var elem140 = null;\\n            elem140 = new TTableGeneration();\\n            elem140.read(input);\\n            this.table_generations.push(elem140);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTPendingQuery.prototype.write = function (output) {\\n  output.writeStructBegin('TPendingQuery');\\n  if (this.id !== null && this.id !== undefined) {\\n    output.writeFieldBegin('id', Thrift.Type.I64, 1);\\n    output.writeI64(this.id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.column_ranges !== null && this.column_ranges !== undefined) {\\n    output.writeFieldBegin('column_ranges', Thrift.Type.LIST, 2);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.column_ranges.length);\\n    for (var iter141 in this.column_ranges) {\\n      if (this.column_ranges.hasOwnProperty(iter141)) {\\n        iter141 = this.column_ranges[iter141];\\n        iter141.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.dictionary_generations !== null && this.dictionary_generations !== undefined) {\\n    output.writeFieldBegin('dictionary_generations', Thrift.Type.LIST, 3);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.dictionary_generations.length);\\n    for (var iter142 in this.dictionary_generations) {\\n      if (this.dictionary_generations.hasOwnProperty(iter142)) {\\n        iter142 = this.dictionary_generations[iter142];\\n        iter142.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_generations !== null && this.table_generations !== undefined) {\\n    output.writeFieldBegin('table_generations', Thrift.Type.LIST, 4);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.table_generations.length);\\n    for (var iter143 in this.table_generations) {\\n      if (this.table_generations.hasOwnProperty(iter143)) {\\n        iter143 = this.table_generations[iter143];\\n        iter143.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TVarLen = function (args) {\\n  this.payload = null;\\n  this.is_null = null;\\n  if (args) {\\n    if (args.payload !== undefined && args.payload !== null) {\\n      this.payload = args.payload;\\n    }\\n    if (args.is_null !== undefined && args.is_null !== null) {\\n      this.is_null = args.is_null;\\n    }\\n  }\\n};\\nTVarLen.prototype = {};\\nTVarLen.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.payload = input.readBinary().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.is_null = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTVarLen.prototype.write = function (output) {\\n  output.writeStructBegin('TVarLen');\\n  if (this.payload !== null && this.payload !== undefined) {\\n    output.writeFieldBegin('payload', Thrift.Type.STRING, 1);\\n    output.writeBinary(this.payload);\\n    output.writeFieldEnd();\\n  }\\n  if (this.is_null !== null && this.is_null !== undefined) {\\n    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\\n    output.writeBool(this.is_null);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TDataBlockPtr = function (args) {\\n  this.fixed_len_data = null;\\n  this.var_len_data = null;\\n  if (args) {\\n    if (args.fixed_len_data !== undefined && args.fixed_len_data !== null) {\\n      this.fixed_len_data = args.fixed_len_data;\\n    }\\n    if (args.var_len_data !== undefined && args.var_len_data !== null) {\\n      this.var_len_data = Thrift.copyList(args.var_len_data, [TVarLen]);\\n    }\\n  }\\n};\\nTDataBlockPtr.prototype = {};\\nTDataBlockPtr.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.fixed_len_data = input.readBinary().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size144 = 0;\\n          var _rtmp3148;\\n          this.var_len_data = [];\\n          var _etype147 = 0;\\n          _rtmp3148 = input.readListBegin();\\n          _etype147 = _rtmp3148.etype;\\n          _size144 = _rtmp3148.size;\\n          for (var _i149 = 0; _i149 < _size144; ++_i149) {\\n            var elem150 = null;\\n            elem150 = new TVarLen();\\n            elem150.read(input);\\n            this.var_len_data.push(elem150);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTDataBlockPtr.prototype.write = function (output) {\\n  output.writeStructBegin('TDataBlockPtr');\\n  if (this.fixed_len_data !== null && this.fixed_len_data !== undefined) {\\n    output.writeFieldBegin('fixed_len_data', Thrift.Type.STRING, 1);\\n    output.writeBinary(this.fixed_len_data);\\n    output.writeFieldEnd();\\n  }\\n  if (this.var_len_data !== null && this.var_len_data !== undefined) {\\n    output.writeFieldBegin('var_len_data', Thrift.Type.LIST, 2);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.var_len_data.length);\\n    for (var iter151 in this.var_len_data) {\\n      if (this.var_len_data.hasOwnProperty(iter151)) {\\n        iter151 = this.var_len_data[iter151];\\n        iter151.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TInsertData = function (args) {\\n  this.db_id = null;\\n  this.table_id = null;\\n  this.column_ids = null;\\n  this.data = null;\\n  this.num_rows = null;\\n  if (args) {\\n    if (args.db_id !== undefined && args.db_id !== null) {\\n      this.db_id = args.db_id;\\n    }\\n    if (args.table_id !== undefined && args.table_id !== null) {\\n      this.table_id = args.table_id;\\n    }\\n    if (args.column_ids !== undefined && args.column_ids !== null) {\\n      this.column_ids = Thrift.copyList(args.column_ids, [null]);\\n    }\\n    if (args.data !== undefined && args.data !== null) {\\n      this.data = Thrift.copyList(args.data, [TDataBlockPtr]);\\n    }\\n    if (args.num_rows !== undefined && args.num_rows !== null) {\\n      this.num_rows = args.num_rows;\\n    }\\n  }\\n};\\nTInsertData.prototype = {};\\nTInsertData.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I32) {\\n          this.db_id = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I32) {\\n          this.table_id = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size152 = 0;\\n          var _rtmp3156;\\n          this.column_ids = [];\\n          var _etype155 = 0;\\n          _rtmp3156 = input.readListBegin();\\n          _etype155 = _rtmp3156.etype;\\n          _size152 = _rtmp3156.size;\\n          for (var _i157 = 0; _i157 < _size152; ++_i157) {\\n            var elem158 = null;\\n            elem158 = input.readI32().value;\\n            this.column_ids.push(elem158);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size159 = 0;\\n          var _rtmp3163;\\n          this.data = [];\\n          var _etype162 = 0;\\n          _rtmp3163 = input.readListBegin();\\n          _etype162 = _rtmp3163.etype;\\n          _size159 = _rtmp3163.size;\\n          for (var _i164 = 0; _i164 < _size159; ++_i164) {\\n            var elem165 = null;\\n            elem165 = new TDataBlockPtr();\\n            elem165.read(input);\\n            this.data.push(elem165);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.I64) {\\n          this.num_rows = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTInsertData.prototype.write = function (output) {\\n  output.writeStructBegin('TInsertData');\\n  if (this.db_id !== null && this.db_id !== undefined) {\\n    output.writeFieldBegin('db_id', Thrift.Type.I32, 1);\\n    output.writeI32(this.db_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_id !== null && this.table_id !== undefined) {\\n    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);\\n    output.writeI32(this.table_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.column_ids !== null && this.column_ids !== undefined) {\\n    output.writeFieldBegin('column_ids', Thrift.Type.LIST, 3);\\n    output.writeListBegin(Thrift.Type.I32, this.column_ids.length);\\n    for (var iter166 in this.column_ids) {\\n      if (this.column_ids.hasOwnProperty(iter166)) {\\n        iter166 = this.column_ids[iter166];\\n        output.writeI32(iter166);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.data !== null && this.data !== undefined) {\\n    output.writeFieldBegin('data', Thrift.Type.LIST, 4);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);\\n    for (var iter167 in this.data) {\\n      if (this.data.hasOwnProperty(iter167)) {\\n        iter167 = this.data[iter167];\\n        iter167.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.num_rows !== null && this.num_rows !== undefined) {\\n    output.writeFieldBegin('num_rows', Thrift.Type.I64, 5);\\n    output.writeI64(this.num_rows);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TRawRenderPassDataResult = function (args) {\\n  this.num_channels = null;\\n  this.pixels = null;\\n  this.row_ids_A = null;\\n  this.row_ids_B = null;\\n  this.table_ids = null;\\n  if (args) {\\n    if (args.num_channels !== undefined && args.num_channels !== null) {\\n      this.num_channels = args.num_channels;\\n    }\\n    if (args.pixels !== undefined && args.pixels !== null) {\\n      this.pixels = args.pixels;\\n    }\\n    if (args.row_ids_A !== undefined && args.row_ids_A !== null) {\\n      this.row_ids_A = args.row_ids_A;\\n    }\\n    if (args.row_ids_B !== undefined && args.row_ids_B !== null) {\\n      this.row_ids_B = args.row_ids_B;\\n    }\\n    if (args.table_ids !== undefined && args.table_ids !== null) {\\n      this.table_ids = args.table_ids;\\n    }\\n  }\\n};\\nTRawRenderPassDataResult.prototype = {};\\nTRawRenderPassDataResult.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I32) {\\n          this.num_channels = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.pixels = input.readBinary().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.row_ids_A = input.readBinary().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.row_ids_B = input.readBinary().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.table_ids = input.readBinary().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTRawRenderPassDataResult.prototype.write = function (output) {\\n  output.writeStructBegin('TRawRenderPassDataResult');\\n  if (this.num_channels !== null && this.num_channels !== undefined) {\\n    output.writeFieldBegin('num_channels', Thrift.Type.I32, 1);\\n    output.writeI32(this.num_channels);\\n    output.writeFieldEnd();\\n  }\\n  if (this.pixels !== null && this.pixels !== undefined) {\\n    output.writeFieldBegin('pixels', Thrift.Type.STRING, 2);\\n    output.writeBinary(this.pixels);\\n    output.writeFieldEnd();\\n  }\\n  if (this.row_ids_A !== null && this.row_ids_A !== undefined) {\\n    output.writeFieldBegin('row_ids_A', Thrift.Type.STRING, 3);\\n    output.writeBinary(this.row_ids_A);\\n    output.writeFieldEnd();\\n  }\\n  if (this.row_ids_B !== null && this.row_ids_B !== undefined) {\\n    output.writeFieldBegin('row_ids_B', Thrift.Type.STRING, 4);\\n    output.writeBinary(this.row_ids_B);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_ids !== null && this.table_ids !== undefined) {\\n    output.writeFieldBegin('table_ids', Thrift.Type.STRING, 5);\\n    output.writeBinary(this.table_ids);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.TRawPixelDataResult = function (args) {\\n  this.width = null;\\n  this.height = null;\\n  this.render_pass_map = null;\\n  this.execution_time_ms = null;\\n  this.render_time_ms = null;\\n  this.total_time_ms = null;\\n  if (args) {\\n    if (args.width !== undefined && args.width !== null) {\\n      this.width = args.width;\\n    }\\n    if (args.height !== undefined && args.height !== null) {\\n      this.height = args.height;\\n    }\\n    if (args.render_pass_map !== undefined && args.render_pass_map !== null) {\\n      this.render_pass_map = Thrift.copyMap(args.render_pass_map, [TRawRenderPassDataResult]);\\n    }\\n    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\\n      this.execution_time_ms = args.execution_time_ms;\\n    }\\n    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\\n      this.render_time_ms = args.render_time_ms;\\n    }\\n    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\\n      this.total_time_ms = args.total_time_ms;\\n    }\\n  }\\n};\\nTRawPixelDataResult.prototype = {};\\nTRawPixelDataResult.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.I32) {\\n          this.width = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I32) {\\n          this.height = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.MAP) {\\n          var _size168 = 0;\\n          var _rtmp3172;\\n          this.render_pass_map = {};\\n          var _ktype169 = 0;\\n          var _vtype170 = 0;\\n          _rtmp3172 = input.readMapBegin();\\n          _ktype169 = _rtmp3172.ktype;\\n          _vtype170 = _rtmp3172.vtype;\\n          _size168 = _rtmp3172.size;\\n          for (var _i173 = 0; _i173 < _size168; ++_i173) {\\n            if (_i173 > 0) {\\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\\n                input.rstack.pop();\\n              }\\n            }\\n            var key174 = null;\\n            var val175 = null;\\n            key174 = input.readI32().value;\\n            val175 = new TRawRenderPassDataResult();\\n            val175.read(input);\\n            this.render_pass_map[key174] = val175;\\n          }\\n          input.readMapEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 8:\\n        if (ftype == Thrift.Type.I64) {\\n          this.execution_time_ms = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 9:\\n        if (ftype == Thrift.Type.I64) {\\n          this.render_time_ms = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 10:\\n        if (ftype == Thrift.Type.I64) {\\n          this.total_time_ms = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nTRawPixelDataResult.prototype.write = function (output) {\\n  output.writeStructBegin('TRawPixelDataResult');\\n  if (this.width !== null && this.width !== undefined) {\\n    output.writeFieldBegin('width', Thrift.Type.I32, 1);\\n    output.writeI32(this.width);\\n    output.writeFieldEnd();\\n  }\\n  if (this.height !== null && this.height !== undefined) {\\n    output.writeFieldBegin('height', Thrift.Type.I32, 2);\\n    output.writeI32(this.height);\\n    output.writeFieldEnd();\\n  }\\n  if (this.render_pass_map !== null && this.render_pass_map !== undefined) {\\n    output.writeFieldBegin('render_pass_map', Thrift.Type.MAP, 3);\\n    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.render_pass_map));\\n    for (var kiter176 in this.render_pass_map) {\\n      if (this.render_pass_map.hasOwnProperty(kiter176)) {\\n        var viter177 = this.render_pass_map[kiter176];\\n        output.writeI32(kiter176);\\n        viter177.write(output);\\n      }\\n    }\\n    output.writeMapEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\\n    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 8);\\n    output.writeI64(this.execution_time_ms);\\n    output.writeFieldEnd();\\n  }\\n  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\\n    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 9);\\n    output.writeI64(this.render_time_ms);\\n    output.writeFieldEnd();\\n  }\\n  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\\n    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 10);\\n    output.writeI64(this.total_time_ms);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\"\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(2)(__webpack_require__(7))\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"\\\"use strict\\\";\\n//\\n// Autogenerated by Thrift Compiler (0.10.0)\\n//\\n// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\\n//\\n\\n\\n//HELPER FUNCTIONS AND STRUCTURES\\n\\nwindow.MapD_connect_args = function (args) {\\n  this.user = null;\\n  this.passwd = null;\\n  this.dbname = null;\\n  if (args) {\\n    if (args.user !== undefined && args.user !== null) {\\n      this.user = args.user;\\n    }\\n    if (args.passwd !== undefined && args.passwd !== null) {\\n      this.passwd = args.passwd;\\n    }\\n    if (args.dbname !== undefined && args.dbname !== null) {\\n      this.dbname = args.dbname;\\n    }\\n  }\\n};\\nMapD_connect_args.prototype = {};\\nMapD_connect_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.user = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.passwd = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.dbname = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_connect_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_connect_args');\\n  if (this.user !== null && this.user !== undefined) {\\n    output.writeFieldBegin('user', Thrift.Type.STRING, 1);\\n    output.writeString(this.user);\\n    output.writeFieldEnd();\\n  }\\n  if (this.passwd !== null && this.passwd !== undefined) {\\n    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);\\n    output.writeString(this.passwd);\\n    output.writeFieldEnd();\\n  }\\n  if (this.dbname !== null && this.dbname !== undefined) {\\n    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);\\n    output.writeString(this.dbname);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_connect_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = args.success;\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_connect_result.prototype = {};\\nMapD_connect_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.success = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_connect_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_connect_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\\n    output.writeString(this.success);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_disconnect_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_disconnect_args.prototype = {};\\nMapD_disconnect_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_disconnect_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_disconnect_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_disconnect_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_disconnect_result.prototype = {};\\nMapD_disconnect_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_disconnect_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_disconnect_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_server_status_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_get_server_status_args.prototype = {};\\nMapD_get_server_status_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_server_status_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_server_status_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_server_status_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TServerStatus(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_server_status_result.prototype = {};\\nMapD_get_server_status_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TServerStatus();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_server_status_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_server_status_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_tables_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_get_tables_args.prototype = {};\\nMapD_get_tables_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_tables_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_tables_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_tables_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = Thrift.copyList(args.success, [null]);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_tables_result.prototype = {};\\nMapD_get_tables_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size178 = 0;\\n          var _rtmp3182;\\n          this.success = [];\\n          var _etype181 = 0;\\n          _rtmp3182 = input.readListBegin();\\n          _etype181 = _rtmp3182.etype;\\n          _size178 = _rtmp3182.size;\\n          for (var _i183 = 0; _i183 < _size178; ++_i183) {\\n            var elem184 = null;\\n            elem184 = input.readString().value;\\n            this.success.push(elem184);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_tables_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_tables_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\\n    for (var iter185 in this.success) {\\n      if (this.success.hasOwnProperty(iter185)) {\\n        iter185 = this.success[iter185];\\n        output.writeString(iter185);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_table_details_args = function (args) {\\n  this.session = null;\\n  this.table_name = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.table_name !== undefined && args.table_name !== null) {\\n      this.table_name = args.table_name;\\n    }\\n  }\\n};\\nMapD_get_table_details_args.prototype = {};\\nMapD_get_table_details_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.table_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_table_details_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_table_details_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_name !== null && this.table_name !== undefined) {\\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.table_name);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_table_details_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TTableDetails(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_table_details_result.prototype = {};\\nMapD_get_table_details_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TTableDetails();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_table_details_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_table_details_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_users_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_get_users_args.prototype = {};\\nMapD_get_users_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_users_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_users_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_users_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = Thrift.copyList(args.success, [null]);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_users_result.prototype = {};\\nMapD_get_users_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size186 = 0;\\n          var _rtmp3190;\\n          this.success = [];\\n          var _etype189 = 0;\\n          _rtmp3190 = input.readListBegin();\\n          _etype189 = _rtmp3190.etype;\\n          _size186 = _rtmp3190.size;\\n          for (var _i191 = 0; _i191 < _size186; ++_i191) {\\n            var elem192 = null;\\n            elem192 = input.readString().value;\\n            this.success.push(elem192);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_users_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_users_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\\n    output.writeListBegin(Thrift.Type.STRING, this.success.length);\\n    for (var iter193 in this.success) {\\n      if (this.success.hasOwnProperty(iter193)) {\\n        iter193 = this.success[iter193];\\n        output.writeString(iter193);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_databases_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_get_databases_args.prototype = {};\\nMapD_get_databases_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_databases_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_databases_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_databases_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = Thrift.copyList(args.success, [TDBInfo]);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_databases_result.prototype = {};\\nMapD_get_databases_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size194 = 0;\\n          var _rtmp3198;\\n          this.success = [];\\n          var _etype197 = 0;\\n          _rtmp3198 = input.readListBegin();\\n          _etype197 = _rtmp3198.etype;\\n          _size194 = _rtmp3198.size;\\n          for (var _i199 = 0; _i199 < _size194; ++_i199) {\\n            var elem200 = null;\\n            elem200 = new TDBInfo();\\n            elem200.read(input);\\n            this.success.push(elem200);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_databases_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_databases_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\\n    for (var iter201 in this.success) {\\n      if (this.success.hasOwnProperty(iter201)) {\\n        iter201 = this.success[iter201];\\n        iter201.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_version_args = function (args) {};\\nMapD_get_version_args.prototype = {};\\nMapD_get_version_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    input.skip(ftype);\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_version_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_version_args');\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_version_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = args.success;\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_version_result.prototype = {};\\nMapD_get_version_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.success = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_version_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_version_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\\n    output.writeString(this.success);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_start_heap_profile_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_start_heap_profile_args.prototype = {};\\nMapD_start_heap_profile_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_start_heap_profile_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_start_heap_profile_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_start_heap_profile_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_start_heap_profile_result.prototype = {};\\nMapD_start_heap_profile_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_start_heap_profile_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_start_heap_profile_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_stop_heap_profile_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_stop_heap_profile_args.prototype = {};\\nMapD_stop_heap_profile_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_stop_heap_profile_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_stop_heap_profile_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_stop_heap_profile_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_stop_heap_profile_result.prototype = {};\\nMapD_stop_heap_profile_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_stop_heap_profile_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_stop_heap_profile_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_heap_profile_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_get_heap_profile_args.prototype = {};\\nMapD_get_heap_profile_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_heap_profile_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_heap_profile_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_heap_profile_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = args.success;\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_heap_profile_result.prototype = {};\\nMapD_get_heap_profile_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.success = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_heap_profile_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_heap_profile_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\\n    output.writeString(this.success);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_memory_gpu_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_get_memory_gpu_args.prototype = {};\\nMapD_get_memory_gpu_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_memory_gpu_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_memory_gpu_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_memory_gpu_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = args.success;\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_memory_gpu_result.prototype = {};\\nMapD_get_memory_gpu_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.success = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_memory_gpu_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_memory_gpu_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\\n    output.writeString(this.success);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_memory_summary_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_get_memory_summary_args.prototype = {};\\nMapD_get_memory_summary_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_memory_summary_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_memory_summary_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_memory_summary_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TMemorySummary(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_memory_summary_result.prototype = {};\\nMapD_get_memory_summary_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TMemorySummary();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_memory_summary_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_memory_summary_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_clear_cpu_memory_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_clear_cpu_memory_args.prototype = {};\\nMapD_clear_cpu_memory_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_clear_cpu_memory_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_clear_cpu_memory_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_clear_cpu_memory_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_clear_cpu_memory_result.prototype = {};\\nMapD_clear_cpu_memory_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_clear_cpu_memory_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_clear_cpu_memory_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_clear_gpu_memory_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_clear_gpu_memory_args.prototype = {};\\nMapD_clear_gpu_memory_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_clear_gpu_memory_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_clear_gpu_memory_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_clear_gpu_memory_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_clear_gpu_memory_result.prototype = {};\\nMapD_clear_gpu_memory_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_clear_gpu_memory_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_clear_gpu_memory_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_sql_execute_args = function (args) {\\n  this.session = null;\\n  this.query = null;\\n  this.column_format = null;\\n  this.nonce = null;\\n  this.first_n = -1;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.query !== undefined && args.query !== null) {\\n      this.query = args.query;\\n    }\\n    if (args.column_format !== undefined && args.column_format !== null) {\\n      this.column_format = args.column_format;\\n    }\\n    if (args.nonce !== undefined && args.nonce !== null) {\\n      this.nonce = args.nonce;\\n    }\\n    if (args.first_n !== undefined && args.first_n !== null) {\\n      this.first_n = args.first_n;\\n    }\\n  }\\n};\\nMapD_sql_execute_args.prototype = {};\\nMapD_sql_execute_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.query = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.column_format = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.nonce = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.I32) {\\n          this.first_n = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_sql_execute_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_sql_execute_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.query !== null && this.query !== undefined) {\\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\\n    output.writeString(this.query);\\n    output.writeFieldEnd();\\n  }\\n  if (this.column_format !== null && this.column_format !== undefined) {\\n    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);\\n    output.writeBool(this.column_format);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nonce !== null && this.nonce !== undefined) {\\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\\n    output.writeString(this.nonce);\\n    output.writeFieldEnd();\\n  }\\n  if (this.first_n !== null && this.first_n !== undefined) {\\n    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);\\n    output.writeI32(this.first_n);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_sql_execute_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TQueryResult(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_sql_execute_result.prototype = {};\\nMapD_sql_execute_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TQueryResult();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_sql_execute_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_sql_execute_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_sql_execute_gpudf_args = function (args) {\\n  this.session = null;\\n  this.query = null;\\n  this.device_id = 0;\\n  this.first_n = -1;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.query !== undefined && args.query !== null) {\\n      this.query = args.query;\\n    }\\n    if (args.device_id !== undefined && args.device_id !== null) {\\n      this.device_id = args.device_id;\\n    }\\n    if (args.first_n !== undefined && args.first_n !== null) {\\n      this.first_n = args.first_n;\\n    }\\n  }\\n};\\nMapD_sql_execute_gpudf_args.prototype = {};\\nMapD_sql_execute_gpudf_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.query = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I32) {\\n          this.device_id = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.I32) {\\n          this.first_n = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_sql_execute_gpudf_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_sql_execute_gpudf_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.query !== null && this.query !== undefined) {\\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\\n    output.writeString(this.query);\\n    output.writeFieldEnd();\\n  }\\n  if (this.device_id !== null && this.device_id !== undefined) {\\n    output.writeFieldBegin('device_id', Thrift.Type.I32, 3);\\n    output.writeI32(this.device_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.first_n !== null && this.first_n !== undefined) {\\n    output.writeFieldBegin('first_n', Thrift.Type.I32, 4);\\n    output.writeI32(this.first_n);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_sql_execute_gpudf_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TGpuDataFrame(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_sql_execute_gpudf_result.prototype = {};\\nMapD_sql_execute_gpudf_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TGpuDataFrame();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_sql_execute_gpudf_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_sql_execute_gpudf_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_interrupt_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_interrupt_args.prototype = {};\\nMapD_interrupt_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_interrupt_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_interrupt_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_interrupt_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_interrupt_result.prototype = {};\\nMapD_interrupt_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_interrupt_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_interrupt_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_sql_validate_args = function (args) {\\n  this.session = null;\\n  this.query = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.query !== undefined && args.query !== null) {\\n      this.query = args.query;\\n    }\\n  }\\n};\\nMapD_sql_validate_args.prototype = {};\\nMapD_sql_validate_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.query = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_sql_validate_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_sql_validate_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.query !== null && this.query !== undefined) {\\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\\n    output.writeString(this.query);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_sql_validate_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = Thrift.copyMap(args.success, [TColumnType]);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_sql_validate_result.prototype = {};\\nMapD_sql_validate_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.MAP) {\\n          var _size202 = 0;\\n          var _rtmp3206;\\n          this.success = {};\\n          var _ktype203 = 0;\\n          var _vtype204 = 0;\\n          _rtmp3206 = input.readMapBegin();\\n          _ktype203 = _rtmp3206.ktype;\\n          _vtype204 = _rtmp3206.vtype;\\n          _size202 = _rtmp3206.size;\\n          for (var _i207 = 0; _i207 < _size202; ++_i207) {\\n            if (_i207 > 0) {\\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\\n                input.rstack.pop();\\n              }\\n            }\\n            var key208 = null;\\n            var val209 = null;\\n            key208 = input.readString().value;\\n            val209 = new TColumnType();\\n            val209.read(input);\\n            this.success[key208] = val209;\\n          }\\n          input.readMapEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_sql_validate_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_sql_validate_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.MAP, 0);\\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));\\n    for (var kiter210 in this.success) {\\n      if (this.success.hasOwnProperty(kiter210)) {\\n        var viter211 = this.success[kiter210];\\n        output.writeString(kiter210);\\n        viter211.write(output);\\n      }\\n    }\\n    output.writeMapEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_set_execution_mode_args = function (args) {\\n  this.session = null;\\n  this.mode = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.mode !== undefined && args.mode !== null) {\\n      this.mode = args.mode;\\n    }\\n  }\\n};\\nMapD_set_execution_mode_args.prototype = {};\\nMapD_set_execution_mode_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I32) {\\n          this.mode = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_set_execution_mode_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_set_execution_mode_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.mode !== null && this.mode !== undefined) {\\n    output.writeFieldBegin('mode', Thrift.Type.I32, 2);\\n    output.writeI32(this.mode);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_set_execution_mode_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_set_execution_mode_result.prototype = {};\\nMapD_set_execution_mode_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_set_execution_mode_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_set_execution_mode_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_render_vega_args = function (args) {\\n  this.session = null;\\n  this.widget_id = null;\\n  this.vega_json = null;\\n  this.compression_level = null;\\n  this.nonce = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.widget_id !== undefined && args.widget_id !== null) {\\n      this.widget_id = args.widget_id;\\n    }\\n    if (args.vega_json !== undefined && args.vega_json !== null) {\\n      this.vega_json = args.vega_json;\\n    }\\n    if (args.compression_level !== undefined && args.compression_level !== null) {\\n      this.compression_level = args.compression_level;\\n    }\\n    if (args.nonce !== undefined && args.nonce !== null) {\\n      this.nonce = args.nonce;\\n    }\\n  }\\n};\\nMapD_render_vega_args.prototype = {};\\nMapD_render_vega_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.widget_id = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.vega_json = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.I32) {\\n          this.compression_level = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.nonce = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_render_vega_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_render_vega_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.widget_id !== null && this.widget_id !== undefined) {\\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\\n    output.writeI64(this.widget_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.vega_json !== null && this.vega_json !== undefined) {\\n    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);\\n    output.writeString(this.vega_json);\\n    output.writeFieldEnd();\\n  }\\n  if (this.compression_level !== null && this.compression_level !== undefined) {\\n    output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);\\n    output.writeI32(this.compression_level);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nonce !== null && this.nonce !== undefined) {\\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);\\n    output.writeString(this.nonce);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_render_vega_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TRenderResult(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_render_vega_result.prototype = {};\\nMapD_render_vega_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TRenderResult();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_render_vega_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_render_vega_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_result_row_for_pixel_args = function (args) {\\n  this.session = null;\\n  this.widget_id = null;\\n  this.pixel = null;\\n  this.table_col_names = null;\\n  this.column_format = null;\\n  this.pixelRadius = null;\\n  this.nonce = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.widget_id !== undefined && args.widget_id !== null) {\\n      this.widget_id = args.widget_id;\\n    }\\n    if (args.pixel !== undefined && args.pixel !== null) {\\n      this.pixel = new TPixel(args.pixel);\\n    }\\n    if (args.table_col_names !== undefined && args.table_col_names !== null) {\\n      this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);\\n    }\\n    if (args.column_format !== undefined && args.column_format !== null) {\\n      this.column_format = args.column_format;\\n    }\\n    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {\\n      this.pixelRadius = args.pixelRadius;\\n    }\\n    if (args.nonce !== undefined && args.nonce !== null) {\\n      this.nonce = args.nonce;\\n    }\\n  }\\n};\\nMapD_get_result_row_for_pixel_args.prototype = {};\\nMapD_get_result_row_for_pixel_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.widget_id = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.pixel = new TPixel();\\n          this.pixel.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.MAP) {\\n          var _size212 = 0;\\n          var _rtmp3216;\\n          this.table_col_names = {};\\n          var _ktype213 = 0;\\n          var _vtype214 = 0;\\n          _rtmp3216 = input.readMapBegin();\\n          _ktype213 = _rtmp3216.ktype;\\n          _vtype214 = _rtmp3216.vtype;\\n          _size212 = _rtmp3216.size;\\n          for (var _i217 = 0; _i217 < _size212; ++_i217) {\\n            if (_i217 > 0) {\\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\\n                input.rstack.pop();\\n              }\\n            }\\n            var key218 = null;\\n            var val219 = null;\\n            key218 = input.readString().value;\\n            var _size220 = 0;\\n            var _rtmp3224;\\n            val219 = [];\\n            var _etype223 = 0;\\n            _rtmp3224 = input.readListBegin();\\n            _etype223 = _rtmp3224.etype;\\n            _size220 = _rtmp3224.size;\\n            for (var _i225 = 0; _i225 < _size220; ++_i225) {\\n              var elem226 = null;\\n              elem226 = input.readString().value;\\n              val219.push(elem226);\\n            }\\n            input.readListEnd();\\n            this.table_col_names[key218] = val219;\\n          }\\n          input.readMapEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.column_format = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 6:\\n        if (ftype == Thrift.Type.I32) {\\n          this.pixelRadius = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 7:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.nonce = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_result_row_for_pixel_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_result_row_for_pixel_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.widget_id !== null && this.widget_id !== undefined) {\\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\\n    output.writeI64(this.widget_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.pixel !== null && this.pixel !== undefined) {\\n    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);\\n    this.pixel.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_col_names !== null && this.table_col_names !== undefined) {\\n    output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);\\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));\\n    for (var kiter227 in this.table_col_names) {\\n      if (this.table_col_names.hasOwnProperty(kiter227)) {\\n        var viter228 = this.table_col_names[kiter227];\\n        output.writeString(kiter227);\\n        output.writeListBegin(Thrift.Type.STRING, viter228.length);\\n        for (var iter229 in viter228) {\\n          if (viter228.hasOwnProperty(iter229)) {\\n            iter229 = viter228[iter229];\\n            output.writeString(iter229);\\n          }\\n        }\\n        output.writeListEnd();\\n      }\\n    }\\n    output.writeMapEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.column_format !== null && this.column_format !== undefined) {\\n    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);\\n    output.writeBool(this.column_format);\\n    output.writeFieldEnd();\\n  }\\n  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {\\n    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);\\n    output.writeI32(this.pixelRadius);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nonce !== null && this.nonce !== undefined) {\\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);\\n    output.writeString(this.nonce);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_result_row_for_pixel_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TPixelTableRowResult(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_result_row_for_pixel_result.prototype = {};\\nMapD_get_result_row_for_pixel_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TPixelTableRowResult();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_result_row_for_pixel_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_result_row_for_pixel_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_frontend_view_args = function (args) {\\n  this.session = null;\\n  this.view_name = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.view_name !== undefined && args.view_name !== null) {\\n      this.view_name = args.view_name;\\n    }\\n  }\\n};\\nMapD_get_frontend_view_args.prototype = {};\\nMapD_get_frontend_view_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.view_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_frontend_view_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_frontend_view_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.view_name !== null && this.view_name !== undefined) {\\n    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.view_name);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_frontend_view_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TFrontendView(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_frontend_view_result.prototype = {};\\nMapD_get_frontend_view_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TFrontendView();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_frontend_view_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_frontend_view_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_frontend_views_args = function (args) {\\n  this.session = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n  }\\n};\\nMapD_get_frontend_views_args.prototype = {};\\nMapD_get_frontend_views_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_frontend_views_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_frontend_views_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_frontend_views_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = Thrift.copyList(args.success, [TFrontendView]);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_frontend_views_result.prototype = {};\\nMapD_get_frontend_views_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size230 = 0;\\n          var _rtmp3234;\\n          this.success = [];\\n          var _etype233 = 0;\\n          _rtmp3234 = input.readListBegin();\\n          _etype233 = _rtmp3234.etype;\\n          _size230 = _rtmp3234.size;\\n          for (var _i235 = 0; _i235 < _size230; ++_i235) {\\n            var elem236 = null;\\n            elem236 = new TFrontendView();\\n            elem236.read(input);\\n            this.success.push(elem236);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_frontend_views_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_frontend_views_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\\n    for (var iter237 in this.success) {\\n      if (this.success.hasOwnProperty(iter237)) {\\n        iter237 = this.success[iter237];\\n        iter237.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_create_frontend_view_args = function (args) {\\n  this.session = null;\\n  this.view_name = null;\\n  this.view_state = null;\\n  this.image_hash = null;\\n  this.view_metadata = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.view_name !== undefined && args.view_name !== null) {\\n      this.view_name = args.view_name;\\n    }\\n    if (args.view_state !== undefined && args.view_state !== null) {\\n      this.view_state = args.view_state;\\n    }\\n    if (args.image_hash !== undefined && args.image_hash !== null) {\\n      this.image_hash = args.image_hash;\\n    }\\n    if (args.view_metadata !== undefined && args.view_metadata !== null) {\\n      this.view_metadata = args.view_metadata;\\n    }\\n  }\\n};\\nMapD_create_frontend_view_args.prototype = {};\\nMapD_create_frontend_view_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.view_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.view_state = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.image_hash = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.view_metadata = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_create_frontend_view_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_create_frontend_view_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.view_name !== null && this.view_name !== undefined) {\\n    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.view_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.view_state !== null && this.view_state !== undefined) {\\n    output.writeFieldBegin('view_state', Thrift.Type.STRING, 3);\\n    output.writeString(this.view_state);\\n    output.writeFieldEnd();\\n  }\\n  if (this.image_hash !== null && this.image_hash !== undefined) {\\n    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);\\n    output.writeString(this.image_hash);\\n    output.writeFieldEnd();\\n  }\\n  if (this.view_metadata !== null && this.view_metadata !== undefined) {\\n    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);\\n    output.writeString(this.view_metadata);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_create_frontend_view_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_create_frontend_view_result.prototype = {};\\nMapD_create_frontend_view_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_create_frontend_view_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_create_frontend_view_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_delete_frontend_view_args = function (args) {\\n  this.session = null;\\n  this.view_name = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.view_name !== undefined && args.view_name !== null) {\\n      this.view_name = args.view_name;\\n    }\\n  }\\n};\\nMapD_delete_frontend_view_args.prototype = {};\\nMapD_delete_frontend_view_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.view_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_delete_frontend_view_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_delete_frontend_view_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.view_name !== null && this.view_name !== undefined) {\\n    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.view_name);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_delete_frontend_view_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_delete_frontend_view_result.prototype = {};\\nMapD_delete_frontend_view_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_delete_frontend_view_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_delete_frontend_view_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_link_view_args = function (args) {\\n  this.session = null;\\n  this.link = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.link !== undefined && args.link !== null) {\\n      this.link = args.link;\\n    }\\n  }\\n};\\nMapD_get_link_view_args.prototype = {};\\nMapD_get_link_view_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.link = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_link_view_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_link_view_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.link !== null && this.link !== undefined) {\\n    output.writeFieldBegin('link', Thrift.Type.STRING, 2);\\n    output.writeString(this.link);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_link_view_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TFrontendView(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_link_view_result.prototype = {};\\nMapD_get_link_view_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TFrontendView();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_link_view_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_link_view_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_create_link_args = function (args) {\\n  this.session = null;\\n  this.view_state = null;\\n  this.view_metadata = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.view_state !== undefined && args.view_state !== null) {\\n      this.view_state = args.view_state;\\n    }\\n    if (args.view_metadata !== undefined && args.view_metadata !== null) {\\n      this.view_metadata = args.view_metadata;\\n    }\\n  }\\n};\\nMapD_create_link_args.prototype = {};\\nMapD_create_link_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.view_state = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.view_metadata = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_create_link_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_create_link_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.view_state !== null && this.view_state !== undefined) {\\n    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);\\n    output.writeString(this.view_state);\\n    output.writeFieldEnd();\\n  }\\n  if (this.view_metadata !== null && this.view_metadata !== undefined) {\\n    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);\\n    output.writeString(this.view_metadata);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_create_link_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = args.success;\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_create_link_result.prototype = {};\\nMapD_create_link_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.success = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_create_link_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_create_link_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\\n    output.writeString(this.success);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_load_table_binary_args = function (args) {\\n  this.session = null;\\n  this.table_name = null;\\n  this.rows = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.table_name !== undefined && args.table_name !== null) {\\n      this.table_name = args.table_name;\\n    }\\n    if (args.rows !== undefined && args.rows !== null) {\\n      this.rows = Thrift.copyList(args.rows, [TRow]);\\n    }\\n  }\\n};\\nMapD_load_table_binary_args.prototype = {};\\nMapD_load_table_binary_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.table_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size238 = 0;\\n          var _rtmp3242;\\n          this.rows = [];\\n          var _etype241 = 0;\\n          _rtmp3242 = input.readListBegin();\\n          _etype241 = _rtmp3242.etype;\\n          _size238 = _rtmp3242.size;\\n          for (var _i243 = 0; _i243 < _size238; ++_i243) {\\n            var elem244 = null;\\n            elem244 = new TRow();\\n            elem244.read(input);\\n            this.rows.push(elem244);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_load_table_binary_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_load_table_binary_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_name !== null && this.table_name !== undefined) {\\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.table_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.rows !== null && this.rows !== undefined) {\\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\\n    for (var iter245 in this.rows) {\\n      if (this.rows.hasOwnProperty(iter245)) {\\n        iter245 = this.rows[iter245];\\n        iter245.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_load_table_binary_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_load_table_binary_result.prototype = {};\\nMapD_load_table_binary_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_load_table_binary_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_load_table_binary_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_load_table_args = function (args) {\\n  this.session = null;\\n  this.table_name = null;\\n  this.rows = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.table_name !== undefined && args.table_name !== null) {\\n      this.table_name = args.table_name;\\n    }\\n    if (args.rows !== undefined && args.rows !== null) {\\n      this.rows = Thrift.copyList(args.rows, [TStringRow]);\\n    }\\n  }\\n};\\nMapD_load_table_args.prototype = {};\\nMapD_load_table_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.table_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size246 = 0;\\n          var _rtmp3250;\\n          this.rows = [];\\n          var _etype249 = 0;\\n          _rtmp3250 = input.readListBegin();\\n          _etype249 = _rtmp3250.etype;\\n          _size246 = _rtmp3250.size;\\n          for (var _i251 = 0; _i251 < _size246; ++_i251) {\\n            var elem252 = null;\\n            elem252 = new TStringRow();\\n            elem252.read(input);\\n            this.rows.push(elem252);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_load_table_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_load_table_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_name !== null && this.table_name !== undefined) {\\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.table_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.rows !== null && this.rows !== undefined) {\\n    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\\n    for (var iter253 in this.rows) {\\n      if (this.rows.hasOwnProperty(iter253)) {\\n        iter253 = this.rows[iter253];\\n        iter253.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_load_table_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_load_table_result.prototype = {};\\nMapD_load_table_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_load_table_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_load_table_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_detect_column_types_args = function (args) {\\n  this.session = null;\\n  this.file_name = null;\\n  this.copy_params = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.file_name !== undefined && args.file_name !== null) {\\n      this.file_name = args.file_name;\\n    }\\n    if (args.copy_params !== undefined && args.copy_params !== null) {\\n      this.copy_params = new TCopyParams(args.copy_params);\\n    }\\n  }\\n};\\nMapD_detect_column_types_args.prototype = {};\\nMapD_detect_column_types_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.file_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.copy_params = new TCopyParams();\\n          this.copy_params.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_detect_column_types_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_detect_column_types_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.file_name !== null && this.file_name !== undefined) {\\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.file_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.copy_params !== null && this.copy_params !== undefined) {\\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);\\n    this.copy_params.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_detect_column_types_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TDetectResult(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_detect_column_types_result.prototype = {};\\nMapD_detect_column_types_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TDetectResult();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_detect_column_types_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_detect_column_types_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_create_table_args = function (args) {\\n  this.session = null;\\n  this.table_name = null;\\n  this.row_desc = null;\\n  this.table_type = 0;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.table_name !== undefined && args.table_name !== null) {\\n      this.table_name = args.table_name;\\n    }\\n    if (args.row_desc !== undefined && args.row_desc !== null) {\\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\\n    }\\n    if (args.table_type !== undefined && args.table_type !== null) {\\n      this.table_type = args.table_type;\\n    }\\n  }\\n};\\nMapD_create_table_args.prototype = {};\\nMapD_create_table_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.table_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size254 = 0;\\n          var _rtmp3258;\\n          this.row_desc = [];\\n          var _etype257 = 0;\\n          _rtmp3258 = input.readListBegin();\\n          _etype257 = _rtmp3258.etype;\\n          _size254 = _rtmp3258.size;\\n          for (var _i259 = 0; _i259 < _size254; ++_i259) {\\n            var elem260 = null;\\n            elem260 = new TColumnType();\\n            elem260.read(input);\\n            this.row_desc.push(elem260);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.I32) {\\n          this.table_type = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_create_table_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_create_table_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_name !== null && this.table_name !== undefined) {\\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.table_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.row_desc !== null && this.row_desc !== undefined) {\\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\\n    for (var iter261 in this.row_desc) {\\n      if (this.row_desc.hasOwnProperty(iter261)) {\\n        iter261 = this.row_desc[iter261];\\n        iter261.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_type !== null && this.table_type !== undefined) {\\n    output.writeFieldBegin('table_type', Thrift.Type.I32, 4);\\n    output.writeI32(this.table_type);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_create_table_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_create_table_result.prototype = {};\\nMapD_create_table_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_create_table_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_create_table_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_import_table_args = function (args) {\\n  this.session = null;\\n  this.table_name = null;\\n  this.file_name = null;\\n  this.copy_params = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.table_name !== undefined && args.table_name !== null) {\\n      this.table_name = args.table_name;\\n    }\\n    if (args.file_name !== undefined && args.file_name !== null) {\\n      this.file_name = args.file_name;\\n    }\\n    if (args.copy_params !== undefined && args.copy_params !== null) {\\n      this.copy_params = new TCopyParams(args.copy_params);\\n    }\\n  }\\n};\\nMapD_import_table_args.prototype = {};\\nMapD_import_table_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.table_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.file_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.copy_params = new TCopyParams();\\n          this.copy_params.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_import_table_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_import_table_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_name !== null && this.table_name !== undefined) {\\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.table_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.file_name !== null && this.file_name !== undefined) {\\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);\\n    output.writeString(this.file_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.copy_params !== null && this.copy_params !== undefined) {\\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);\\n    this.copy_params.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_import_table_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_import_table_result.prototype = {};\\nMapD_import_table_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_import_table_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_import_table_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_import_geo_table_args = function (args) {\\n  this.session = null;\\n  this.table_name = null;\\n  this.file_name = null;\\n  this.copy_params = null;\\n  this.row_desc = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.table_name !== undefined && args.table_name !== null) {\\n      this.table_name = args.table_name;\\n    }\\n    if (args.file_name !== undefined && args.file_name !== null) {\\n      this.file_name = args.file_name;\\n    }\\n    if (args.copy_params !== undefined && args.copy_params !== null) {\\n      this.copy_params = new TCopyParams(args.copy_params);\\n    }\\n    if (args.row_desc !== undefined && args.row_desc !== null) {\\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\\n    }\\n  }\\n};\\nMapD_import_geo_table_args.prototype = {};\\nMapD_import_geo_table_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.table_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.file_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.copy_params = new TCopyParams();\\n          this.copy_params.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size262 = 0;\\n          var _rtmp3266;\\n          this.row_desc = [];\\n          var _etype265 = 0;\\n          _rtmp3266 = input.readListBegin();\\n          _etype265 = _rtmp3266.etype;\\n          _size262 = _rtmp3266.size;\\n          for (var _i267 = 0; _i267 < _size262; ++_i267) {\\n            var elem268 = null;\\n            elem268 = new TColumnType();\\n            elem268.read(input);\\n            this.row_desc.push(elem268);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_import_geo_table_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_import_geo_table_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_name !== null && this.table_name !== undefined) {\\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.table_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.file_name !== null && this.file_name !== undefined) {\\n    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);\\n    output.writeString(this.file_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.copy_params !== null && this.copy_params !== undefined) {\\n    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);\\n    this.copy_params.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.row_desc !== null && this.row_desc !== undefined) {\\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\\n    for (var iter269 in this.row_desc) {\\n      if (this.row_desc.hasOwnProperty(iter269)) {\\n        iter269 = this.row_desc[iter269];\\n        iter269.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_import_geo_table_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_import_geo_table_result.prototype = {};\\nMapD_import_geo_table_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_import_geo_table_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_import_geo_table_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_import_table_status_args = function (args) {\\n  this.session = null;\\n  this.import_id = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.import_id !== undefined && args.import_id !== null) {\\n      this.import_id = args.import_id;\\n    }\\n  }\\n};\\nMapD_import_table_status_args.prototype = {};\\nMapD_import_table_status_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.import_id = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_import_table_status_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_import_table_status_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.import_id !== null && this.import_id !== undefined) {\\n    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);\\n    output.writeString(this.import_id);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_import_table_status_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TImportStatus(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_import_table_status_result.prototype = {};\\nMapD_import_table_status_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TImportStatus();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_import_table_status_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_import_table_status_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_start_query_args = function (args) {\\n  this.session = null;\\n  this.query_ra = null;\\n  this.just_explain = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.query_ra !== undefined && args.query_ra !== null) {\\n      this.query_ra = args.query_ra;\\n    }\\n    if (args.just_explain !== undefined && args.just_explain !== null) {\\n      this.just_explain = args.just_explain;\\n    }\\n  }\\n};\\nMapD_start_query_args.prototype = {};\\nMapD_start_query_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.query_ra = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.just_explain = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_start_query_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_start_query_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.query_ra !== null && this.query_ra !== undefined) {\\n    output.writeFieldBegin('query_ra', Thrift.Type.STRING, 2);\\n    output.writeString(this.query_ra);\\n    output.writeFieldEnd();\\n  }\\n  if (this.just_explain !== null && this.just_explain !== undefined) {\\n    output.writeFieldBegin('just_explain', Thrift.Type.BOOL, 3);\\n    output.writeBool(this.just_explain);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_start_query_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TPendingQuery(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_start_query_result.prototype = {};\\nMapD_start_query_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TPendingQuery();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_start_query_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_start_query_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_execute_first_step_args = function (args) {\\n  this.pending_query = null;\\n  if (args) {\\n    if (args.pending_query !== undefined && args.pending_query !== null) {\\n      this.pending_query = new TPendingQuery(args.pending_query);\\n    }\\n  }\\n};\\nMapD_execute_first_step_args.prototype = {};\\nMapD_execute_first_step_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.pending_query = new TPendingQuery();\\n          this.pending_query.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_execute_first_step_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_execute_first_step_args');\\n  if (this.pending_query !== null && this.pending_query !== undefined) {\\n    output.writeFieldBegin('pending_query', Thrift.Type.STRUCT, 1);\\n    this.pending_query.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_execute_first_step_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TStepResult(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_execute_first_step_result.prototype = {};\\nMapD_execute_first_step_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TStepResult();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_execute_first_step_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_execute_first_step_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_broadcast_serialized_rows_args = function (args) {\\n  this.serialized_rows = null;\\n  this.row_desc = null;\\n  this.query_id = null;\\n  if (args) {\\n    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {\\n      this.serialized_rows = args.serialized_rows;\\n    }\\n    if (args.row_desc !== undefined && args.row_desc !== null) {\\n      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);\\n    }\\n    if (args.query_id !== undefined && args.query_id !== null) {\\n      this.query_id = args.query_id;\\n    }\\n  }\\n};\\nMapD_broadcast_serialized_rows_args.prototype = {};\\nMapD_broadcast_serialized_rows_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.serialized_rows = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size270 = 0;\\n          var _rtmp3274;\\n          this.row_desc = [];\\n          var _etype273 = 0;\\n          _rtmp3274 = input.readListBegin();\\n          _etype273 = _rtmp3274.etype;\\n          _size270 = _rtmp3274.size;\\n          for (var _i275 = 0; _i275 < _size270; ++_i275) {\\n            var elem276 = null;\\n            elem276 = new TColumnType();\\n            elem276.read(input);\\n            this.row_desc.push(elem276);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I64) {\\n          this.query_id = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_broadcast_serialized_rows_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_broadcast_serialized_rows_args');\\n  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {\\n    output.writeFieldBegin('serialized_rows', Thrift.Type.STRING, 1);\\n    output.writeString(this.serialized_rows);\\n    output.writeFieldEnd();\\n  }\\n  if (this.row_desc !== null && this.row_desc !== undefined) {\\n    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 2);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\\n    for (var iter277 in this.row_desc) {\\n      if (this.row_desc.hasOwnProperty(iter277)) {\\n        iter277 = this.row_desc[iter277];\\n        iter277.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.query_id !== null && this.query_id !== undefined) {\\n    output.writeFieldBegin('query_id', Thrift.Type.I64, 3);\\n    output.writeI64(this.query_id);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_broadcast_serialized_rows_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_broadcast_serialized_rows_result.prototype = {};\\nMapD_broadcast_serialized_rows_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_broadcast_serialized_rows_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_broadcast_serialized_rows_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_render_vega_raw_pixels_args = function (args) {\\n  this.session = null;\\n  this.widget_id = null;\\n  this.node_idx = null;\\n  this.vega_json = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.widget_id !== undefined && args.widget_id !== null) {\\n      this.widget_id = args.widget_id;\\n    }\\n    if (args.node_idx !== undefined && args.node_idx !== null) {\\n      this.node_idx = args.node_idx;\\n    }\\n    if (args.vega_json !== undefined && args.vega_json !== null) {\\n      this.vega_json = args.vega_json;\\n    }\\n  }\\n};\\nMapD_render_vega_raw_pixels_args.prototype = {};\\nMapD_render_vega_raw_pixels_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.widget_id = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.I16) {\\n          this.node_idx = input.readI16().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.vega_json = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_render_vega_raw_pixels_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_render_vega_raw_pixels_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.widget_id !== null && this.widget_id !== undefined) {\\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\\n    output.writeI64(this.widget_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.node_idx !== null && this.node_idx !== undefined) {\\n    output.writeFieldBegin('node_idx', Thrift.Type.I16, 3);\\n    output.writeI16(this.node_idx);\\n    output.writeFieldEnd();\\n  }\\n  if (this.vega_json !== null && this.vega_json !== undefined) {\\n    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 4);\\n    output.writeString(this.vega_json);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_render_vega_raw_pixels_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TRawPixelDataResult(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_render_vega_raw_pixels_result.prototype = {};\\nMapD_render_vega_raw_pixels_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TRawPixelDataResult();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_render_vega_raw_pixels_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_render_vega_raw_pixels_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_insert_data_args = function (args) {\\n  this.session = null;\\n  this.insert_data = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.insert_data !== undefined && args.insert_data !== null) {\\n      this.insert_data = new TInsertData(args.insert_data);\\n    }\\n  }\\n};\\nMapD_insert_data_args.prototype = {};\\nMapD_insert_data_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.insert_data = new TInsertData();\\n          this.insert_data.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_insert_data_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_insert_data_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.insert_data !== null && this.insert_data !== undefined) {\\n    output.writeFieldBegin('insert_data', Thrift.Type.STRUCT, 2);\\n    this.insert_data.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_insert_data_result = function (args) {\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_insert_data_result.prototype = {};\\nMapD_insert_data_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 0:\\n        input.skip(ftype);\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_insert_data_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_insert_data_result');\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_table_descriptor_args = function (args) {\\n  this.session = null;\\n  this.table_name = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.table_name !== undefined && args.table_name !== null) {\\n      this.table_name = args.table_name;\\n    }\\n  }\\n};\\nMapD_get_table_descriptor_args.prototype = {};\\nMapD_get_table_descriptor_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.table_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_table_descriptor_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_table_descriptor_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_name !== null && this.table_name !== undefined) {\\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.table_name);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_table_descriptor_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = Thrift.copyMap(args.success, [TColumnType]);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_table_descriptor_result.prototype = {};\\nMapD_get_table_descriptor_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.MAP) {\\n          var _size278 = 0;\\n          var _rtmp3282;\\n          this.success = {};\\n          var _ktype279 = 0;\\n          var _vtype280 = 0;\\n          _rtmp3282 = input.readMapBegin();\\n          _ktype279 = _rtmp3282.ktype;\\n          _vtype280 = _rtmp3282.vtype;\\n          _size278 = _rtmp3282.size;\\n          for (var _i283 = 0; _i283 < _size278; ++_i283) {\\n            if (_i283 > 0) {\\n              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {\\n                input.rstack.pop();\\n              }\\n            }\\n            var key284 = null;\\n            var val285 = null;\\n            key284 = input.readString().value;\\n            val285 = new TColumnType();\\n            val285.read(input);\\n            this.success[key284] = val285;\\n          }\\n          input.readMapEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_table_descriptor_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_table_descriptor_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.MAP, 0);\\n    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));\\n    for (var kiter286 in this.success) {\\n      if (this.success.hasOwnProperty(kiter286)) {\\n        var viter287 = this.success[kiter286];\\n        output.writeString(kiter286);\\n        viter287.write(output);\\n      }\\n    }\\n    output.writeMapEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_row_descriptor_args = function (args) {\\n  this.session = null;\\n  this.table_name = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.table_name !== undefined && args.table_name !== null) {\\n      this.table_name = args.table_name;\\n    }\\n  }\\n};\\nMapD_get_row_descriptor_args.prototype = {};\\nMapD_get_row_descriptor_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.table_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_row_descriptor_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_row_descriptor_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_name !== null && this.table_name !== undefined) {\\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\\n    output.writeString(this.table_name);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_row_descriptor_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = Thrift.copyList(args.success, [TColumnType]);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_row_descriptor_result.prototype = {};\\nMapD_get_row_descriptor_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size288 = 0;\\n          var _rtmp3292;\\n          this.success = [];\\n          var _etype291 = 0;\\n          _rtmp3292 = input.readListBegin();\\n          _etype291 = _rtmp3292.etype;\\n          _size288 = _rtmp3292.size;\\n          for (var _i293 = 0; _i293 < _size288; ++_i293) {\\n            var elem294 = null;\\n            elem294 = new TColumnType();\\n            elem294.read(input);\\n            this.success.push(elem294);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_row_descriptor_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_row_descriptor_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\\n    for (var iter295 in this.success) {\\n      if (this.success.hasOwnProperty(iter295)) {\\n        iter295 = this.success[iter295];\\n        iter295.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_render_args = function (args) {\\n  this.session = null;\\n  this.query = null;\\n  this.render_type = null;\\n  this.nonce = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.query !== undefined && args.query !== null) {\\n      this.query = args.query;\\n    }\\n    if (args.render_type !== undefined && args.render_type !== null) {\\n      this.render_type = args.render_type;\\n    }\\n    if (args.nonce !== undefined && args.nonce !== null) {\\n      this.nonce = args.nonce;\\n    }\\n  }\\n};\\nMapD_render_args.prototype = {};\\nMapD_render_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.query = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.render_type = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.nonce = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_render_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_render_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.query !== null && this.query !== undefined) {\\n    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\\n    output.writeString(this.query);\\n    output.writeFieldEnd();\\n  }\\n  if (this.render_type !== null && this.render_type !== undefined) {\\n    output.writeFieldBegin('render_type', Thrift.Type.STRING, 3);\\n    output.writeString(this.render_type);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nonce !== null && this.nonce !== undefined) {\\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\\n    output.writeString(this.nonce);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_render_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TRenderResult(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_render_result.prototype = {};\\nMapD_render_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TRenderResult();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_render_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_render_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_rows_for_pixels_args = function (args) {\\n  this.session = null;\\n  this.widget_id = null;\\n  this.pixels = null;\\n  this.table_name = null;\\n  this.col_names = null;\\n  this.column_format = null;\\n  this.nonce = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.widget_id !== undefined && args.widget_id !== null) {\\n      this.widget_id = args.widget_id;\\n    }\\n    if (args.pixels !== undefined && args.pixels !== null) {\\n      this.pixels = Thrift.copyList(args.pixels, [TPixel]);\\n    }\\n    if (args.table_name !== undefined && args.table_name !== null) {\\n      this.table_name = args.table_name;\\n    }\\n    if (args.col_names !== undefined && args.col_names !== null) {\\n      this.col_names = Thrift.copyList(args.col_names, [null]);\\n    }\\n    if (args.column_format !== undefined && args.column_format !== null) {\\n      this.column_format = args.column_format;\\n    }\\n    if (args.nonce !== undefined && args.nonce !== null) {\\n      this.nonce = args.nonce;\\n    }\\n  }\\n};\\nMapD_get_rows_for_pixels_args.prototype = {};\\nMapD_get_rows_for_pixels_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.widget_id = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size296 = 0;\\n          var _rtmp3300;\\n          this.pixels = [];\\n          var _etype299 = 0;\\n          _rtmp3300 = input.readListBegin();\\n          _etype299 = _rtmp3300.etype;\\n          _size296 = _rtmp3300.size;\\n          for (var _i301 = 0; _i301 < _size296; ++_i301) {\\n            var elem302 = null;\\n            elem302 = new TPixel();\\n            elem302.read(input);\\n            this.pixels.push(elem302);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.table_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size303 = 0;\\n          var _rtmp3307;\\n          this.col_names = [];\\n          var _etype306 = 0;\\n          _rtmp3307 = input.readListBegin();\\n          _etype306 = _rtmp3307.etype;\\n          _size303 = _rtmp3307.size;\\n          for (var _i308 = 0; _i308 < _size303; ++_i308) {\\n            var elem309 = null;\\n            elem309 = input.readString().value;\\n            this.col_names.push(elem309);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 6:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.column_format = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 7:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.nonce = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_rows_for_pixels_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_rows_for_pixels_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.widget_id !== null && this.widget_id !== undefined) {\\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\\n    output.writeI64(this.widget_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.pixels !== null && this.pixels !== undefined) {\\n    output.writeFieldBegin('pixels', Thrift.Type.LIST, 3);\\n    output.writeListBegin(Thrift.Type.STRUCT, this.pixels.length);\\n    for (var iter310 in this.pixels) {\\n      if (this.pixels.hasOwnProperty(iter310)) {\\n        iter310 = this.pixels[iter310];\\n        iter310.write(output);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_name !== null && this.table_name !== undefined) {\\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 4);\\n    output.writeString(this.table_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.col_names !== null && this.col_names !== undefined) {\\n    output.writeFieldBegin('col_names', Thrift.Type.LIST, 5);\\n    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);\\n    for (var iter311 in this.col_names) {\\n      if (this.col_names.hasOwnProperty(iter311)) {\\n        iter311 = this.col_names[iter311];\\n        output.writeString(iter311);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.column_format !== null && this.column_format !== undefined) {\\n    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 6);\\n    output.writeBool(this.column_format);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nonce !== null && this.nonce !== undefined) {\\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);\\n    output.writeString(this.nonce);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_rows_for_pixels_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TPixelResult(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_rows_for_pixels_result.prototype = {};\\nMapD_get_rows_for_pixels_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TPixelResult();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_rows_for_pixels_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_rows_for_pixels_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_row_for_pixel_args = function (args) {\\n  this.session = null;\\n  this.widget_id = null;\\n  this.pixel = null;\\n  this.table_name = null;\\n  this.col_names = null;\\n  this.column_format = null;\\n  this.pixelRadius = null;\\n  this.nonce = null;\\n  if (args) {\\n    if (args.session !== undefined && args.session !== null) {\\n      this.session = args.session;\\n    }\\n    if (args.widget_id !== undefined && args.widget_id !== null) {\\n      this.widget_id = args.widget_id;\\n    }\\n    if (args.pixel !== undefined && args.pixel !== null) {\\n      this.pixel = new TPixel(args.pixel);\\n    }\\n    if (args.table_name !== undefined && args.table_name !== null) {\\n      this.table_name = args.table_name;\\n    }\\n    if (args.col_names !== undefined && args.col_names !== null) {\\n      this.col_names = Thrift.copyList(args.col_names, [null]);\\n    }\\n    if (args.column_format !== undefined && args.column_format !== null) {\\n      this.column_format = args.column_format;\\n    }\\n    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {\\n      this.pixelRadius = args.pixelRadius;\\n    }\\n    if (args.nonce !== undefined && args.nonce !== null) {\\n      this.nonce = args.nonce;\\n    }\\n  }\\n};\\nMapD_get_row_for_pixel_args.prototype = {};\\nMapD_get_row_for_pixel_args.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 1:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.session = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 2:\\n        if (ftype == Thrift.Type.I64) {\\n          this.widget_id = input.readI64().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 3:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.pixel = new TPixel();\\n          this.pixel.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 4:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.table_name = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 5:\\n        if (ftype == Thrift.Type.LIST) {\\n          var _size312 = 0;\\n          var _rtmp3316;\\n          this.col_names = [];\\n          var _etype315 = 0;\\n          _rtmp3316 = input.readListBegin();\\n          _etype315 = _rtmp3316.etype;\\n          _size312 = _rtmp3316.size;\\n          for (var _i317 = 0; _i317 < _size312; ++_i317) {\\n            var elem318 = null;\\n            elem318 = input.readString().value;\\n            this.col_names.push(elem318);\\n          }\\n          input.readListEnd();\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 6:\\n        if (ftype == Thrift.Type.BOOL) {\\n          this.column_format = input.readBool().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 7:\\n        if (ftype == Thrift.Type.I32) {\\n          this.pixelRadius = input.readI32().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 8:\\n        if (ftype == Thrift.Type.STRING) {\\n          this.nonce = input.readString().value;\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_row_for_pixel_args.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_row_for_pixel_args');\\n  if (this.session !== null && this.session !== undefined) {\\n    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\\n    output.writeString(this.session);\\n    output.writeFieldEnd();\\n  }\\n  if (this.widget_id !== null && this.widget_id !== undefined) {\\n    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\\n    output.writeI64(this.widget_id);\\n    output.writeFieldEnd();\\n  }\\n  if (this.pixel !== null && this.pixel !== undefined) {\\n    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);\\n    this.pixel.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.table_name !== null && this.table_name !== undefined) {\\n    output.writeFieldBegin('table_name', Thrift.Type.STRING, 4);\\n    output.writeString(this.table_name);\\n    output.writeFieldEnd();\\n  }\\n  if (this.col_names !== null && this.col_names !== undefined) {\\n    output.writeFieldBegin('col_names', Thrift.Type.LIST, 5);\\n    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);\\n    for (var iter319 in this.col_names) {\\n      if (this.col_names.hasOwnProperty(iter319)) {\\n        iter319 = this.col_names[iter319];\\n        output.writeString(iter319);\\n      }\\n    }\\n    output.writeListEnd();\\n    output.writeFieldEnd();\\n  }\\n  if (this.column_format !== null && this.column_format !== undefined) {\\n    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 6);\\n    output.writeBool(this.column_format);\\n    output.writeFieldEnd();\\n  }\\n  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {\\n    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 7);\\n    output.writeI32(this.pixelRadius);\\n    output.writeFieldEnd();\\n  }\\n  if (this.nonce !== null && this.nonce !== undefined) {\\n    output.writeFieldBegin('nonce', Thrift.Type.STRING, 8);\\n    output.writeString(this.nonce);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapD_get_row_for_pixel_result = function (args) {\\n  this.success = null;\\n  this.e = null;\\n  if (args instanceof TMapDException) {\\n    this.e = args;\\n    return;\\n  }\\n  if (args) {\\n    if (args.success !== undefined && args.success !== null) {\\n      this.success = new TPixelRowResult(args.success);\\n    }\\n    if (args.e !== undefined && args.e !== null) {\\n      this.e = args.e;\\n    }\\n  }\\n};\\nMapD_get_row_for_pixel_result.prototype = {};\\nMapD_get_row_for_pixel_result.prototype.read = function (input) {\\n  input.readStructBegin();\\n  while (true) {\\n    var ret = input.readFieldBegin();\\n    var fname = ret.fname;\\n    var ftype = ret.ftype;\\n    var fid = ret.fid;\\n    if (ftype == Thrift.Type.STOP) {\\n      break;\\n    }\\n    switch (fid) {\\n      case 0:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.success = new TPixelRowResult();\\n          this.success.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      case 1:\\n        if (ftype == Thrift.Type.STRUCT) {\\n          this.e = new TMapDException();\\n          this.e.read(input);\\n        } else {\\n          input.skip(ftype);\\n        }\\n        break;\\n      default:\\n        input.skip(ftype);\\n    }\\n    input.readFieldEnd();\\n  }\\n  input.readStructEnd();\\n  return;\\n};\\n\\nMapD_get_row_for_pixel_result.prototype.write = function (output) {\\n  output.writeStructBegin('MapD_get_row_for_pixel_result');\\n  if (this.success !== null && this.success !== undefined) {\\n    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\\n    this.success.write(output);\\n    output.writeFieldEnd();\\n  }\\n  if (this.e !== null && this.e !== undefined) {\\n    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\\n    this.e.write(output);\\n    output.writeFieldEnd();\\n  }\\n  output.writeFieldStop();\\n  output.writeStructEnd();\\n  return;\\n};\\n\\nwindow.MapDClient = function (input, output) {\\n  this.input = input;\\n  this.output = !output ? input : output;\\n  this.seqid = 0;\\n};\\nMapDClient.prototype = {};\\nMapDClient.prototype.connect = function (user, passwd, dbname, callback) {\\n  this.send_connect(user, passwd, dbname, callback);\\n  if (!callback) {\\n    return this.recv_connect();\\n  }\\n};\\n\\nMapDClient.prototype.send_connect = function (user, passwd, dbname, callback) {\\n  this.output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_connect_args();\\n  args.user = user;\\n  args.passwd = passwd;\\n  args.dbname = dbname;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_connect();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_connect = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_connect_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'connect failed: unknown result';\\n};\\nMapDClient.prototype.disconnect = function (session, callback) {\\n  this.send_disconnect(session, callback);\\n  if (!callback) {\\n    this.recv_disconnect();\\n  }\\n};\\n\\nMapDClient.prototype.send_disconnect = function (session, callback) {\\n  this.output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_disconnect_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_disconnect();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_disconnect = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_disconnect_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.get_server_status = function (session, callback) {\\n  this.send_get_server_status(session, callback);\\n  if (!callback) {\\n    return this.recv_get_server_status();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_server_status = function (session, callback) {\\n  this.output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_server_status_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_server_status();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_server_status = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_server_status_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_server_status failed: unknown result';\\n};\\nMapDClient.prototype.get_tables = function (session, callback) {\\n  this.send_get_tables(session, callback);\\n  if (!callback) {\\n    return this.recv_get_tables();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_tables = function (session, callback) {\\n  this.output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_tables_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_tables();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_tables = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_tables_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_tables failed: unknown result';\\n};\\nMapDClient.prototype.get_table_details = function (session, table_name, callback) {\\n  this.send_get_table_details(session, table_name, callback);\\n  if (!callback) {\\n    return this.recv_get_table_details();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_table_details = function (session, table_name, callback) {\\n  this.output.writeMessageBegin('get_table_details', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_table_details_args();\\n  args.session = session;\\n  args.table_name = table_name;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_table_details();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_table_details = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_table_details_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_table_details failed: unknown result';\\n};\\nMapDClient.prototype.get_users = function (session, callback) {\\n  this.send_get_users(session, callback);\\n  if (!callback) {\\n    return this.recv_get_users();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_users = function (session, callback) {\\n  this.output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_users_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_users();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_users = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_users_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_users failed: unknown result';\\n};\\nMapDClient.prototype.get_databases = function (session, callback) {\\n  this.send_get_databases(session, callback);\\n  if (!callback) {\\n    return this.recv_get_databases();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_databases = function (session, callback) {\\n  this.output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_databases_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_databases();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_databases = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_databases_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_databases failed: unknown result';\\n};\\nMapDClient.prototype.get_version = function (callback) {\\n  this.send_get_version(callback);\\n  if (!callback) {\\n    return this.recv_get_version();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_version = function (callback) {\\n  this.output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_version_args();\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_version();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_version = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_version_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_version failed: unknown result';\\n};\\nMapDClient.prototype.start_heap_profile = function (session, callback) {\\n  this.send_start_heap_profile(session, callback);\\n  if (!callback) {\\n    this.recv_start_heap_profile();\\n  }\\n};\\n\\nMapDClient.prototype.send_start_heap_profile = function (session, callback) {\\n  this.output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_start_heap_profile_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_start_heap_profile();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_start_heap_profile = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_start_heap_profile_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.stop_heap_profile = function (session, callback) {\\n  this.send_stop_heap_profile(session, callback);\\n  if (!callback) {\\n    this.recv_stop_heap_profile();\\n  }\\n};\\n\\nMapDClient.prototype.send_stop_heap_profile = function (session, callback) {\\n  this.output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_stop_heap_profile_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_stop_heap_profile();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_stop_heap_profile = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_stop_heap_profile_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.get_heap_profile = function (session, callback) {\\n  this.send_get_heap_profile(session, callback);\\n  if (!callback) {\\n    return this.recv_get_heap_profile();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_heap_profile = function (session, callback) {\\n  this.output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_heap_profile_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_heap_profile();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_heap_profile = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_heap_profile_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_heap_profile failed: unknown result';\\n};\\nMapDClient.prototype.get_memory_gpu = function (session, callback) {\\n  this.send_get_memory_gpu(session, callback);\\n  if (!callback) {\\n    return this.recv_get_memory_gpu();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_memory_gpu = function (session, callback) {\\n  this.output.writeMessageBegin('get_memory_gpu', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_memory_gpu_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_memory_gpu();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_memory_gpu = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_memory_gpu_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_memory_gpu failed: unknown result';\\n};\\nMapDClient.prototype.get_memory_summary = function (session, callback) {\\n  this.send_get_memory_summary(session, callback);\\n  if (!callback) {\\n    return this.recv_get_memory_summary();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_memory_summary = function (session, callback) {\\n  this.output.writeMessageBegin('get_memory_summary', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_memory_summary_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_memory_summary();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_memory_summary = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_memory_summary_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_memory_summary failed: unknown result';\\n};\\nMapDClient.prototype.clear_cpu_memory = function (session, callback) {\\n  this.send_clear_cpu_memory(session, callback);\\n  if (!callback) {\\n    this.recv_clear_cpu_memory();\\n  }\\n};\\n\\nMapDClient.prototype.send_clear_cpu_memory = function (session, callback) {\\n  this.output.writeMessageBegin('clear_cpu_memory', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_clear_cpu_memory_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_clear_cpu_memory();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_clear_cpu_memory = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_clear_cpu_memory_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.clear_gpu_memory = function (session, callback) {\\n  this.send_clear_gpu_memory(session, callback);\\n  if (!callback) {\\n    this.recv_clear_gpu_memory();\\n  }\\n};\\n\\nMapDClient.prototype.send_clear_gpu_memory = function (session, callback) {\\n  this.output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_clear_gpu_memory_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_clear_gpu_memory();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_clear_gpu_memory = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_clear_gpu_memory_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.sql_execute = function (session, query, column_format, nonce, first_n, callback) {\\n  this.send_sql_execute(session, query, column_format, nonce, first_n, callback);\\n  if (!callback) {\\n    return this.recv_sql_execute();\\n  }\\n};\\n\\nMapDClient.prototype.send_sql_execute = function (session, query, column_format, nonce, first_n, callback) {\\n  this.output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_sql_execute_args();\\n  args.session = session;\\n  args.query = query;\\n  args.column_format = column_format;\\n  args.nonce = nonce;\\n  args.first_n = first_n;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_sql_execute();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_sql_execute = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_sql_execute_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'sql_execute failed: unknown result';\\n};\\nMapDClient.prototype.sql_execute_gpudf = function (session, query, device_id, first_n, callback) {\\n  this.send_sql_execute_gpudf(session, query, device_id, first_n, callback);\\n  if (!callback) {\\n    return this.recv_sql_execute_gpudf();\\n  }\\n};\\n\\nMapDClient.prototype.send_sql_execute_gpudf = function (session, query, device_id, first_n, callback) {\\n  this.output.writeMessageBegin('sql_execute_gpudf', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_sql_execute_gpudf_args();\\n  args.session = session;\\n  args.query = query;\\n  args.device_id = device_id;\\n  args.first_n = first_n;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_sql_execute_gpudf();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_sql_execute_gpudf = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_sql_execute_gpudf_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'sql_execute_gpudf failed: unknown result';\\n};\\nMapDClient.prototype.interrupt = function (session, callback) {\\n  this.send_interrupt(session, callback);\\n  if (!callback) {\\n    this.recv_interrupt();\\n  }\\n};\\n\\nMapDClient.prototype.send_interrupt = function (session, callback) {\\n  this.output.writeMessageBegin('interrupt', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_interrupt_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_interrupt();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_interrupt = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_interrupt_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.sql_validate = function (session, query, callback) {\\n  this.send_sql_validate(session, query, callback);\\n  if (!callback) {\\n    return this.recv_sql_validate();\\n  }\\n};\\n\\nMapDClient.prototype.send_sql_validate = function (session, query, callback) {\\n  this.output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_sql_validate_args();\\n  args.session = session;\\n  args.query = query;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_sql_validate();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_sql_validate = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_sql_validate_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'sql_validate failed: unknown result';\\n};\\nMapDClient.prototype.set_execution_mode = function (session, mode, callback) {\\n  this.send_set_execution_mode(session, mode, callback);\\n  if (!callback) {\\n    this.recv_set_execution_mode();\\n  }\\n};\\n\\nMapDClient.prototype.send_set_execution_mode = function (session, mode, callback) {\\n  this.output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_set_execution_mode_args();\\n  args.session = session;\\n  args.mode = mode;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_set_execution_mode();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_set_execution_mode = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_set_execution_mode_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.render_vega = function (session, widget_id, vega_json, compression_level, nonce, callback) {\\n  this.send_render_vega(session, widget_id, vega_json, compression_level, nonce, callback);\\n  if (!callback) {\\n    return this.recv_render_vega();\\n  }\\n};\\n\\nMapDClient.prototype.send_render_vega = function (session, widget_id, vega_json, compression_level, nonce, callback) {\\n  this.output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_render_vega_args();\\n  args.session = session;\\n  args.widget_id = widget_id;\\n  args.vega_json = vega_json;\\n  args.compression_level = compression_level;\\n  args.nonce = nonce;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_render_vega();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_render_vega = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_render_vega_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'render_vega failed: unknown result';\\n};\\nMapDClient.prototype.get_result_row_for_pixel = function (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {\\n  this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback);\\n  if (!callback) {\\n    return this.recv_get_result_row_for_pixel();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_result_row_for_pixel = function (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {\\n  this.output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_result_row_for_pixel_args();\\n  args.session = session;\\n  args.widget_id = widget_id;\\n  args.pixel = pixel;\\n  args.table_col_names = table_col_names;\\n  args.column_format = column_format;\\n  args.pixelRadius = pixelRadius;\\n  args.nonce = nonce;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_result_row_for_pixel();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_result_row_for_pixel = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_result_row_for_pixel_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_result_row_for_pixel failed: unknown result';\\n};\\nMapDClient.prototype.get_frontend_view = function (session, view_name, callback) {\\n  this.send_get_frontend_view(session, view_name, callback);\\n  if (!callback) {\\n    return this.recv_get_frontend_view();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_frontend_view = function (session, view_name, callback) {\\n  this.output.writeMessageBegin('get_frontend_view', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_frontend_view_args();\\n  args.session = session;\\n  args.view_name = view_name;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_frontend_view();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_frontend_view = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_frontend_view_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_frontend_view failed: unknown result';\\n};\\nMapDClient.prototype.get_frontend_views = function (session, callback) {\\n  this.send_get_frontend_views(session, callback);\\n  if (!callback) {\\n    return this.recv_get_frontend_views();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_frontend_views = function (session, callback) {\\n  this.output.writeMessageBegin('get_frontend_views', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_frontend_views_args();\\n  args.session = session;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_frontend_views();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_frontend_views = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_frontend_views_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_frontend_views failed: unknown result';\\n};\\nMapDClient.prototype.create_frontend_view = function (session, view_name, view_state, image_hash, view_metadata, callback) {\\n  this.send_create_frontend_view(session, view_name, view_state, image_hash, view_metadata, callback);\\n  if (!callback) {\\n    this.recv_create_frontend_view();\\n  }\\n};\\n\\nMapDClient.prototype.send_create_frontend_view = function (session, view_name, view_state, image_hash, view_metadata, callback) {\\n  this.output.writeMessageBegin('create_frontend_view', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_create_frontend_view_args();\\n  args.session = session;\\n  args.view_name = view_name;\\n  args.view_state = view_state;\\n  args.image_hash = image_hash;\\n  args.view_metadata = view_metadata;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_create_frontend_view();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_create_frontend_view = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_create_frontend_view_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.delete_frontend_view = function (session, view_name, callback) {\\n  this.send_delete_frontend_view(session, view_name, callback);\\n  if (!callback) {\\n    this.recv_delete_frontend_view();\\n  }\\n};\\n\\nMapDClient.prototype.send_delete_frontend_view = function (session, view_name, callback) {\\n  this.output.writeMessageBegin('delete_frontend_view', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_delete_frontend_view_args();\\n  args.session = session;\\n  args.view_name = view_name;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_delete_frontend_view();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_delete_frontend_view = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_delete_frontend_view_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.get_link_view = function (session, link, callback) {\\n  this.send_get_link_view(session, link, callback);\\n  if (!callback) {\\n    return this.recv_get_link_view();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_link_view = function (session, link, callback) {\\n  this.output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_link_view_args();\\n  args.session = session;\\n  args.link = link;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_link_view();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_link_view = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_link_view_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_link_view failed: unknown result';\\n};\\nMapDClient.prototype.create_link = function (session, view_state, view_metadata, callback) {\\n  this.send_create_link(session, view_state, view_metadata, callback);\\n  if (!callback) {\\n    return this.recv_create_link();\\n  }\\n};\\n\\nMapDClient.prototype.send_create_link = function (session, view_state, view_metadata, callback) {\\n  this.output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_create_link_args();\\n  args.session = session;\\n  args.view_state = view_state;\\n  args.view_metadata = view_metadata;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_create_link();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_create_link = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_create_link_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'create_link failed: unknown result';\\n};\\nMapDClient.prototype.load_table_binary = function (session, table_name, rows, callback) {\\n  this.send_load_table_binary(session, table_name, rows, callback);\\n  if (!callback) {\\n    this.recv_load_table_binary();\\n  }\\n};\\n\\nMapDClient.prototype.send_load_table_binary = function (session, table_name, rows, callback) {\\n  this.output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_load_table_binary_args();\\n  args.session = session;\\n  args.table_name = table_name;\\n  args.rows = rows;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_load_table_binary();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_load_table_binary = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_load_table_binary_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.load_table = function (session, table_name, rows, callback) {\\n  this.send_load_table(session, table_name, rows, callback);\\n  if (!callback) {\\n    this.recv_load_table();\\n  }\\n};\\n\\nMapDClient.prototype.send_load_table = function (session, table_name, rows, callback) {\\n  this.output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_load_table_args();\\n  args.session = session;\\n  args.table_name = table_name;\\n  args.rows = rows;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_load_table();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_load_table = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_load_table_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.detect_column_types = function (session, file_name, copy_params, callback) {\\n  this.send_detect_column_types(session, file_name, copy_params, callback);\\n  if (!callback) {\\n    return this.recv_detect_column_types();\\n  }\\n};\\n\\nMapDClient.prototype.send_detect_column_types = function (session, file_name, copy_params, callback) {\\n  this.output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_detect_column_types_args();\\n  args.session = session;\\n  args.file_name = file_name;\\n  args.copy_params = copy_params;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_detect_column_types();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_detect_column_types = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_detect_column_types_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'detect_column_types failed: unknown result';\\n};\\nMapDClient.prototype.create_table = function (session, table_name, row_desc, table_type, callback) {\\n  this.send_create_table(session, table_name, row_desc, table_type, callback);\\n  if (!callback) {\\n    this.recv_create_table();\\n  }\\n};\\n\\nMapDClient.prototype.send_create_table = function (session, table_name, row_desc, table_type, callback) {\\n  this.output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_create_table_args();\\n  args.session = session;\\n  args.table_name = table_name;\\n  args.row_desc = row_desc;\\n  args.table_type = table_type;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_create_table();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_create_table = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_create_table_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.import_table = function (session, table_name, file_name, copy_params, callback) {\\n  this.send_import_table(session, table_name, file_name, copy_params, callback);\\n  if (!callback) {\\n    this.recv_import_table();\\n  }\\n};\\n\\nMapDClient.prototype.send_import_table = function (session, table_name, file_name, copy_params, callback) {\\n  this.output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_import_table_args();\\n  args.session = session;\\n  args.table_name = table_name;\\n  args.file_name = file_name;\\n  args.copy_params = copy_params;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_import_table();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_import_table = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_import_table_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.import_geo_table = function (session, table_name, file_name, copy_params, row_desc, callback) {\\n  this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc, callback);\\n  if (!callback) {\\n    this.recv_import_geo_table();\\n  }\\n};\\n\\nMapDClient.prototype.send_import_geo_table = function (session, table_name, file_name, copy_params, row_desc, callback) {\\n  this.output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_import_geo_table_args();\\n  args.session = session;\\n  args.table_name = table_name;\\n  args.file_name = file_name;\\n  args.copy_params = copy_params;\\n  args.row_desc = row_desc;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_import_geo_table();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_import_geo_table = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_import_geo_table_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.import_table_status = function (session, import_id, callback) {\\n  this.send_import_table_status(session, import_id, callback);\\n  if (!callback) {\\n    return this.recv_import_table_status();\\n  }\\n};\\n\\nMapDClient.prototype.send_import_table_status = function (session, import_id, callback) {\\n  this.output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_import_table_status_args();\\n  args.session = session;\\n  args.import_id = import_id;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_import_table_status();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_import_table_status = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_import_table_status_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'import_table_status failed: unknown result';\\n};\\nMapDClient.prototype.start_query = function (session, query_ra, just_explain, callback) {\\n  this.send_start_query(session, query_ra, just_explain, callback);\\n  if (!callback) {\\n    return this.recv_start_query();\\n  }\\n};\\n\\nMapDClient.prototype.send_start_query = function (session, query_ra, just_explain, callback) {\\n  this.output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_start_query_args();\\n  args.session = session;\\n  args.query_ra = query_ra;\\n  args.just_explain = just_explain;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_start_query();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_start_query = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_start_query_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'start_query failed: unknown result';\\n};\\nMapDClient.prototype.execute_first_step = function (pending_query, callback) {\\n  this.send_execute_first_step(pending_query, callback);\\n  if (!callback) {\\n    return this.recv_execute_first_step();\\n  }\\n};\\n\\nMapDClient.prototype.send_execute_first_step = function (pending_query, callback) {\\n  this.output.writeMessageBegin('execute_first_step', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_execute_first_step_args();\\n  args.pending_query = pending_query;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_execute_first_step();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_execute_first_step = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_execute_first_step_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'execute_first_step failed: unknown result';\\n};\\nMapDClient.prototype.broadcast_serialized_rows = function (serialized_rows, row_desc, query_id, callback) {\\n  this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id, callback);\\n  if (!callback) {\\n    this.recv_broadcast_serialized_rows();\\n  }\\n};\\n\\nMapDClient.prototype.send_broadcast_serialized_rows = function (serialized_rows, row_desc, query_id, callback) {\\n  this.output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_broadcast_serialized_rows_args();\\n  args.serialized_rows = serialized_rows;\\n  args.row_desc = row_desc;\\n  args.query_id = query_id;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_broadcast_serialized_rows();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_broadcast_serialized_rows = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_broadcast_serialized_rows_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.render_vega_raw_pixels = function (session, widget_id, node_idx, vega_json, callback) {\\n  this.send_render_vega_raw_pixels(session, widget_id, node_idx, vega_json, callback);\\n  if (!callback) {\\n    return this.recv_render_vega_raw_pixels();\\n  }\\n};\\n\\nMapDClient.prototype.send_render_vega_raw_pixels = function (session, widget_id, node_idx, vega_json, callback) {\\n  this.output.writeMessageBegin('render_vega_raw_pixels', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_render_vega_raw_pixels_args();\\n  args.session = session;\\n  args.widget_id = widget_id;\\n  args.node_idx = node_idx;\\n  args.vega_json = vega_json;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_render_vega_raw_pixels();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_render_vega_raw_pixels = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_render_vega_raw_pixels_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'render_vega_raw_pixels failed: unknown result';\\n};\\nMapDClient.prototype.insert_data = function (session, insert_data, callback) {\\n  this.send_insert_data(session, insert_data, callback);\\n  if (!callback) {\\n    this.recv_insert_data();\\n  }\\n};\\n\\nMapDClient.prototype.send_insert_data = function (session, insert_data, callback) {\\n  this.output.writeMessageBegin('insert_data', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_insert_data_args();\\n  args.session = session;\\n  args.insert_data = insert_data;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_insert_data();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_insert_data = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_insert_data_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  return;\\n};\\nMapDClient.prototype.get_table_descriptor = function (session, table_name, callback) {\\n  this.send_get_table_descriptor(session, table_name, callback);\\n  if (!callback) {\\n    return this.recv_get_table_descriptor();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_table_descriptor = function (session, table_name, callback) {\\n  this.output.writeMessageBegin('get_table_descriptor', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_table_descriptor_args();\\n  args.session = session;\\n  args.table_name = table_name;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_table_descriptor();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_table_descriptor = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_table_descriptor_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_table_descriptor failed: unknown result';\\n};\\nMapDClient.prototype.get_row_descriptor = function (session, table_name, callback) {\\n  this.send_get_row_descriptor(session, table_name, callback);\\n  if (!callback) {\\n    return this.recv_get_row_descriptor();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_row_descriptor = function (session, table_name, callback) {\\n  this.output.writeMessageBegin('get_row_descriptor', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_row_descriptor_args();\\n  args.session = session;\\n  args.table_name = table_name;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_row_descriptor();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_row_descriptor = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_row_descriptor_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_row_descriptor failed: unknown result';\\n};\\nMapDClient.prototype.render = function (session, query, render_type, nonce, callback) {\\n  this.send_render(session, query, render_type, nonce, callback);\\n  if (!callback) {\\n    return this.recv_render();\\n  }\\n};\\n\\nMapDClient.prototype.send_render = function (session, query, render_type, nonce, callback) {\\n  this.output.writeMessageBegin('render', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_render_args();\\n  args.session = session;\\n  args.query = query;\\n  args.render_type = render_type;\\n  args.nonce = nonce;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_render();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_render = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_render_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'render failed: unknown result';\\n};\\nMapDClient.prototype.get_rows_for_pixels = function (session, widget_id, pixels, table_name, col_names, column_format, nonce, callback) {\\n  this.send_get_rows_for_pixels(session, widget_id, pixels, table_name, col_names, column_format, nonce, callback);\\n  if (!callback) {\\n    return this.recv_get_rows_for_pixels();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_rows_for_pixels = function (session, widget_id, pixels, table_name, col_names, column_format, nonce, callback) {\\n  this.output.writeMessageBegin('get_rows_for_pixels', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_rows_for_pixels_args();\\n  args.session = session;\\n  args.widget_id = widget_id;\\n  args.pixels = pixels;\\n  args.table_name = table_name;\\n  args.col_names = col_names;\\n  args.column_format = column_format;\\n  args.nonce = nonce;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_rows_for_pixels();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_rows_for_pixels = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_rows_for_pixels_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_rows_for_pixels failed: unknown result';\\n};\\nMapDClient.prototype.get_row_for_pixel = function (session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce, callback) {\\n  this.send_get_row_for_pixel(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce, callback);\\n  if (!callback) {\\n    return this.recv_get_row_for_pixel();\\n  }\\n};\\n\\nMapDClient.prototype.send_get_row_for_pixel = function (session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce, callback) {\\n  this.output.writeMessageBegin('get_row_for_pixel', Thrift.MessageType.CALL, this.seqid);\\n  var args = new MapD_get_row_for_pixel_args();\\n  args.session = session;\\n  args.widget_id = widget_id;\\n  args.pixel = pixel;\\n  args.table_name = table_name;\\n  args.col_names = col_names;\\n  args.column_format = column_format;\\n  args.pixelRadius = pixelRadius;\\n  args.nonce = nonce;\\n  args.write(this.output);\\n  this.output.writeMessageEnd();\\n  if (callback) {\\n    var self = this;\\n    this.output.getTransport().flush(true, function () {\\n      var result = null;\\n      try {\\n        result = self.recv_get_row_for_pixel();\\n      } catch (e) {\\n        result = e;\\n      }\\n      callback(result);\\n    });\\n  } else {\\n    return this.output.getTransport().flush();\\n  }\\n};\\n\\nMapDClient.prototype.recv_get_row_for_pixel = function () {\\n  var ret = this.input.readMessageBegin();\\n  var fname = ret.fname;\\n  var mtype = ret.mtype;\\n  var rseqid = ret.rseqid;\\n  if (mtype == Thrift.MessageType.EXCEPTION) {\\n    var x = new Thrift.TApplicationException();\\n    x.read(this.input);\\n    this.input.readMessageEnd();\\n    throw x;\\n  }\\n  var result = new MapD_get_row_for_pixel_result();\\n  result.read(this.input);\\n  this.input.readMessageEnd();\\n\\n  if (null !== result.e) {\\n    throw result.e;\\n  }\\n  if (null !== result.success) {\\n    return result.success;\\n  }\\n  throw 'get_row_for_pixel failed: unknown result';\\n};\"\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module) {\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _helpers = __webpack_require__(10);\n\n\tvar helpers = _interopRequireWildcard(_helpers);\n\n\tvar _mapdClientV = __webpack_require__(11);\n\n\tvar _mapdClientV2 = _interopRequireDefault(_mapdClientV);\n\n\tvar _processQueryResults = __webpack_require__(117);\n\n\tvar _processQueryResults2 = _interopRequireDefault(_processQueryResults);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar _ref = isNodeRuntime() && __webpack_require__(116) || window,\n\t    TDatumType = _ref.TDatumType,\n\t    TEncodingType = _ref.TEncodingType,\n\t    TPixel = _ref.TPixel; // eslint-disable-line global-require\n\n\n\tvar MapDThrift = isNodeRuntime() && __webpack_require__(13); // eslint-disable-line global-require\n\tvar Thrift = isNodeRuntime() && __webpack_require__(14) || window.Thrift; // eslint-disable-line global-require\n\tvar thriftWrapper = Thrift;\n\tvar parseUrl = isNodeRuntime() && __webpack_require__(59).parse; // eslint-disable-line global-require\n\tif (isNodeRuntime()) {\n\t  // Because browser Thrift and Node Thrift are exposed slightly differently.\n\t  Thrift = Thrift.Thrift;\n\t  Thrift.Transport = thriftWrapper.TBufferedTransport;\n\t  Thrift.Protocol = thriftWrapper.TJSONProtocol;\n\t}\n\n\n\tvar COMPRESSION_LEVEL_DEFAULT = 3;\n\n\tfunction arrayify(maybeArray) {\n\t  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n\t}\n\n\tfunction isNodeRuntime() {\n\t  return typeof window === \"undefined\";\n\t}\n\n\tvar MapdCon = function () {\n\t  function MapdCon() {\n\t    var _this = this;\n\n\t    _classCallCheck(this, MapdCon);\n\n\t    this.updateQueryTimes = function (conId, queryId, estimatedQueryTime, execution_time_ms) {\n\t      _this.queryTimes[queryId] = execution_time_ms;\n\t    };\n\n\t    this.getFrontendViews = function (callback) {\n\t      if (_this._sessionId) {\n\t        _this._client[0].get_frontend_views(_this._sessionId[0], callback);\n\t      } else {\n\t        callback(new Error(\"No Session ID\"));\n\t      }\n\t    };\n\n\t    this.getFrontendViewsAsync = function () {\n\t      return new Promise(function (resolve, reject) {\n\t        _this.getFrontendViews(function (error, views) {\n\t          if (error) {\n\t            reject(error);\n\t          } else {\n\t            resolve(views);\n\t          }\n\t        });\n\t      });\n\t    };\n\n\t    this.getFrontendView = function (viewName, callback) {\n\t      if (_this._sessionId && viewName) {\n\t        _this._client[0].get_frontend_view(_this._sessionId[0], viewName, callback);\n\t      } else {\n\t        callback(new Error(\"No Session ID\"));\n\t      }\n\t    };\n\n\t    this.getFrontendViewAsync = function (viewName) {\n\t      return new Promise(function (resolve, reject) {\n\t        _this.getFrontendView(viewName, function (err, view) {\n\t          if (err) {\n\t            reject(err);\n\t          } else {\n\t            resolve(view);\n\t          }\n\t        });\n\t      });\n\t    };\n\n\t    this.getServerStatus = function (callback) {\n\t      _this._client[0].get_server_status(_this._sessionId[0], callback);\n\t    };\n\n\t    this.getServerStatusAsync = function () {\n\t      return new Promise(function (resolve, reject) {\n\t        _this.getServerStatus(function (err, result) {\n\t          if (err) {\n\t            reject(err);\n\t          } else {\n\t            resolve(result);\n\t          }\n\t        });\n\t      });\n\t    };\n\n\t    this.deleteFrontendViewAsync = function (viewName) {\n\t      return new Promise(function (resolve, reject) {\n\t        _this.deleteFrontendView(viewName, function (err) {\n\t          if (err) {\n\t            reject(err);\n\t          } else {\n\t            resolve(viewName);\n\t          }\n\t        });\n\t      });\n\t    };\n\n\t    this.getLinkView = function (link, callback) {\n\t      _this._client[0].get_link_view(_this._sessionId[0], link, callback);\n\t    };\n\n\t    this.getLinkViewAsync = function (link) {\n\t      return new Promise(function (resolve, reject) {\n\t        _this.getLinkView(link, function (err, theLink) {\n\t          if (err) {\n\t            reject(err);\n\t          } else {\n\t            resolve(theLink);\n\t          }\n\t        });\n\t      });\n\t    };\n\n\t    this.queryAsync = this.query;\n\n\t    this.createTableAsync = function (tableName, rowDescObj, tableType) {\n\t      return new Promise(function (resolve, reject) {\n\t        _this.createTable(tableName, rowDescObj, tableType, function (err) {\n\t          if (err) {\n\t            reject(err);\n\t          } else {\n\t            resolve();\n\t          }\n\t        });\n\t      });\n\t    };\n\n\t    this.importTableAsync = this.importTableAsyncWrapper(false);\n\t    this.importTableGeoAsync = this.importTableAsyncWrapper(true);\n\n\t    this._host = null;\n\t    this._user = null;\n\t    this._password = null;\n\t    this._port = null;\n\t    this._dbName = null;\n\t    this._client = null;\n\t    this._sessionId = null;\n\t    this._protocol = null;\n\t    this._datumEnum = {};\n\t    this._logging = false;\n\t    this._platform = \"mapd\";\n\t    this._nonce = 0;\n\t    this._balanceStrategy = \"adaptive\";\n\t    this._numConnections = 0;\n\t    this._lastRenderCon = 0;\n\t    this.queryTimes = {};\n\t    this.serverQueueTimes = null;\n\t    this.serverPingTimes = null;\n\t    this.pingCount = null;\n\t    this.DEFAULT_QUERY_TIME = 50;\n\t    this.NUM_PINGS_PER_SERVER = 4;\n\t    this.importerRowDesc = null;\n\n\t    // invoke initialization methods\n\t    this.invertDatumTypes();\n\n\t    this.processResults = function () {\n\t      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t      var result = arguments[1];\n\t      var callback = arguments[2];\n\n\t      var processor = (0, _processQueryResults2.default)(_this._logging, _this.updateQueryTimes);\n\t      var processResultsObject = processor(options, _this._datumEnum, result, callback);\n\t      return processResultsObject;\n\t    };\n\n\t    // return this to allow chaining off of instantiation\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Create a connection to the server, generating a client and session id.\n\t   * @param {Function} callback A callback that takes `(err, success)` as its signature.  Returns con singleton on success.\n\t   * @return {MapdCon} Object\n\t   *\n\t   * @example <caption>Connect to a MapD server:</caption>\n\t   * var con = new MapdCon()\n\t   *   .host('localhost')\n\t   *   .port('8080')\n\t   *   .dbName('myDatabase')\n\t   *   .user('foo')\n\t   *   .password('bar')\n\t   *   .connect((err, con) => console.log(con.sessionId()));\n\t   *\n\t   *   // [\"om9E9Ujgbhl6wIzWgLENncjWsaXRDYLy\"]\n\t   */\n\n\n\t  _createClass(MapdCon, [{\n\t    key: \"connect\",\n\t    value: function connect(callback) {\n\t      var _this2 = this;\n\n\t      if (this._sessionId) {\n\t        this.disconnect();\n\t      }\n\n\t      // TODO: should be its own function\n\t      var allAreArrays = Array.isArray(this._host) && Array.isArray(this._port) && Array.isArray(this._user) && Array.isArray(this._password) && Array.isArray(this._dbName);\n\t      if (!allAreArrays) {\n\t        return callback(\"All connection parameters must be arrays.\");\n\t      }\n\n\t      this._client = [];\n\t      this._sessionId = [];\n\n\t      if (!this._user[0]) {\n\t        return callback(\"Please enter a username.\");\n\t      } else if (!this._password[0]) {\n\t        return callback(\"Please enter a password.\");\n\t      } else if (!this._dbName[0]) {\n\t        return callback(\"Please enter a database.\");\n\t      } else if (!this._host[0]) {\n\t        return callback(\"Please enter a host name.\");\n\t      } else if (!this._port[0]) {\n\t        return callback(\"Please enter a port.\");\n\t      }\n\n\t      // now check to see if length of all arrays are the same and > 0\n\t      var hostLength = this._host.length;\n\t      if (hostLength < 1) {\n\t        return callback(\"Must have at least one server to connect to.\");\n\t      }\n\t      if (hostLength !== this._port.length || hostLength !== this._user.length || hostLength !== this._password.length || hostLength !== this._dbName.length) {\n\t        return callback(\"Array connection parameters must be of equal length.\");\n\t      }\n\n\t      if (!this._protocol) {\n\t        this._protocol = this._host.map(function () {\n\t          return window.location.protocol.replace(\":\", \"\");\n\t        });\n\t      }\n\n\t      var transportUrls = this.getEndpoints();\n\n\t      var _loop = function _loop(h) {\n\t        var client = null;\n\n\t        if (isNodeRuntime()) {\n\t          var _parseUrl = parseUrl(transportUrls[h]),\n\t              protocol = _parseUrl.protocol,\n\t              hostname = _parseUrl.hostname,\n\t              port = _parseUrl.port;\n\n\t          var connection = thriftWrapper.createHttpConnection(hostname, port, {\n\t            transport: thriftWrapper.TBufferedTransport,\n\t            protocol: thriftWrapper.TJSONProtocol,\n\t            path: \"/\",\n\t            headers: { Connection: \"close\" },\n\t            https: protocol === \"https:\"\n\t          });\n\t          connection.on(\"error\", console.error); // eslint-disable-line no-console\n\t          client = thriftWrapper.createClient(MapDThrift, connection);\n\t        } else {\n\t          var thriftTransport = new Thrift.Transport(transportUrls[h]);\n\t          var thriftProtocol = new Thrift.Protocol(thriftTransport);\n\t          client = new _mapdClientV2.default(thriftProtocol);\n\t        }\n\n\t        client.connect(_this2._user[h], _this2._password[h], _this2._dbName[h], function (error, sessionId) {\n\t          if (error) {\n\t            callback(error);\n\t            return;\n\t          }\n\t          _this2._client.push(client);\n\t          _this2._sessionId.push(sessionId);\n\t          _this2._numConnections = _this2._client.length;\n\t          callback(null, _this2);\n\t        });\n\t      };\n\n\t      for (var h = 0; h < hostLength; h++) {\n\t        _loop(h);\n\t      }\n\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"convertFromThriftTypes\",\n\t    value: function convertFromThriftTypes(fields) {\n\t      var fieldsArray = [];\n\t      // silly to change this from map to array\n\t      // - then later it turns back to map\n\t      for (var key in fields) {\n\t        if (fields.hasOwnProperty(key)) {\n\t          fieldsArray.push({\n\t            name: key,\n\t            type: this._datumEnum[fields[key].col_type.type],\n\t            is_array: fields[key].col_type.is_array,\n\t            is_dict: fields[key].col_type.encoding === TEncodingType.DICT // eslint-disable-line no-undef\n\t          });\n\t        }\n\t      }\n\t      return fieldsArray;\n\t    }\n\n\t    /**\n\t     * Disconnect from the server then clears the client and session values.\n\t     * @return {MapdCon} Object\n\t     * @param {Function} callback A callback that takes `(err, success)` as its signature.  Returns con singleton on success.\n\t     *\n\t     * @example <caption>Disconnect from the server:</caption>\n\t     *\n\t     * con.sessionId() // [\"om9E9Ujgbhl6wIzWgLENncjWsaXRDYLy\"]\n\t     * con.disconnect((err, con) => console.log(err, con))\n\t     * con.sessionId() === null;\n\t     */\n\n\t  }, {\n\t    key: \"disconnect\",\n\t    value: function disconnect(callback) {\n\t      var _this3 = this;\n\n\t      if (this._sessionId !== null) {\n\t        for (var c = 0; c < this._client.length; c++) {\n\t          this._client[c].disconnect(this._sessionId[c], function (error) {\n\t            // Success will return NULL\n\n\t            if (error) {\n\t              return callback(error, _this3);\n\t            }\n\t            _this3._sessionId = null;\n\t            _this3._client = null;\n\t            _this3._numConnections = 0;\n\t            _this3.serverPingTimes = null;\n\t            return callback(null, _this3);\n\t          });\n\t        }\n\t      }\n\t      return this;\n\t    }\n\n\t    /**\n\t     * Get the recent dashboards as a list of <code>TFrontendView</code> objects.\n\t     * These objects contain a value for the <code>view_name</code> property,\n\t     * but not for the <code>view_state</code> property.\n\t     * @return {Promise<TFrontendView[]>} An array which has all saved dashboards.\n\t     *\n\t     * @example <caption>Get the list of dashboards from the server:</caption>\n\t     *\n\t     * con.getFrontendViewsAsync().then((results) => console.log(results))\n\t     * // [TFrontendView, TFrontendView]\n\t     */\n\n\n\t    /**\n\t     * Get a dashboard object containing a value for the <code>view_state</code> property.\n\t     * This object contains a value for the <code>view_state</code> property,\n\t     * but not for the <code>view_name</code> property.\n\t     * @param {String} viewName the name of the dashboard\n\t     * @return {Promise.<Object>} An object that contains all data and metadata related to the dashboard\n\t     *\n\t     * @example <caption>Get a specific dashboard from the server:</caption>\n\t     *\n\t     * con.getFrontendViewAsync('dashboard_name').then((result) => console.log(result))\n\t     * // {TFrontendView}\n\t     */\n\n\n\t    /**\n\t     * Get the status of the server as a <code>TServerStatus</code> object.\n\t     * This includes whether the server is read-only,\n\t     * has backend rendering enabled, and the version number.\n\t     * @return {Promise.<Object>}\n\t     *\n\t     * @example <caption>Get the server status:</caption>\n\t     *\n\t     * con.getServerStatusAsync().then((result) => console.log(result))\n\t     * // {\n\t     * //   \"read_only\": false,\n\t     * //   \"version\": \"3.0.0dev-20170503-40e2de3\",\n\t     * //   \"rendering_enabled\": true,\n\t     * //   \"start_time\": 1493840131\n\t     * // }\n\t     */\n\n\t  }, {\n\t    key: \"createFrontendViewAsync\",\n\n\n\t    /**\n\t     * Add a new dashboard to the server.\n\t     * @param {String} viewName - the name of the new dashboard\n\t     * @param {String} viewState - the base64-encoded state string of the new dashboard\n\t     * @param {String} imageHash - the numeric hash of the dashboard thumbnail\n\t     * @param {String} metaData - Stringified metaData related to the view\n\t     * @return {Promise} Returns empty if success\n\t     *\n\t     * @example <caption>Add a new dashboard to the server:</caption>\n\t     *\n\t     * con.createFrontendViewAsync('newSave', 'viewstateBase64', null, 'metaData').then(res => console.log(res))\n\t     */\n\t    value: function createFrontendViewAsync(viewName, viewState, imageHash, metaData) {\n\t      var _this4 = this;\n\n\t      if (!this._sessionId) {\n\t        return new Promise(function (resolve, reject) {\n\t          reject(new Error(\"You are not connected to a server. Try running the connect method first.\"));\n\t        });\n\t      }\n\n\t      return Promise.all(this._client.map(function (client, i) {\n\t        return new Promise(function (resolve, reject) {\n\t          client.create_frontend_view(_this4._sessionId[i], viewName, viewState, imageHash, metaData, function (error, data) {\n\t            if (error) {\n\t              reject(error);\n\t            } else {\n\t              resolve(data);\n\t            }\n\t          });\n\t        });\n\t      }));\n\t    }\n\t  }, {\n\t    key: \"deleteFrontendView\",\n\t    value: function deleteFrontendView(viewName, callback) {\n\t      var _this5 = this;\n\n\t      if (!this._sessionId) {\n\t        throw new Error(\"You are not connected to a server. Try running the connect method first.\");\n\t      }\n\t      try {\n\t        this._client.forEach(function (client, i) {\n\t          // do we want to try each one individually so if we fail we keep going?\n\t          client.delete_frontend_view(_this5._sessionId[i], viewName, callback);\n\t        });\n\t      } catch (err) {\n\t        console.log(\"ERROR: Could not delete the frontend view. Check your session id.\", err);\n\t      }\n\t    }\n\n\t    /**\n\t     * Delete a dashboard object containing a value for the <code>view_state</code> property.\n\t     * @param {String} viewName - the name of the dashboard\n\t     * @return {Promise.<String>} Name of dashboard successfully deleted\n\t     *\n\t     * @example <caption>Delete a specific dashboard from the server:</caption>\n\t     *\n\t     * con.deleteFrontendViewAsync('dashboard_name').then(res => console.log(res))\n\t     */\n\n\t  }, {\n\t    key: \"createLinkAsync\",\n\n\n\t    /**\n\t     * Create a short hash to make it easy to share a link to a specific dashboard.\n\t     * @param {String} viewState - the base64-encoded state string of the new dashboard\n\t     * @param {String} metaData - Stringified metaData related to the link\n\t     * @return {Promise.<String[]>} link - A short hash of the dashboard used for URLs\n\t     *\n\t     * @example <caption>Create a link to the current state of a dashboard:</caption>\n\t     *\n\t     * con.createLinkAsync(\"eyJuYW1lIjoibXlkYXNoYm9hcmQifQ==\", 'metaData').then(res => console.log(res));\n\t     * // [\"28127951\"]\n\t     */\n\t    value: function createLinkAsync(viewState, metaData) {\n\t      var _this6 = this;\n\n\t      return Promise.all(this._client.map(function (client, i) {\n\t        return new Promise(function (resolve, reject) {\n\t          client.create_link(_this6._sessionId[i], viewState, metaData, function (error, data) {\n\t            if (error) {\n\t              reject(error);\n\t            } else {\n\t              var result = data.split(\",\").reduce(function (links, link) {\n\t                if (links.indexOf(link) === -1) {\n\t                  links.push(link);\n\t                }\n\t                return links;\n\t              }, []);\n\t              if (!result || result.length !== 1) {\n\t                reject(new Error(\"Different links were created on connection\"));\n\t              } else {\n\t                resolve(result.join());\n\t              }\n\t            }\n\t          });\n\t        });\n\t      }));\n\t    }\n\n\t    /**\n\t     * Get a fully-formed dashboard object from a generated share link.\n\t     * This object contains the given link for the <code>view_name</code> property,\n\t     * @param {String} link - the short hash of the dashboard, see {@link createLink}\n\t     * @return {Promise.<Object>} Object of the dashboard and metadata\n\t     *\n\t     * @example <caption>Get a dashboard from a link:</caption>\n\t     *\n\t     * con.getLinkViewAsync('28127951').then(res => console.log(res))\n\t     * //  {\n\t     * //    \"view_name\": \"28127951\",\n\t     * //    \"view_state\": \"eyJuYW1lIjoibXlkYXNoYm9hcmQifQ==\",\n\t     * //    \"image_hash\": \"\",\n\t     * //    \"update_time\": \"2017-04-28T21:34:01Z\",\n\t     * //    \"view_metadata\": \"metaData\"\n\t     * //  }\n\t     */\n\n\t  }, {\n\t    key: \"detectColumnTypes\",\n\t    value: function detectColumnTypes(fileName, copyParams, callback) {\n\t      var thriftCopyParams = helpers.convertObjectToThriftCopyParams(copyParams);\n\t      this._client[0].detect_column_types(this._sessionId[0], fileName, thriftCopyParams, callback);\n\t    }\n\n\t    /**\n\t     * Asynchronously get the data from an importable file,\n\t     * such as a .csv or plaintext file with a header.\n\t     * @param {String} fileName - the name of the importable file\n\t     * @param {TCopyParams} copyParams - see {@link TCopyParams}\n\t     * @returns {Promise.<TDetectResult>} An object which has copy_params and row_set\n\t     *\n\t     * @example <caption>Get data from table_data.csv:</caption>\n\t     *\n\t     * var copyParams = new TCopyParams();\n\t     * con.detectColumnTypesAsync('table_data.csv', copyParams).then(res => console.log(res))\n\t     * // TDetectResult {row_set: TRowSet, copy_params: TCopyParams}\n\t     *\n\t     */\n\n\t  }, {\n\t    key: \"detectColumnTypesAsync\",\n\t    value: function detectColumnTypesAsync(fileName, copyParams) {\n\t      var _this7 = this;\n\n\t      return new Promise(function (resolve, reject) {\n\t        _this7.detectColumnTypes.bind(_this7, fileName, copyParams)(function (err, res) {\n\t          if (err) {\n\t            reject(err);\n\t          } else {\n\t            _this7.importerRowDesc = res.row_set.row_desc;\n\t            resolve(res);\n\t          }\n\t        });\n\t      });\n\t    }\n\n\t    /**\n\t     * Submit a query to the database and process the results.\n\t     * @param {String} query The query to perform\n\t     * @param {Object} options the options for the query\n\t     * @param {Function} callback that takes `(err, result) => result`\n\t     * @returns {Object} The result of the query\n\t     *\n\t     * @example <caption>create a query</caption>\n\t     *\n\t     * var query = \"SELECT count(*) AS n FROM tweets_nov_feb WHERE country='CO'\";\n\t     * var options = {};\n\t     *\n\t     * con.query(query, options, function(err, result) {\n\t     *        console.log(result)\n\t     *      });\n\t     *\n\t     */\n\n\t  }, {\n\t    key: \"query\",\n\t    value: function query(_query, options, callback) {\n\t      var _this8 = this;\n\n\t      var columnarResults = true;\n\t      var eliminateNullRows = false;\n\t      var queryId = null;\n\t      var returnTiming = false;\n\t      var limit = -1;\n\t      if (options) {\n\t        columnarResults = options.hasOwnProperty(\"columnarResults\") ? options.columnarResults : columnarResults;\n\t        eliminateNullRows = options.hasOwnProperty(\"eliminateNullRows\") ? options.eliminateNullRows : eliminateNullRows;\n\t        queryId = options.hasOwnProperty(\"queryId\") ? options.queryId : queryId;\n\t        returnTiming = options.hasOwnProperty(\"returnTiming\") ? options.returnTiming : returnTiming;\n\t        limit = options.hasOwnProperty(\"limit\") ? options.limit : limit;\n\t      }\n\n\t      var lastQueryTime = queryId in this.queryTimes ? this.queryTimes[queryId] : this.DEFAULT_QUERY_TIME;\n\n\t      var curNonce = (this._nonce++).toString();\n\n\t      var conId = 0;\n\n\t      var processResultsOptions = {\n\t        returnTiming: returnTiming,\n\t        eliminateNullRows: eliminateNullRows,\n\t        query: _query,\n\t        queryId: queryId,\n\t        conId: conId,\n\t        estimatedQueryTime: lastQueryTime\n\t      };\n\n\t      try {\n\t        if (callback) {\n\t          this._client[conId].sql_execute(this._sessionId[conId], _query, columnarResults, curNonce, limit, function (error, result) {\n\t            if (error) {\n\t              callback(error);\n\t            } else {\n\t              _this8.processResults(processResultsOptions, result, callback);\n\t            }\n\t          });\n\t          return curNonce;\n\t        } else if (!callback) {\n\t          var SQLExecuteResult = this._client[conId].sql_execute(this._sessionId[conId], _query, columnarResults, curNonce, limit);\n\t          return this.processResults(processResultsOptions, SQLExecuteResult);\n\t        }\n\t      } catch (err) {\n\t        if (err.name === \"NetworkError\") {\n\t          this.removeConnection(conId);\n\t          if (this._numConnections === 0) {\n\t            err.msg = \"No remaining database connections\";\n\t            throw err;\n\t          }\n\t          this.query(_query, options, callback);\n\t        } else if (callback) {\n\t          callback(err);\n\t        } else {\n\t          throw err;\n\t        }\n\t      }\n\t    }\n\n\t    /** @deprecated will default to query */\n\n\t  }, {\n\t    key: \"validateQuery\",\n\n\n\t    /**\n\t     * Submit a query to validate whether the backend can create a result set based on the SQL statement.\n\t     * @param {String} query The query to perform\n\t     * @returns {Promise.<Object>} The result of whether the query is valid\n\t     *\n\t     * @example <caption>create a query</caption>\n\t     *\n\t     * var query = \"SELECT count(*) AS n FROM tweets_nov_feb WHERE country='CO'\";\n\t     *\n\t     * con.validateQuery(query).then(res => console.log(res))\n\t     *\n\t     * // [{\n\t     * //    \"name\": \"n\",\n\t     * //    \"type\": \"INT\",\n\t     * //    \"is_array\": false,\n\t     * //    \"is_dict\": false\n\t     * //  }]\n\t     *\n\t     */\n\t    value: function validateQuery(query) {\n\t      var _this9 = this;\n\n\t      return new Promise(function (resolve, reject) {\n\t        _this9._client[0].sql_validate(_this9._sessionId[0], query, function (error, res) {\n\t          if (error) {\n\t            reject(error);\n\t          } else {\n\t            resolve(_this9.convertFromThriftTypes(res));\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: \"removeConnection\",\n\t    value: function removeConnection(conId) {\n\t      if (conId < 0 || conId >= this.numConnections) {\n\t        var err = {\n\t          msg: \"Remove connection id invalid\"\n\t        };\n\t        throw err;\n\t      }\n\t      this._client.splice(conId, 1);\n\t      this._sessionId.splice(conId, 1);\n\t      this._numConnections--;\n\t    }\n\t  }, {\n\t    key: \"getTables\",\n\t    value: function getTables(callback) {\n\t      this._client[0].get_tables(this._sessionId[0], function (error, tables) {\n\t        if (error) {\n\t          callback(error);\n\t        } else {\n\t          callback(null, tables.map(function (table) {\n\t            return {\n\t              name: table,\n\t              label: \"obs\"\n\t            };\n\t          }));\n\t        }\n\t      });\n\t    }\n\n\t    /**\n\t     * Get the names of the databases that exist on the current session's connectdion.\n\t     * @return {Promise.<Object[]>} list of table objects containing the label and table names.\n\t     *\n\t     * @example <caption>Get the list of tables from a connection:</caption>\n\t     *\n\t     *  con.getTablesAsync().then(res => console.log(res))\n\t     *\n\t     *  //  [{\n\t     *  //    label: 'obs', // deprecated property\n\t     *  //    name: 'myDatabaseName'\n\t     *  //   },\n\t     *  //  ...]\n\t     */\n\n\t  }, {\n\t    key: \"getTablesAsync\",\n\t    value: function getTablesAsync() {\n\t      var _this10 = this;\n\n\t      return new Promise(function (resolve, reject) {\n\t        _this10.getTables.bind(_this10)(function (error, tables) {\n\t          if (error) {\n\t            reject(error);\n\t          } else {\n\t            resolve(tables);\n\t          }\n\t        });\n\t      });\n\t    }\n\n\t    /**\n\t     * Create an array-like object from {@link TDatumType} by\n\t     * flipping the string key and numerical value around.\n\t     *\n\t     * @returns {Undefined} This function does not return anything\n\t     */\n\n\t  }, {\n\t    key: \"invertDatumTypes\",\n\t    value: function invertDatumTypes() {\n\t      var datumType = TDatumType; // eslint-disable-line no-undef\n\t      for (var key in datumType) {\n\t        if (datumType.hasOwnProperty(key)) {\n\t          this._datumEnum[datumType[key]] = key;\n\t        }\n\t      }\n\t    }\n\n\t    /**\n\t     * Get a list of field objects for a given table.\n\t     * @param {String} tableName - name of table containing field names\n\t     * @param {Function} callback - (err, results)\n\t     * @return {Array<Object>} fields - the formmatted list of field objects\n\t     *\n\t     * @example <caption>Get the list of fields from a specific table:</caption>\n\t     *\n\t     * con.getFields('flights', (err, res) => console.log(res))\n\t     * // [{\n\t     *   name: 'fieldName',\n\t     *   type: 'BIGINT',\n\t     *   is_array: false,\n\t     *   is_dict: false\n\t     * }, ...]\n\t     */\n\n\t  }, {\n\t    key: \"getFields\",\n\t    value: function getFields(tableName, callback) {\n\t      var _this11 = this;\n\n\t      this._client[0].get_table_details(this._sessionId[0], tableName, function (error, fields) {\n\t        if (fields) {\n\t          var rowDict = fields.row_desc.reduce(function (accum, value) {\n\t            accum[value.col_name] = value;\n\t            return accum;\n\t          }, {});\n\t          callback(null, _this11.convertFromThriftTypes(rowDict));\n\t        } else {\n\t          callback(new Error(\"Table (\" + tableName + \") not found\" + error));\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: \"createTable\",\n\t    value: function createTable(tableName, rowDescObj, tableType, callback) {\n\t      if (!this._sessionId) {\n\t        throw new Error(\"You are not connected to a server. Try running the connect method first.\");\n\t      }\n\n\t      var thriftRowDesc = helpers.mutateThriftRowDesc(rowDescObj, this.importerRowDesc);\n\n\t      for (var c = 0; c < this._numConnections; c++) {\n\t        this._client[c].create_table(this._sessionId[c], tableName, thriftRowDesc, tableType, function (err) {\n\t          if (err) {\n\t            callback(err);\n\t          } else {\n\t            callback();\n\t          }\n\t        });\n\t      }\n\t    }\n\n\t    /**\n\t     * Create a table and persist it to the backend.\n\t     * @param {String} tableName - desired name of the new table\n\t     * @param {Array<TColumnType>} rowDescObj - fields of the new table\n\t     * @param {Number<TTableType>} tableType - the types of tables a user can import into the db\n\t     * @return {Promise.<undefined>} it will either catch an error or return undefined on success\n\t     *\n\t     * @example <caption>Create a new table:</caption>\n\t     *\n\t     *  con.createTable('mynewtable', [TColumnType, TColumnType, ...], 0).then(res => console.log(res));\n\t     *  // undefined\n\t     */\n\n\t  }, {\n\t    key: \"importTable\",\n\t    value: function importTable(tableName, fileName, copyParams, rowDescObj, isShapeFile, callback) {\n\t      if (!this._sessionId) {\n\t        throw new Error(\"You are not connected to a server. Try running the connect method first.\");\n\t      }\n\n\t      var thriftCopyParams = helpers.convertObjectToThriftCopyParams(copyParams);\n\t      var thriftRowDesc = helpers.mutateThriftRowDesc(rowDescObj, this.importerRowDesc);\n\n\t      var thriftCallBack = function thriftCallBack(err, res) {\n\t        if (err) {\n\t          callback(err);\n\t        } else {\n\t          callback(null, res);\n\t        }\n\t      };\n\n\t      for (var c = 0; c < this._numConnections; c++) {\n\t        if (isShapeFile) {\n\t          this._client[c].import_geo_table(this._sessionId[c], tableName, fileName, thriftCopyParams, thriftRowDesc, thriftCallBack);\n\t        } else {\n\t          this._client[c].import_table(this._sessionId[c], tableName, fileName, thriftCopyParams, thriftCallBack);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"importTableAsyncWrapper\",\n\t    value: function importTableAsyncWrapper(isShapeFile) {\n\t      var _this12 = this;\n\n\t      return function (tableName, fileName, copyParams, headers) {\n\t        return new Promise(function (resolve, reject) {\n\t          _this12.importTable(tableName, fileName, copyParams, headers, isShapeFile, function (err, link) {\n\t            if (err) {\n\t              reject(err);\n\t            } else {\n\t              resolve(link);\n\t            }\n\t          });\n\t        });\n\t      };\n\t    }\n\n\t    /**\n\t     * Import a delimited table from a file.\n\t     * @param {String} tableName - desired name of the new table\n\t     * @param {String} fileName\n\t     * @param {TCopyParams} copyParams - see {@link TCopyParams}\n\t     * @param {TColumnType[]} headers -- a colleciton of metadata related to the table headers\n\t     */\n\n\n\t    /**\n\t     * Import a geo table from a file.\n\t     * @param {String} tableName - desired name of the new table\n\t     * @param {String} fileName\n\t     * @param {TCopyParams} copyParams - see {@link TCopyParams}\n\t     * @param {TColumnType[]} headers -- a colleciton of metadata related to the table headers\n\t     */\n\n\t  }, {\n\t    key: \"renderVega\",\n\n\n\t    /**\n\t     * Use for backend rendering. This method will fetch a PNG image\n\t     * that is a render of the vega json object.\n\t     *\n\t     * @param {Number} widgetid the widget id of the calling widget\n\t     * @param {String} vega the vega json\n\t     * @param {Object} options the options for the render query\n\t     * @param {Number} options.compressionLevel the png compression level.\n\t     *                  range 1 (low compression, faster) to 10 (high compression, slower).\n\t     *                  Default 3.\n\t     * @param {Function} callback takes `(err, success)` as its signature.  Returns con singleton on success.\n\t     *\n\t     * @returns {Image} Base 64 Image\n\t     */\n\t    value: function renderVega(widgetid, vega, options, callback) /* istanbul ignore next */{\n\t      var _this13 = this;\n\n\t      var queryId = null;\n\t      var compressionLevel = COMPRESSION_LEVEL_DEFAULT;\n\t      if (options) {\n\t        queryId = options.hasOwnProperty(\"queryId\") ? options.queryId : queryId;\n\t        compressionLevel = options.hasOwnProperty(\"compressionLevel\") ? options.compressionLevel : compressionLevel;\n\t      }\n\n\t      var lastQueryTime = queryId in this.queryTimes ? this.queryTimes[queryId] : this.DEFAULT_QUERY_TIME;\n\n\t      var curNonce = (this._nonce++).toString();\n\n\t      var conId = 0;\n\t      this._lastRenderCon = conId;\n\n\t      var processResultsOptions = {\n\t        isImage: true,\n\t        query: \"render: \" + vega,\n\t        queryId: queryId,\n\t        conId: conId,\n\t        estimatedQueryTime: lastQueryTime\n\t      };\n\n\t      try {\n\t        if (!callback) {\n\t          var renderResult = this._client[conId].render_vega(this._sessionId[conId], widgetid, vega, compressionLevel, curNonce);\n\t          return this.processResults(processResultsOptions, renderResult);\n\t        }\n\n\t        this._client[conId].render_vega(this._sessionId[conId], widgetid, vega, compressionLevel, curNonce, function (error, result) {\n\t          if (error) {\n\t            callback(error);\n\t          } else {\n\t            _this13.processResults(processResultsOptions, result, callback);\n\t          }\n\t        });\n\t      } catch (err) {\n\t        throw err;\n\t      }\n\n\t      return curNonce;\n\t    }\n\n\t    /**\n\t     * Used primarily for backend rendered maps, this method will fetch the row\n\t     * for a specific table that was last rendered at a pixel.\n\t     *\n\t     * @param {widgetId} Number - the widget id of the caller\n\t     * @param {TPixel} pixel - the pixel (lower left-hand corner is pixel (0,0))\n\t     * @param {String} tableName - the table containing the geo data\n\t     * @param {Object} tableColNamesMap - object of tableName -> array of col names\n\t     * @param {Array<Function>} callbacks\n\t     * @param {Number} [pixelRadius=2] - the radius around the primary pixel to search\n\t     */\n\n\t  }, {\n\t    key: \"getResultRowForPixel\",\n\t    value: function getResultRowForPixel(widgetId, pixel, tableColNamesMap, callbacks) /* istanbul ignore next */{\n\t      var pixelRadius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n\n\t      if (!(pixel instanceof TPixel)) {\n\t        pixel = new TPixel(pixel);\n\t      }\n\t      var columnFormat = true; // BOOL\n\t      var curNonce = (this._nonce++).toString();\n\t      try {\n\t        if (!callbacks) {\n\t          return this.processPixelResults(undefined, // eslint-disable-line no-undefined\n\t          this._client[this._lastRenderCon].get_result_row_for_pixel(this._sessionId[this._lastRenderCon], widgetId, pixel, tableColNamesMap, columnFormat, pixelRadius, curNonce));\n\t        }\n\t        this._client[this._lastRenderCon].get_result_row_for_pixel(this._sessionId[this._lastRenderCon], widgetId, pixel, tableColNamesMap, columnFormat, pixelRadius, curNonce, this.processPixelResults.bind(this, callbacks));\n\t      } catch (err) {\n\t        throw err;\n\t      }\n\t      return curNonce;\n\t    }\n\n\t    /**\n\t     * Formats the pixel results into the same pattern as textual results.\n\t     *\n\t     * @param {Array<Function>} callbacks a collection of callbacks\n\t     * @param {Object} error an error if one was thrown, otherwise null\n\t     * @param {Array|Object} results unformatted results of pixel rowId information\n\t     *\n\t     * @returns {Object} An object with the pixel results formatted for display\n\t     */\n\n\t  }, {\n\t    key: \"processPixelResults\",\n\t    value: function processPixelResults(callbacks, error, results) {\n\t      callbacks = Array.isArray(callbacks) ? callbacks : [callbacks];\n\t      results = Array.isArray(results) ? results.pixel_rows : [results];\n\t      var numPixels = results.length;\n\t      var processResultsOptions = {\n\t        isImage: false,\n\t        eliminateNullRows: false,\n\t        query: \"pixel request\",\n\t        queryId: -2\n\t      };\n\t      for (var p = 0; p < numPixels; p++) {\n\t        results[p].row_set = this.processResults(processResultsOptions, results[p]);\n\t      }\n\t      if (!callbacks) {\n\t        return results;\n\t      }\n\t      callbacks.pop()(error, results);\n\t    }\n\n\t    /**\n\t     * Get or set the session ID used by the server to serve the correct data.\n\t     * This is typically set by {@link connect} and should not be set manually.\n\t     * @param {Number} sessionId - The session ID of the current connection\n\t     * @return {Number|MapdCon} - The session ID or the MapdCon itself\n\t     *\n\t     * @example <caption>Get the session id:</caption>\n\t     *\n\t     *  con.sessionId();\n\t     * // sessionID === 3145846410\n\t     *\n\t     * @example <caption>Set the session id:</caption>\n\t     * var con = new MapdCon().connect().sessionId(3415846410);\n\t     * // NOTE: It is generally unsafe to set the session id manually.\n\t     */\n\n\t  }, {\n\t    key: \"sessionId\",\n\t    value: function sessionId(_sessionId) {\n\t      if (!arguments.length) {\n\t        return this._sessionId;\n\t      }\n\t      this._sessionId = _sessionId;\n\t      return this;\n\t    }\n\n\t    /**\n\t     * Get or set the connection server hostname.\n\t     * This is is typically the first method called after instantiating a new MapdCon.\n\t     * @param {String} host - The hostname address\n\t     * @return {String|MapdCon} - The hostname or the MapdCon itself\n\t     *\n\t     * @example <caption>Set the hostname:</caption>\n\t     * var con = new MapdCon().host('localhost');\n\t     *\n\t     * @example <caption>Get the hostname:</caption>\n\t     * var host = con.host();\n\t     * // host === 'localhost'\n\t     */\n\n\t  }, {\n\t    key: \"host\",\n\t    value: function host(_host) {\n\t      if (!arguments.length) {\n\t        return this._host;\n\t      }\n\t      this._host = arrayify(_host);\n\t      return this;\n\t    }\n\n\t    /**\n\t     * Get or set the connection port.\n\t     * @param {String} port - The port to connect on\n\t     * @return {String|MapdCon} - The port or the MapdCon itself\n\t     *\n\t     * @example <caption>Set the port:</caption>\n\t     * var con = new MapdCon().port('8080');\n\t     *\n\t     * @example <caption>Get the port:</caption>\n\t     * var port = con.port();\n\t     * // port === '8080'\n\t     */\n\n\t  }, {\n\t    key: \"port\",\n\t    value: function port(_port) {\n\t      if (!arguments.length) {\n\t        return this._port;\n\t      }\n\t      this._port = arrayify(_port);\n\t      return this;\n\t    }\n\n\t    /**\n\t     * Get or set the username to authenticate with.\n\t     * @param {String} user - The username to authenticate with\n\t     * @return {String|MapdCon} - The username or the MapdCon itself\n\t     *\n\t     * @example <caption>Set the username:</caption>\n\t     * var con = new MapdCon().user('foo');\n\t     *\n\t     * @example <caption>Get the username:</caption>\n\t     * var username = con.user();\n\t     * // user === 'foo'\n\t     */\n\n\t  }, {\n\t    key: \"user\",\n\t    value: function user(_user) {\n\t      if (!arguments.length) {\n\t        return this._user;\n\t      }\n\t      this._user = arrayify(_user);\n\t      return this;\n\t    }\n\n\t    /**\n\t     * Get or set the user's password to authenticate with.\n\t     * @param {String} password - The password to authenticate with\n\t     * @return {String|MapdCon} - The password or the MapdCon itself\n\t     *\n\t     * @example <caption>Set the password:</caption>\n\t     * var con = new MapdCon().password('bar');\n\t     *\n\t     * @example <caption>Get the username:</caption>\n\t     * var password = con.password();\n\t     * // password === 'bar'\n\t     */\n\n\t  }, {\n\t    key: \"password\",\n\t    value: function password(_password) {\n\t      if (!arguments.length) {\n\t        return this._password;\n\t      }\n\t      this._password = arrayify(_password);\n\t      return this;\n\t    }\n\n\t    /**\n\t     * Get or set the name of the database to connect to.\n\t     * @param {String} dbName - The database to connect to\n\t     * @return {String|MapdCon} - The name of the database or the MapdCon itself\n\t     *\n\t     * @example <caption>Set the database name:</caption>\n\t     * var con = new MapdCon().dbName('myDatabase');\n\t     *\n\t     * @example <caption>Get the database name:</caption>\n\t     * var dbName = con.dbName();\n\t     * // dbName === 'myDatabase'\n\t     */\n\n\t  }, {\n\t    key: \"dbName\",\n\t    value: function dbName(_dbName) {\n\t      if (!arguments.length) {\n\t        return this._dbName;\n\t      }\n\t      this._dbName = arrayify(_dbName);\n\t      return this;\n\t    }\n\n\t    /**\n\t     * Whether the raw queries strings will be logged to the console.\n\t     * Used primarily for debugging and defaults to <code>false</code>.\n\t     * @param {Boolean} logging - Set to true to enable logging\n\t     * @return {Boolean|MapdCon} - The current logging flag or MapdCon itself\n\t     *\n\t     * @example <caption>Set logging to true:</caption>\n\t     * var con = new MapdCon().logging(true);\n\t     *\n\t     * @example <caption>Get the logging flag:</caption>\n\t     * var isLogging = con.logging();\n\t     * // isLogging === true\n\t     */\n\n\t  }, {\n\t    key: \"logging\",\n\t    value: function logging(_logging) {\n\t      if (typeof _logging === \"undefined\") {\n\t        return this._logging;\n\t      } else if (typeof _logging !== \"boolean\") {\n\t        return \"logging can only be set with boolean values\";\n\t      }\n\t      this._logging = _logging;\n\t      var isEnabledTxt = _logging ? \"enabled\" : \"disabled\";\n\t      return \"SQL logging is now \" + isEnabledTxt;\n\t    }\n\n\t    /**\n\t     * The name of the platform.\n\t     * @param {String} platform - The platform, default is \"mapd\"\n\t     * @return {String|MapdCon} - The platform or the MapdCon itself\n\t     *\n\t     * @example <caption>Set the platform name:</caption>\n\t     * var con = new MapdCon().platform('myPlatform');\n\t     *\n\t     * @example <caption>Get the platform name:</caption>\n\t     * var platform = con.platform();\n\t     * // platform === 'myPlatform'\n\t     */\n\n\t  }, {\n\t    key: \"platform\",\n\t    value: function platform(_platform) {\n\t      if (!arguments.length) {\n\t        return this._platform;\n\t      }\n\t      this._platform = _platform;\n\t      return this;\n\t    }\n\n\t    /**\n\t     * Get the number of connections that are currently open.\n\t     * @return {Number} - number of open connections\n\t     *\n\t     * @example <caption>Get the number of connections:</caption>\n\t     *\n\t     * var numConnections = con.numConnections();\n\t     * // numConnections === 1\n\t     */\n\n\t  }, {\n\t    key: \"numConnections\",\n\t    value: function numConnections() {\n\t      return this._numConnections;\n\t    }\n\n\t    /**\n\t     * The protocol to use for requests.\n\t     * @param {String} protocol - http or https\n\t     * @return {String|MapdCon} - protocol or MapdCon itself\n\t     *\n\t     * @example <caption>Set the protocol:</caption>\n\t     * var con = new MapdCon().protocol('http');\n\t     *\n\t     * @example <caption>Get the protocol:</caption>\n\t     * var protocol = con.protocol();\n\t     * // protocol === 'http'\n\t     */\n\n\t  }, {\n\t    key: \"protocol\",\n\t    value: function protocol(_protocol) {\n\t      if (!arguments.length) {\n\t        return this._protocol;\n\t      }\n\t      this._protocol = arrayify(_protocol);\n\t      return this;\n\t    }\n\n\t    /**\n\t     * Generates a list of endpoints from the connection params.\n\t     * @return {Array<String>} - list of endpoints\n\t     *\n\t     * @example <caption>Get the endpoints:</caption>\n\t     * var con = new MapdCon().protocol('http').host('localhost').port('8000');\n\t     * var endpoints = con.getEndpoints();\n\t     * // endpoints === [ 'http://localhost:8000' ]\n\t     */\n\n\t  }, {\n\t    key: \"getEndpoints\",\n\t    value: function getEndpoints() {\n\t      var _this14 = this;\n\n\t      return this._host.map(function (host, i) {\n\t        return _this14._protocol[i] + \"://\" + host + \":\" + _this14._port[i];\n\t      });\n\t    }\n\t  }]);\n\n\t  return MapdCon;\n\t}();\n\n\t// Set a global mapdcon function when mapdcon is brought in via script tag.\n\n\n\tif (( false ? \"undefined\" : _typeof(module)) === \"object\" && module.exports) {\n\t  if (!isNodeRuntime()) {\n\t    window.MapdCon = MapdCon;\n\t  }\n\t}\n\tmodule.exports = MapdCon;\n\texports.default = MapdCon;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)(module)))\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar convertObjectToThriftCopyParams = exports.convertObjectToThriftCopyParams = function convertObjectToThriftCopyParams(obj) {\n\t  return new TCopyParams(obj);\n\t}; // eslint-disable-line no-undef\n\n\tvar mutateThriftRowDesc = exports.mutateThriftRowDesc = function mutateThriftRowDesc(rowDescArray, thriftRowDescArray) {\n\t  rowDescArray.forEach(function (obj, i) {\n\t    thriftRowDescArray[i].col_name = obj.clean_col_name;\n\t    thriftRowDescArray[i].col_type.encoding = obj.col_type.encoding;\n\t    thriftRowDescArray[i].col_type.type = obj.col_type.type;\n\t  });\n\t  return thriftRowDescArray;\n\t};\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = MapDClientV2;\n\n\tvar _wrapWithErrorHandling = __webpack_require__(12);\n\n\tvar MapDClient = typeof window !== \"undefined\" && window.MapDClient || __webpack_require__(13).Client; // eslint-disable-line global-require\n\n\tfunction MapDClientV2(protocol) {\n\t  MapDClient.call(this, protocol);\n\t}\n\n\tMapDClientV2.prototype = Object.create(MapDClient.prototype);\n\n\tMapDClientV2.prototype.connect = function () {\n\t  var connectWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"connect\");\n\t  return connectWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.sql_execute = function () {\n\t  var SQLExecuteWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"sql_execute\");\n\t  return SQLExecuteWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.sql_validate = function () {\n\t  var SQLValidateWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"sql_validate\");\n\t  return SQLValidateWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.render = function () {\n\t  var renderWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"render\");\n\t  return renderWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\t/* istanbul ignore next */\n\tMapDClientV2.prototype.render_vega = function () {\n\t  var renderVegaWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"render_vega\");\n\t  return renderVegaWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.get_result_row_for_pixel = function () {\n\t  var getResultRowForPixelWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"get_result_row_for_pixel\");\n\t  return getResultRowForPixelWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.delete_frontend_view = function () {\n\t  var deleteFrontendViewWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"delete_frontend_view\");\n\t  return deleteFrontendViewWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.get_tables = function () {\n\t  var getTablesWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"get_tables\");\n\t  return getTablesWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.get_table_details = function () {\n\t  var getTableDetailsWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"get_table_details\");\n\t  return getTableDetailsWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.get_fields = function () {\n\t  var getFieldsWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"get_fields\");\n\t  return getFieldsWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.get_server_status = function () {\n\t  var getServerStatusWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"get_server_status\");\n\t  return getServerStatusWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.get_frontend_views = function () {\n\t  var getFrontEndViewsWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"get_frontend_views\");\n\t  return getFrontEndViewsWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.get_frontend_view = function () {\n\t  var getFrontEndViewWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"get_frontend_view\");\n\t  return getFrontEndViewWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.create_link = function () {\n\t  var createLinkWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"create_link\");\n\t  return createLinkWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.get_link_view = function () {\n\t  var getLinkViewWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"get_link_view\");\n\t  return getLinkViewWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.detect_column_types = function () {\n\t  var detectColumnTypesWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"detect_column_types\");\n\t  return detectColumnTypesWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.create_frontend_view = function () {\n\t  var createFrontEndViewWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"create_frontend_view\");\n\t  return createFrontEndViewWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.send_create_table = function () {\n\t  var sendCreateTableWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"send_create_table\");\n\t  return sendCreateTableWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.send_import_table = function () {\n\t  var sendImportTableWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"send_import_table\");\n\t  return sendImportTableWithErrorHandling.apply(undefined, arguments);\n\t};\n\n\tMapDClientV2.prototype.detect_column_types = function () {\n\t  var detectColumnTypesWithErrorHandling = (0, _wrapWithErrorHandling.wrapWithErrorHandling)(this, \"detect_column_types\");\n\t  return detectColumnTypesWithErrorHandling.apply(undefined, arguments);\n\t};\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.isResultError = isResultError;\n\texports.createResultError = createResultError;\n\texports.wrapMethod = wrapMethod;\n\texports.wrapWithErrorHandling = wrapWithErrorHandling;\n\tvar MapDClient = typeof window !== \"undefined\" && window.MapDClient || __webpack_require__(13).Client; // eslint-disable-line global-require\n\tvar TMapDException = typeof window !== \"undefined\" && window.TMapDException || __webpack_require__(116).TMapDException; // eslint-disable-line global-require\n\tvar Thrift = typeof window !== \"undefined\" && window.Thrift || __webpack_require__(14).Thrift; // eslint-disable-line global-require\n\n\tfunction isResultError(result) {\n\t  return result instanceof Thrift.TException || result instanceof Error;\n\t}\n\n\tfunction createResultError(result) {\n\t  if (result instanceof TMapDException) {\n\t    return new Error(result.error_msg);\n\t  } else if (typeof result.message === \"undefined\") {\n\t    return new Error(\"Unspecified Error\");\n\t  } else {\n\t    return new Error(result.message);\n\t  }\n\t}\n\n\tfunction wrapMethod(context, method, isError) {\n\t  // eslint-disable-line consistent-this\n\t  return function wrapped() {\n\t    var arity = MapDClient.prototype[method].length;\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    if (args.length === arity) {\n\t      var _MapDClient$prototype;\n\n\t      var callback = args.pop();\n\t      (_MapDClient$prototype = MapDClient.prototype[method]).call.apply(_MapDClient$prototype, [context].concat(args, [function (result) {\n\t        if (isError(result)) {\n\t          callback(createResultError(result));\n\t        } else {\n\t          callback(null, result);\n\t        }\n\t      }]));\n\t    } else if (args.length === arity - 1) {\n\t      var _MapDClient$prototype2;\n\n\t      var result = (_MapDClient$prototype2 = MapDClient.prototype[method]).call.apply(_MapDClient$prototype2, [context].concat(args));\n\t      if (isError(result)) {\n\t        throw createResultError(result);\n\t      }\n\t      return result;\n\t    } else {\n\t      throw new Error(\"Insufficient arguments to run this method \" + method);\n\t    }\n\t  };\n\t}\n\n\tfunction wrapWithErrorHandling(context, method) {\n\t  // eslint-disable-line consistent-this\n\t  return wrapMethod(context, method, isResultError);\n\t}\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t//\n\t// Autogenerated by Thrift Compiler (0.10.0)\n\t//\n\t// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n\t//\n\t\"use strict\";\n\n\tvar thrift = __webpack_require__(14);\n\tvar Thrift = thrift.Thrift;\n\tvar Q = thrift.Q;\n\n\tvar ttypes = __webpack_require__(116);\n\t//HELPER FUNCTIONS AND STRUCTURES\n\n\tvar MapD_connect_args = function MapD_connect_args(args) {\n\t  this.user = null;\n\t  this.passwd = null;\n\t  this.dbname = null;\n\t  if (args) {\n\t    if (args.user !== undefined && args.user !== null) {\n\t      this.user = args.user;\n\t    }\n\t    if (args.passwd !== undefined && args.passwd !== null) {\n\t      this.passwd = args.passwd;\n\t    }\n\t    if (args.dbname !== undefined && args.dbname !== null) {\n\t      this.dbname = args.dbname;\n\t    }\n\t  }\n\t};\n\tMapD_connect_args.prototype = {};\n\tMapD_connect_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.user = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.passwd = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.dbname = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_connect_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_connect_args');\n\t  if (this.user !== null && this.user !== undefined) {\n\t    output.writeFieldBegin('user', Thrift.Type.STRING, 1);\n\t    output.writeString(this.user);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.passwd !== null && this.passwd !== undefined) {\n\t    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);\n\t    output.writeString(this.passwd);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.dbname !== null && this.dbname !== undefined) {\n\t    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);\n\t    output.writeString(this.dbname);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_connect_result = function MapD_connect_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = args.success;\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_connect_result.prototype = {};\n\tMapD_connect_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.success = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_connect_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_connect_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n\t    output.writeString(this.success);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_disconnect_args = function MapD_disconnect_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_disconnect_args.prototype = {};\n\tMapD_disconnect_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_disconnect_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_disconnect_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_disconnect_result = function MapD_disconnect_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_disconnect_result.prototype = {};\n\tMapD_disconnect_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_disconnect_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_disconnect_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_server_status_args = function MapD_get_server_status_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_get_server_status_args.prototype = {};\n\tMapD_get_server_status_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_server_status_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_server_status_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_server_status_result = function MapD_get_server_status_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TServerStatus(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_server_status_result.prototype = {};\n\tMapD_get_server_status_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TServerStatus();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_server_status_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_server_status_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_tables_args = function MapD_get_tables_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_get_tables_args.prototype = {};\n\tMapD_get_tables_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_tables_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_tables_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_tables_result = function MapD_get_tables_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = Thrift.copyList(args.success, [null]);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_tables_result.prototype = {};\n\tMapD_get_tables_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size178 = 0;\n\t          var _rtmp3182;\n\t          this.success = [];\n\t          var _etype181 = 0;\n\t          _rtmp3182 = input.readListBegin();\n\t          _etype181 = _rtmp3182.etype;\n\t          _size178 = _rtmp3182.size;\n\t          for (var _i183 = 0; _i183 < _size178; ++_i183) {\n\t            var elem184 = null;\n\t            elem184 = input.readString();\n\t            this.success.push(elem184);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_tables_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_tables_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n\t    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n\t    for (var iter185 in this.success) {\n\t      if (this.success.hasOwnProperty(iter185)) {\n\t        iter185 = this.success[iter185];\n\t        output.writeString(iter185);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_table_details_args = function MapD_get_table_details_args(args) {\n\t  this.session = null;\n\t  this.table_name = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.table_name !== undefined && args.table_name !== null) {\n\t      this.table_name = args.table_name;\n\t    }\n\t  }\n\t};\n\tMapD_get_table_details_args.prototype = {};\n\tMapD_get_table_details_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.table_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_table_details_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_table_details_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_name !== null && this.table_name !== undefined) {\n\t    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.table_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_table_details_result = function MapD_get_table_details_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TTableDetails(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_table_details_result.prototype = {};\n\tMapD_get_table_details_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TTableDetails();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_table_details_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_table_details_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_users_args = function MapD_get_users_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_get_users_args.prototype = {};\n\tMapD_get_users_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_users_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_users_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_users_result = function MapD_get_users_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = Thrift.copyList(args.success, [null]);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_users_result.prototype = {};\n\tMapD_get_users_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size186 = 0;\n\t          var _rtmp3190;\n\t          this.success = [];\n\t          var _etype189 = 0;\n\t          _rtmp3190 = input.readListBegin();\n\t          _etype189 = _rtmp3190.etype;\n\t          _size186 = _rtmp3190.size;\n\t          for (var _i191 = 0; _i191 < _size186; ++_i191) {\n\t            var elem192 = null;\n\t            elem192 = input.readString();\n\t            this.success.push(elem192);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_users_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_users_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n\t    output.writeListBegin(Thrift.Type.STRING, this.success.length);\n\t    for (var iter193 in this.success) {\n\t      if (this.success.hasOwnProperty(iter193)) {\n\t        iter193 = this.success[iter193];\n\t        output.writeString(iter193);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_databases_args = function MapD_get_databases_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_get_databases_args.prototype = {};\n\tMapD_get_databases_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_databases_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_databases_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_databases_result = function MapD_get_databases_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = Thrift.copyList(args.success, [ttypes.TDBInfo]);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_databases_result.prototype = {};\n\tMapD_get_databases_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size194 = 0;\n\t          var _rtmp3198;\n\t          this.success = [];\n\t          var _etype197 = 0;\n\t          _rtmp3198 = input.readListBegin();\n\t          _etype197 = _rtmp3198.etype;\n\t          _size194 = _rtmp3198.size;\n\t          for (var _i199 = 0; _i199 < _size194; ++_i199) {\n\t            var elem200 = null;\n\t            elem200 = new ttypes.TDBInfo();\n\t            elem200.read(input);\n\t            this.success.push(elem200);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_databases_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_databases_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n\t    for (var iter201 in this.success) {\n\t      if (this.success.hasOwnProperty(iter201)) {\n\t        iter201 = this.success[iter201];\n\t        iter201.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_version_args = function MapD_get_version_args(args) {};\n\tMapD_get_version_args.prototype = {};\n\tMapD_get_version_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    input.skip(ftype);\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_version_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_version_args');\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_version_result = function MapD_get_version_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = args.success;\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_version_result.prototype = {};\n\tMapD_get_version_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.success = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_version_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_version_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n\t    output.writeString(this.success);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_start_heap_profile_args = function MapD_start_heap_profile_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_start_heap_profile_args.prototype = {};\n\tMapD_start_heap_profile_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_start_heap_profile_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_start_heap_profile_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_start_heap_profile_result = function MapD_start_heap_profile_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_start_heap_profile_result.prototype = {};\n\tMapD_start_heap_profile_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_start_heap_profile_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_start_heap_profile_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_stop_heap_profile_args = function MapD_stop_heap_profile_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_stop_heap_profile_args.prototype = {};\n\tMapD_stop_heap_profile_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_stop_heap_profile_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_stop_heap_profile_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_stop_heap_profile_result = function MapD_stop_heap_profile_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_stop_heap_profile_result.prototype = {};\n\tMapD_stop_heap_profile_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_stop_heap_profile_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_stop_heap_profile_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_heap_profile_args = function MapD_get_heap_profile_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_get_heap_profile_args.prototype = {};\n\tMapD_get_heap_profile_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_heap_profile_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_heap_profile_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_heap_profile_result = function MapD_get_heap_profile_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = args.success;\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_heap_profile_result.prototype = {};\n\tMapD_get_heap_profile_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.success = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_heap_profile_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_heap_profile_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n\t    output.writeString(this.success);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_memory_gpu_args = function MapD_get_memory_gpu_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_get_memory_gpu_args.prototype = {};\n\tMapD_get_memory_gpu_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_memory_gpu_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_memory_gpu_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_memory_gpu_result = function MapD_get_memory_gpu_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = args.success;\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_memory_gpu_result.prototype = {};\n\tMapD_get_memory_gpu_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.success = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_memory_gpu_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_memory_gpu_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n\t    output.writeString(this.success);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_memory_summary_args = function MapD_get_memory_summary_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_get_memory_summary_args.prototype = {};\n\tMapD_get_memory_summary_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_memory_summary_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_memory_summary_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_memory_summary_result = function MapD_get_memory_summary_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TMemorySummary(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_memory_summary_result.prototype = {};\n\tMapD_get_memory_summary_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TMemorySummary();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_memory_summary_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_memory_summary_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_clear_cpu_memory_args = function MapD_clear_cpu_memory_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_clear_cpu_memory_args.prototype = {};\n\tMapD_clear_cpu_memory_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_clear_cpu_memory_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_clear_cpu_memory_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_clear_cpu_memory_result = function MapD_clear_cpu_memory_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_clear_cpu_memory_result.prototype = {};\n\tMapD_clear_cpu_memory_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_clear_cpu_memory_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_clear_cpu_memory_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_clear_gpu_memory_args = function MapD_clear_gpu_memory_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_clear_gpu_memory_args.prototype = {};\n\tMapD_clear_gpu_memory_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_clear_gpu_memory_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_clear_gpu_memory_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_clear_gpu_memory_result = function MapD_clear_gpu_memory_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_clear_gpu_memory_result.prototype = {};\n\tMapD_clear_gpu_memory_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_clear_gpu_memory_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_clear_gpu_memory_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_sql_execute_args = function MapD_sql_execute_args(args) {\n\t  this.session = null;\n\t  this.query = null;\n\t  this.column_format = null;\n\t  this.nonce = null;\n\t  this.first_n = -1;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.query !== undefined && args.query !== null) {\n\t      this.query = args.query;\n\t    }\n\t    if (args.column_format !== undefined && args.column_format !== null) {\n\t      this.column_format = args.column_format;\n\t    }\n\t    if (args.nonce !== undefined && args.nonce !== null) {\n\t      this.nonce = args.nonce;\n\t    }\n\t    if (args.first_n !== undefined && args.first_n !== null) {\n\t      this.first_n = args.first_n;\n\t    }\n\t  }\n\t};\n\tMapD_sql_execute_args.prototype = {};\n\tMapD_sql_execute_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.query = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.column_format = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.nonce = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.first_n = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_sql_execute_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_sql_execute_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.query !== null && this.query !== undefined) {\n\t    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n\t    output.writeString(this.query);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.column_format !== null && this.column_format !== undefined) {\n\t    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);\n\t    output.writeBool(this.column_format);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nonce !== null && this.nonce !== undefined) {\n\t    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\n\t    output.writeString(this.nonce);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.first_n !== null && this.first_n !== undefined) {\n\t    output.writeFieldBegin('first_n', Thrift.Type.I32, 5);\n\t    output.writeI32(this.first_n);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_sql_execute_result = function MapD_sql_execute_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TQueryResult(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_sql_execute_result.prototype = {};\n\tMapD_sql_execute_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TQueryResult();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_sql_execute_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_sql_execute_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_sql_execute_gpudf_args = function MapD_sql_execute_gpudf_args(args) {\n\t  this.session = null;\n\t  this.query = null;\n\t  this.device_id = 0;\n\t  this.first_n = -1;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.query !== undefined && args.query !== null) {\n\t      this.query = args.query;\n\t    }\n\t    if (args.device_id !== undefined && args.device_id !== null) {\n\t      this.device_id = args.device_id;\n\t    }\n\t    if (args.first_n !== undefined && args.first_n !== null) {\n\t      this.first_n = args.first_n;\n\t    }\n\t  }\n\t};\n\tMapD_sql_execute_gpudf_args.prototype = {};\n\tMapD_sql_execute_gpudf_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.query = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.device_id = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.first_n = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_sql_execute_gpudf_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_sql_execute_gpudf_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.query !== null && this.query !== undefined) {\n\t    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n\t    output.writeString(this.query);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.device_id !== null && this.device_id !== undefined) {\n\t    output.writeFieldBegin('device_id', Thrift.Type.I32, 3);\n\t    output.writeI32(this.device_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.first_n !== null && this.first_n !== undefined) {\n\t    output.writeFieldBegin('first_n', Thrift.Type.I32, 4);\n\t    output.writeI32(this.first_n);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_sql_execute_gpudf_result = function MapD_sql_execute_gpudf_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TGpuDataFrame(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_sql_execute_gpudf_result.prototype = {};\n\tMapD_sql_execute_gpudf_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TGpuDataFrame();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_sql_execute_gpudf_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_sql_execute_gpudf_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_interrupt_args = function MapD_interrupt_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_interrupt_args.prototype = {};\n\tMapD_interrupt_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_interrupt_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_interrupt_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_interrupt_result = function MapD_interrupt_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_interrupt_result.prototype = {};\n\tMapD_interrupt_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_interrupt_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_interrupt_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_sql_validate_args = function MapD_sql_validate_args(args) {\n\t  this.session = null;\n\t  this.query = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.query !== undefined && args.query !== null) {\n\t      this.query = args.query;\n\t    }\n\t  }\n\t};\n\tMapD_sql_validate_args.prototype = {};\n\tMapD_sql_validate_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.query = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_sql_validate_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_sql_validate_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.query !== null && this.query !== undefined) {\n\t    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n\t    output.writeString(this.query);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_sql_validate_result = function MapD_sql_validate_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = Thrift.copyMap(args.success, [ttypes.TColumnType]);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_sql_validate_result.prototype = {};\n\tMapD_sql_validate_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.MAP) {\n\t          var _size202 = 0;\n\t          var _rtmp3206;\n\t          this.success = {};\n\t          var _ktype203 = 0;\n\t          var _vtype204 = 0;\n\t          _rtmp3206 = input.readMapBegin();\n\t          _ktype203 = _rtmp3206.ktype;\n\t          _vtype204 = _rtmp3206.vtype;\n\t          _size202 = _rtmp3206.size;\n\t          for (var _i207 = 0; _i207 < _size202; ++_i207) {\n\t            var key208 = null;\n\t            var val209 = null;\n\t            key208 = input.readString();\n\t            val209 = new ttypes.TColumnType();\n\t            val209.read(input);\n\t            this.success[key208] = val209;\n\t          }\n\t          input.readMapEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_sql_validate_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_sql_validate_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.MAP, 0);\n\t    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));\n\t    for (var kiter210 in this.success) {\n\t      if (this.success.hasOwnProperty(kiter210)) {\n\t        var viter211 = this.success[kiter210];\n\t        output.writeString(kiter210);\n\t        viter211.write(output);\n\t      }\n\t    }\n\t    output.writeMapEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_set_execution_mode_args = function MapD_set_execution_mode_args(args) {\n\t  this.session = null;\n\t  this.mode = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.mode !== undefined && args.mode !== null) {\n\t      this.mode = args.mode;\n\t    }\n\t  }\n\t};\n\tMapD_set_execution_mode_args.prototype = {};\n\tMapD_set_execution_mode_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.mode = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_set_execution_mode_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_set_execution_mode_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.mode !== null && this.mode !== undefined) {\n\t    output.writeFieldBegin('mode', Thrift.Type.I32, 2);\n\t    output.writeI32(this.mode);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_set_execution_mode_result = function MapD_set_execution_mode_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_set_execution_mode_result.prototype = {};\n\tMapD_set_execution_mode_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_set_execution_mode_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_set_execution_mode_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_render_vega_args = function MapD_render_vega_args(args) {\n\t  this.session = null;\n\t  this.widget_id = null;\n\t  this.vega_json = null;\n\t  this.compression_level = null;\n\t  this.nonce = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.widget_id !== undefined && args.widget_id !== null) {\n\t      this.widget_id = args.widget_id;\n\t    }\n\t    if (args.vega_json !== undefined && args.vega_json !== null) {\n\t      this.vega_json = args.vega_json;\n\t    }\n\t    if (args.compression_level !== undefined && args.compression_level !== null) {\n\t      this.compression_level = args.compression_level;\n\t    }\n\t    if (args.nonce !== undefined && args.nonce !== null) {\n\t      this.nonce = args.nonce;\n\t    }\n\t  }\n\t};\n\tMapD_render_vega_args.prototype = {};\n\tMapD_render_vega_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.widget_id = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.vega_json = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.compression_level = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.nonce = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_render_vega_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_render_vega_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.widget_id !== null && this.widget_id !== undefined) {\n\t    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n\t    output.writeI64(this.widget_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.vega_json !== null && this.vega_json !== undefined) {\n\t    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);\n\t    output.writeString(this.vega_json);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.compression_level !== null && this.compression_level !== undefined) {\n\t    output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);\n\t    output.writeI32(this.compression_level);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nonce !== null && this.nonce !== undefined) {\n\t    output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);\n\t    output.writeString(this.nonce);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_render_vega_result = function MapD_render_vega_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TRenderResult(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_render_vega_result.prototype = {};\n\tMapD_render_vega_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TRenderResult();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_render_vega_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_render_vega_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_result_row_for_pixel_args = function MapD_get_result_row_for_pixel_args(args) {\n\t  this.session = null;\n\t  this.widget_id = null;\n\t  this.pixel = null;\n\t  this.table_col_names = null;\n\t  this.column_format = null;\n\t  this.pixelRadius = null;\n\t  this.nonce = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.widget_id !== undefined && args.widget_id !== null) {\n\t      this.widget_id = args.widget_id;\n\t    }\n\t    if (args.pixel !== undefined && args.pixel !== null) {\n\t      this.pixel = new ttypes.TPixel(args.pixel);\n\t    }\n\t    if (args.table_col_names !== undefined && args.table_col_names !== null) {\n\t      this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);\n\t    }\n\t    if (args.column_format !== undefined && args.column_format !== null) {\n\t      this.column_format = args.column_format;\n\t    }\n\t    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {\n\t      this.pixelRadius = args.pixelRadius;\n\t    }\n\t    if (args.nonce !== undefined && args.nonce !== null) {\n\t      this.nonce = args.nonce;\n\t    }\n\t  }\n\t};\n\tMapD_get_result_row_for_pixel_args.prototype = {};\n\tMapD_get_result_row_for_pixel_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.widget_id = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.pixel = new ttypes.TPixel();\n\t          this.pixel.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.MAP) {\n\t          var _size212 = 0;\n\t          var _rtmp3216;\n\t          this.table_col_names = {};\n\t          var _ktype213 = 0;\n\t          var _vtype214 = 0;\n\t          _rtmp3216 = input.readMapBegin();\n\t          _ktype213 = _rtmp3216.ktype;\n\t          _vtype214 = _rtmp3216.vtype;\n\t          _size212 = _rtmp3216.size;\n\t          for (var _i217 = 0; _i217 < _size212; ++_i217) {\n\t            var key218 = null;\n\t            var val219 = null;\n\t            key218 = input.readString();\n\t            var _size220 = 0;\n\t            var _rtmp3224;\n\t            val219 = [];\n\t            var _etype223 = 0;\n\t            _rtmp3224 = input.readListBegin();\n\t            _etype223 = _rtmp3224.etype;\n\t            _size220 = _rtmp3224.size;\n\t            for (var _i225 = 0; _i225 < _size220; ++_i225) {\n\t              var elem226 = null;\n\t              elem226 = input.readString();\n\t              val219.push(elem226);\n\t            }\n\t            input.readListEnd();\n\t            this.table_col_names[key218] = val219;\n\t          }\n\t          input.readMapEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.column_format = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 6:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.pixelRadius = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 7:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.nonce = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_result_row_for_pixel_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_result_row_for_pixel_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.widget_id !== null && this.widget_id !== undefined) {\n\t    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n\t    output.writeI64(this.widget_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.pixel !== null && this.pixel !== undefined) {\n\t    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);\n\t    this.pixel.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_col_names !== null && this.table_col_names !== undefined) {\n\t    output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);\n\t    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));\n\t    for (var kiter227 in this.table_col_names) {\n\t      if (this.table_col_names.hasOwnProperty(kiter227)) {\n\t        var viter228 = this.table_col_names[kiter227];\n\t        output.writeString(kiter227);\n\t        output.writeListBegin(Thrift.Type.STRING, viter228.length);\n\t        for (var iter229 in viter228) {\n\t          if (viter228.hasOwnProperty(iter229)) {\n\t            iter229 = viter228[iter229];\n\t            output.writeString(iter229);\n\t          }\n\t        }\n\t        output.writeListEnd();\n\t      }\n\t    }\n\t    output.writeMapEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.column_format !== null && this.column_format !== undefined) {\n\t    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);\n\t    output.writeBool(this.column_format);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {\n\t    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);\n\t    output.writeI32(this.pixelRadius);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nonce !== null && this.nonce !== undefined) {\n\t    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);\n\t    output.writeString(this.nonce);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_result_row_for_pixel_result = function MapD_get_result_row_for_pixel_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TPixelTableRowResult(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_result_row_for_pixel_result.prototype = {};\n\tMapD_get_result_row_for_pixel_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TPixelTableRowResult();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_result_row_for_pixel_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_result_row_for_pixel_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_frontend_view_args = function MapD_get_frontend_view_args(args) {\n\t  this.session = null;\n\t  this.view_name = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.view_name !== undefined && args.view_name !== null) {\n\t      this.view_name = args.view_name;\n\t    }\n\t  }\n\t};\n\tMapD_get_frontend_view_args.prototype = {};\n\tMapD_get_frontend_view_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.view_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_frontend_view_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_frontend_view_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.view_name !== null && this.view_name !== undefined) {\n\t    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.view_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_frontend_view_result = function MapD_get_frontend_view_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TFrontendView(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_frontend_view_result.prototype = {};\n\tMapD_get_frontend_view_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TFrontendView();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_frontend_view_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_frontend_view_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_frontend_views_args = function MapD_get_frontend_views_args(args) {\n\t  this.session = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t  }\n\t};\n\tMapD_get_frontend_views_args.prototype = {};\n\tMapD_get_frontend_views_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_frontend_views_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_frontend_views_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_frontend_views_result = function MapD_get_frontend_views_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = Thrift.copyList(args.success, [ttypes.TFrontendView]);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_frontend_views_result.prototype = {};\n\tMapD_get_frontend_views_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size230 = 0;\n\t          var _rtmp3234;\n\t          this.success = [];\n\t          var _etype233 = 0;\n\t          _rtmp3234 = input.readListBegin();\n\t          _etype233 = _rtmp3234.etype;\n\t          _size230 = _rtmp3234.size;\n\t          for (var _i235 = 0; _i235 < _size230; ++_i235) {\n\t            var elem236 = null;\n\t            elem236 = new ttypes.TFrontendView();\n\t            elem236.read(input);\n\t            this.success.push(elem236);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_frontend_views_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_frontend_views_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n\t    for (var iter237 in this.success) {\n\t      if (this.success.hasOwnProperty(iter237)) {\n\t        iter237 = this.success[iter237];\n\t        iter237.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_create_frontend_view_args = function MapD_create_frontend_view_args(args) {\n\t  this.session = null;\n\t  this.view_name = null;\n\t  this.view_state = null;\n\t  this.image_hash = null;\n\t  this.view_metadata = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.view_name !== undefined && args.view_name !== null) {\n\t      this.view_name = args.view_name;\n\t    }\n\t    if (args.view_state !== undefined && args.view_state !== null) {\n\t      this.view_state = args.view_state;\n\t    }\n\t    if (args.image_hash !== undefined && args.image_hash !== null) {\n\t      this.image_hash = args.image_hash;\n\t    }\n\t    if (args.view_metadata !== undefined && args.view_metadata !== null) {\n\t      this.view_metadata = args.view_metadata;\n\t    }\n\t  }\n\t};\n\tMapD_create_frontend_view_args.prototype = {};\n\tMapD_create_frontend_view_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.view_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.view_state = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.image_hash = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.view_metadata = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_create_frontend_view_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_create_frontend_view_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.view_name !== null && this.view_name !== undefined) {\n\t    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.view_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.view_state !== null && this.view_state !== undefined) {\n\t    output.writeFieldBegin('view_state', Thrift.Type.STRING, 3);\n\t    output.writeString(this.view_state);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.image_hash !== null && this.image_hash !== undefined) {\n\t    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);\n\t    output.writeString(this.image_hash);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.view_metadata !== null && this.view_metadata !== undefined) {\n\t    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);\n\t    output.writeString(this.view_metadata);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_create_frontend_view_result = function MapD_create_frontend_view_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_create_frontend_view_result.prototype = {};\n\tMapD_create_frontend_view_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_create_frontend_view_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_create_frontend_view_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_delete_frontend_view_args = function MapD_delete_frontend_view_args(args) {\n\t  this.session = null;\n\t  this.view_name = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.view_name !== undefined && args.view_name !== null) {\n\t      this.view_name = args.view_name;\n\t    }\n\t  }\n\t};\n\tMapD_delete_frontend_view_args.prototype = {};\n\tMapD_delete_frontend_view_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.view_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_delete_frontend_view_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_delete_frontend_view_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.view_name !== null && this.view_name !== undefined) {\n\t    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.view_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_delete_frontend_view_result = function MapD_delete_frontend_view_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_delete_frontend_view_result.prototype = {};\n\tMapD_delete_frontend_view_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_delete_frontend_view_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_delete_frontend_view_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_link_view_args = function MapD_get_link_view_args(args) {\n\t  this.session = null;\n\t  this.link = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.link !== undefined && args.link !== null) {\n\t      this.link = args.link;\n\t    }\n\t  }\n\t};\n\tMapD_get_link_view_args.prototype = {};\n\tMapD_get_link_view_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.link = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_link_view_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_link_view_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.link !== null && this.link !== undefined) {\n\t    output.writeFieldBegin('link', Thrift.Type.STRING, 2);\n\t    output.writeString(this.link);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_link_view_result = function MapD_get_link_view_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TFrontendView(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_link_view_result.prototype = {};\n\tMapD_get_link_view_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TFrontendView();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_link_view_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_link_view_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_create_link_args = function MapD_create_link_args(args) {\n\t  this.session = null;\n\t  this.view_state = null;\n\t  this.view_metadata = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.view_state !== undefined && args.view_state !== null) {\n\t      this.view_state = args.view_state;\n\t    }\n\t    if (args.view_metadata !== undefined && args.view_metadata !== null) {\n\t      this.view_metadata = args.view_metadata;\n\t    }\n\t  }\n\t};\n\tMapD_create_link_args.prototype = {};\n\tMapD_create_link_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.view_state = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.view_metadata = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_create_link_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_create_link_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.view_state !== null && this.view_state !== undefined) {\n\t    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);\n\t    output.writeString(this.view_state);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.view_metadata !== null && this.view_metadata !== undefined) {\n\t    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);\n\t    output.writeString(this.view_metadata);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_create_link_result = function MapD_create_link_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = args.success;\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_create_link_result.prototype = {};\n\tMapD_create_link_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.success = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_create_link_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_create_link_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRING, 0);\n\t    output.writeString(this.success);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_load_table_binary_args = function MapD_load_table_binary_args(args) {\n\t  this.session = null;\n\t  this.table_name = null;\n\t  this.rows = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.table_name !== undefined && args.table_name !== null) {\n\t      this.table_name = args.table_name;\n\t    }\n\t    if (args.rows !== undefined && args.rows !== null) {\n\t      this.rows = Thrift.copyList(args.rows, [ttypes.TRow]);\n\t    }\n\t  }\n\t};\n\tMapD_load_table_binary_args.prototype = {};\n\tMapD_load_table_binary_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.table_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size238 = 0;\n\t          var _rtmp3242;\n\t          this.rows = [];\n\t          var _etype241 = 0;\n\t          _rtmp3242 = input.readListBegin();\n\t          _etype241 = _rtmp3242.etype;\n\t          _size238 = _rtmp3242.size;\n\t          for (var _i243 = 0; _i243 < _size238; ++_i243) {\n\t            var elem244 = null;\n\t            elem244 = new ttypes.TRow();\n\t            elem244.read(input);\n\t            this.rows.push(elem244);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_load_table_binary_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_load_table_binary_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_name !== null && this.table_name !== undefined) {\n\t    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.table_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.rows !== null && this.rows !== undefined) {\n\t    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n\t    for (var iter245 in this.rows) {\n\t      if (this.rows.hasOwnProperty(iter245)) {\n\t        iter245 = this.rows[iter245];\n\t        iter245.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_load_table_binary_result = function MapD_load_table_binary_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_load_table_binary_result.prototype = {};\n\tMapD_load_table_binary_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_load_table_binary_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_load_table_binary_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_load_table_args = function MapD_load_table_args(args) {\n\t  this.session = null;\n\t  this.table_name = null;\n\t  this.rows = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.table_name !== undefined && args.table_name !== null) {\n\t      this.table_name = args.table_name;\n\t    }\n\t    if (args.rows !== undefined && args.rows !== null) {\n\t      this.rows = Thrift.copyList(args.rows, [ttypes.TStringRow]);\n\t    }\n\t  }\n\t};\n\tMapD_load_table_args.prototype = {};\n\tMapD_load_table_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.table_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size246 = 0;\n\t          var _rtmp3250;\n\t          this.rows = [];\n\t          var _etype249 = 0;\n\t          _rtmp3250 = input.readListBegin();\n\t          _etype249 = _rtmp3250.etype;\n\t          _size246 = _rtmp3250.size;\n\t          for (var _i251 = 0; _i251 < _size246; ++_i251) {\n\t            var elem252 = null;\n\t            elem252 = new ttypes.TStringRow();\n\t            elem252.read(input);\n\t            this.rows.push(elem252);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_load_table_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_load_table_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_name !== null && this.table_name !== undefined) {\n\t    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.table_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.rows !== null && this.rows !== undefined) {\n\t    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n\t    for (var iter253 in this.rows) {\n\t      if (this.rows.hasOwnProperty(iter253)) {\n\t        iter253 = this.rows[iter253];\n\t        iter253.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_load_table_result = function MapD_load_table_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_load_table_result.prototype = {};\n\tMapD_load_table_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_load_table_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_load_table_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_detect_column_types_args = function MapD_detect_column_types_args(args) {\n\t  this.session = null;\n\t  this.file_name = null;\n\t  this.copy_params = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.file_name !== undefined && args.file_name !== null) {\n\t      this.file_name = args.file_name;\n\t    }\n\t    if (args.copy_params !== undefined && args.copy_params !== null) {\n\t      this.copy_params = new ttypes.TCopyParams(args.copy_params);\n\t    }\n\t  }\n\t};\n\tMapD_detect_column_types_args.prototype = {};\n\tMapD_detect_column_types_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.file_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.copy_params = new ttypes.TCopyParams();\n\t          this.copy_params.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_detect_column_types_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_detect_column_types_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.file_name !== null && this.file_name !== undefined) {\n\t    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.file_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.copy_params !== null && this.copy_params !== undefined) {\n\t    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);\n\t    this.copy_params.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_detect_column_types_result = function MapD_detect_column_types_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TDetectResult(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_detect_column_types_result.prototype = {};\n\tMapD_detect_column_types_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TDetectResult();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_detect_column_types_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_detect_column_types_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_create_table_args = function MapD_create_table_args(args) {\n\t  this.session = null;\n\t  this.table_name = null;\n\t  this.row_desc = null;\n\t  this.table_type = 0;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.table_name !== undefined && args.table_name !== null) {\n\t      this.table_name = args.table_name;\n\t    }\n\t    if (args.row_desc !== undefined && args.row_desc !== null) {\n\t      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);\n\t    }\n\t    if (args.table_type !== undefined && args.table_type !== null) {\n\t      this.table_type = args.table_type;\n\t    }\n\t  }\n\t};\n\tMapD_create_table_args.prototype = {};\n\tMapD_create_table_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.table_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size254 = 0;\n\t          var _rtmp3258;\n\t          this.row_desc = [];\n\t          var _etype257 = 0;\n\t          _rtmp3258 = input.readListBegin();\n\t          _etype257 = _rtmp3258.etype;\n\t          _size254 = _rtmp3258.size;\n\t          for (var _i259 = 0; _i259 < _size254; ++_i259) {\n\t            var elem260 = null;\n\t            elem260 = new ttypes.TColumnType();\n\t            elem260.read(input);\n\t            this.row_desc.push(elem260);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.table_type = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_create_table_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_create_table_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_name !== null && this.table_name !== undefined) {\n\t    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.table_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.row_desc !== null && this.row_desc !== undefined) {\n\t    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n\t    for (var iter261 in this.row_desc) {\n\t      if (this.row_desc.hasOwnProperty(iter261)) {\n\t        iter261 = this.row_desc[iter261];\n\t        iter261.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_type !== null && this.table_type !== undefined) {\n\t    output.writeFieldBegin('table_type', Thrift.Type.I32, 4);\n\t    output.writeI32(this.table_type);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_create_table_result = function MapD_create_table_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_create_table_result.prototype = {};\n\tMapD_create_table_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_create_table_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_create_table_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_import_table_args = function MapD_import_table_args(args) {\n\t  this.session = null;\n\t  this.table_name = null;\n\t  this.file_name = null;\n\t  this.copy_params = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.table_name !== undefined && args.table_name !== null) {\n\t      this.table_name = args.table_name;\n\t    }\n\t    if (args.file_name !== undefined && args.file_name !== null) {\n\t      this.file_name = args.file_name;\n\t    }\n\t    if (args.copy_params !== undefined && args.copy_params !== null) {\n\t      this.copy_params = new ttypes.TCopyParams(args.copy_params);\n\t    }\n\t  }\n\t};\n\tMapD_import_table_args.prototype = {};\n\tMapD_import_table_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.table_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.file_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.copy_params = new ttypes.TCopyParams();\n\t          this.copy_params.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_import_table_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_import_table_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_name !== null && this.table_name !== undefined) {\n\t    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.table_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.file_name !== null && this.file_name !== undefined) {\n\t    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);\n\t    output.writeString(this.file_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.copy_params !== null && this.copy_params !== undefined) {\n\t    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);\n\t    this.copy_params.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_import_table_result = function MapD_import_table_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_import_table_result.prototype = {};\n\tMapD_import_table_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_import_table_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_import_table_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_import_geo_table_args = function MapD_import_geo_table_args(args) {\n\t  this.session = null;\n\t  this.table_name = null;\n\t  this.file_name = null;\n\t  this.copy_params = null;\n\t  this.row_desc = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.table_name !== undefined && args.table_name !== null) {\n\t      this.table_name = args.table_name;\n\t    }\n\t    if (args.file_name !== undefined && args.file_name !== null) {\n\t      this.file_name = args.file_name;\n\t    }\n\t    if (args.copy_params !== undefined && args.copy_params !== null) {\n\t      this.copy_params = new ttypes.TCopyParams(args.copy_params);\n\t    }\n\t    if (args.row_desc !== undefined && args.row_desc !== null) {\n\t      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);\n\t    }\n\t  }\n\t};\n\tMapD_import_geo_table_args.prototype = {};\n\tMapD_import_geo_table_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.table_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.file_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.copy_params = new ttypes.TCopyParams();\n\t          this.copy_params.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size262 = 0;\n\t          var _rtmp3266;\n\t          this.row_desc = [];\n\t          var _etype265 = 0;\n\t          _rtmp3266 = input.readListBegin();\n\t          _etype265 = _rtmp3266.etype;\n\t          _size262 = _rtmp3266.size;\n\t          for (var _i267 = 0; _i267 < _size262; ++_i267) {\n\t            var elem268 = null;\n\t            elem268 = new ttypes.TColumnType();\n\t            elem268.read(input);\n\t            this.row_desc.push(elem268);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_import_geo_table_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_import_geo_table_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_name !== null && this.table_name !== undefined) {\n\t    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.table_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.file_name !== null && this.file_name !== undefined) {\n\t    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);\n\t    output.writeString(this.file_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.copy_params !== null && this.copy_params !== undefined) {\n\t    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);\n\t    this.copy_params.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.row_desc !== null && this.row_desc !== undefined) {\n\t    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n\t    for (var iter269 in this.row_desc) {\n\t      if (this.row_desc.hasOwnProperty(iter269)) {\n\t        iter269 = this.row_desc[iter269];\n\t        iter269.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_import_geo_table_result = function MapD_import_geo_table_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_import_geo_table_result.prototype = {};\n\tMapD_import_geo_table_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_import_geo_table_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_import_geo_table_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_import_table_status_args = function MapD_import_table_status_args(args) {\n\t  this.session = null;\n\t  this.import_id = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.import_id !== undefined && args.import_id !== null) {\n\t      this.import_id = args.import_id;\n\t    }\n\t  }\n\t};\n\tMapD_import_table_status_args.prototype = {};\n\tMapD_import_table_status_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.import_id = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_import_table_status_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_import_table_status_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.import_id !== null && this.import_id !== undefined) {\n\t    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);\n\t    output.writeString(this.import_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_import_table_status_result = function MapD_import_table_status_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TImportStatus(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_import_table_status_result.prototype = {};\n\tMapD_import_table_status_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TImportStatus();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_import_table_status_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_import_table_status_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_start_query_args = function MapD_start_query_args(args) {\n\t  this.session = null;\n\t  this.query_ra = null;\n\t  this.just_explain = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.query_ra !== undefined && args.query_ra !== null) {\n\t      this.query_ra = args.query_ra;\n\t    }\n\t    if (args.just_explain !== undefined && args.just_explain !== null) {\n\t      this.just_explain = args.just_explain;\n\t    }\n\t  }\n\t};\n\tMapD_start_query_args.prototype = {};\n\tMapD_start_query_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.query_ra = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.just_explain = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_start_query_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_start_query_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.query_ra !== null && this.query_ra !== undefined) {\n\t    output.writeFieldBegin('query_ra', Thrift.Type.STRING, 2);\n\t    output.writeString(this.query_ra);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.just_explain !== null && this.just_explain !== undefined) {\n\t    output.writeFieldBegin('just_explain', Thrift.Type.BOOL, 3);\n\t    output.writeBool(this.just_explain);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_start_query_result = function MapD_start_query_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TPendingQuery(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_start_query_result.prototype = {};\n\tMapD_start_query_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TPendingQuery();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_start_query_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_start_query_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_execute_first_step_args = function MapD_execute_first_step_args(args) {\n\t  this.pending_query = null;\n\t  if (args) {\n\t    if (args.pending_query !== undefined && args.pending_query !== null) {\n\t      this.pending_query = new ttypes.TPendingQuery(args.pending_query);\n\t    }\n\t  }\n\t};\n\tMapD_execute_first_step_args.prototype = {};\n\tMapD_execute_first_step_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.pending_query = new ttypes.TPendingQuery();\n\t          this.pending_query.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_execute_first_step_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_execute_first_step_args');\n\t  if (this.pending_query !== null && this.pending_query !== undefined) {\n\t    output.writeFieldBegin('pending_query', Thrift.Type.STRUCT, 1);\n\t    this.pending_query.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_execute_first_step_result = function MapD_execute_first_step_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TStepResult(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_execute_first_step_result.prototype = {};\n\tMapD_execute_first_step_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TStepResult();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_execute_first_step_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_execute_first_step_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_broadcast_serialized_rows_args = function MapD_broadcast_serialized_rows_args(args) {\n\t  this.serialized_rows = null;\n\t  this.row_desc = null;\n\t  this.query_id = null;\n\t  if (args) {\n\t    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {\n\t      this.serialized_rows = args.serialized_rows;\n\t    }\n\t    if (args.row_desc !== undefined && args.row_desc !== null) {\n\t      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);\n\t    }\n\t    if (args.query_id !== undefined && args.query_id !== null) {\n\t      this.query_id = args.query_id;\n\t    }\n\t  }\n\t};\n\tMapD_broadcast_serialized_rows_args.prototype = {};\n\tMapD_broadcast_serialized_rows_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.serialized_rows = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size270 = 0;\n\t          var _rtmp3274;\n\t          this.row_desc = [];\n\t          var _etype273 = 0;\n\t          _rtmp3274 = input.readListBegin();\n\t          _etype273 = _rtmp3274.etype;\n\t          _size270 = _rtmp3274.size;\n\t          for (var _i275 = 0; _i275 < _size270; ++_i275) {\n\t            var elem276 = null;\n\t            elem276 = new ttypes.TColumnType();\n\t            elem276.read(input);\n\t            this.row_desc.push(elem276);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.query_id = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_broadcast_serialized_rows_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_broadcast_serialized_rows_args');\n\t  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {\n\t    output.writeFieldBegin('serialized_rows', Thrift.Type.STRING, 1);\n\t    output.writeString(this.serialized_rows);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.row_desc !== null && this.row_desc !== undefined) {\n\t    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 2);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n\t    for (var iter277 in this.row_desc) {\n\t      if (this.row_desc.hasOwnProperty(iter277)) {\n\t        iter277 = this.row_desc[iter277];\n\t        iter277.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.query_id !== null && this.query_id !== undefined) {\n\t    output.writeFieldBegin('query_id', Thrift.Type.I64, 3);\n\t    output.writeI64(this.query_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_broadcast_serialized_rows_result = function MapD_broadcast_serialized_rows_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_broadcast_serialized_rows_result.prototype = {};\n\tMapD_broadcast_serialized_rows_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_broadcast_serialized_rows_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_broadcast_serialized_rows_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_render_vega_raw_pixels_args = function MapD_render_vega_raw_pixels_args(args) {\n\t  this.session = null;\n\t  this.widget_id = null;\n\t  this.node_idx = null;\n\t  this.vega_json = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.widget_id !== undefined && args.widget_id !== null) {\n\t      this.widget_id = args.widget_id;\n\t    }\n\t    if (args.node_idx !== undefined && args.node_idx !== null) {\n\t      this.node_idx = args.node_idx;\n\t    }\n\t    if (args.vega_json !== undefined && args.vega_json !== null) {\n\t      this.vega_json = args.vega_json;\n\t    }\n\t  }\n\t};\n\tMapD_render_vega_raw_pixels_args.prototype = {};\n\tMapD_render_vega_raw_pixels_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.widget_id = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I16) {\n\t          this.node_idx = input.readI16();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.vega_json = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_render_vega_raw_pixels_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_render_vega_raw_pixels_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.widget_id !== null && this.widget_id !== undefined) {\n\t    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n\t    output.writeI64(this.widget_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.node_idx !== null && this.node_idx !== undefined) {\n\t    output.writeFieldBegin('node_idx', Thrift.Type.I16, 3);\n\t    output.writeI16(this.node_idx);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.vega_json !== null && this.vega_json !== undefined) {\n\t    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 4);\n\t    output.writeString(this.vega_json);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_render_vega_raw_pixels_result = function MapD_render_vega_raw_pixels_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TRawPixelDataResult(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_render_vega_raw_pixels_result.prototype = {};\n\tMapD_render_vega_raw_pixels_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TRawPixelDataResult();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_render_vega_raw_pixels_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_render_vega_raw_pixels_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_insert_data_args = function MapD_insert_data_args(args) {\n\t  this.session = null;\n\t  this.insert_data = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.insert_data !== undefined && args.insert_data !== null) {\n\t      this.insert_data = new ttypes.TInsertData(args.insert_data);\n\t    }\n\t  }\n\t};\n\tMapD_insert_data_args.prototype = {};\n\tMapD_insert_data_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.insert_data = new ttypes.TInsertData();\n\t          this.insert_data.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_insert_data_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_insert_data_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.insert_data !== null && this.insert_data !== undefined) {\n\t    output.writeFieldBegin('insert_data', Thrift.Type.STRUCT, 2);\n\t    this.insert_data.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_insert_data_result = function MapD_insert_data_result(args) {\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_insert_data_result.prototype = {};\n\tMapD_insert_data_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_insert_data_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_insert_data_result');\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_table_descriptor_args = function MapD_get_table_descriptor_args(args) {\n\t  this.session = null;\n\t  this.table_name = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.table_name !== undefined && args.table_name !== null) {\n\t      this.table_name = args.table_name;\n\t    }\n\t  }\n\t};\n\tMapD_get_table_descriptor_args.prototype = {};\n\tMapD_get_table_descriptor_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.table_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_table_descriptor_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_table_descriptor_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_name !== null && this.table_name !== undefined) {\n\t    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.table_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_table_descriptor_result = function MapD_get_table_descriptor_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = Thrift.copyMap(args.success, [ttypes.TColumnType]);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_table_descriptor_result.prototype = {};\n\tMapD_get_table_descriptor_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.MAP) {\n\t          var _size278 = 0;\n\t          var _rtmp3282;\n\t          this.success = {};\n\t          var _ktype279 = 0;\n\t          var _vtype280 = 0;\n\t          _rtmp3282 = input.readMapBegin();\n\t          _ktype279 = _rtmp3282.ktype;\n\t          _vtype280 = _rtmp3282.vtype;\n\t          _size278 = _rtmp3282.size;\n\t          for (var _i283 = 0; _i283 < _size278; ++_i283) {\n\t            var key284 = null;\n\t            var val285 = null;\n\t            key284 = input.readString();\n\t            val285 = new ttypes.TColumnType();\n\t            val285.read(input);\n\t            this.success[key284] = val285;\n\t          }\n\t          input.readMapEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_table_descriptor_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_table_descriptor_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.MAP, 0);\n\t    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));\n\t    for (var kiter286 in this.success) {\n\t      if (this.success.hasOwnProperty(kiter286)) {\n\t        var viter287 = this.success[kiter286];\n\t        output.writeString(kiter286);\n\t        viter287.write(output);\n\t      }\n\t    }\n\t    output.writeMapEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_row_descriptor_args = function MapD_get_row_descriptor_args(args) {\n\t  this.session = null;\n\t  this.table_name = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.table_name !== undefined && args.table_name !== null) {\n\t      this.table_name = args.table_name;\n\t    }\n\t  }\n\t};\n\tMapD_get_row_descriptor_args.prototype = {};\n\tMapD_get_row_descriptor_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.table_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_row_descriptor_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_row_descriptor_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_name !== null && this.table_name !== undefined) {\n\t    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.table_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_row_descriptor_result = function MapD_get_row_descriptor_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = Thrift.copyList(args.success, [ttypes.TColumnType]);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_row_descriptor_result.prototype = {};\n\tMapD_get_row_descriptor_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size288 = 0;\n\t          var _rtmp3292;\n\t          this.success = [];\n\t          var _etype291 = 0;\n\t          _rtmp3292 = input.readListBegin();\n\t          _etype291 = _rtmp3292.etype;\n\t          _size288 = _rtmp3292.size;\n\t          for (var _i293 = 0; _i293 < _size288; ++_i293) {\n\t            var elem294 = null;\n\t            elem294 = new ttypes.TColumnType();\n\t            elem294.read(input);\n\t            this.success.push(elem294);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_row_descriptor_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_row_descriptor_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.LIST, 0);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);\n\t    for (var iter295 in this.success) {\n\t      if (this.success.hasOwnProperty(iter295)) {\n\t        iter295 = this.success[iter295];\n\t        iter295.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_render_args = function MapD_render_args(args) {\n\t  this.session = null;\n\t  this.query = null;\n\t  this.render_type = null;\n\t  this.nonce = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.query !== undefined && args.query !== null) {\n\t      this.query = args.query;\n\t    }\n\t    if (args.render_type !== undefined && args.render_type !== null) {\n\t      this.render_type = args.render_type;\n\t    }\n\t    if (args.nonce !== undefined && args.nonce !== null) {\n\t      this.nonce = args.nonce;\n\t    }\n\t  }\n\t};\n\tMapD_render_args.prototype = {};\n\tMapD_render_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.query = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.render_type = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.nonce = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_render_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_render_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.query !== null && this.query !== undefined) {\n\t    output.writeFieldBegin('query', Thrift.Type.STRING, 2);\n\t    output.writeString(this.query);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.render_type !== null && this.render_type !== undefined) {\n\t    output.writeFieldBegin('render_type', Thrift.Type.STRING, 3);\n\t    output.writeString(this.render_type);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nonce !== null && this.nonce !== undefined) {\n\t    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\n\t    output.writeString(this.nonce);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_render_result = function MapD_render_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TRenderResult(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_render_result.prototype = {};\n\tMapD_render_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TRenderResult();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_render_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_render_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_rows_for_pixels_args = function MapD_get_rows_for_pixels_args(args) {\n\t  this.session = null;\n\t  this.widget_id = null;\n\t  this.pixels = null;\n\t  this.table_name = null;\n\t  this.col_names = null;\n\t  this.column_format = null;\n\t  this.nonce = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.widget_id !== undefined && args.widget_id !== null) {\n\t      this.widget_id = args.widget_id;\n\t    }\n\t    if (args.pixels !== undefined && args.pixels !== null) {\n\t      this.pixels = Thrift.copyList(args.pixels, [ttypes.TPixel]);\n\t    }\n\t    if (args.table_name !== undefined && args.table_name !== null) {\n\t      this.table_name = args.table_name;\n\t    }\n\t    if (args.col_names !== undefined && args.col_names !== null) {\n\t      this.col_names = Thrift.copyList(args.col_names, [null]);\n\t    }\n\t    if (args.column_format !== undefined && args.column_format !== null) {\n\t      this.column_format = args.column_format;\n\t    }\n\t    if (args.nonce !== undefined && args.nonce !== null) {\n\t      this.nonce = args.nonce;\n\t    }\n\t  }\n\t};\n\tMapD_get_rows_for_pixels_args.prototype = {};\n\tMapD_get_rows_for_pixels_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.widget_id = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size296 = 0;\n\t          var _rtmp3300;\n\t          this.pixels = [];\n\t          var _etype299 = 0;\n\t          _rtmp3300 = input.readListBegin();\n\t          _etype299 = _rtmp3300.etype;\n\t          _size296 = _rtmp3300.size;\n\t          for (var _i301 = 0; _i301 < _size296; ++_i301) {\n\t            var elem302 = null;\n\t            elem302 = new ttypes.TPixel();\n\t            elem302.read(input);\n\t            this.pixels.push(elem302);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.table_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size303 = 0;\n\t          var _rtmp3307;\n\t          this.col_names = [];\n\t          var _etype306 = 0;\n\t          _rtmp3307 = input.readListBegin();\n\t          _etype306 = _rtmp3307.etype;\n\t          _size303 = _rtmp3307.size;\n\t          for (var _i308 = 0; _i308 < _size303; ++_i308) {\n\t            var elem309 = null;\n\t            elem309 = input.readString();\n\t            this.col_names.push(elem309);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 6:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.column_format = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 7:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.nonce = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_rows_for_pixels_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_rows_for_pixels_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.widget_id !== null && this.widget_id !== undefined) {\n\t    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n\t    output.writeI64(this.widget_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.pixels !== null && this.pixels !== undefined) {\n\t    output.writeFieldBegin('pixels', Thrift.Type.LIST, 3);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.pixels.length);\n\t    for (var iter310 in this.pixels) {\n\t      if (this.pixels.hasOwnProperty(iter310)) {\n\t        iter310 = this.pixels[iter310];\n\t        iter310.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_name !== null && this.table_name !== undefined) {\n\t    output.writeFieldBegin('table_name', Thrift.Type.STRING, 4);\n\t    output.writeString(this.table_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.col_names !== null && this.col_names !== undefined) {\n\t    output.writeFieldBegin('col_names', Thrift.Type.LIST, 5);\n\t    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);\n\t    for (var iter311 in this.col_names) {\n\t      if (this.col_names.hasOwnProperty(iter311)) {\n\t        iter311 = this.col_names[iter311];\n\t        output.writeString(iter311);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.column_format !== null && this.column_format !== undefined) {\n\t    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 6);\n\t    output.writeBool(this.column_format);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nonce !== null && this.nonce !== undefined) {\n\t    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);\n\t    output.writeString(this.nonce);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_rows_for_pixels_result = function MapD_get_rows_for_pixels_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TPixelResult(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_rows_for_pixels_result.prototype = {};\n\tMapD_get_rows_for_pixels_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TPixelResult();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_rows_for_pixels_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_rows_for_pixels_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_row_for_pixel_args = function MapD_get_row_for_pixel_args(args) {\n\t  this.session = null;\n\t  this.widget_id = null;\n\t  this.pixel = null;\n\t  this.table_name = null;\n\t  this.col_names = null;\n\t  this.column_format = null;\n\t  this.pixelRadius = null;\n\t  this.nonce = null;\n\t  if (args) {\n\t    if (args.session !== undefined && args.session !== null) {\n\t      this.session = args.session;\n\t    }\n\t    if (args.widget_id !== undefined && args.widget_id !== null) {\n\t      this.widget_id = args.widget_id;\n\t    }\n\t    if (args.pixel !== undefined && args.pixel !== null) {\n\t      this.pixel = new ttypes.TPixel(args.pixel);\n\t    }\n\t    if (args.table_name !== undefined && args.table_name !== null) {\n\t      this.table_name = args.table_name;\n\t    }\n\t    if (args.col_names !== undefined && args.col_names !== null) {\n\t      this.col_names = Thrift.copyList(args.col_names, [null]);\n\t    }\n\t    if (args.column_format !== undefined && args.column_format !== null) {\n\t      this.column_format = args.column_format;\n\t    }\n\t    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {\n\t      this.pixelRadius = args.pixelRadius;\n\t    }\n\t    if (args.nonce !== undefined && args.nonce !== null) {\n\t      this.nonce = args.nonce;\n\t    }\n\t  }\n\t};\n\tMapD_get_row_for_pixel_args.prototype = {};\n\tMapD_get_row_for_pixel_args.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.session = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.widget_id = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.pixel = new ttypes.TPixel();\n\t          this.pixel.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.table_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size312 = 0;\n\t          var _rtmp3316;\n\t          this.col_names = [];\n\t          var _etype315 = 0;\n\t          _rtmp3316 = input.readListBegin();\n\t          _etype315 = _rtmp3316.etype;\n\t          _size312 = _rtmp3316.size;\n\t          for (var _i317 = 0; _i317 < _size312; ++_i317) {\n\t            var elem318 = null;\n\t            elem318 = input.readString();\n\t            this.col_names.push(elem318);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 6:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.column_format = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 7:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.pixelRadius = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 8:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.nonce = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_row_for_pixel_args.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_row_for_pixel_args');\n\t  if (this.session !== null && this.session !== undefined) {\n\t    output.writeFieldBegin('session', Thrift.Type.STRING, 1);\n\t    output.writeString(this.session);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.widget_id !== null && this.widget_id !== undefined) {\n\t    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);\n\t    output.writeI64(this.widget_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.pixel !== null && this.pixel !== undefined) {\n\t    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);\n\t    this.pixel.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_name !== null && this.table_name !== undefined) {\n\t    output.writeFieldBegin('table_name', Thrift.Type.STRING, 4);\n\t    output.writeString(this.table_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.col_names !== null && this.col_names !== undefined) {\n\t    output.writeFieldBegin('col_names', Thrift.Type.LIST, 5);\n\t    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);\n\t    for (var iter319 in this.col_names) {\n\t      if (this.col_names.hasOwnProperty(iter319)) {\n\t        iter319 = this.col_names[iter319];\n\t        output.writeString(iter319);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.column_format !== null && this.column_format !== undefined) {\n\t    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 6);\n\t    output.writeBool(this.column_format);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {\n\t    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 7);\n\t    output.writeI32(this.pixelRadius);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nonce !== null && this.nonce !== undefined) {\n\t    output.writeFieldBegin('nonce', Thrift.Type.STRING, 8);\n\t    output.writeString(this.nonce);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapD_get_row_for_pixel_result = function MapD_get_row_for_pixel_result(args) {\n\t  this.success = null;\n\t  this.e = null;\n\t  if (args instanceof ttypes.TMapDException) {\n\t    this.e = args;\n\t    return;\n\t  }\n\t  if (args) {\n\t    if (args.success !== undefined && args.success !== null) {\n\t      this.success = new ttypes.TPixelRowResult(args.success);\n\t    }\n\t    if (args.e !== undefined && args.e !== null) {\n\t      this.e = args.e;\n\t    }\n\t  }\n\t};\n\tMapD_get_row_for_pixel_result.prototype = {};\n\tMapD_get_row_for_pixel_result.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 0:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.success = new ttypes.TPixelRowResult();\n\t          this.success.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.e = new ttypes.TMapDException();\n\t          this.e.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tMapD_get_row_for_pixel_result.prototype.write = function (output) {\n\t  output.writeStructBegin('MapD_get_row_for_pixel_result');\n\t  if (this.success !== null && this.success !== undefined) {\n\t    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);\n\t    this.success.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.e !== null && this.e !== undefined) {\n\t    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);\n\t    this.e.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar MapDClient = exports.Client = function (output, pClass) {\n\t  this.output = output;\n\t  this.pClass = pClass;\n\t  this._seqid = 0;\n\t  this._reqs = {};\n\t};\n\tMapDClient.prototype = {};\n\tMapDClient.prototype.seqid = function () {\n\t  return this._seqid;\n\t};\n\tMapDClient.prototype.new_seqid = function () {\n\t  return this._seqid += 1;\n\t};\n\tMapDClient.prototype.connect = function (user, passwd, dbname, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_connect(user, passwd, dbname);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_connect(user, passwd, dbname);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_connect = function (user, passwd, dbname) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_connect_args();\n\t  args.user = user;\n\t  args.passwd = passwd;\n\t  args.dbname = dbname;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_connect = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_connect_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('connect failed: unknown result');\n\t};\n\tMapDClient.prototype.disconnect = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_disconnect(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_disconnect(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_disconnect = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_disconnect_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_disconnect = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_disconnect_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.get_server_status = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_server_status(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_server_status(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_server_status = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_server_status_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_server_status = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_server_status_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_server_status failed: unknown result');\n\t};\n\tMapDClient.prototype.get_tables = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_tables(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_tables(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_tables = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_tables_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_tables = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_tables_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_tables failed: unknown result');\n\t};\n\tMapDClient.prototype.get_table_details = function (session, table_name, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_table_details(session, table_name);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_table_details(session, table_name);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_table_details = function (session, table_name) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_table_details', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_table_details_args();\n\t  args.session = session;\n\t  args.table_name = table_name;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_table_details = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_table_details_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_table_details failed: unknown result');\n\t};\n\tMapDClient.prototype.get_users = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_users(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_users(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_users = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_users_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_users = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_users_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_users failed: unknown result');\n\t};\n\tMapDClient.prototype.get_databases = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_databases(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_databases(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_databases = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_databases_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_databases = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_databases_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_databases failed: unknown result');\n\t};\n\tMapDClient.prototype.get_version = function (callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_version();\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_version();\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_version = function () {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_version_args();\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_version = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_version_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_version failed: unknown result');\n\t};\n\tMapDClient.prototype.start_heap_profile = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_start_heap_profile(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_start_heap_profile(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_start_heap_profile = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_start_heap_profile_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_start_heap_profile = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_start_heap_profile_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.stop_heap_profile = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_stop_heap_profile(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_stop_heap_profile(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_stop_heap_profile = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_stop_heap_profile_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_stop_heap_profile = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_stop_heap_profile_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.get_heap_profile = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_heap_profile(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_heap_profile(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_heap_profile = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_heap_profile_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_heap_profile = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_heap_profile_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_heap_profile failed: unknown result');\n\t};\n\tMapDClient.prototype.get_memory_gpu = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_memory_gpu(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_memory_gpu(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_memory_gpu = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_memory_gpu', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_memory_gpu_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_memory_gpu = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_memory_gpu_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_memory_gpu failed: unknown result');\n\t};\n\tMapDClient.prototype.get_memory_summary = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_memory_summary(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_memory_summary(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_memory_summary = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_memory_summary', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_memory_summary_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_memory_summary = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_memory_summary_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_memory_summary failed: unknown result');\n\t};\n\tMapDClient.prototype.clear_cpu_memory = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_clear_cpu_memory(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_clear_cpu_memory(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_clear_cpu_memory = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('clear_cpu_memory', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_clear_cpu_memory_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_clear_cpu_memory = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_clear_cpu_memory_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.clear_gpu_memory = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_clear_gpu_memory(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_clear_gpu_memory(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_clear_gpu_memory = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_clear_gpu_memory_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_clear_gpu_memory = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_clear_gpu_memory_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.sql_execute = function (session, query, column_format, nonce, first_n, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_sql_execute(session, query, column_format, nonce, first_n);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_sql_execute(session, query, column_format, nonce, first_n);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_sql_execute = function (session, query, column_format, nonce, first_n) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_sql_execute_args();\n\t  args.session = session;\n\t  args.query = query;\n\t  args.column_format = column_format;\n\t  args.nonce = nonce;\n\t  args.first_n = first_n;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_sql_execute = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_sql_execute_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('sql_execute failed: unknown result');\n\t};\n\tMapDClient.prototype.sql_execute_gpudf = function (session, query, device_id, first_n, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_sql_execute_gpudf(session, query, device_id, first_n);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_sql_execute_gpudf(session, query, device_id, first_n);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_sql_execute_gpudf = function (session, query, device_id, first_n) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('sql_execute_gpudf', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_sql_execute_gpudf_args();\n\t  args.session = session;\n\t  args.query = query;\n\t  args.device_id = device_id;\n\t  args.first_n = first_n;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_sql_execute_gpudf = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_sql_execute_gpudf_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('sql_execute_gpudf failed: unknown result');\n\t};\n\tMapDClient.prototype.interrupt = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_interrupt(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_interrupt(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_interrupt = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('interrupt', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_interrupt_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_interrupt = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_interrupt_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.sql_validate = function (session, query, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_sql_validate(session, query);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_sql_validate(session, query);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_sql_validate = function (session, query) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_sql_validate_args();\n\t  args.session = session;\n\t  args.query = query;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_sql_validate = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_sql_validate_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('sql_validate failed: unknown result');\n\t};\n\tMapDClient.prototype.set_execution_mode = function (session, mode, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_set_execution_mode(session, mode);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_set_execution_mode(session, mode);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_set_execution_mode = function (session, mode) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_set_execution_mode_args();\n\t  args.session = session;\n\t  args.mode = mode;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_set_execution_mode = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_set_execution_mode_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.render_vega = function (session, widget_id, vega_json, compression_level, nonce, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_render_vega(session, widget_id, vega_json, compression_level, nonce);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_render_vega(session, widget_id, vega_json, compression_level, nonce);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_render_vega = function (session, widget_id, vega_json, compression_level, nonce) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_render_vega_args();\n\t  args.session = session;\n\t  args.widget_id = widget_id;\n\t  args.vega_json = vega_json;\n\t  args.compression_level = compression_level;\n\t  args.nonce = nonce;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_render_vega = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_render_vega_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('render_vega failed: unknown result');\n\t};\n\tMapDClient.prototype.get_result_row_for_pixel = function (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_result_row_for_pixel = function (session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_result_row_for_pixel_args();\n\t  args.session = session;\n\t  args.widget_id = widget_id;\n\t  args.pixel = pixel;\n\t  args.table_col_names = table_col_names;\n\t  args.column_format = column_format;\n\t  args.pixelRadius = pixelRadius;\n\t  args.nonce = nonce;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_result_row_for_pixel = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_result_row_for_pixel_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_result_row_for_pixel failed: unknown result');\n\t};\n\tMapDClient.prototype.get_frontend_view = function (session, view_name, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_frontend_view(session, view_name);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_frontend_view(session, view_name);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_frontend_view = function (session, view_name) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_frontend_view', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_frontend_view_args();\n\t  args.session = session;\n\t  args.view_name = view_name;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_frontend_view = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_frontend_view_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_frontend_view failed: unknown result');\n\t};\n\tMapDClient.prototype.get_frontend_views = function (session, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_frontend_views(session);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_frontend_views(session);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_frontend_views = function (session) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_frontend_views', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_frontend_views_args();\n\t  args.session = session;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_frontend_views = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_frontend_views_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_frontend_views failed: unknown result');\n\t};\n\tMapDClient.prototype.create_frontend_view = function (session, view_name, view_state, image_hash, view_metadata, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_create_frontend_view(session, view_name, view_state, image_hash, view_metadata);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_create_frontend_view(session, view_name, view_state, image_hash, view_metadata);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_create_frontend_view = function (session, view_name, view_state, image_hash, view_metadata) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('create_frontend_view', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_create_frontend_view_args();\n\t  args.session = session;\n\t  args.view_name = view_name;\n\t  args.view_state = view_state;\n\t  args.image_hash = image_hash;\n\t  args.view_metadata = view_metadata;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_create_frontend_view = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_create_frontend_view_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.delete_frontend_view = function (session, view_name, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_delete_frontend_view(session, view_name);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_delete_frontend_view(session, view_name);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_delete_frontend_view = function (session, view_name) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('delete_frontend_view', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_delete_frontend_view_args();\n\t  args.session = session;\n\t  args.view_name = view_name;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_delete_frontend_view = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_delete_frontend_view_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.get_link_view = function (session, link, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_link_view(session, link);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_link_view(session, link);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_link_view = function (session, link) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_link_view_args();\n\t  args.session = session;\n\t  args.link = link;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_link_view = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_link_view_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_link_view failed: unknown result');\n\t};\n\tMapDClient.prototype.create_link = function (session, view_state, view_metadata, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_create_link(session, view_state, view_metadata);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_create_link(session, view_state, view_metadata);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_create_link = function (session, view_state, view_metadata) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_create_link_args();\n\t  args.session = session;\n\t  args.view_state = view_state;\n\t  args.view_metadata = view_metadata;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_create_link = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_create_link_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('create_link failed: unknown result');\n\t};\n\tMapDClient.prototype.load_table_binary = function (session, table_name, rows, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_load_table_binary(session, table_name, rows);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_load_table_binary(session, table_name, rows);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_load_table_binary = function (session, table_name, rows) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_load_table_binary_args();\n\t  args.session = session;\n\t  args.table_name = table_name;\n\t  args.rows = rows;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_load_table_binary = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_load_table_binary_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.load_table = function (session, table_name, rows, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_load_table(session, table_name, rows);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_load_table(session, table_name, rows);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_load_table = function (session, table_name, rows) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_load_table_args();\n\t  args.session = session;\n\t  args.table_name = table_name;\n\t  args.rows = rows;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_load_table = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_load_table_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.detect_column_types = function (session, file_name, copy_params, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_detect_column_types(session, file_name, copy_params);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_detect_column_types(session, file_name, copy_params);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_detect_column_types = function (session, file_name, copy_params) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_detect_column_types_args();\n\t  args.session = session;\n\t  args.file_name = file_name;\n\t  args.copy_params = copy_params;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_detect_column_types = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_detect_column_types_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('detect_column_types failed: unknown result');\n\t};\n\tMapDClient.prototype.create_table = function (session, table_name, row_desc, table_type, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_create_table(session, table_name, row_desc, table_type);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_create_table(session, table_name, row_desc, table_type);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_create_table = function (session, table_name, row_desc, table_type) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_create_table_args();\n\t  args.session = session;\n\t  args.table_name = table_name;\n\t  args.row_desc = row_desc;\n\t  args.table_type = table_type;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_create_table = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_create_table_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.import_table = function (session, table_name, file_name, copy_params, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_import_table(session, table_name, file_name, copy_params);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_import_table(session, table_name, file_name, copy_params);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_import_table = function (session, table_name, file_name, copy_params) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_import_table_args();\n\t  args.session = session;\n\t  args.table_name = table_name;\n\t  args.file_name = file_name;\n\t  args.copy_params = copy_params;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_import_table = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_import_table_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.import_geo_table = function (session, table_name, file_name, copy_params, row_desc, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_import_geo_table(session, table_name, file_name, copy_params, row_desc);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_import_geo_table = function (session, table_name, file_name, copy_params, row_desc) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_import_geo_table_args();\n\t  args.session = session;\n\t  args.table_name = table_name;\n\t  args.file_name = file_name;\n\t  args.copy_params = copy_params;\n\t  args.row_desc = row_desc;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_import_geo_table = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_import_geo_table_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.import_table_status = function (session, import_id, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_import_table_status(session, import_id);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_import_table_status(session, import_id);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_import_table_status = function (session, import_id) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_import_table_status_args();\n\t  args.session = session;\n\t  args.import_id = import_id;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_import_table_status = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_import_table_status_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('import_table_status failed: unknown result');\n\t};\n\tMapDClient.prototype.start_query = function (session, query_ra, just_explain, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_start_query(session, query_ra, just_explain);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_start_query(session, query_ra, just_explain);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_start_query = function (session, query_ra, just_explain) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_start_query_args();\n\t  args.session = session;\n\t  args.query_ra = query_ra;\n\t  args.just_explain = just_explain;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_start_query = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_start_query_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('start_query failed: unknown result');\n\t};\n\tMapDClient.prototype.execute_first_step = function (pending_query, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_execute_first_step(pending_query);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_execute_first_step(pending_query);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_execute_first_step = function (pending_query) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('execute_first_step', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_execute_first_step_args();\n\t  args.pending_query = pending_query;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_execute_first_step = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_execute_first_step_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('execute_first_step failed: unknown result');\n\t};\n\tMapDClient.prototype.broadcast_serialized_rows = function (serialized_rows, row_desc, query_id, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_broadcast_serialized_rows = function (serialized_rows, row_desc, query_id) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_broadcast_serialized_rows_args();\n\t  args.serialized_rows = serialized_rows;\n\t  args.row_desc = row_desc;\n\t  args.query_id = query_id;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_broadcast_serialized_rows = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_broadcast_serialized_rows_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.render_vega_raw_pixels = function (session, widget_id, node_idx, vega_json, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_render_vega_raw_pixels(session, widget_id, node_idx, vega_json);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_render_vega_raw_pixels(session, widget_id, node_idx, vega_json);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_render_vega_raw_pixels = function (session, widget_id, node_idx, vega_json) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('render_vega_raw_pixels', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_render_vega_raw_pixels_args();\n\t  args.session = session;\n\t  args.widget_id = widget_id;\n\t  args.node_idx = node_idx;\n\t  args.vega_json = vega_json;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_render_vega_raw_pixels = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_render_vega_raw_pixels_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('render_vega_raw_pixels failed: unknown result');\n\t};\n\tMapDClient.prototype.insert_data = function (session, insert_data, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_insert_data(session, insert_data);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_insert_data(session, insert_data);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_insert_data = function (session, insert_data) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('insert_data', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_insert_data_args();\n\t  args.session = session;\n\t  args.insert_data = insert_data;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_insert_data = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_insert_data_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  callback(null);\n\t};\n\tMapDClient.prototype.get_table_descriptor = function (session, table_name, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_table_descriptor(session, table_name);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_table_descriptor(session, table_name);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_table_descriptor = function (session, table_name) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_table_descriptor', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_table_descriptor_args();\n\t  args.session = session;\n\t  args.table_name = table_name;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_table_descriptor = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_table_descriptor_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_table_descriptor failed: unknown result');\n\t};\n\tMapDClient.prototype.get_row_descriptor = function (session, table_name, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_row_descriptor(session, table_name);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_row_descriptor(session, table_name);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_row_descriptor = function (session, table_name) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_row_descriptor', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_row_descriptor_args();\n\t  args.session = session;\n\t  args.table_name = table_name;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_row_descriptor = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_row_descriptor_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_row_descriptor failed: unknown result');\n\t};\n\tMapDClient.prototype.render = function (session, query, render_type, nonce, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_render(session, query, render_type, nonce);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_render(session, query, render_type, nonce);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_render = function (session, query, render_type, nonce) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('render', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_render_args();\n\t  args.session = session;\n\t  args.query = query;\n\t  args.render_type = render_type;\n\t  args.nonce = nonce;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_render = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_render_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('render failed: unknown result');\n\t};\n\tMapDClient.prototype.get_rows_for_pixels = function (session, widget_id, pixels, table_name, col_names, column_format, nonce, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_rows_for_pixels(session, widget_id, pixels, table_name, col_names, column_format, nonce);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_rows_for_pixels(session, widget_id, pixels, table_name, col_names, column_format, nonce);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_rows_for_pixels = function (session, widget_id, pixels, table_name, col_names, column_format, nonce) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_rows_for_pixels', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_rows_for_pixels_args();\n\t  args.session = session;\n\t  args.widget_id = widget_id;\n\t  args.pixels = pixels;\n\t  args.table_name = table_name;\n\t  args.col_names = col_names;\n\t  args.column_format = column_format;\n\t  args.nonce = nonce;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_rows_for_pixels = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_rows_for_pixels_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_rows_for_pixels failed: unknown result');\n\t};\n\tMapDClient.prototype.get_row_for_pixel = function (session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce, callback) {\n\t  this._seqid = this.new_seqid();\n\t  if (callback === undefined) {\n\t    var _defer = Q.defer();\n\t    this._reqs[this.seqid()] = function (error, result) {\n\t      if (error) {\n\t        _defer.reject(error);\n\t      } else {\n\t        _defer.resolve(result);\n\t      }\n\t    };\n\t    this.send_get_row_for_pixel(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce);\n\t    return _defer.promise;\n\t  } else {\n\t    this._reqs[this.seqid()] = callback;\n\t    this.send_get_row_for_pixel(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce);\n\t  }\n\t};\n\n\tMapDClient.prototype.send_get_row_for_pixel = function (session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce) {\n\t  var output = new this.pClass(this.output);\n\t  output.writeMessageBegin('get_row_for_pixel', Thrift.MessageType.CALL, this.seqid());\n\t  var args = new MapD_get_row_for_pixel_args();\n\t  args.session = session;\n\t  args.widget_id = widget_id;\n\t  args.pixel = pixel;\n\t  args.table_name = table_name;\n\t  args.col_names = col_names;\n\t  args.column_format = column_format;\n\t  args.pixelRadius = pixelRadius;\n\t  args.nonce = nonce;\n\t  args.write(output);\n\t  output.writeMessageEnd();\n\t  return this.output.flush();\n\t};\n\n\tMapDClient.prototype.recv_get_row_for_pixel = function (input, mtype, rseqid) {\n\t  var callback = this._reqs[rseqid] || function () {};\n\t  delete this._reqs[rseqid];\n\t  if (mtype == Thrift.MessageType.EXCEPTION) {\n\t    var x = new Thrift.TApplicationException();\n\t    x.read(input);\n\t    input.readMessageEnd();\n\t    return callback(x);\n\t  }\n\t  var result = new MapD_get_row_for_pixel_result();\n\t  result.read(input);\n\t  input.readMessageEnd();\n\n\t  if (null !== result.e) {\n\t    return callback(result.e);\n\t  }\n\t  if (null !== result.success) {\n\t    return callback(null, result.success);\n\t  }\n\t  return callback('get_row_for_pixel failed: unknown result');\n\t};\n\tvar MapDProcessor = exports.Processor = function (handler) {\n\t  this._handler = handler;\n\t};\n\tMapDProcessor.prototype.process = function (input, output) {\n\t  var r = input.readMessageBegin();\n\t  if (this['process_' + r.fname]) {\n\t    return this['process_' + r.fname].call(this, r.rseqid, input, output);\n\t  } else {\n\t    input.skip(Thrift.Type.STRUCT);\n\t    input.readMessageEnd();\n\t    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);\n\t    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);\n\t    x.write(output);\n\t    output.writeMessageEnd();\n\t    output.flush();\n\t  }\n\t};\n\tMapDProcessor.prototype.process_connect = function (seqid, input, output) {\n\t  var args = new MapD_connect_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.connect.length === 3) {\n\t    Q.fcall(this._handler.connect, args.user, args.passwd, args.dbname).then(function (result) {\n\t      var result_obj = new MapD_connect_result({ success: result });\n\t      output.writeMessageBegin(\"connect\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_connect_result(err);\n\t        output.writeMessageBegin(\"connect\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"connect\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.connect(args.user, args.passwd, args.dbname, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_connect_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"connect\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"connect\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_disconnect = function (seqid, input, output) {\n\t  var args = new MapD_disconnect_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.disconnect.length === 1) {\n\t    Q.fcall(this._handler.disconnect, args.session).then(function (result) {\n\t      var result_obj = new MapD_disconnect_result({ success: result });\n\t      output.writeMessageBegin(\"disconnect\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_disconnect_result(err);\n\t        output.writeMessageBegin(\"disconnect\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"disconnect\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.disconnect(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_disconnect_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"disconnect\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"disconnect\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_server_status = function (seqid, input, output) {\n\t  var args = new MapD_get_server_status_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_server_status.length === 1) {\n\t    Q.fcall(this._handler.get_server_status, args.session).then(function (result) {\n\t      var result_obj = new MapD_get_server_status_result({ success: result });\n\t      output.writeMessageBegin(\"get_server_status\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_server_status_result(err);\n\t        output.writeMessageBegin(\"get_server_status\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_server_status\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_server_status(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_server_status_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_server_status\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_server_status\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_tables = function (seqid, input, output) {\n\t  var args = new MapD_get_tables_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_tables.length === 1) {\n\t    Q.fcall(this._handler.get_tables, args.session).then(function (result) {\n\t      var result_obj = new MapD_get_tables_result({ success: result });\n\t      output.writeMessageBegin(\"get_tables\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_tables_result(err);\n\t        output.writeMessageBegin(\"get_tables\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_tables\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_tables(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_tables_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_tables\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_tables\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_table_details = function (seqid, input, output) {\n\t  var args = new MapD_get_table_details_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_table_details.length === 2) {\n\t    Q.fcall(this._handler.get_table_details, args.session, args.table_name).then(function (result) {\n\t      var result_obj = new MapD_get_table_details_result({ success: result });\n\t      output.writeMessageBegin(\"get_table_details\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_table_details_result(err);\n\t        output.writeMessageBegin(\"get_table_details\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_table_details\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_table_details(args.session, args.table_name, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_table_details_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_table_details\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_table_details\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_users = function (seqid, input, output) {\n\t  var args = new MapD_get_users_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_users.length === 1) {\n\t    Q.fcall(this._handler.get_users, args.session).then(function (result) {\n\t      var result_obj = new MapD_get_users_result({ success: result });\n\t      output.writeMessageBegin(\"get_users\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_users_result(err);\n\t        output.writeMessageBegin(\"get_users\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_users\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_users(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_users_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_users\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_users\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_databases = function (seqid, input, output) {\n\t  var args = new MapD_get_databases_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_databases.length === 1) {\n\t    Q.fcall(this._handler.get_databases, args.session).then(function (result) {\n\t      var result_obj = new MapD_get_databases_result({ success: result });\n\t      output.writeMessageBegin(\"get_databases\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_databases_result(err);\n\t        output.writeMessageBegin(\"get_databases\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_databases\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_databases(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_databases_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_databases\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_databases\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_version = function (seqid, input, output) {\n\t  var args = new MapD_get_version_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_version.length === 0) {\n\t    Q.fcall(this._handler.get_version).then(function (result) {\n\t      var result_obj = new MapD_get_version_result({ success: result });\n\t      output.writeMessageBegin(\"get_version\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_version_result(err);\n\t        output.writeMessageBegin(\"get_version\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_version\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_version(function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_version_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_version\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_version\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_start_heap_profile = function (seqid, input, output) {\n\t  var args = new MapD_start_heap_profile_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.start_heap_profile.length === 1) {\n\t    Q.fcall(this._handler.start_heap_profile, args.session).then(function (result) {\n\t      var result_obj = new MapD_start_heap_profile_result({ success: result });\n\t      output.writeMessageBegin(\"start_heap_profile\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_start_heap_profile_result(err);\n\t        output.writeMessageBegin(\"start_heap_profile\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"start_heap_profile\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.start_heap_profile(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_start_heap_profile_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"start_heap_profile\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"start_heap_profile\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_stop_heap_profile = function (seqid, input, output) {\n\t  var args = new MapD_stop_heap_profile_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.stop_heap_profile.length === 1) {\n\t    Q.fcall(this._handler.stop_heap_profile, args.session).then(function (result) {\n\t      var result_obj = new MapD_stop_heap_profile_result({ success: result });\n\t      output.writeMessageBegin(\"stop_heap_profile\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_stop_heap_profile_result(err);\n\t        output.writeMessageBegin(\"stop_heap_profile\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"stop_heap_profile\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.stop_heap_profile(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_stop_heap_profile_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"stop_heap_profile\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"stop_heap_profile\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_heap_profile = function (seqid, input, output) {\n\t  var args = new MapD_get_heap_profile_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_heap_profile.length === 1) {\n\t    Q.fcall(this._handler.get_heap_profile, args.session).then(function (result) {\n\t      var result_obj = new MapD_get_heap_profile_result({ success: result });\n\t      output.writeMessageBegin(\"get_heap_profile\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_heap_profile_result(err);\n\t        output.writeMessageBegin(\"get_heap_profile\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_heap_profile\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_heap_profile(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_heap_profile_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_heap_profile\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_heap_profile\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_memory_gpu = function (seqid, input, output) {\n\t  var args = new MapD_get_memory_gpu_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_memory_gpu.length === 1) {\n\t    Q.fcall(this._handler.get_memory_gpu, args.session).then(function (result) {\n\t      var result_obj = new MapD_get_memory_gpu_result({ success: result });\n\t      output.writeMessageBegin(\"get_memory_gpu\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_memory_gpu_result(err);\n\t        output.writeMessageBegin(\"get_memory_gpu\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_memory_gpu\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_memory_gpu(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_memory_gpu_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_memory_gpu\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_memory_gpu\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_memory_summary = function (seqid, input, output) {\n\t  var args = new MapD_get_memory_summary_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_memory_summary.length === 1) {\n\t    Q.fcall(this._handler.get_memory_summary, args.session).then(function (result) {\n\t      var result_obj = new MapD_get_memory_summary_result({ success: result });\n\t      output.writeMessageBegin(\"get_memory_summary\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_memory_summary_result(err);\n\t        output.writeMessageBegin(\"get_memory_summary\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_memory_summary\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_memory_summary(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_memory_summary_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_memory_summary\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_memory_summary\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_clear_cpu_memory = function (seqid, input, output) {\n\t  var args = new MapD_clear_cpu_memory_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.clear_cpu_memory.length === 1) {\n\t    Q.fcall(this._handler.clear_cpu_memory, args.session).then(function (result) {\n\t      var result_obj = new MapD_clear_cpu_memory_result({ success: result });\n\t      output.writeMessageBegin(\"clear_cpu_memory\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_clear_cpu_memory_result(err);\n\t        output.writeMessageBegin(\"clear_cpu_memory\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"clear_cpu_memory\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.clear_cpu_memory(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_clear_cpu_memory_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"clear_cpu_memory\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"clear_cpu_memory\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_clear_gpu_memory = function (seqid, input, output) {\n\t  var args = new MapD_clear_gpu_memory_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.clear_gpu_memory.length === 1) {\n\t    Q.fcall(this._handler.clear_gpu_memory, args.session).then(function (result) {\n\t      var result_obj = new MapD_clear_gpu_memory_result({ success: result });\n\t      output.writeMessageBegin(\"clear_gpu_memory\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_clear_gpu_memory_result(err);\n\t        output.writeMessageBegin(\"clear_gpu_memory\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"clear_gpu_memory\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.clear_gpu_memory(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_clear_gpu_memory_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"clear_gpu_memory\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"clear_gpu_memory\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_sql_execute = function (seqid, input, output) {\n\t  var args = new MapD_sql_execute_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.sql_execute.length === 5) {\n\t    Q.fcall(this._handler.sql_execute, args.session, args.query, args.column_format, args.nonce, args.first_n).then(function (result) {\n\t      var result_obj = new MapD_sql_execute_result({ success: result });\n\t      output.writeMessageBegin(\"sql_execute\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_sql_execute_result(err);\n\t        output.writeMessageBegin(\"sql_execute\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"sql_execute\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.sql_execute(args.session, args.query, args.column_format, args.nonce, args.first_n, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_sql_execute_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"sql_execute\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"sql_execute\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_sql_execute_gpudf = function (seqid, input, output) {\n\t  var args = new MapD_sql_execute_gpudf_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.sql_execute_gpudf.length === 4) {\n\t    Q.fcall(this._handler.sql_execute_gpudf, args.session, args.query, args.device_id, args.first_n).then(function (result) {\n\t      var result_obj = new MapD_sql_execute_gpudf_result({ success: result });\n\t      output.writeMessageBegin(\"sql_execute_gpudf\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_sql_execute_gpudf_result(err);\n\t        output.writeMessageBegin(\"sql_execute_gpudf\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"sql_execute_gpudf\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.sql_execute_gpudf(args.session, args.query, args.device_id, args.first_n, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_sql_execute_gpudf_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"sql_execute_gpudf\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"sql_execute_gpudf\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_interrupt = function (seqid, input, output) {\n\t  var args = new MapD_interrupt_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.interrupt.length === 1) {\n\t    Q.fcall(this._handler.interrupt, args.session).then(function (result) {\n\t      var result_obj = new MapD_interrupt_result({ success: result });\n\t      output.writeMessageBegin(\"interrupt\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_interrupt_result(err);\n\t        output.writeMessageBegin(\"interrupt\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"interrupt\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.interrupt(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_interrupt_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"interrupt\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"interrupt\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_sql_validate = function (seqid, input, output) {\n\t  var args = new MapD_sql_validate_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.sql_validate.length === 2) {\n\t    Q.fcall(this._handler.sql_validate, args.session, args.query).then(function (result) {\n\t      var result_obj = new MapD_sql_validate_result({ success: result });\n\t      output.writeMessageBegin(\"sql_validate\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_sql_validate_result(err);\n\t        output.writeMessageBegin(\"sql_validate\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"sql_validate\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.sql_validate(args.session, args.query, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_sql_validate_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"sql_validate\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"sql_validate\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_set_execution_mode = function (seqid, input, output) {\n\t  var args = new MapD_set_execution_mode_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.set_execution_mode.length === 2) {\n\t    Q.fcall(this._handler.set_execution_mode, args.session, args.mode).then(function (result) {\n\t      var result_obj = new MapD_set_execution_mode_result({ success: result });\n\t      output.writeMessageBegin(\"set_execution_mode\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_set_execution_mode_result(err);\n\t        output.writeMessageBegin(\"set_execution_mode\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"set_execution_mode\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.set_execution_mode(args.session, args.mode, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_set_execution_mode_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"set_execution_mode\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"set_execution_mode\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_render_vega = function (seqid, input, output) {\n\t  var args = new MapD_render_vega_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.render_vega.length === 5) {\n\t    Q.fcall(this._handler.render_vega, args.session, args.widget_id, args.vega_json, args.compression_level, args.nonce).then(function (result) {\n\t      var result_obj = new MapD_render_vega_result({ success: result });\n\t      output.writeMessageBegin(\"render_vega\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_render_vega_result(err);\n\t        output.writeMessageBegin(\"render_vega\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"render_vega\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.render_vega(args.session, args.widget_id, args.vega_json, args.compression_level, args.nonce, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_render_vega_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"render_vega\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"render_vega\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_result_row_for_pixel = function (seqid, input, output) {\n\t  var args = new MapD_get_result_row_for_pixel_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_result_row_for_pixel.length === 7) {\n\t    Q.fcall(this._handler.get_result_row_for_pixel, args.session, args.widget_id, args.pixel, args.table_col_names, args.column_format, args.pixelRadius, args.nonce).then(function (result) {\n\t      var result_obj = new MapD_get_result_row_for_pixel_result({ success: result });\n\t      output.writeMessageBegin(\"get_result_row_for_pixel\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_result_row_for_pixel_result(err);\n\t        output.writeMessageBegin(\"get_result_row_for_pixel\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_result_row_for_pixel\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_result_row_for_pixel(args.session, args.widget_id, args.pixel, args.table_col_names, args.column_format, args.pixelRadius, args.nonce, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_result_row_for_pixel_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_result_row_for_pixel\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_result_row_for_pixel\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_frontend_view = function (seqid, input, output) {\n\t  var args = new MapD_get_frontend_view_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_frontend_view.length === 2) {\n\t    Q.fcall(this._handler.get_frontend_view, args.session, args.view_name).then(function (result) {\n\t      var result_obj = new MapD_get_frontend_view_result({ success: result });\n\t      output.writeMessageBegin(\"get_frontend_view\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_frontend_view_result(err);\n\t        output.writeMessageBegin(\"get_frontend_view\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_frontend_view\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_frontend_view(args.session, args.view_name, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_frontend_view_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_frontend_view\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_frontend_view\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_frontend_views = function (seqid, input, output) {\n\t  var args = new MapD_get_frontend_views_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_frontend_views.length === 1) {\n\t    Q.fcall(this._handler.get_frontend_views, args.session).then(function (result) {\n\t      var result_obj = new MapD_get_frontend_views_result({ success: result });\n\t      output.writeMessageBegin(\"get_frontend_views\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_frontend_views_result(err);\n\t        output.writeMessageBegin(\"get_frontend_views\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_frontend_views\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_frontend_views(args.session, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_frontend_views_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_frontend_views\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_frontend_views\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_create_frontend_view = function (seqid, input, output) {\n\t  var args = new MapD_create_frontend_view_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.create_frontend_view.length === 5) {\n\t    Q.fcall(this._handler.create_frontend_view, args.session, args.view_name, args.view_state, args.image_hash, args.view_metadata).then(function (result) {\n\t      var result_obj = new MapD_create_frontend_view_result({ success: result });\n\t      output.writeMessageBegin(\"create_frontend_view\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_create_frontend_view_result(err);\n\t        output.writeMessageBegin(\"create_frontend_view\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"create_frontend_view\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.create_frontend_view(args.session, args.view_name, args.view_state, args.image_hash, args.view_metadata, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_create_frontend_view_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"create_frontend_view\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"create_frontend_view\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_delete_frontend_view = function (seqid, input, output) {\n\t  var args = new MapD_delete_frontend_view_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.delete_frontend_view.length === 2) {\n\t    Q.fcall(this._handler.delete_frontend_view, args.session, args.view_name).then(function (result) {\n\t      var result_obj = new MapD_delete_frontend_view_result({ success: result });\n\t      output.writeMessageBegin(\"delete_frontend_view\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_delete_frontend_view_result(err);\n\t        output.writeMessageBegin(\"delete_frontend_view\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"delete_frontend_view\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.delete_frontend_view(args.session, args.view_name, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_delete_frontend_view_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"delete_frontend_view\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"delete_frontend_view\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_link_view = function (seqid, input, output) {\n\t  var args = new MapD_get_link_view_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_link_view.length === 2) {\n\t    Q.fcall(this._handler.get_link_view, args.session, args.link).then(function (result) {\n\t      var result_obj = new MapD_get_link_view_result({ success: result });\n\t      output.writeMessageBegin(\"get_link_view\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_link_view_result(err);\n\t        output.writeMessageBegin(\"get_link_view\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_link_view\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_link_view(args.session, args.link, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_link_view_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_link_view\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_link_view\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_create_link = function (seqid, input, output) {\n\t  var args = new MapD_create_link_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.create_link.length === 3) {\n\t    Q.fcall(this._handler.create_link, args.session, args.view_state, args.view_metadata).then(function (result) {\n\t      var result_obj = new MapD_create_link_result({ success: result });\n\t      output.writeMessageBegin(\"create_link\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_create_link_result(err);\n\t        output.writeMessageBegin(\"create_link\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"create_link\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.create_link(args.session, args.view_state, args.view_metadata, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_create_link_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"create_link\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"create_link\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_load_table_binary = function (seqid, input, output) {\n\t  var args = new MapD_load_table_binary_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.load_table_binary.length === 3) {\n\t    Q.fcall(this._handler.load_table_binary, args.session, args.table_name, args.rows).then(function (result) {\n\t      var result_obj = new MapD_load_table_binary_result({ success: result });\n\t      output.writeMessageBegin(\"load_table_binary\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_load_table_binary_result(err);\n\t        output.writeMessageBegin(\"load_table_binary\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"load_table_binary\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.load_table_binary(args.session, args.table_name, args.rows, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_load_table_binary_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"load_table_binary\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"load_table_binary\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_load_table = function (seqid, input, output) {\n\t  var args = new MapD_load_table_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.load_table.length === 3) {\n\t    Q.fcall(this._handler.load_table, args.session, args.table_name, args.rows).then(function (result) {\n\t      var result_obj = new MapD_load_table_result({ success: result });\n\t      output.writeMessageBegin(\"load_table\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_load_table_result(err);\n\t        output.writeMessageBegin(\"load_table\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"load_table\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.load_table(args.session, args.table_name, args.rows, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_load_table_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"load_table\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"load_table\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_detect_column_types = function (seqid, input, output) {\n\t  var args = new MapD_detect_column_types_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.detect_column_types.length === 3) {\n\t    Q.fcall(this._handler.detect_column_types, args.session, args.file_name, args.copy_params).then(function (result) {\n\t      var result_obj = new MapD_detect_column_types_result({ success: result });\n\t      output.writeMessageBegin(\"detect_column_types\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_detect_column_types_result(err);\n\t        output.writeMessageBegin(\"detect_column_types\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"detect_column_types\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.detect_column_types(args.session, args.file_name, args.copy_params, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_detect_column_types_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"detect_column_types\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"detect_column_types\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_create_table = function (seqid, input, output) {\n\t  var args = new MapD_create_table_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.create_table.length === 4) {\n\t    Q.fcall(this._handler.create_table, args.session, args.table_name, args.row_desc, args.table_type).then(function (result) {\n\t      var result_obj = new MapD_create_table_result({ success: result });\n\t      output.writeMessageBegin(\"create_table\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_create_table_result(err);\n\t        output.writeMessageBegin(\"create_table\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"create_table\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.create_table(args.session, args.table_name, args.row_desc, args.table_type, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_create_table_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"create_table\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"create_table\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_import_table = function (seqid, input, output) {\n\t  var args = new MapD_import_table_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.import_table.length === 4) {\n\t    Q.fcall(this._handler.import_table, args.session, args.table_name, args.file_name, args.copy_params).then(function (result) {\n\t      var result_obj = new MapD_import_table_result({ success: result });\n\t      output.writeMessageBegin(\"import_table\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_import_table_result(err);\n\t        output.writeMessageBegin(\"import_table\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"import_table\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.import_table(args.session, args.table_name, args.file_name, args.copy_params, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_import_table_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"import_table\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"import_table\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_import_geo_table = function (seqid, input, output) {\n\t  var args = new MapD_import_geo_table_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.import_geo_table.length === 5) {\n\t    Q.fcall(this._handler.import_geo_table, args.session, args.table_name, args.file_name, args.copy_params, args.row_desc).then(function (result) {\n\t      var result_obj = new MapD_import_geo_table_result({ success: result });\n\t      output.writeMessageBegin(\"import_geo_table\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_import_geo_table_result(err);\n\t        output.writeMessageBegin(\"import_geo_table\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"import_geo_table\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.import_geo_table(args.session, args.table_name, args.file_name, args.copy_params, args.row_desc, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_import_geo_table_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"import_geo_table\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"import_geo_table\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_import_table_status = function (seqid, input, output) {\n\t  var args = new MapD_import_table_status_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.import_table_status.length === 2) {\n\t    Q.fcall(this._handler.import_table_status, args.session, args.import_id).then(function (result) {\n\t      var result_obj = new MapD_import_table_status_result({ success: result });\n\t      output.writeMessageBegin(\"import_table_status\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_import_table_status_result(err);\n\t        output.writeMessageBegin(\"import_table_status\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"import_table_status\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.import_table_status(args.session, args.import_id, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_import_table_status_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"import_table_status\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"import_table_status\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_start_query = function (seqid, input, output) {\n\t  var args = new MapD_start_query_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.start_query.length === 3) {\n\t    Q.fcall(this._handler.start_query, args.session, args.query_ra, args.just_explain).then(function (result) {\n\t      var result_obj = new MapD_start_query_result({ success: result });\n\t      output.writeMessageBegin(\"start_query\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_start_query_result(err);\n\t        output.writeMessageBegin(\"start_query\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"start_query\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.start_query(args.session, args.query_ra, args.just_explain, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_start_query_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"start_query\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"start_query\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_execute_first_step = function (seqid, input, output) {\n\t  var args = new MapD_execute_first_step_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.execute_first_step.length === 1) {\n\t    Q.fcall(this._handler.execute_first_step, args.pending_query).then(function (result) {\n\t      var result_obj = new MapD_execute_first_step_result({ success: result });\n\t      output.writeMessageBegin(\"execute_first_step\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_execute_first_step_result(err);\n\t        output.writeMessageBegin(\"execute_first_step\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"execute_first_step\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.execute_first_step(args.pending_query, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_execute_first_step_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"execute_first_step\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"execute_first_step\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_broadcast_serialized_rows = function (seqid, input, output) {\n\t  var args = new MapD_broadcast_serialized_rows_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.broadcast_serialized_rows.length === 3) {\n\t    Q.fcall(this._handler.broadcast_serialized_rows, args.serialized_rows, args.row_desc, args.query_id).then(function (result) {\n\t      var result_obj = new MapD_broadcast_serialized_rows_result({ success: result });\n\t      output.writeMessageBegin(\"broadcast_serialized_rows\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_broadcast_serialized_rows_result(err);\n\t        output.writeMessageBegin(\"broadcast_serialized_rows\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"broadcast_serialized_rows\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.broadcast_serialized_rows(args.serialized_rows, args.row_desc, args.query_id, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_broadcast_serialized_rows_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"broadcast_serialized_rows\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"broadcast_serialized_rows\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_render_vega_raw_pixels = function (seqid, input, output) {\n\t  var args = new MapD_render_vega_raw_pixels_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.render_vega_raw_pixels.length === 4) {\n\t    Q.fcall(this._handler.render_vega_raw_pixels, args.session, args.widget_id, args.node_idx, args.vega_json).then(function (result) {\n\t      var result_obj = new MapD_render_vega_raw_pixels_result({ success: result });\n\t      output.writeMessageBegin(\"render_vega_raw_pixels\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_render_vega_raw_pixels_result(err);\n\t        output.writeMessageBegin(\"render_vega_raw_pixels\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"render_vega_raw_pixels\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.render_vega_raw_pixels(args.session, args.widget_id, args.node_idx, args.vega_json, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_render_vega_raw_pixels_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"render_vega_raw_pixels\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"render_vega_raw_pixels\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_insert_data = function (seqid, input, output) {\n\t  var args = new MapD_insert_data_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.insert_data.length === 2) {\n\t    Q.fcall(this._handler.insert_data, args.session, args.insert_data).then(function (result) {\n\t      var result_obj = new MapD_insert_data_result({ success: result });\n\t      output.writeMessageBegin(\"insert_data\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_insert_data_result(err);\n\t        output.writeMessageBegin(\"insert_data\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"insert_data\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.insert_data(args.session, args.insert_data, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_insert_data_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"insert_data\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"insert_data\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_table_descriptor = function (seqid, input, output) {\n\t  var args = new MapD_get_table_descriptor_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_table_descriptor.length === 2) {\n\t    Q.fcall(this._handler.get_table_descriptor, args.session, args.table_name).then(function (result) {\n\t      var result_obj = new MapD_get_table_descriptor_result({ success: result });\n\t      output.writeMessageBegin(\"get_table_descriptor\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_table_descriptor_result(err);\n\t        output.writeMessageBegin(\"get_table_descriptor\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_table_descriptor\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_table_descriptor(args.session, args.table_name, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_table_descriptor_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_table_descriptor\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_table_descriptor\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_row_descriptor = function (seqid, input, output) {\n\t  var args = new MapD_get_row_descriptor_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_row_descriptor.length === 2) {\n\t    Q.fcall(this._handler.get_row_descriptor, args.session, args.table_name).then(function (result) {\n\t      var result_obj = new MapD_get_row_descriptor_result({ success: result });\n\t      output.writeMessageBegin(\"get_row_descriptor\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_row_descriptor_result(err);\n\t        output.writeMessageBegin(\"get_row_descriptor\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_row_descriptor\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_row_descriptor(args.session, args.table_name, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_row_descriptor_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_row_descriptor\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_row_descriptor\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_render = function (seqid, input, output) {\n\t  var args = new MapD_render_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.render.length === 4) {\n\t    Q.fcall(this._handler.render, args.session, args.query, args.render_type, args.nonce).then(function (result) {\n\t      var result_obj = new MapD_render_result({ success: result });\n\t      output.writeMessageBegin(\"render\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_render_result(err);\n\t        output.writeMessageBegin(\"render\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"render\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.render(args.session, args.query, args.render_type, args.nonce, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_render_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"render\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"render\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_rows_for_pixels = function (seqid, input, output) {\n\t  var args = new MapD_get_rows_for_pixels_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_rows_for_pixels.length === 7) {\n\t    Q.fcall(this._handler.get_rows_for_pixels, args.session, args.widget_id, args.pixels, args.table_name, args.col_names, args.column_format, args.nonce).then(function (result) {\n\t      var result_obj = new MapD_get_rows_for_pixels_result({ success: result });\n\t      output.writeMessageBegin(\"get_rows_for_pixels\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_rows_for_pixels_result(err);\n\t        output.writeMessageBegin(\"get_rows_for_pixels\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_rows_for_pixels\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_rows_for_pixels(args.session, args.widget_id, args.pixels, args.table_name, args.col_names, args.column_format, args.nonce, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_rows_for_pixels_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_rows_for_pixels\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_rows_for_pixels\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\tMapDProcessor.prototype.process_get_row_for_pixel = function (seqid, input, output) {\n\t  var args = new MapD_get_row_for_pixel_args();\n\t  args.read(input);\n\t  input.readMessageEnd();\n\t  if (this._handler.get_row_for_pixel.length === 8) {\n\t    Q.fcall(this._handler.get_row_for_pixel, args.session, args.widget_id, args.pixel, args.table_name, args.col_names, args.column_format, args.pixelRadius, args.nonce).then(function (result) {\n\t      var result_obj = new MapD_get_row_for_pixel_result({ success: result });\n\t      output.writeMessageBegin(\"get_row_for_pixel\", Thrift.MessageType.REPLY, seqid);\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    }, function (err) {\n\t      var result;\n\t      if (err instanceof ttypes.TMapDException) {\n\t        result = new MapD_get_row_for_pixel_result(err);\n\t        output.writeMessageBegin(\"get_row_for_pixel\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_row_for_pixel\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  } else {\n\t    this._handler.get_row_for_pixel(args.session, args.widget_id, args.pixel, args.table_name, args.col_names, args.column_format, args.pixelRadius, args.nonce, function (err, result) {\n\t      var result_obj;\n\t      if (err === null || typeof err === 'undefined' || err instanceof ttypes.TMapDException) {\n\t        result_obj = new MapD_get_row_for_pixel_result(err !== null || typeof err === 'undefined' ? err : { success: result });\n\t        output.writeMessageBegin(\"get_row_for_pixel\", Thrift.MessageType.REPLY, seqid);\n\t      } else {\n\t        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n\t        output.writeMessageBegin(\"get_row_for_pixel\", Thrift.MessageType.EXCEPTION, seqid);\n\t      }\n\t      result_obj.write(output);\n\t      output.writeMessageEnd();\n\t      output.flush();\n\t    });\n\t  }\n\t};\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\texports.Thrift = __webpack_require__(15);\n\n\tvar connection = __webpack_require__(20);\n\texports.Connection = connection.Connection;\n\texports.createClient = connection.createClient;\n\texports.createConnection = connection.createConnection;\n\texports.createSSLConnection = connection.createSSLConnection;\n\texports.createStdIOClient = connection.createStdIOClient;\n\texports.createStdIOConnection = connection.createStdIOConnection;\n\n\tvar httpConnection = __webpack_require__(34);\n\texports.HttpConnection = httpConnection.HttpConnection;\n\texports.createHttpConnection = httpConnection.createHttpConnection;\n\texports.createHttpClient = httpConnection.createHttpClient;\n\n\tvar wsConnection = __webpack_require__(66);\n\texports.WSConnection = wsConnection.WSConnection;\n\texports.createWSConnection = wsConnection.createWSConnection;\n\texports.createWSClient = wsConnection.createWSClient;\n\n\tvar xhrConnection = __webpack_require__(75);\n\texports.XHRConnection = xhrConnection.XHRConnection;\n\texports.createXHRConnection = xhrConnection.createXHRConnection;\n\texports.createXHRClient = xhrConnection.createXHRClient;\n\n\tvar server = __webpack_require__(76);\n\texports.createServer = server.createServer;\n\texports.createMultiplexServer = server.createMultiplexServer;\n\n\tvar web_server = __webpack_require__(77);\n\texports.createWebServer = web_server.createWebServer;\n\n\texports.Int64 = __webpack_require__(32);\n\texports.Q = __webpack_require__(114);\n\n\tvar mprocessor = __webpack_require__(113);\n\tvar mprotocol = __webpack_require__(115);\n\texports.Multiplexer = mprotocol.Multiplexer;\n\texports.MultiplexedProcessor = mprocessor.MultiplexedProcessor;\n\n\t/*\n\t * Export transport and protocol so they can be used outside of a\n\t * cassandra/server context\n\t */\n\texports.TFramedTransport = __webpack_require__(69);\n\texports.TBufferedTransport = __webpack_require__(23);\n\texports.TBinaryProtocol = __webpack_require__(30);\n\texports.TJSONProtocol = __webpack_require__(72);\n\texports.TCompactProtocol = __webpack_require__(71);\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\tvar util = __webpack_require__(16);\n\n\tvar Type = exports.Type = {\n\t  STOP: 0,\n\t  VOID: 1,\n\t  BOOL: 2,\n\t  BYTE: 3,\n\t  I08: 3,\n\t  DOUBLE: 4,\n\t  I16: 6,\n\t  I32: 8,\n\t  I64: 10,\n\t  STRING: 11,\n\t  UTF7: 11,\n\t  STRUCT: 12,\n\t  MAP: 13,\n\t  SET: 14,\n\t  LIST: 15,\n\t  UTF8: 16,\n\t  UTF16: 17\n\t};\n\n\texports.MessageType = {\n\t  CALL: 1,\n\t  REPLY: 2,\n\t  EXCEPTION: 3,\n\t  ONEWAY: 4\n\t};\n\n\texports.TException = TException;\n\n\tfunction TException(message) {\n\t  Error.call(this);\n\t  Error.captureStackTrace(this, this.constructor);\n\t  this.name = this.constructor.name;\n\t  this.message = message;\n\t};\n\tutil.inherits(TException, Error);\n\n\tvar TApplicationExceptionType = exports.TApplicationExceptionType = {\n\t  UNKNOWN: 0,\n\t  UNKNOWN_METHOD: 1,\n\t  INVALID_MESSAGE_TYPE: 2,\n\t  WRONG_METHOD_NAME: 3,\n\t  BAD_SEQUENCE_ID: 4,\n\t  MISSING_RESULT: 5,\n\t  INTERNAL_ERROR: 6,\n\t  PROTOCOL_ERROR: 7,\n\t  INVALID_TRANSFORM: 8,\n\t  INVALID_PROTOCOL: 9,\n\t  UNSUPPORTED_CLIENT_TYPE: 10\n\t};\n\n\texports.TApplicationException = TApplicationException;\n\n\tfunction TApplicationException(type, message) {\n\t  TException.call(this);\n\t  Error.captureStackTrace(this, this.constructor);\n\t  this.type = type || TApplicationExceptionType.UNKNOWN;\n\t  this.name = this.constructor.name;\n\t  this.message = message;\n\t};\n\tutil.inherits(TApplicationException, TException);\n\n\tTApplicationException.prototype.read = function(input) {\n\t  var ftype;\n\t  var ret = input.readStructBegin('TApplicationException');\n\n\t  while(1){\n\t      ret = input.readFieldBegin();\n\t      if(ret.ftype == Type.STOP)\n\t          break;\n\n\t      switch(ret.fid){\n\t          case 1:\n\t              if( ret.ftype == Type.STRING ){\n\t                  ret = input.readString();\n\t                  this.message = ret;\n\t              } else {\n\t                  ret = input.skip(ret.ftype);\n\t              }\n\t              break;\n\t          case 2:\n\t              if( ret.ftype == Type.I32 ){\n\t                  ret = input.readI32();\n\t                  this.type = ret;\n\t              } else {\n\t                  ret   = input.skip(ret.ftype);\n\t              }\n\t              break;\n\t          default:\n\t              ret = input.skip(ret.ftype);\n\t              break;\n\t      }\n\t      input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t};\n\n\tTApplicationException.prototype.write = function(output){\n\t  output.writeStructBegin('TApplicationException');\n\n\t  if (this.message) {\n\t      output.writeFieldBegin('message', Type.STRING, 1);\n\t      output.writeString(this.message);\n\t      output.writeFieldEnd();\n\t  }\n\n\t  if (this.code) {\n\t      output.writeFieldBegin('type', Type.I32, 2);\n\t      output.writeI32(this.code);\n\t      output.writeFieldEnd();\n\t  }\n\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t};\n\n\tvar TProtocolExceptionType = exports.TProtocolExceptionType = {\n\t  UNKNOWN: 0,\n\t  INVALID_DATA: 1,\n\t  NEGATIVE_SIZE: 2,\n\t  SIZE_LIMIT: 3,\n\t  BAD_VERSION: 4,\n\t  NOT_IMPLEMENTED: 5,\n\t  DEPTH_LIMIT: 6\n\t};\n\n\n\texports.TProtocolException = TProtocolException;\n\n\tfunction TProtocolException(type, message) {\n\t  Error.call(this);\n\t  Error.captureStackTrace(this, this.constructor);\n\t  this.name = this.constructor.name;\n\t  this.type = type;\n\t  this.message = message;\n\t};\n\tutil.inherits(TProtocolException, Error);\n\n\texports.objectLength = function(obj) {\n\t  return Object.keys(obj).length;\n\t};\n\n\texports.inherits = function(constructor, superConstructor) {\n\t  util.inherits(constructor, superConstructor);\n\t};\n\n\tvar copyList, copyMap;\n\n\tcopyList = function(lst, types) {\n\n\t  if (!lst) {return lst; }\n\n\t  var type;\n\n\t  if (types.shift === undefined) {\n\t    type = types;\n\t  }\n\t  else {\n\t    type = types[0];\n\t  }\n\t  var Type = type;\n\n\t  var len = lst.length, result = [], i, val;\n\t  for (i = 0; i < len; i++) {\n\t    val = lst[i];\n\t    if (type === null) {\n\t      result.push(val);\n\t    }\n\t    else if (type === copyMap || type === copyList) {\n\t      result.push(type(val, types.slice(1)));\n\t    }\n\t    else {\n\t      result.push(new Type(val));\n\t    }\n\t  }\n\t  return result;\n\t};\n\n\tcopyMap = function(obj, types){\n\n\t  if (!obj) {return obj; }\n\n\t  var type;\n\n\t  if (types.shift === undefined) {\n\t    type = types;\n\t  }\n\t  else {\n\t    type = types[0];\n\t  }\n\t  var Type = type;\n\n\t  var result = {}, val;\n\t  for(var prop in obj) {\n\t    if(obj.hasOwnProperty(prop)) {\n\t      val = obj[prop];\n\t      if (type === null) {\n\t        result[prop] = val;\n\t      }\n\t      else if (type === copyMap || type === copyList) {\n\t        result[prop] = type(val, types.slice(1));\n\t      }\n\t      else {\n\t        result[prop] = new Type(val);\n\t      }\n\t    }\n\t  }\n\t  return result;\n\t};\n\n\tmodule.exports.copyMap = copyMap;\n\tmodule.exports.copyList = copyList;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\tvar formatRegExp = /%[sdj%]/g;\n\texports.format = function(f) {\n\t  if (!isString(f)) {\n\t    var objects = [];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t      objects.push(inspect(arguments[i]));\n\t    }\n\t    return objects.join(' ');\n\t  }\n\n\t  var i = 1;\n\t  var args = arguments;\n\t  var len = args.length;\n\t  var str = String(f).replace(formatRegExp, function(x) {\n\t    if (x === '%%') return '%';\n\t    if (i >= len) return x;\n\t    switch (x) {\n\t      case '%s': return String(args[i++]);\n\t      case '%d': return Number(args[i++]);\n\t      case '%j':\n\t        try {\n\t          return JSON.stringify(args[i++]);\n\t        } catch (_) {\n\t          return '[Circular]';\n\t        }\n\t      default:\n\t        return x;\n\t    }\n\t  });\n\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t    if (isNull(x) || !isObject(x)) {\n\t      str += ' ' + x;\n\t    } else {\n\t      str += ' ' + inspect(x);\n\t    }\n\t  }\n\t  return str;\n\t};\n\n\n\t// Mark that a method should not be used.\n\t// Returns a modified function which warns once by default.\n\t// If --no-deprecation is set, then it is a no-op.\n\texports.deprecate = function(fn, msg) {\n\t  // Allow for deprecating things in the process of starting up.\n\t  if (isUndefined(global.process)) {\n\t    return function() {\n\t      return exports.deprecate(fn, msg).apply(this, arguments);\n\t    };\n\t  }\n\n\t  if (process.noDeprecation === true) {\n\t    return fn;\n\t  }\n\n\t  var warned = false;\n\t  function deprecated() {\n\t    if (!warned) {\n\t      if (process.throwDeprecation) {\n\t        throw new Error(msg);\n\t      } else if (process.traceDeprecation) {\n\t        console.trace(msg);\n\t      } else {\n\t        console.error(msg);\n\t      }\n\t      warned = true;\n\t    }\n\t    return fn.apply(this, arguments);\n\t  }\n\n\t  return deprecated;\n\t};\n\n\n\tvar debugs = {};\n\tvar debugEnviron;\n\texports.debuglog = function(set) {\n\t  if (isUndefined(debugEnviron))\n\t    debugEnviron = process.env.NODE_DEBUG || '';\n\t  set = set.toUpperCase();\n\t  if (!debugs[set]) {\n\t    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n\t      var pid = process.pid;\n\t      debugs[set] = function() {\n\t        var msg = exports.format.apply(exports, arguments);\n\t        console.error('%s %d: %s', set, pid, msg);\n\t      };\n\t    } else {\n\t      debugs[set] = function() {};\n\t    }\n\t  }\n\t  return debugs[set];\n\t};\n\n\n\t/**\n\t * Echos the value of a value. Trys to print the value out\n\t * in the best way possible given the different types.\n\t *\n\t * @param {Object} obj The object to print out.\n\t * @param {Object} opts Optional options object that alters the output.\n\t */\n\t/* legacy: obj, showHidden, depth, colors*/\n\tfunction inspect(obj, opts) {\n\t  // default options\n\t  var ctx = {\n\t    seen: [],\n\t    stylize: stylizeNoColor\n\t  };\n\t  // legacy...\n\t  if (arguments.length >= 3) ctx.depth = arguments[2];\n\t  if (arguments.length >= 4) ctx.colors = arguments[3];\n\t  if (isBoolean(opts)) {\n\t    // legacy...\n\t    ctx.showHidden = opts;\n\t  } else if (opts) {\n\t    // got an \"options\" object\n\t    exports._extend(ctx, opts);\n\t  }\n\t  // set default options\n\t  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n\t  if (isUndefined(ctx.depth)) ctx.depth = 2;\n\t  if (isUndefined(ctx.colors)) ctx.colors = false;\n\t  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n\t  if (ctx.colors) ctx.stylize = stylizeWithColor;\n\t  return formatValue(ctx, obj, ctx.depth);\n\t}\n\texports.inspect = inspect;\n\n\n\t// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\tinspect.colors = {\n\t  'bold' : [1, 22],\n\t  'italic' : [3, 23],\n\t  'underline' : [4, 24],\n\t  'inverse' : [7, 27],\n\t  'white' : [37, 39],\n\t  'grey' : [90, 39],\n\t  'black' : [30, 39],\n\t  'blue' : [34, 39],\n\t  'cyan' : [36, 39],\n\t  'green' : [32, 39],\n\t  'magenta' : [35, 39],\n\t  'red' : [31, 39],\n\t  'yellow' : [33, 39]\n\t};\n\n\t// Don't use 'blue' not visible on cmd.exe\n\tinspect.styles = {\n\t  'special': 'cyan',\n\t  'number': 'yellow',\n\t  'boolean': 'yellow',\n\t  'undefined': 'grey',\n\t  'null': 'bold',\n\t  'string': 'green',\n\t  'date': 'magenta',\n\t  // \"name\": intentionally not styling\n\t  'regexp': 'red'\n\t};\n\n\n\tfunction stylizeWithColor(str, styleType) {\n\t  var style = inspect.styles[styleType];\n\n\t  if (style) {\n\t    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n\t           '\\u001b[' + inspect.colors[style][1] + 'm';\n\t  } else {\n\t    return str;\n\t  }\n\t}\n\n\n\tfunction stylizeNoColor(str, styleType) {\n\t  return str;\n\t}\n\n\n\tfunction arrayToHash(array) {\n\t  var hash = {};\n\n\t  array.forEach(function(val, idx) {\n\t    hash[val] = true;\n\t  });\n\n\t  return hash;\n\t}\n\n\n\tfunction formatValue(ctx, value, recurseTimes) {\n\t  // Provide a hook for user-specified inspect functions.\n\t  // Check that value is an object with an inspect function on it\n\t  if (ctx.customInspect &&\n\t      value &&\n\t      isFunction(value.inspect) &&\n\t      // Filter out the util module, it's inspect function is special\n\t      value.inspect !== exports.inspect &&\n\t      // Also filter out any prototype objects using the circular check.\n\t      !(value.constructor && value.constructor.prototype === value)) {\n\t    var ret = value.inspect(recurseTimes, ctx);\n\t    if (!isString(ret)) {\n\t      ret = formatValue(ctx, ret, recurseTimes);\n\t    }\n\t    return ret;\n\t  }\n\n\t  // Primitive types cannot have properties\n\t  var primitive = formatPrimitive(ctx, value);\n\t  if (primitive) {\n\t    return primitive;\n\t  }\n\n\t  // Look up the keys of the object.\n\t  var keys = Object.keys(value);\n\t  var visibleKeys = arrayToHash(keys);\n\n\t  if (ctx.showHidden) {\n\t    keys = Object.getOwnPropertyNames(value);\n\t  }\n\n\t  // IE doesn't make error fields non-enumerable\n\t  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\t  if (isError(value)\n\t      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n\t    return formatError(value);\n\t  }\n\n\t  // Some type of object without properties can be shortcutted.\n\t  if (keys.length === 0) {\n\t    if (isFunction(value)) {\n\t      var name = value.name ? ': ' + value.name : '';\n\t      return ctx.stylize('[Function' + name + ']', 'special');\n\t    }\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    }\n\t    if (isDate(value)) {\n\t      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n\t    }\n\t    if (isError(value)) {\n\t      return formatError(value);\n\t    }\n\t  }\n\n\t  var base = '', array = false, braces = ['{', '}'];\n\n\t  // Make Array say that they are Array\n\t  if (isArray(value)) {\n\t    array = true;\n\t    braces = ['[', ']'];\n\t  }\n\n\t  // Make functions say that they are functions\n\t  if (isFunction(value)) {\n\t    var n = value.name ? ': ' + value.name : '';\n\t    base = ' [Function' + n + ']';\n\t  }\n\n\t  // Make RegExps say that they are RegExps\n\t  if (isRegExp(value)) {\n\t    base = ' ' + RegExp.prototype.toString.call(value);\n\t  }\n\n\t  // Make dates with properties first say the date\n\t  if (isDate(value)) {\n\t    base = ' ' + Date.prototype.toUTCString.call(value);\n\t  }\n\n\t  // Make error with message first say the error\n\t  if (isError(value)) {\n\t    base = ' ' + formatError(value);\n\t  }\n\n\t  if (keys.length === 0 && (!array || value.length == 0)) {\n\t    return braces[0] + base + braces[1];\n\t  }\n\n\t  if (recurseTimes < 0) {\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    } else {\n\t      return ctx.stylize('[Object]', 'special');\n\t    }\n\t  }\n\n\t  ctx.seen.push(value);\n\n\t  var output;\n\t  if (array) {\n\t    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n\t  } else {\n\t    output = keys.map(function(key) {\n\t      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n\t    });\n\t  }\n\n\t  ctx.seen.pop();\n\n\t  return reduceToSingleString(output, base, braces);\n\t}\n\n\n\tfunction formatPrimitive(ctx, value) {\n\t  if (isUndefined(value))\n\t    return ctx.stylize('undefined', 'undefined');\n\t  if (isString(value)) {\n\t    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n\t                                             .replace(/'/g, \"\\\\'\")\n\t                                             .replace(/\\\\\"/g, '\"') + '\\'';\n\t    return ctx.stylize(simple, 'string');\n\t  }\n\t  if (isNumber(value))\n\t    return ctx.stylize('' + value, 'number');\n\t  if (isBoolean(value))\n\t    return ctx.stylize('' + value, 'boolean');\n\t  // For some reason typeof null is \"object\", so special case here.\n\t  if (isNull(value))\n\t    return ctx.stylize('null', 'null');\n\t}\n\n\n\tfunction formatError(value) {\n\t  return '[' + Error.prototype.toString.call(value) + ']';\n\t}\n\n\n\tfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n\t  var output = [];\n\t  for (var i = 0, l = value.length; i < l; ++i) {\n\t    if (hasOwnProperty(value, String(i))) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          String(i), true));\n\t    } else {\n\t      output.push('');\n\t    }\n\t  }\n\t  keys.forEach(function(key) {\n\t    if (!key.match(/^\\d+$/)) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          key, true));\n\t    }\n\t  });\n\t  return output;\n\t}\n\n\n\tfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n\t  var name, str, desc;\n\t  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n\t  if (desc.get) {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Getter/Setter]', 'special');\n\t    } else {\n\t      str = ctx.stylize('[Getter]', 'special');\n\t    }\n\t  } else {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Setter]', 'special');\n\t    }\n\t  }\n\t  if (!hasOwnProperty(visibleKeys, key)) {\n\t    name = '[' + key + ']';\n\t  }\n\t  if (!str) {\n\t    if (ctx.seen.indexOf(desc.value) < 0) {\n\t      if (isNull(recurseTimes)) {\n\t        str = formatValue(ctx, desc.value, null);\n\t      } else {\n\t        str = formatValue(ctx, desc.value, recurseTimes - 1);\n\t      }\n\t      if (str.indexOf('\\n') > -1) {\n\t        if (array) {\n\t          str = str.split('\\n').map(function(line) {\n\t            return '  ' + line;\n\t          }).join('\\n').substr(2);\n\t        } else {\n\t          str = '\\n' + str.split('\\n').map(function(line) {\n\t            return '   ' + line;\n\t          }).join('\\n');\n\t        }\n\t      }\n\t    } else {\n\t      str = ctx.stylize('[Circular]', 'special');\n\t    }\n\t  }\n\t  if (isUndefined(name)) {\n\t    if (array && key.match(/^\\d+$/)) {\n\t      return str;\n\t    }\n\t    name = JSON.stringify('' + key);\n\t    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n\t      name = name.substr(1, name.length - 2);\n\t      name = ctx.stylize(name, 'name');\n\t    } else {\n\t      name = name.replace(/'/g, \"\\\\'\")\n\t                 .replace(/\\\\\"/g, '\"')\n\t                 .replace(/(^\"|\"$)/g, \"'\");\n\t      name = ctx.stylize(name, 'string');\n\t    }\n\t  }\n\n\t  return name + ': ' + str;\n\t}\n\n\n\tfunction reduceToSingleString(output, base, braces) {\n\t  var numLinesEst = 0;\n\t  var length = output.reduce(function(prev, cur) {\n\t    numLinesEst++;\n\t    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n\t    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n\t  }, 0);\n\n\t  if (length > 60) {\n\t    return braces[0] +\n\t           (base === '' ? '' : base + '\\n ') +\n\t           ' ' +\n\t           output.join(',\\n  ') +\n\t           ' ' +\n\t           braces[1];\n\t  }\n\n\t  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n\t}\n\n\n\t// NOTE: These type checking functions intentionally don't use `instanceof`\n\t// because it is fragile and can be easily faked with `Object.create()`.\n\tfunction isArray(ar) {\n\t  return Array.isArray(ar);\n\t}\n\texports.isArray = isArray;\n\n\tfunction isBoolean(arg) {\n\t  return typeof arg === 'boolean';\n\t}\n\texports.isBoolean = isBoolean;\n\n\tfunction isNull(arg) {\n\t  return arg === null;\n\t}\n\texports.isNull = isNull;\n\n\tfunction isNullOrUndefined(arg) {\n\t  return arg == null;\n\t}\n\texports.isNullOrUndefined = isNullOrUndefined;\n\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\texports.isNumber = isNumber;\n\n\tfunction isString(arg) {\n\t  return typeof arg === 'string';\n\t}\n\texports.isString = isString;\n\n\tfunction isSymbol(arg) {\n\t  return typeof arg === 'symbol';\n\t}\n\texports.isSymbol = isSymbol;\n\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\texports.isUndefined = isUndefined;\n\n\tfunction isRegExp(re) {\n\t  return isObject(re) && objectToString(re) === '[object RegExp]';\n\t}\n\texports.isRegExp = isRegExp;\n\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\texports.isObject = isObject;\n\n\tfunction isDate(d) {\n\t  return isObject(d) && objectToString(d) === '[object Date]';\n\t}\n\texports.isDate = isDate;\n\n\tfunction isError(e) {\n\t  return isObject(e) &&\n\t      (objectToString(e) === '[object Error]' || e instanceof Error);\n\t}\n\texports.isError = isError;\n\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\texports.isFunction = isFunction;\n\n\tfunction isPrimitive(arg) {\n\t  return arg === null ||\n\t         typeof arg === 'boolean' ||\n\t         typeof arg === 'number' ||\n\t         typeof arg === 'string' ||\n\t         typeof arg === 'symbol' ||  // ES6 symbol\n\t         typeof arg === 'undefined';\n\t}\n\texports.isPrimitive = isPrimitive;\n\n\texports.isBuffer = __webpack_require__(18);\n\n\tfunction objectToString(o) {\n\t  return Object.prototype.toString.call(o);\n\t}\n\n\n\tfunction pad(n) {\n\t  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n\t}\n\n\n\tvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t              'Oct', 'Nov', 'Dec'];\n\n\t// 26 Feb 16:19:34\n\tfunction timestamp() {\n\t  var d = new Date();\n\t  var time = [pad(d.getHours()),\n\t              pad(d.getMinutes()),\n\t              pad(d.getSeconds())].join(':');\n\t  return [d.getDate(), months[d.getMonth()], time].join(' ');\n\t}\n\n\n\t// log is just a thin wrapper to console.log that prepends a timestamp\n\texports.log = function() {\n\t  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n\t};\n\n\n\t/**\n\t * Inherit the prototype methods from one constructor into another.\n\t *\n\t * The Function.prototype.inherits from lang.js rewritten as a standalone\n\t * function (not on Function.prototype). NOTE: If this file is to be loaded\n\t * during bootstrapping this function needs to be rewritten using some native\n\t * functions as prototype setup using normal JavaScript does not work as\n\t * expected during bootstrapping (see mirror.js in r114903).\n\t *\n\t * @param {function} ctor Constructor function which needs to inherit the\n\t *     prototype.\n\t * @param {function} superCtor Constructor function to inherit prototype from.\n\t */\n\texports.inherits = __webpack_require__(19);\n\n\texports._extend = function(origin, add) {\n\t  // Don't do anything if add isn't an object\n\t  if (!add || !isObject(add)) return origin;\n\n\t  var keys = Object.keys(add);\n\t  var i = keys.length;\n\t  while (i--) {\n\t    origin[keys[i]] = add[keys[i]];\n\t  }\n\t  return origin;\n\t};\n\n\tfunction hasOwnProperty(obj, prop) {\n\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(17)))\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\n\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\n\n\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\n\tfunction noop() {}\n\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\tprocess.prependListener = noop;\n\tprocess.prependOnceListener = noop;\n\n\tprocess.listeners = function (name) { return [] }\n\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function isBuffer(arg) {\n\t  return arg && typeof arg === 'object'\n\t    && typeof arg.copy === 'function'\n\t    && typeof arg.fill === 'function'\n\t    && typeof arg.readUInt8 === 'function';\n\t}\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\tvar util = __webpack_require__(16);\n\tvar EventEmitter = __webpack_require__(21).EventEmitter;\n\tvar net = __webpack_require__(22);\n\tvar tls = __webpack_require__(22);\n\tvar thrift = __webpack_require__(15);\n\n\tvar TBufferedTransport = __webpack_require__(23);\n\tvar TBinaryProtocol = __webpack_require__(30);\n\tvar InputBufferUnderrunError = __webpack_require__(29);\n\n\tvar createClient = __webpack_require__(33);\n\n\tvar binary = __webpack_require__(28);\n\n\tvar Connection = exports.Connection = function(stream, options) {\n\t  var self = this;\n\t  EventEmitter.call(this);\n\n\t  this.seqId2Service = {};\n\t  this.connection = stream;\n\t  this.ssl = (stream.encrypted);\n\t  this.options = options || {};\n\t  this.transport = this.options.transport || TBufferedTransport;\n\t  this.protocol = this.options.protocol || TBinaryProtocol;\n\t  this.offline_queue = [];\n\t  this.connected = false;\n\t  this.initialize_retry_vars();\n\n\t  this._debug = this.options.debug || false;\n\t  if (this.options.max_attempts &&\n\t      !isNaN(this.options.max_attempts) &&\n\t      this.options.max_attempts > 0) {\n\t     this.max_attempts = +this.options.max_attempts;\n\t  }\n\t  this.retry_max_delay = null;\n\t  if (this.options.retry_max_delay !== undefined &&\n\t      !isNaN(this.options.retry_max_delay) &&\n\t      this.options.retry_max_delay > 0) {\n\t     this.retry_max_delay = this.options.retry_max_delay;\n\t  }\n\t  this.connect_timeout = false;\n\t  if (this.options.connect_timeout &&\n\t      !isNaN(this.options.connect_timeout) &&\n\t      this.options.connect_timeout > 0) {\n\t     this.connect_timeout = +this.options.connect_timeout;\n\t  }\n\n\t  this.connection.addListener(this.ssl ? \"secureConnect\" : \"connect\", function() {\n\t    self.connected = true;\n\n\t    this.setTimeout(self.options.timeout || 0);\n\t    this.setNoDelay();\n\t    this.frameLeft = 0;\n\t    this.framePos = 0;\n\t    this.frame = null;\n\t    self.initialize_retry_vars();\n\n\t    self.offline_queue.forEach(function(data) {\n\t      self.connection.write(data);\n\t    });\n\n\t    self.emit(\"connect\");\n\t  });\n\n\t  this.connection.addListener(\"error\", function(err) {\n\t    // Only emit the error if no-one else is listening on the connection\n\t    // or if someone is listening on us, because Node turns unhandled\n\t    // 'error' events into exceptions.\n\t    if (self.connection.listeners('error').length === 1 ||\n\t        self.listeners('error').length > 0) {\n\t      self.emit(\"error\", err);\n\t    }\n\t  });\n\n\t  // Add a close listener\n\t  this.connection.addListener(\"close\", function() {\n\t    self.connection_gone(); // handle close event. try to reconnect\n\t  });\n\n\t  this.connection.addListener(\"timeout\", function() {\n\t    self.emit(\"timeout\");\n\t  });\n\n\t  this.connection.addListener(\"data\", self.transport.receiver(function(transport_with_data) {\n\t    var message = new self.protocol(transport_with_data);\n\t    try {\n\t      while (true) {\n\t        var header = message.readMessageBegin();\n\t        var dummy_seqid = header.rseqid * -1;\n\t        var client = self.client;\n\t        //The Multiplexed Protocol stores a hash of seqid to service names\n\t        //  in seqId2Service. If the SeqId is found in the hash we need to\n\t        //  lookup the appropriate client for this call.\n\t        //  The connection.client object is a single client object when not\n\t        //  multiplexing, when using multiplexing it is a service name keyed\n\t        //  hash of client objects.\n\t        //NOTE: The 2 way interdependencies between protocols, transports,\n\t        //  connections and clients in the Node.js implementation are irregular\n\t        //  and make the implementation difficult to extend and maintain. We\n\t        //  should bring this stuff inline with typical thrift I/O stack\n\t        //  operation soon.\n\t        //  --ra\n\t        var service_name = self.seqId2Service[header.rseqid];\n\t        if (service_name) {\n\t          client = self.client[service_name];\n\t          delete self.seqId2Service[header.rseqid];\n\t        }\n\t        /*jshint -W083 */\n\t        client._reqs[dummy_seqid] = function(err, success){\n\t          transport_with_data.commitPosition();\n\n\t          var callback = client._reqs[header.rseqid];\n\t          delete client._reqs[header.rseqid];\n\t          if (callback) {\n\t            callback(err, success);\n\t          }\n\t        };\n\t        /*jshint +W083 */\n\n\t        if(client['recv_' + header.fname]) {\n\t          client['recv_' + header.fname](message, header.mtype, dummy_seqid);\n\t        } else {\n\t          delete client._reqs[dummy_seqid];\n\t          self.emit(\"error\",\n\t                    new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME,\n\t                             \"Received a response to an unknown RPC function\"));\n\t        }\n\t      }\n\t    }\n\t    catch (e) {\n\t      if (e instanceof InputBufferUnderrunError) {\n\t        transport_with_data.rollbackPosition();\n\t      }\n\t      else {\n\t        self.emit('error', e);\n\t      }\n\t    }\n\t  }));\n\t};\n\tutil.inherits(Connection, EventEmitter);\n\n\tConnection.prototype.end = function() {\n\t  this.connection.end();\n\t};\n\n\tConnection.prototype.destroy = function() {\n\t  this.connection.destroy();\n\t};\n\n\tConnection.prototype.initialize_retry_vars = function () {\n\t  this.retry_timer = null;\n\t  this.retry_totaltime = 0;\n\t  this.retry_delay = 150;\n\t  this.retry_backoff = 1.7;\n\t  this.attempts = 0;\n\t};\n\n\tConnection.prototype.write = function(data) {\n\t  if (!this.connected) {\n\t    this.offline_queue.push(data);\n\t    return;\n\t  }\n\t  this.connection.write(data);\n\t};\n\n\tConnection.prototype.connection_gone = function () {\n\t  var self = this;\n\t  this.connected = false;\n\n\t  // If a retry is already in progress, just let that happen\n\t  if (this.retry_timer) {\n\t    return;\n\t  }\n\t  // We cannot reconnect a secure socket.\n\t  if (!this.max_attempts || this.ssl) {\n\t    self.emit(\"close\");\n\t    return;\n\t  }\n\n\t  if (this.retry_max_delay !== null && this.retry_delay >= this.retry_max_delay) {\n\t    this.retry_delay = this.retry_max_delay;\n\t  } else {\n\t    this.retry_delay = Math.floor(this.retry_delay * this.retry_backoff);\n\t  }\n\n\t  if (self._debug) {\n\t    console.log(\"Retry connection in \" + this.retry_delay + \" ms\");\n\t  }\n\n\t  if (this.max_attempts && this.attempts >= this.max_attempts) {\n\t    this.retry_timer = null;\n\t    console.error(\"thrift: Couldn't get thrift connection after \" + this.max_attempts + \" attempts.\");\n\t    self.emit(\"close\");\n\t    return;\n\t  }\n\n\t  this.attempts += 1;\n\t  this.emit(\"reconnecting\", {\n\t    delay: self.retry_delay,\n\t    attempt: self.attempts\n\t  });\n\n\t  this.retry_timer = setTimeout(function () {\n\t    if (self._debug) {\n\t       console.log(\"Retrying connection...\");\n\t\t}\n\n\t    self.retry_totaltime += self.retry_delay;\n\n\t    if (self.connect_timeout && self.retry_totaltime >= self.connect_timeout) {\n\t       self.retry_timer = null;\n\t       console.error(\"thrift: Couldn't get thrift connection after \" + self.retry_totaltime + \"ms.\");\n\t       self.emit(\"close\");\n\t       return;\n\t    }\n\n\t    self.connection.connect(self.port, self.host);\n\t    self.retry_timer = null;\n\t  }, this.retry_delay);\n\t};\n\n\texports.createConnection = function(host, port, options) {\n\t  var stream = net.createConnection(port, host);\n\t  var connection = new Connection(stream, options);\n\t  connection.host = host;\n\t  connection.port = port;\n\n\t  return connection;\n\t};\n\n\texports.createSSLConnection = function(host, port, options) {\n\t  var stream = tls.connect(port, host, options);\n\t  var connection = new Connection(stream, options);\n\t  connection.host = host;\n\t  connection.port = port;\n\n\t  return connection;\n\t};\n\n\n\texports.createClient = createClient;\n\n\tvar child_process = __webpack_require__(22);\n\tvar StdIOConnection = exports.StdIOConnection = function(command, options) {\n\t  var command_parts = command.split(' ');\n\t  command = command_parts[0];\n\t  var args = command_parts.splice(1,command_parts.length -1);\n\t  var child = this.child = child_process.spawn(command,args);\n\n\t  var self = this;\n\t  EventEmitter.call(this);\n\n\t  this._debug = options.debug || false;\n\t  this.connection = child.stdin;\n\t  this.options = options || {};\n\t  this.transport = this.options.transport || TBufferedTransport;\n\t  this.protocol = this.options.protocol || TBinaryProtocol;\n\t  this.offline_queue = [];\n\n\t  if(this._debug === true){\n\t    this.child.stderr.on('data',function(err){\n\t      console.log(err.toString(),'CHILD ERROR');\n\t    });\n\n\t    this.child.on('exit',function(code,signal){\n\t      console.log(code+':'+signal,'CHILD EXITED');\n\t    });\n\t  }\n\n\t  this.frameLeft = 0;\n\t  this.framePos = 0;\n\t  this.frame = null;\n\t  this.connected = true;\n\n\t  self.offline_queue.forEach(function(data) {\n\t      self.connection.write(data);\n\t  });\n\n\n\t  this.connection.addListener(\"error\", function(err) {\n\t    self.emit(\"error\", err);\n\t  });\n\n\t  // Add a close listener\n\t  this.connection.addListener(\"close\", function() {\n\t    self.emit(\"close\");\n\t  });\n\n\t  child.stdout.addListener(\"data\", self.transport.receiver(function(transport_with_data) {\n\t    var message = new self.protocol(transport_with_data);\n\t    try {\n\t      var header = message.readMessageBegin();\n\t      var dummy_seqid = header.rseqid * -1;\n\t      var client = self.client;\n\t      client._reqs[dummy_seqid] = function(err, success){\n\t        transport_with_data.commitPosition();\n\n\t        var callback = client._reqs[header.rseqid];\n\t        delete client._reqs[header.rseqid];\n\t        if (callback) {\n\t          callback(err, success);\n\t        }\n\t      };\n\t      client['recv_' + header.fname](message, header.mtype, dummy_seqid);\n\t    }\n\t    catch (e) {\n\t      if (e instanceof InputBufferUnderrunError) {\n\t        transport_with_data.rollbackPosition();\n\t      }\n\t      else {\n\t        throw e;\n\t      }\n\t    }\n\t  }));\n\t};\n\n\tutil.inherits(StdIOConnection, EventEmitter);\n\n\tStdIOConnection.prototype.end = function() {\n\t  this.connection.end();\n\t};\n\n\tStdIOConnection.prototype.write = function(data) {\n\t  if (!this.connected) {\n\t    this.offline_queue.push(data);\n\t    return;\n\t  }\n\t  this.connection.write(data);\n\t};\n\n\texports.createStdIOConnection = function(command,options){\n\t  return new StdIOConnection(command,options);\n\t};\n\n\texports.createStdIOClient = createClient;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\tfunction EventEmitter() {\n\t  this._events = this._events || {};\n\t  this._maxListeners = this._maxListeners || undefined;\n\t}\n\tmodule.exports = EventEmitter;\n\n\t// Backwards-compat with node 0.10.x\n\tEventEmitter.EventEmitter = EventEmitter;\n\n\tEventEmitter.prototype._events = undefined;\n\tEventEmitter.prototype._maxListeners = undefined;\n\n\t// By default EventEmitters will print a warning if more than 10 listeners are\n\t// added to it. This is a useful default which helps finding memory leaks.\n\tEventEmitter.defaultMaxListeners = 10;\n\n\t// Obviously not all Emitters should be limited to 10. This function allows\n\t// that to be increased. Set to zero for unlimited.\n\tEventEmitter.prototype.setMaxListeners = function(n) {\n\t  if (!isNumber(n) || n < 0 || isNaN(n))\n\t    throw TypeError('n must be a positive number');\n\t  this._maxListeners = n;\n\t  return this;\n\t};\n\n\tEventEmitter.prototype.emit = function(type) {\n\t  var er, handler, len, args, i, listeners;\n\n\t  if (!this._events)\n\t    this._events = {};\n\n\t  // If there is no 'error' event listener then throw.\n\t  if (type === 'error') {\n\t    if (!this._events.error ||\n\t        (isObject(this._events.error) && !this._events.error.length)) {\n\t      er = arguments[1];\n\t      if (er instanceof Error) {\n\t        throw er; // Unhandled 'error' event\n\t      } else {\n\t        // At least give some kind of context to the user\n\t        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n\t        err.context = er;\n\t        throw err;\n\t      }\n\t    }\n\t  }\n\n\t  handler = this._events[type];\n\n\t  if (isUndefined(handler))\n\t    return false;\n\n\t  if (isFunction(handler)) {\n\t    switch (arguments.length) {\n\t      // fast cases\n\t      case 1:\n\t        handler.call(this);\n\t        break;\n\t      case 2:\n\t        handler.call(this, arguments[1]);\n\t        break;\n\t      case 3:\n\t        handler.call(this, arguments[1], arguments[2]);\n\t        break;\n\t      // slower\n\t      default:\n\t        args = Array.prototype.slice.call(arguments, 1);\n\t        handler.apply(this, args);\n\t    }\n\t  } else if (isObject(handler)) {\n\t    args = Array.prototype.slice.call(arguments, 1);\n\t    listeners = handler.slice();\n\t    len = listeners.length;\n\t    for (i = 0; i < len; i++)\n\t      listeners[i].apply(this, args);\n\t  }\n\n\t  return true;\n\t};\n\n\tEventEmitter.prototype.addListener = function(type, listener) {\n\t  var m;\n\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\n\t  if (!this._events)\n\t    this._events = {};\n\n\t  // To avoid recursion in the case that type === \"newListener\"! Before\n\t  // adding it to the listeners, first emit \"newListener\".\n\t  if (this._events.newListener)\n\t    this.emit('newListener', type,\n\t              isFunction(listener.listener) ?\n\t              listener.listener : listener);\n\n\t  if (!this._events[type])\n\t    // Optimize the case of one listener. Don't need the extra array object.\n\t    this._events[type] = listener;\n\t  else if (isObject(this._events[type]))\n\t    // If we've already got an array, just append.\n\t    this._events[type].push(listener);\n\t  else\n\t    // Adding the second element, need to change to array.\n\t    this._events[type] = [this._events[type], listener];\n\n\t  // Check for listener leak\n\t  if (isObject(this._events[type]) && !this._events[type].warned) {\n\t    if (!isUndefined(this._maxListeners)) {\n\t      m = this._maxListeners;\n\t    } else {\n\t      m = EventEmitter.defaultMaxListeners;\n\t    }\n\n\t    if (m && m > 0 && this._events[type].length > m) {\n\t      this._events[type].warned = true;\n\t      console.error('(node) warning: possible EventEmitter memory ' +\n\t                    'leak detected. %d listeners added. ' +\n\t                    'Use emitter.setMaxListeners() to increase limit.',\n\t                    this._events[type].length);\n\t      if (typeof console.trace === 'function') {\n\t        // not supported in IE 10\n\t        console.trace();\n\t      }\n\t    }\n\t  }\n\n\t  return this;\n\t};\n\n\tEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\n\tEventEmitter.prototype.once = function(type, listener) {\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\n\t  var fired = false;\n\n\t  function g() {\n\t    this.removeListener(type, g);\n\n\t    if (!fired) {\n\t      fired = true;\n\t      listener.apply(this, arguments);\n\t    }\n\t  }\n\n\t  g.listener = listener;\n\t  this.on(type, g);\n\n\t  return this;\n\t};\n\n\t// emits a 'removeListener' event iff the listener was removed\n\tEventEmitter.prototype.removeListener = function(type, listener) {\n\t  var list, position, length, i;\n\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\n\t  if (!this._events || !this._events[type])\n\t    return this;\n\n\t  list = this._events[type];\n\t  length = list.length;\n\t  position = -1;\n\n\t  if (list === listener ||\n\t      (isFunction(list.listener) && list.listener === listener)) {\n\t    delete this._events[type];\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\n\t  } else if (isObject(list)) {\n\t    for (i = length; i-- > 0;) {\n\t      if (list[i] === listener ||\n\t          (list[i].listener && list[i].listener === listener)) {\n\t        position = i;\n\t        break;\n\t      }\n\t    }\n\n\t    if (position < 0)\n\t      return this;\n\n\t    if (list.length === 1) {\n\t      list.length = 0;\n\t      delete this._events[type];\n\t    } else {\n\t      list.splice(position, 1);\n\t    }\n\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t  }\n\n\t  return this;\n\t};\n\n\tEventEmitter.prototype.removeAllListeners = function(type) {\n\t  var key, listeners;\n\n\t  if (!this._events)\n\t    return this;\n\n\t  // not listening for removeListener, no need to emit\n\t  if (!this._events.removeListener) {\n\t    if (arguments.length === 0)\n\t      this._events = {};\n\t    else if (this._events[type])\n\t      delete this._events[type];\n\t    return this;\n\t  }\n\n\t  // emit removeListener for all listeners on all events\n\t  if (arguments.length === 0) {\n\t    for (key in this._events) {\n\t      if (key === 'removeListener') continue;\n\t      this.removeAllListeners(key);\n\t    }\n\t    this.removeAllListeners('removeListener');\n\t    this._events = {};\n\t    return this;\n\t  }\n\n\t  listeners = this._events[type];\n\n\t  if (isFunction(listeners)) {\n\t    this.removeListener(type, listeners);\n\t  } else if (listeners) {\n\t    // LIFO order\n\t    while (listeners.length)\n\t      this.removeListener(type, listeners[listeners.length - 1]);\n\t  }\n\t  delete this._events[type];\n\n\t  return this;\n\t};\n\n\tEventEmitter.prototype.listeners = function(type) {\n\t  var ret;\n\t  if (!this._events || !this._events[type])\n\t    ret = [];\n\t  else if (isFunction(this._events[type]))\n\t    ret = [this._events[type]];\n\t  else\n\t    ret = this._events[type].slice();\n\t  return ret;\n\t};\n\n\tEventEmitter.prototype.listenerCount = function(type) {\n\t  if (this._events) {\n\t    var evlistener = this._events[type];\n\n\t    if (isFunction(evlistener))\n\t      return 1;\n\t    else if (evlistener)\n\t      return evlistener.length;\n\t  }\n\t  return 0;\n\t};\n\n\tEventEmitter.listenerCount = function(emitter, type) {\n\t  return emitter.listenerCount(type);\n\t};\n\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports) {\n\n\t\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\n\tvar binary = __webpack_require__(28);\n\tvar InputBufferUnderrunError = __webpack_require__(29);\n\n\tmodule.exports = TBufferedTransport;\n\n\tfunction TBufferedTransport(buffer, callback) {\n\t  this.defaultReadBufferSize = 1024;\n\t  this.writeBufferSize = 512; // Soft Limit\n\t  this.inBuf = new Buffer(this.defaultReadBufferSize);\n\t  this.readCursor = 0;\n\t  this.writeCursor = 0; // for input buffer\n\t  this.outBuffers = [];\n\t  this.outCount = 0;\n\t  this.onFlush = callback;\n\t};\n\n\tTBufferedTransport.receiver = function(callback, seqid) {\n\t  var reader = new TBufferedTransport();\n\n\t  return function(data) {\n\t    if (reader.writeCursor + data.length > reader.inBuf.length) {\n\t      var buf = new Buffer(reader.writeCursor + data.length);\n\t      reader.inBuf.copy(buf, 0, 0, reader.writeCursor);\n\t      reader.inBuf = buf;\n\t    }\n\t    data.copy(reader.inBuf, reader.writeCursor, 0);\n\t    reader.writeCursor += data.length;\n\n\t    callback(reader, seqid);\n\t  };\n\t};\n\n\n\tTBufferedTransport.prototype.commitPosition = function(){\n\t  var unreadSize = this.writeCursor - this.readCursor;\n\t  var bufSize = (unreadSize * 2 > this.defaultReadBufferSize) ?\n\t    unreadSize * 2 : this.defaultReadBufferSize;\n\t  var buf = new Buffer(bufSize);\n\t  if (unreadSize > 0) {\n\t    this.inBuf.copy(buf, 0, this.readCursor, this.writeCursor);\n\t  }\n\t  this.readCursor = 0;\n\t  this.writeCursor = unreadSize;\n\t  this.inBuf = buf;\n\t};\n\n\tTBufferedTransport.prototype.rollbackPosition = function(){\n\t  this.readCursor = 0;\n\t}\n\n\t  // TODO: Implement open/close support\n\tTBufferedTransport.prototype.isOpen = function() {\n\t  return true;\n\t};\n\n\tTBufferedTransport.prototype.open = function() {\n\t};\n\n\tTBufferedTransport.prototype.close = function() {\n\t};\n\n\t  // Set the seqid of the message in the client\n\t  // So that callbacks can be found\n\tTBufferedTransport.prototype.setCurrSeqId = function(seqid) {\n\t  this._seqid = seqid;\n\t};\n\n\tTBufferedTransport.prototype.ensureAvailable = function(len) {\n\t  if (this.readCursor + len > this.writeCursor) {\n\t    throw new InputBufferUnderrunError();\n\t  }\n\t};\n\n\tTBufferedTransport.prototype.read = function(len) {\n\t  this.ensureAvailable(len);\n\t  var buf = new Buffer(len);\n\t  this.inBuf.copy(buf, 0, this.readCursor, this.readCursor + len);\n\t  this.readCursor += len;\n\t  return buf;\n\t};\n\n\tTBufferedTransport.prototype.readByte = function() {\n\t  this.ensureAvailable(1);\n\t  return binary.readByte(this.inBuf[this.readCursor++]);\n\t};\n\n\tTBufferedTransport.prototype.readI16 = function() {\n\t  this.ensureAvailable(2);\n\t  var i16 = binary.readI16(this.inBuf, this.readCursor);\n\t  this.readCursor += 2;\n\t  return i16;\n\t};\n\n\tTBufferedTransport.prototype.readI32 = function() {\n\t  this.ensureAvailable(4);\n\t  var i32 = binary.readI32(this.inBuf, this.readCursor);\n\t  this.readCursor += 4;\n\t  return i32;\n\t};\n\n\tTBufferedTransport.prototype.readDouble = function() {\n\t  this.ensureAvailable(8);\n\t  var d = binary.readDouble(this.inBuf, this.readCursor);\n\t  this.readCursor += 8;\n\t  return d;\n\t};\n\n\tTBufferedTransport.prototype.readString = function(len) {\n\t  this.ensureAvailable(len);\n\t  var str = this.inBuf.toString('utf8', this.readCursor, this.readCursor + len);\n\t  this.readCursor += len;\n\t  return str;\n\t};\n\n\tTBufferedTransport.prototype.borrow = function() {\n\t  var obj = {buf: this.inBuf, readIndex: this.readCursor, writeIndex: this.writeCursor};\n\t  return obj;\n\t};\n\n\tTBufferedTransport.prototype.consume = function(bytesConsumed) {\n\t  this.readCursor += bytesConsumed;\n\t};\n\n\tTBufferedTransport.prototype.write = function(buf) {\n\t  if (typeof(buf) === \"string\") {\n\t    buf = new Buffer(buf, 'utf8');\n\t  }\n\t  this.outBuffers.push(buf);\n\t  this.outCount += buf.length;\n\t};\n\n\tTBufferedTransport.prototype.flush = function() {\n\t  // If the seqid of the callback is available pass it to the onFlush\n\t  // Then remove the current seqid\n\t  var seqid = this._seqid;\n\t  this._seqid = null;\n\n\t  if (this.outCount < 1) {\n\t    return;\n\t  }\n\n\t  var msg = new Buffer(this.outCount),\n\t      pos = 0;\n\t  this.outBuffers.forEach(function(buf) {\n\t    buf.copy(msg, pos, 0);\n\t    pos += buf.length;\n\t  });\n\n\t  if (this.onFlush) {\n\t    // Passing seqid through this call to get it to the connection\n\t    this.onFlush(msg, seqid);\n\t  }\n\n\t  this.outBuffers = [];\n\t  this.outCount = 0;\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */\n\t/* eslint-disable no-proto */\n\n\t'use strict'\n\n\tvar base64 = __webpack_require__(25)\n\tvar ieee754 = __webpack_require__(26)\n\tvar isArray = __webpack_require__(27)\n\n\texports.Buffer = Buffer\n\texports.SlowBuffer = SlowBuffer\n\texports.INSPECT_MAX_BYTES = 50\n\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */\n\tBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n\t  ? global.TYPED_ARRAY_SUPPORT\n\t  : typedArraySupport()\n\n\t/*\n\t * Export kMaxLength after typed array support is determined.\n\t */\n\texports.kMaxLength = kMaxLength()\n\n\tfunction typedArraySupport () {\n\t  try {\n\t    var arr = new Uint8Array(1)\n\t    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n\t    return arr.foo() === 42 && // typed array instances can be augmented\n\t        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n\t        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n\t  } catch (e) {\n\t    return false\n\t  }\n\t}\n\n\tfunction kMaxLength () {\n\t  return Buffer.TYPED_ARRAY_SUPPORT\n\t    ? 0x7fffffff\n\t    : 0x3fffffff\n\t}\n\n\tfunction createBuffer (that, length) {\n\t  if (kMaxLength() < length) {\n\t    throw new RangeError('Invalid typed array length')\n\t  }\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = new Uint8Array(length)\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    if (that === null) {\n\t      that = new Buffer(length)\n\t    }\n\t    that.length = length\n\t  }\n\n\t  return that\n\t}\n\n\t/**\n\t * The Buffer constructor returns instances of `Uint8Array` that have their\n\t * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n\t * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n\t * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n\t * returns a single octet.\n\t *\n\t * The `Uint8Array` prototype remains unmodified.\n\t */\n\n\tfunction Buffer (arg, encodingOrOffset, length) {\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n\t    return new Buffer(arg, encodingOrOffset, length)\n\t  }\n\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    if (typeof encodingOrOffset === 'string') {\n\t      throw new Error(\n\t        'If encoding is specified then the first argument must be a string'\n\t      )\n\t    }\n\t    return allocUnsafe(this, arg)\n\t  }\n\t  return from(this, arg, encodingOrOffset, length)\n\t}\n\n\tBuffer.poolSize = 8192 // not used by this implementation\n\n\t// TODO: Legacy, not needed anymore. Remove in next major version.\n\tBuffer._augment = function (arr) {\n\t  arr.__proto__ = Buffer.prototype\n\t  return arr\n\t}\n\n\tfunction from (that, value, encodingOrOffset, length) {\n\t  if (typeof value === 'number') {\n\t    throw new TypeError('\"value\" argument must not be a number')\n\t  }\n\n\t  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n\t    return fromArrayBuffer(that, value, encodingOrOffset, length)\n\t  }\n\n\t  if (typeof value === 'string') {\n\t    return fromString(that, value, encodingOrOffset)\n\t  }\n\n\t  return fromObject(that, value)\n\t}\n\n\t/**\n\t * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n\t * if value is a number.\n\t * Buffer.from(str[, encoding])\n\t * Buffer.from(array)\n\t * Buffer.from(buffer)\n\t * Buffer.from(arrayBuffer[, byteOffset[, length]])\n\t **/\n\tBuffer.from = function (value, encodingOrOffset, length) {\n\t  return from(null, value, encodingOrOffset, length)\n\t}\n\n\tif (Buffer.TYPED_ARRAY_SUPPORT) {\n\t  Buffer.prototype.__proto__ = Uint8Array.prototype\n\t  Buffer.__proto__ = Uint8Array\n\t  if (typeof Symbol !== 'undefined' && Symbol.species &&\n\t      Buffer[Symbol.species] === Buffer) {\n\t    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n\t    Object.defineProperty(Buffer, Symbol.species, {\n\t      value: null,\n\t      configurable: true\n\t    })\n\t  }\n\t}\n\n\tfunction assertSize (size) {\n\t  if (typeof size !== 'number') {\n\t    throw new TypeError('\"size\" argument must be a number')\n\t  } else if (size < 0) {\n\t    throw new RangeError('\"size\" argument must not be negative')\n\t  }\n\t}\n\n\tfunction alloc (that, size, fill, encoding) {\n\t  assertSize(size)\n\t  if (size <= 0) {\n\t    return createBuffer(that, size)\n\t  }\n\t  if (fill !== undefined) {\n\t    // Only pay attention to encoding if it's a string. This\n\t    // prevents accidentally sending in a number that would\n\t    // be interpretted as a start offset.\n\t    return typeof encoding === 'string'\n\t      ? createBuffer(that, size).fill(fill, encoding)\n\t      : createBuffer(that, size).fill(fill)\n\t  }\n\t  return createBuffer(that, size)\n\t}\n\n\t/**\n\t * Creates a new filled Buffer instance.\n\t * alloc(size[, fill[, encoding]])\n\t **/\n\tBuffer.alloc = function (size, fill, encoding) {\n\t  return alloc(null, size, fill, encoding)\n\t}\n\n\tfunction allocUnsafe (that, size) {\n\t  assertSize(size)\n\t  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    for (var i = 0; i < size; ++i) {\n\t      that[i] = 0\n\t    }\n\t  }\n\t  return that\n\t}\n\n\t/**\n\t * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n\t * */\n\tBuffer.allocUnsafe = function (size) {\n\t  return allocUnsafe(null, size)\n\t}\n\t/**\n\t * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n\t */\n\tBuffer.allocUnsafeSlow = function (size) {\n\t  return allocUnsafe(null, size)\n\t}\n\n\tfunction fromString (that, string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') {\n\t    encoding = 'utf8'\n\t  }\n\n\t  if (!Buffer.isEncoding(encoding)) {\n\t    throw new TypeError('\"encoding\" must be a valid string encoding')\n\t  }\n\n\t  var length = byteLength(string, encoding) | 0\n\t  that = createBuffer(that, length)\n\n\t  var actual = that.write(string, encoding)\n\n\t  if (actual !== length) {\n\t    // Writing a hex string, for example, that contains invalid characters will\n\t    // cause everything after the first invalid character to be ignored. (e.g.\n\t    // 'abxxcd' will be treated as 'ab')\n\t    that = that.slice(0, actual)\n\t  }\n\n\t  return that\n\t}\n\n\tfunction fromArrayLike (that, array) {\n\t  var length = array.length < 0 ? 0 : checked(array.length) | 0\n\t  that = createBuffer(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\n\tfunction fromArrayBuffer (that, array, byteOffset, length) {\n\t  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n\t  if (byteOffset < 0 || array.byteLength < byteOffset) {\n\t    throw new RangeError('\\'offset\\' is out of bounds')\n\t  }\n\n\t  if (array.byteLength < byteOffset + (length || 0)) {\n\t    throw new RangeError('\\'length\\' is out of bounds')\n\t  }\n\n\t  if (byteOffset === undefined && length === undefined) {\n\t    array = new Uint8Array(array)\n\t  } else if (length === undefined) {\n\t    array = new Uint8Array(array, byteOffset)\n\t  } else {\n\t    array = new Uint8Array(array, byteOffset, length)\n\t  }\n\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = array\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that = fromArrayLike(that, array)\n\t  }\n\t  return that\n\t}\n\n\tfunction fromObject (that, obj) {\n\t  if (Buffer.isBuffer(obj)) {\n\t    var len = checked(obj.length) | 0\n\t    that = createBuffer(that, len)\n\n\t    if (that.length === 0) {\n\t      return that\n\t    }\n\n\t    obj.copy(that, 0, 0, len)\n\t    return that\n\t  }\n\n\t  if (obj) {\n\t    if ((typeof ArrayBuffer !== 'undefined' &&\n\t        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n\t      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n\t        return createBuffer(that, 0)\n\t      }\n\t      return fromArrayLike(that, obj)\n\t    }\n\n\t    if (obj.type === 'Buffer' && isArray(obj.data)) {\n\t      return fromArrayLike(that, obj.data)\n\t    }\n\t  }\n\n\t  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n\t}\n\n\tfunction checked (length) {\n\t  // Note: cannot use `length < kMaxLength()` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= kMaxLength()) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\n\tfunction SlowBuffer (length) {\n\t  if (+length != length) { // eslint-disable-line eqeqeq\n\t    length = 0\n\t  }\n\t  return Buffer.alloc(+length)\n\t}\n\n\tBuffer.isBuffer = function isBuffer (b) {\n\t  return !!(b != null && b._isBuffer)\n\t}\n\n\tBuffer.compare = function compare (a, b) {\n\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t    throw new TypeError('Arguments must be Buffers')\n\t  }\n\n\t  if (a === b) return 0\n\n\t  var x = a.length\n\t  var y = b.length\n\n\t  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n\t    if (a[i] !== b[i]) {\n\t      x = a[i]\n\t      y = b[i]\n\t      break\n\t    }\n\t  }\n\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\n\tBuffer.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'latin1':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t}\n\n\tBuffer.concat = function concat (list, length) {\n\t  if (!isArray(list)) {\n\t    throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t  }\n\n\t  if (list.length === 0) {\n\t    return Buffer.alloc(0)\n\t  }\n\n\t  var i\n\t  if (length === undefined) {\n\t    length = 0\n\t    for (i = 0; i < list.length; ++i) {\n\t      length += list[i].length\n\t    }\n\t  }\n\n\t  var buffer = Buffer.allocUnsafe(length)\n\t  var pos = 0\n\t  for (i = 0; i < list.length; ++i) {\n\t    var buf = list[i]\n\t    if (!Buffer.isBuffer(buf)) {\n\t      throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t    }\n\t    buf.copy(buffer, pos)\n\t    pos += buf.length\n\t  }\n\t  return buffer\n\t}\n\n\tfunction byteLength (string, encoding) {\n\t  if (Buffer.isBuffer(string)) {\n\t    return string.length\n\t  }\n\t  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n\t      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n\t    return string.byteLength\n\t  }\n\t  if (typeof string !== 'string') {\n\t    string = '' + string\n\t  }\n\n\t  var len = string.length\n\t  if (len === 0) return 0\n\n\t  // Use a for loop to avoid recursion\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'latin1':\n\t      case 'binary':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t      case undefined:\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\tBuffer.byteLength = byteLength\n\n\tfunction slowToString (encoding, start, end) {\n\t  var loweredCase = false\n\n\t  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n\t  // property of a typed array.\n\n\t  // This behaves neither like String nor Uint8Array in that we set start/end\n\t  // to their upper/lower bounds if the value passed is out of range.\n\t  // undefined is handled specially as per ECMA-262 6th Edition,\n\t  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\t  if (start === undefined || start < 0) {\n\t    start = 0\n\t  }\n\t  // Return early if start > this.length. Done here to prevent potential uint32\n\t  // coercion fail below.\n\t  if (start > this.length) {\n\t    return ''\n\t  }\n\n\t  if (end === undefined || end > this.length) {\n\t    end = this.length\n\t  }\n\n\t  if (end <= 0) {\n\t    return ''\n\t  }\n\n\t  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\t  end >>>= 0\n\t  start >>>= 0\n\n\t  if (end <= start) {\n\t    return ''\n\t  }\n\n\t  if (!encoding) encoding = 'utf8'\n\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Slice(this, start, end)\n\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\n\t// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n\t// Buffer instances.\n\tBuffer.prototype._isBuffer = true\n\n\tfunction swap (b, n, m) {\n\t  var i = b[n]\n\t  b[n] = b[m]\n\t  b[m] = i\n\t}\n\n\tBuffer.prototype.swap16 = function swap16 () {\n\t  var len = this.length\n\t  if (len % 2 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 16-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 2) {\n\t    swap(this, i, i + 1)\n\t  }\n\t  return this\n\t}\n\n\tBuffer.prototype.swap32 = function swap32 () {\n\t  var len = this.length\n\t  if (len % 4 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 32-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 4) {\n\t    swap(this, i, i + 3)\n\t    swap(this, i + 1, i + 2)\n\t  }\n\t  return this\n\t}\n\n\tBuffer.prototype.swap64 = function swap64 () {\n\t  var len = this.length\n\t  if (len % 8 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 64-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 8) {\n\t    swap(this, i, i + 7)\n\t    swap(this, i + 1, i + 6)\n\t    swap(this, i + 2, i + 5)\n\t    swap(this, i + 3, i + 4)\n\t  }\n\t  return this\n\t}\n\n\tBuffer.prototype.toString = function toString () {\n\t  var length = this.length | 0\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t}\n\n\tBuffer.prototype.equals = function equals (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer.compare(this, b) === 0\n\t}\n\n\tBuffer.prototype.inspect = function inspect () {\n\t  var str = ''\n\t  var max = exports.INSPECT_MAX_BYTES\n\t  if (this.length > 0) {\n\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n\t    if (this.length > max) str += ' ... '\n\t  }\n\t  return '<Buffer ' + str + '>'\n\t}\n\n\tBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n\t  if (!Buffer.isBuffer(target)) {\n\t    throw new TypeError('Argument must be a Buffer')\n\t  }\n\n\t  if (start === undefined) {\n\t    start = 0\n\t  }\n\t  if (end === undefined) {\n\t    end = target ? target.length : 0\n\t  }\n\t  if (thisStart === undefined) {\n\t    thisStart = 0\n\t  }\n\t  if (thisEnd === undefined) {\n\t    thisEnd = this.length\n\t  }\n\n\t  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n\t    throw new RangeError('out of range index')\n\t  }\n\n\t  if (thisStart >= thisEnd && start >= end) {\n\t    return 0\n\t  }\n\t  if (thisStart >= thisEnd) {\n\t    return -1\n\t  }\n\t  if (start >= end) {\n\t    return 1\n\t  }\n\n\t  start >>>= 0\n\t  end >>>= 0\n\t  thisStart >>>= 0\n\t  thisEnd >>>= 0\n\n\t  if (this === target) return 0\n\n\t  var x = thisEnd - thisStart\n\t  var y = end - start\n\t  var len = Math.min(x, y)\n\n\t  var thisCopy = this.slice(thisStart, thisEnd)\n\t  var targetCopy = target.slice(start, end)\n\n\t  for (var i = 0; i < len; ++i) {\n\t    if (thisCopy[i] !== targetCopy[i]) {\n\t      x = thisCopy[i]\n\t      y = targetCopy[i]\n\t      break\n\t    }\n\t  }\n\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\n\t// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n\t// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n\t//\n\t// Arguments:\n\t// - buffer - a Buffer to search\n\t// - val - a string, Buffer, or number\n\t// - byteOffset - an index into `buffer`; will be clamped to an int32\n\t// - encoding - an optional encoding, relevant is val is a string\n\t// - dir - true for indexOf, false for lastIndexOf\n\tfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n\t  // Empty buffer means no match\n\t  if (buffer.length === 0) return -1\n\n\t  // Normalize byteOffset\n\t  if (typeof byteOffset === 'string') {\n\t    encoding = byteOffset\n\t    byteOffset = 0\n\t  } else if (byteOffset > 0x7fffffff) {\n\t    byteOffset = 0x7fffffff\n\t  } else if (byteOffset < -0x80000000) {\n\t    byteOffset = -0x80000000\n\t  }\n\t  byteOffset = +byteOffset  // Coerce to Number.\n\t  if (isNaN(byteOffset)) {\n\t    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n\t    byteOffset = dir ? 0 : (buffer.length - 1)\n\t  }\n\n\t  // Normalize byteOffset: negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n\t  if (byteOffset >= buffer.length) {\n\t    if (dir) return -1\n\t    else byteOffset = buffer.length - 1\n\t  } else if (byteOffset < 0) {\n\t    if (dir) byteOffset = 0\n\t    else return -1\n\t  }\n\n\t  // Normalize val\n\t  if (typeof val === 'string') {\n\t    val = Buffer.from(val, encoding)\n\t  }\n\n\t  // Finally, search either indexOf (if dir is true) or lastIndexOf\n\t  if (Buffer.isBuffer(val)) {\n\t    // Special case: looking for empty string/buffer always fails\n\t    if (val.length === 0) {\n\t      return -1\n\t    }\n\t    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n\t  } else if (typeof val === 'number') {\n\t    val = val & 0xFF // Search for a byte value [0-255]\n\t    if (Buffer.TYPED_ARRAY_SUPPORT &&\n\t        typeof Uint8Array.prototype.indexOf === 'function') {\n\t      if (dir) {\n\t        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n\t      } else {\n\t        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n\t      }\n\t    }\n\t    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n\t  }\n\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\n\tfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n\t  var indexSize = 1\n\t  var arrLength = arr.length\n\t  var valLength = val.length\n\n\t  if (encoding !== undefined) {\n\t    encoding = String(encoding).toLowerCase()\n\t    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n\t        encoding === 'utf16le' || encoding === 'utf-16le') {\n\t      if (arr.length < 2 || val.length < 2) {\n\t        return -1\n\t      }\n\t      indexSize = 2\n\t      arrLength /= 2\n\t      valLength /= 2\n\t      byteOffset /= 2\n\t    }\n\t  }\n\n\t  function read (buf, i) {\n\t    if (indexSize === 1) {\n\t      return buf[i]\n\t    } else {\n\t      return buf.readUInt16BE(i * indexSize)\n\t    }\n\t  }\n\n\t  var i\n\t  if (dir) {\n\t    var foundIndex = -1\n\t    for (i = byteOffset; i < arrLength; i++) {\n\t      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n\t        if (foundIndex === -1) foundIndex = i\n\t        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n\t      } else {\n\t        if (foundIndex !== -1) i -= i - foundIndex\n\t        foundIndex = -1\n\t      }\n\t    }\n\t  } else {\n\t    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n\t    for (i = byteOffset; i >= 0; i--) {\n\t      var found = true\n\t      for (var j = 0; j < valLength; j++) {\n\t        if (read(arr, i + j) !== read(val, j)) {\n\t          found = false\n\t          break\n\t        }\n\t      }\n\t      if (found) return i\n\t    }\n\t  }\n\n\t  return -1\n\t}\n\n\tBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n\t  return this.indexOf(val, byteOffset, encoding) !== -1\n\t}\n\n\tBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n\t}\n\n\tBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n\t}\n\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0\n\t  var remaining = buf.length - offset\n\t  if (!length) {\n\t    length = remaining\n\t  } else {\n\t    length = Number(length)\n\t    if (length > remaining) {\n\t      length = remaining\n\t    }\n\t  }\n\n\t  // must be an even number of digits\n\t  var strLen = string.length\n\t  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2\n\t  }\n\t  for (var i = 0; i < length; ++i) {\n\t    var parsed = parseInt(string.substr(i * 2, 2), 16)\n\t    if (isNaN(parsed)) return i\n\t    buf[offset + i] = parsed\n\t  }\n\t  return i\n\t}\n\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\n\tfunction latin1Write (buf, string, offset, length) {\n\t  return asciiWrite(buf, string, offset, length)\n\t}\n\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\n\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8'\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset | 0\n\t    if (isFinite(length)) {\n\t      length = length | 0\n\t      if (encoding === undefined) encoding = 'utf8'\n\t    } else {\n\t      encoding = length\n\t      length = undefined\n\t    }\n\t  // legacy write(string, encoding, offset, length) - remove in v0.13\n\t  } else {\n\t    throw new Error(\n\t      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n\t    )\n\t  }\n\n\t  var remaining = this.length - offset\n\t  if (length === undefined || length > remaining) length = remaining\n\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('Attempt to write outside buffer bounds')\n\t  }\n\n\t  if (!encoding) encoding = 'utf8'\n\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\n\t      case 'ascii':\n\t        return asciiWrite(this, string, offset, length)\n\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Write(this, string, offset, length)\n\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\n\tBuffer.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t}\n\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return base64.fromByteArray(buf)\n\t  } else {\n\t    return base64.fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\n\tfunction utf8Slice (buf, start, end) {\n\t  end = Math.min(buf.length, end)\n\t  var res = []\n\n\t  var i = start\n\t  while (i < end) {\n\t    var firstByte = buf[i]\n\t    var codePoint = null\n\t    var bytesPerSequence = (firstByte > 0xEF) ? 4\n\t      : (firstByte > 0xDF) ? 3\n\t      : (firstByte > 0xBF) ? 2\n\t      : 1\n\n\t    if (i + bytesPerSequence <= end) {\n\t      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n\t      switch (bytesPerSequence) {\n\t        case 1:\n\t          if (firstByte < 0x80) {\n\t            codePoint = firstByte\n\t          }\n\t          break\n\t        case 2:\n\t          secondByte = buf[i + 1]\n\t          if ((secondByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n\t            if (tempCodePoint > 0x7F) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 3:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 4:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          fourthByte = buf[i + 3]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t      }\n\t    }\n\n\t    if (codePoint === null) {\n\t      // we did not generate a valid codePoint so insert a\n\t      // replacement char (U+FFFD) and advance only 1 byte\n\t      codePoint = 0xFFFD\n\t      bytesPerSequence = 1\n\t    } else if (codePoint > 0xFFFF) {\n\t      // encode to utf16 (surrogate pair dance)\n\t      codePoint -= 0x10000\n\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n\t      codePoint = 0xDC00 | codePoint & 0x3FF\n\t    }\n\n\t    res.push(codePoint)\n\t    i += bytesPerSequence\n\t  }\n\n\t  return decodeCodePointsArray(res)\n\t}\n\n\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t// the lowest limit is Chrome, with 0x10000 args.\n\t// We go 1 magnitude less, for safety\n\tvar MAX_ARGUMENTS_LENGTH = 0x1000\n\n\tfunction decodeCodePointsArray (codePoints) {\n\t  var len = codePoints.length\n\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t  }\n\n\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t  var res = ''\n\t  var i = 0\n\t  while (i < len) {\n\t    res += String.fromCharCode.apply(\n\t      String,\n\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t    )\n\t  }\n\t  return res\n\t}\n\n\tfunction asciiSlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\n\t  for (var i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F)\n\t  }\n\t  return ret\n\t}\n\n\tfunction latin1Slice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\n\t  for (var i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i])\n\t  }\n\t  return ret\n\t}\n\n\tfunction hexSlice (buf, start, end) {\n\t  var len = buf.length\n\n\t  if (!start || start < 0) start = 0\n\t  if (!end || end < 0 || end > len) end = len\n\n\t  var out = ''\n\t  for (var i = start; i < end; ++i) {\n\t    out += toHex(buf[i])\n\t  }\n\t  return out\n\t}\n\n\tfunction utf16leSlice (buf, start, end) {\n\t  var bytes = buf.slice(start, end)\n\t  var res = ''\n\t  for (var i = 0; i < bytes.length; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n\t  }\n\t  return res\n\t}\n\n\tBuffer.prototype.slice = function slice (start, end) {\n\t  var len = this.length\n\t  start = ~~start\n\t  end = end === undefined ? len : ~~end\n\n\t  if (start < 0) {\n\t    start += len\n\t    if (start < 0) start = 0\n\t  } else if (start > len) {\n\t    start = len\n\t  }\n\n\t  if (end < 0) {\n\t    end += len\n\t    if (end < 0) end = 0\n\t  } else if (end > len) {\n\t    end = len\n\t  }\n\n\t  if (end < start) end = start\n\n\t  var newBuf\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    newBuf = this.subarray(start, end)\n\t    newBuf.__proto__ = Buffer.prototype\n\t  } else {\n\t    var sliceLen = end - start\n\t    newBuf = new Buffer(sliceLen, undefined)\n\t    for (var i = 0; i < sliceLen; ++i) {\n\t      newBuf[i] = this[i + start]\n\t    }\n\t  }\n\n\t  return newBuf\n\t}\n\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\n\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\n\t  return val\n\t}\n\n\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length)\n\t  }\n\n\t  var val = this[offset + --byteLength]\n\t  var mul = 1\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul\n\t  }\n\n\t  return val\n\t}\n\n\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  return this[offset]\n\t}\n\n\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return this[offset] | (this[offset + 1] << 8)\n\t}\n\n\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return (this[offset] << 8) | this[offset + 1]\n\t}\n\n\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t}\n\n\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t}\n\n\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t  mul *= 0x80\n\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n\t  return val\n\t}\n\n\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t  var i = byteLength\n\t  var mul = 1\n\t  var val = this[offset + --i]\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul\n\t  }\n\t  mul *= 0x80\n\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n\t  return val\n\t}\n\n\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t}\n\n\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset] | (this[offset + 1] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\n\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset + 1] | (this[offset] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\n\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t}\n\n\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t}\n\n\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, true, 23, 4)\n\t}\n\n\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, false, 23, 4)\n\t}\n\n\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, true, 52, 8)\n\t}\n\n\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, false, 52, 8)\n\t}\n\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t}\n\n\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t  }\n\n\t  var mul = 1\n\t  var i = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\n\t  return offset + byteLength\n\t}\n\n\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t  }\n\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\n\t  return offset + byteLength\n\t}\n\n\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\n\tfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n\t    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n\t      (littleEndian ? i : 1 - i) * 8\n\t  }\n\t}\n\n\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\n\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\n\tfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n\t    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n\t  }\n\t}\n\n\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset + 3] = (value >>> 24)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\n\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\n\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\n\t  var i = 0\n\t  var mul = 1\n\t  var sub = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n\t      sub = 1\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\n\t  return offset + byteLength\n\t}\n\n\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  var sub = 0\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n\t      sub = 1\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\n\t  return offset + byteLength\n\t}\n\n\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  if (value < 0) value = 0xff + value + 1\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\n\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\n\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\n\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 3] = (value >>> 24)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\n\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t  if (offset < 0) throw new RangeError('Index out of range')\n\t}\n\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n\t  return offset + 4\n\t}\n\n\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t}\n\n\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t}\n\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n\t  return offset + 8\n\t}\n\n\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t}\n\n\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t}\n\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!start) start = 0\n\t  if (!end && end !== 0) end = this.length\n\t  if (targetStart >= target.length) targetStart = target.length\n\t  if (!targetStart) targetStart = 0\n\t  if (end > 0 && end < start) end = start\n\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start\n\t  }\n\n\t  var len = end - start\n\t  var i\n\n\t  if (this === target && start < targetStart && targetStart < end) {\n\t    // descending copy from end\n\t    for (i = len - 1; i >= 0; --i) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // ascending copy from start\n\t    for (i = 0; i < len; ++i) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else {\n\t    Uint8Array.prototype.set.call(\n\t      target,\n\t      this.subarray(start, start + len),\n\t      targetStart\n\t    )\n\t  }\n\n\t  return len\n\t}\n\n\t// Usage:\n\t//    buffer.fill(number[, offset[, end]])\n\t//    buffer.fill(buffer[, offset[, end]])\n\t//    buffer.fill(string[, offset[, end]][, encoding])\n\tBuffer.prototype.fill = function fill (val, start, end, encoding) {\n\t  // Handle string cases:\n\t  if (typeof val === 'string') {\n\t    if (typeof start === 'string') {\n\t      encoding = start\n\t      start = 0\n\t      end = this.length\n\t    } else if (typeof end === 'string') {\n\t      encoding = end\n\t      end = this.length\n\t    }\n\t    if (val.length === 1) {\n\t      var code = val.charCodeAt(0)\n\t      if (code < 256) {\n\t        val = code\n\t      }\n\t    }\n\t    if (encoding !== undefined && typeof encoding !== 'string') {\n\t      throw new TypeError('encoding must be a string')\n\t    }\n\t    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n\t      throw new TypeError('Unknown encoding: ' + encoding)\n\t    }\n\t  } else if (typeof val === 'number') {\n\t    val = val & 255\n\t  }\n\n\t  // Invalid ranges are not set to a default, so can range check early.\n\t  if (start < 0 || this.length < start || this.length < end) {\n\t    throw new RangeError('Out of range index')\n\t  }\n\n\t  if (end <= start) {\n\t    return this\n\t  }\n\n\t  start = start >>> 0\n\t  end = end === undefined ? this.length : end >>> 0\n\n\t  if (!val) val = 0\n\n\t  var i\n\t  if (typeof val === 'number') {\n\t    for (i = start; i < end; ++i) {\n\t      this[i] = val\n\t    }\n\t  } else {\n\t    var bytes = Buffer.isBuffer(val)\n\t      ? val\n\t      : utf8ToBytes(new Buffer(val, encoding).toString())\n\t    var len = bytes.length\n\t    for (i = 0; i < end - start; ++i) {\n\t      this[i + start] = bytes[i % len]\n\t    }\n\t  }\n\n\t  return this\n\t}\n\n\t// HELPER FUNCTIONS\n\t// ================\n\n\tvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\n\tfunction base64clean (str) {\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '='\n\t  }\n\t  return str\n\t}\n\n\tfunction stringtrim (str) {\n\t  if (str.trim) return str.trim()\n\t  return str.replace(/^\\s+|\\s+$/g, '')\n\t}\n\n\tfunction toHex (n) {\n\t  if (n < 16) return '0' + n.toString(16)\n\t  return n.toString(16)\n\t}\n\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity\n\t  var codePoint\n\t  var length = string.length\n\t  var leadSurrogate = null\n\t  var bytes = []\n\n\t  for (var i = 0; i < length; ++i) {\n\t    codePoint = string.charCodeAt(i)\n\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (!leadSurrogate) {\n\t        // no lead yet\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        }\n\n\t        // valid lead\n\t        leadSurrogate = codePoint\n\n\t        continue\n\t      }\n\n\t      // 2 leads in a row\n\t      if (codePoint < 0xDC00) {\n\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t        leadSurrogate = codePoint\n\t        continue\n\t      }\n\n\t      // valid surrogate pair\n\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t    }\n\n\t    leadSurrogate = null\n\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint)\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x110000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\n\t  return bytes\n\t}\n\n\tfunction asciiToBytes (str) {\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; ++i) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF)\n\t  }\n\t  return byteArray\n\t}\n\n\tfunction utf16leToBytes (str, units) {\n\t  var c, hi, lo\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; ++i) {\n\t    if ((units -= 2) < 0) break\n\n\t    c = str.charCodeAt(i)\n\t    hi = c >> 8\n\t    lo = c % 256\n\t    byteArray.push(lo)\n\t    byteArray.push(hi)\n\t  }\n\n\t  return byteArray\n\t}\n\n\tfunction base64ToBytes (str) {\n\t  return base64.toByteArray(base64clean(str))\n\t}\n\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  for (var i = 0; i < length; ++i) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i]\n\t  }\n\t  return i\n\t}\n\n\tfunction isnan (val) {\n\t  return val !== val // eslint-disable-line no-self-compare\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\n\t'use strict'\n\n\texports.byteLength = byteLength\n\texports.toByteArray = toByteArray\n\texports.fromByteArray = fromByteArray\n\n\tvar lookup = []\n\tvar revLookup = []\n\tvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\n\tvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\tfor (var i = 0, len = code.length; i < len; ++i) {\n\t  lookup[i] = code[i]\n\t  revLookup[code.charCodeAt(i)] = i\n\t}\n\n\trevLookup['-'.charCodeAt(0)] = 62\n\trevLookup['_'.charCodeAt(0)] = 63\n\n\tfunction placeHoldersCount (b64) {\n\t  var len = b64.length\n\t  if (len % 4 > 0) {\n\t    throw new Error('Invalid string. Length must be a multiple of 4')\n\t  }\n\n\t  // the number of equal signs (place holders)\n\t  // if there are two placeholders, than the two characters before it\n\t  // represent one byte\n\t  // if there is only one, then the three characters before it represent 2 bytes\n\t  // this is just a cheap hack to not do indexOf twice\n\t  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\t}\n\n\tfunction byteLength (b64) {\n\t  // base64 is 4/3 + up to two characters of the original data\n\t  return b64.length * 3 / 4 - placeHoldersCount(b64)\n\t}\n\n\tfunction toByteArray (b64) {\n\t  var i, j, l, tmp, placeHolders, arr\n\t  var len = b64.length\n\t  placeHolders = placeHoldersCount(b64)\n\n\t  arr = new Arr(len * 3 / 4 - placeHolders)\n\n\t  // if there are placeholders, only get up to the last complete 4 chars\n\t  l = placeHolders > 0 ? len - 4 : len\n\n\t  var L = 0\n\n\t  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n\t    arr[L++] = (tmp >> 16) & 0xFF\n\t    arr[L++] = (tmp >> 8) & 0xFF\n\t    arr[L++] = tmp & 0xFF\n\t  }\n\n\t  if (placeHolders === 2) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n\t    arr[L++] = tmp & 0xFF\n\t  } else if (placeHolders === 1) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n\t    arr[L++] = (tmp >> 8) & 0xFF\n\t    arr[L++] = tmp & 0xFF\n\t  }\n\n\t  return arr\n\t}\n\n\tfunction tripletToBase64 (num) {\n\t  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n\t}\n\n\tfunction encodeChunk (uint8, start, end) {\n\t  var tmp\n\t  var output = []\n\t  for (var i = start; i < end; i += 3) {\n\t    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t    output.push(tripletToBase64(tmp))\n\t  }\n\t  return output.join('')\n\t}\n\n\tfunction fromByteArray (uint8) {\n\t  var tmp\n\t  var len = uint8.length\n\t  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n\t  var output = ''\n\t  var parts = []\n\t  var maxChunkLength = 16383 // must be multiple of 3\n\n\t  // go through the array every three bytes, we'll deal with trailing stuff later\n\t  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n\t    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n\t  }\n\n\t  // pad the end with zeros, but make sure to not forget the extra bytes\n\t  if (extraBytes === 1) {\n\t    tmp = uint8[len - 1]\n\t    output += lookup[tmp >> 2]\n\t    output += lookup[(tmp << 4) & 0x3F]\n\t    output += '=='\n\t  } else if (extraBytes === 2) {\n\t    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n\t    output += lookup[tmp >> 10]\n\t    output += lookup[(tmp >> 4) & 0x3F]\n\t    output += lookup[(tmp << 2) & 0x3F]\n\t    output += '='\n\t  }\n\n\t  parts.push(output)\n\n\t  return parts.join('')\n\t}\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\n\texports.read = function (buffer, offset, isLE, mLen, nBytes) {\n\t  var e, m\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var nBits = -7\n\t  var i = isLE ? (nBytes - 1) : 0\n\t  var d = isLE ? -1 : 1\n\t  var s = buffer[offset + i]\n\n\t  i += d\n\n\t  e = s & ((1 << (-nBits)) - 1)\n\t  s >>= (-nBits)\n\t  nBits += eLen\n\t  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n\t  m = e & ((1 << (-nBits)) - 1)\n\t  e >>= (-nBits)\n\t  nBits += mLen\n\t  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n\t  if (e === 0) {\n\t    e = 1 - eBias\n\t  } else if (e === eMax) {\n\t    return m ? NaN : ((s ? -1 : 1) * Infinity)\n\t  } else {\n\t    m = m + Math.pow(2, mLen)\n\t    e = e - eBias\n\t  }\n\t  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n\t}\n\n\texports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n\t  var e, m, c\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n\t  var i = isLE ? 0 : (nBytes - 1)\n\t  var d = isLE ? 1 : -1\n\t  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n\t  value = Math.abs(value)\n\n\t  if (isNaN(value) || value === Infinity) {\n\t    m = isNaN(value) ? 1 : 0\n\t    e = eMax\n\t  } else {\n\t    e = Math.floor(Math.log(value) / Math.LN2)\n\t    if (value * (c = Math.pow(2, -e)) < 1) {\n\t      e--\n\t      c *= 2\n\t    }\n\t    if (e + eBias >= 1) {\n\t      value += rt / c\n\t    } else {\n\t      value += rt * Math.pow(2, 1 - eBias)\n\t    }\n\t    if (value * c >= 2) {\n\t      e++\n\t      c /= 2\n\t    }\n\n\t    if (e + eBias >= eMax) {\n\t      m = 0\n\t      e = eMax\n\t    } else if (e + eBias >= 1) {\n\t      m = (value * c - 1) * Math.pow(2, mLen)\n\t      e = e + eBias\n\t    } else {\n\t      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n\t      e = 0\n\t    }\n\t  }\n\n\t  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n\t  e = (e << mLen) | m\n\t  eLen += mLen\n\t  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n\t  buffer[offset + i - d] |= s * 128\n\t}\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\n\tvar toString = {}.toString;\n\n\tmodule.exports = Array.isArray || function (arr) {\n\t  return toString.call(arr) == '[object Array]';\n\t};\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\n\tvar POW_8 = Math.pow(2, 8);\n\tvar POW_16 = Math.pow(2, 16);\n\tvar POW_24 = Math.pow(2, 24);\n\tvar POW_32 = Math.pow(2, 32);\n\tvar POW_40 = Math.pow(2, 40);\n\tvar POW_48 = Math.pow(2, 48);\n\tvar POW_52 = Math.pow(2, 52);\n\tvar POW_1022 = Math.pow(2, 1022);\n\n\texports.readByte = function(b){\n\t\treturn b > 127 ? b-256 : b;\n\t};\n\n\texports.readI16 = function(buff, off) {\n\t  off = off || 0;\n\t  var v = buff[off + 1];\n\t  v += buff[off] << 8;\n\t  if (buff[off] & 128) {\n\t    v -= POW_16;\n\t  }\n\t  return v;\n\t};\n\n\texports.readI32 = function(buff, off) {\n\t  off = off || 0;\n\t  var v = buff[off + 3];\n\t  v += buff[off + 2] << 8;\n\t  v += buff[off + 1] << 16;\n\t  v += buff[off] * POW_24;\n\t  if (buff[off] & 0x80) {\n\t    v -= POW_32;\n\t  }\n\t  return v;\n\t};\n\n\texports.writeI16 = function(buff, v) {\n\t  buff[1] = v & 0xff;\n\t  v >>= 8;\n\t  buff[0] = v & 0xff;\n\t  return buff;\n\t};\n\n\texports.writeI32 = function(buff, v) {\n\t  buff[3] = v & 0xff;\n\t  v >>= 8;\n\t  buff[2] = v & 0xff;\n\t  v >>= 8;\n\t  buff[1] = v & 0xff;\n\t  v >>= 8;\n\t  buff[0] = v & 0xff;\n\t  return buff;\n\t};\n\n\texports.readDouble = function(buff, off) {\n\t  off = off || 0;\n\t  var signed = buff[off] & 0x80;\n\t  var e = (buff[off+1] & 0xF0) >> 4;\n\t  e += (buff[off] & 0x7F) << 4;\n\n\t  var m = buff[off+7];\n\t  m += buff[off+6] << 8;\n\t  m += buff[off+5] << 16;\n\t  m += buff[off+4] * POW_24;\n\t  m += buff[off+3] * POW_32;\n\t  m += buff[off+2] * POW_40;\n\t  m += (buff[off+1] & 0x0F) * POW_48;\n\n\t  switch (e) {\n\t    case 0:\n\t      e = -1022;\n\t      break;\n\t    case 2047:\n\t      return m ? NaN : (signed ? -Infinity : Infinity);\n\t    default:\n\t      m += POW_52;\n\t      e -= 1023;\n\t  }\n\n\t  if (signed) {\n\t    m *= -1;\n\t  }\n\n\t  return m * Math.pow(2, e - 52);\n\t};\n\n\t/*\n\t * Based on code from the jspack module:\n\t * http://code.google.com/p/jspack/\n\t */\n\texports.writeDouble = function(buff, v) {\n\t  var m, e, c;\n\n\t  buff[0] = (v < 0 ? 0x80 : 0x00);\n\n\t  v = Math.abs(v);\n\t  if (v !== v) {\n\t    // NaN, use QNaN IEEE format\n\t    m = 2251799813685248;\n\t    e = 2047;\n\t  } else if (v === Infinity) {\n\t    m = 0;\n\t    e = 2047;\n\t  } else {\n\t    e = Math.floor(Math.log(v) / Math.LN2);\n\t    c = Math.pow(2, -e);\n\t    if (v * c < 1) {\n\t      e--;\n\t      c *= 2;\n\t    }\n\n\t    if (e + 1023 >= 2047)\n\t    {\n\t      // Overflow\n\t      m = 0;\n\t      e = 2047;\n\t    }\n\t    else if (e + 1023 >= 1)\n\t    {\n\t      // Normalized - term order matters, as Math.pow(2, 52-e) and v*Math.pow(2, 52) can overflow\n\t      m = (v*c-1) * POW_52;\n\t      e += 1023;\n\t    }\n\t    else\n\t    {\n\t      // Denormalized - also catches the '0' case, somewhat by chance\n\t      m = (v * POW_1022) * POW_52;\n\t      e = 0;\n\t    }\n\t  }\n\n\t  buff[1] = (e << 4) & 0xf0;\n\t  buff[0] |= (e >> 4) & 0x7f;\n\n\t  buff[7] = m & 0xff;\n\t  m = Math.floor(m / POW_8);\n\t  buff[6] = m & 0xff;\n\t  m = Math.floor(m / POW_8);\n\t  buff[5] = m & 0xff;\n\t  m = Math.floor(m / POW_8);\n\t  buff[4] = m & 0xff;\n\t  m >>= 8;\n\t  buff[3] = m & 0xff;\n\t  m >>= 8;\n\t  buff[2] = m & 0xff;\n\t  m >>= 8;\n\t  buff[1] |= m & 0x0f;\n\n\t  return buff;\n\t};\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\tvar util = __webpack_require__(16);\n\n\tmodule.exports = InputBufferUnderrunError;\n\n\tfunction InputBufferUnderrunError(message) {\n\t  Error.call(this);\n\t  Error.captureStackTrace(this, this.constructor);\n\t  this.name = this.constructor.name;\n\t  this.message = message;\n\t};\n\n\tutil.inherits(InputBufferUnderrunError, Error);\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\n\tvar log = __webpack_require__(31);\n\tvar binary = __webpack_require__(28);\n\tvar Int64 = __webpack_require__(32);\n\tvar Thrift = __webpack_require__(15);\n\tvar Type = Thrift.Type;\n\n\tmodule.exports = TBinaryProtocol;\n\n\t// JavaScript supports only numeric doubles, therefore even hex values are always signed.\n\t// The largest integer value which can be represented in JavaScript is +/-2^53.\n\t// Bitwise operations convert numbers to 32 bit integers but perform sign extension\n\t// upon assigning values back to variables.\n\tvar VERSION_MASK = -65536,   // 0xffff0000\n\t    VERSION_1 = -2147418112, // 0x80010000\n\t    TYPE_MASK = 0x000000ff;\n\n\tfunction TBinaryProtocol(trans, strictRead, strictWrite) {\n\t  this.trans = trans;\n\t  this.strictRead = (strictRead !== undefined ? strictRead : false);\n\t  this.strictWrite = (strictWrite !== undefined ? strictWrite : true);\n\t};\n\n\tTBinaryProtocol.prototype.flush = function() {\n\t  return this.trans.flush();\n\t};\n\n\tTBinaryProtocol.prototype.writeMessageBegin = function(name, type, seqid) {\n\t    if (this.strictWrite) {\n\t      this.writeI32(VERSION_1 | type);\n\t      this.writeString(name);\n\t      this.writeI32(seqid);\n\t    } else {\n\t      this.writeString(name);\n\t      this.writeByte(type);\n\t      this.writeI32(seqid);\n\t    }\n\t    // Record client seqid to find callback again\n\t    if (this._seqid) {\n\t      // TODO better logging log warning\n\t      log.warning('SeqId already set', { 'name': name });\n\t    } else {\n\t      this._seqid = seqid;\n\t      this.trans.setCurrSeqId(seqid);\n\t    }\n\t};\n\n\tTBinaryProtocol.prototype.writeMessageEnd = function() {\n\t    if (this._seqid) {\n\t        this._seqid = null;\n\t    } else {\n\t        log.warning('No seqid to unset');\n\t    }\n\t};\n\n\tTBinaryProtocol.prototype.writeStructBegin = function(name) {\n\t};\n\n\tTBinaryProtocol.prototype.writeStructEnd = function() {\n\t};\n\n\tTBinaryProtocol.prototype.writeFieldBegin = function(name, type, id) {\n\t  this.writeByte(type);\n\t  this.writeI16(id);\n\t};\n\n\tTBinaryProtocol.prototype.writeFieldEnd = function() {\n\t};\n\n\tTBinaryProtocol.prototype.writeFieldStop = function() {\n\t  this.writeByte(Type.STOP);\n\t};\n\n\tTBinaryProtocol.prototype.writeMapBegin = function(ktype, vtype, size) {\n\t  this.writeByte(ktype);\n\t  this.writeByte(vtype);\n\t  this.writeI32(size);\n\t};\n\n\tTBinaryProtocol.prototype.writeMapEnd = function() {\n\t};\n\n\tTBinaryProtocol.prototype.writeListBegin = function(etype, size) {\n\t  this.writeByte(etype);\n\t  this.writeI32(size);\n\t};\n\n\tTBinaryProtocol.prototype.writeListEnd = function() {\n\t};\n\n\tTBinaryProtocol.prototype.writeSetBegin = function(etype, size) {\n\t  this.writeByte(etype);\n\t  this.writeI32(size);\n\t};\n\n\tTBinaryProtocol.prototype.writeSetEnd = function() {\n\t};\n\n\tTBinaryProtocol.prototype.writeBool = function(bool) {\n\t  if (bool) {\n\t    this.writeByte(1);\n\t  } else {\n\t    this.writeByte(0);\n\t  }\n\t};\n\n\tTBinaryProtocol.prototype.writeByte = function(b) {\n\t  this.trans.write(new Buffer([b]));\n\t};\n\n\tTBinaryProtocol.prototype.writeI16 = function(i16) {\n\t  this.trans.write(binary.writeI16(new Buffer(2), i16));\n\t};\n\n\tTBinaryProtocol.prototype.writeI32 = function(i32) {\n\t  this.trans.write(binary.writeI32(new Buffer(4), i32));\n\t};\n\n\tTBinaryProtocol.prototype.writeI64 = function(i64) {\n\t  if (i64.buffer) {\n\t    this.trans.write(i64.buffer);\n\t  } else {\n\t    this.trans.write(new Int64(i64).buffer);\n\t  }\n\t};\n\n\tTBinaryProtocol.prototype.writeDouble = function(dub) {\n\t  this.trans.write(binary.writeDouble(new Buffer(8), dub));\n\t};\n\n\tTBinaryProtocol.prototype.writeStringOrBinary = function(name, encoding, arg) {\n\t  if (typeof(arg) === 'string') {\n\t    this.writeI32(Buffer.byteLength(arg, encoding));\n\t    this.trans.write(new Buffer(arg, encoding));\n\t  } else if ((arg instanceof Buffer) ||\n\t             (Object.prototype.toString.call(arg) == '[object Uint8Array]')) {\n\t    // Buffers in Node.js under Browserify may extend UInt8Array instead of\n\t    // defining a new object. We detect them here so we can write them\n\t    // correctly\n\t    this.writeI32(arg.length);\n\t    this.trans.write(arg);\n\t  } else {\n\t    throw new Error(name + ' called without a string/Buffer argument: ' + arg);\n\t  }\n\t};\n\n\tTBinaryProtocol.prototype.writeString = function(arg) {\n\t  this.writeStringOrBinary('writeString', 'utf8', arg);\n\t};\n\n\tTBinaryProtocol.prototype.writeBinary = function(arg) {\n\t  this.writeStringOrBinary('writeBinary', 'binary', arg);\n\t};\n\n\tTBinaryProtocol.prototype.readMessageBegin = function() {\n\t  var sz = this.readI32();\n\t  var type, name, seqid;\n\n\t  if (sz < 0) {\n\t    var version = sz & VERSION_MASK;\n\t    if (version != VERSION_1) {\n\t      console.log(\"BAD: \" + version);\n\t      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, \"Bad version in readMessageBegin: \" + sz);\n\t    }\n\t    type = sz & TYPE_MASK;\n\t    name = this.readString();\n\t    seqid = this.readI32();\n\t  } else {\n\t    if (this.strictRead) {\n\t      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, \"No protocol version header\");\n\t    }\n\t    name = this.trans.read(sz);\n\t    type = this.readByte();\n\t    seqid = this.readI32();\n\t  }\n\t  return {fname: name, mtype: type, rseqid: seqid};\n\t};\n\n\tTBinaryProtocol.prototype.readMessageEnd = function() {\n\t};\n\n\tTBinaryProtocol.prototype.readStructBegin = function() {\n\t  return {fname: ''};\n\t};\n\n\tTBinaryProtocol.prototype.readStructEnd = function() {\n\t};\n\n\tTBinaryProtocol.prototype.readFieldBegin = function() {\n\t  var type = this.readByte();\n\t  if (type == Type.STOP) {\n\t    return {fname: null, ftype: type, fid: 0};\n\t  }\n\t  var id = this.readI16();\n\t  return {fname: null, ftype: type, fid: id};\n\t};\n\n\tTBinaryProtocol.prototype.readFieldEnd = function() {\n\t};\n\n\tTBinaryProtocol.prototype.readMapBegin = function() {\n\t  var ktype = this.readByte();\n\t  var vtype = this.readByte();\n\t  var size = this.readI32();\n\t  return {ktype: ktype, vtype: vtype, size: size};\n\t};\n\n\tTBinaryProtocol.prototype.readMapEnd = function() {\n\t};\n\n\tTBinaryProtocol.prototype.readListBegin = function() {\n\t  var etype = this.readByte();\n\t  var size = this.readI32();\n\t  return {etype: etype, size: size};\n\t};\n\n\tTBinaryProtocol.prototype.readListEnd = function() {\n\t};\n\n\tTBinaryProtocol.prototype.readSetBegin = function() {\n\t  var etype = this.readByte();\n\t  var size = this.readI32();\n\t  return {etype: etype, size: size};\n\t};\n\n\tTBinaryProtocol.prototype.readSetEnd = function() {\n\t};\n\n\tTBinaryProtocol.prototype.readBool = function() {\n\t  var b = this.readByte();\n\t  if (b === 0) {\n\t    return false;\n\t  }\n\t  return true;\n\t};\n\n\tTBinaryProtocol.prototype.readByte = function() {\n\t  return this.trans.readByte();\n\t};\n\n\tTBinaryProtocol.prototype.readI16 = function() {\n\t  return this.trans.readI16();\n\t};\n\n\tTBinaryProtocol.prototype.readI32 = function() {\n\t  return this.trans.readI32();\n\t};\n\n\tTBinaryProtocol.prototype.readI64 = function() {\n\t  var buff = this.trans.read(8);\n\t  return new Int64(buff);\n\t};\n\n\tTBinaryProtocol.prototype.readDouble = function() {\n\t  return this.trans.readDouble();\n\t};\n\n\tTBinaryProtocol.prototype.readBinary = function() {\n\t  var len = this.readI32();\n\t  if (len === 0) {\n\t    return new Buffer(0);\n\t  }\n\n\t  if (len < 0) {\n\t    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, \"Negative binary size\");\n\t  }\n\t  return this.trans.read(len);\n\t};\n\n\tTBinaryProtocol.prototype.readString = function() {\n\t  var len = this.readI32();\n\t  if (len === 0) {\n\t    return \"\";\n\t  }\n\n\t  if (len < 0) {\n\t    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, \"Negative string size\");\n\t  }\n\t  return this.trans.readString(len);\n\t};\n\n\tTBinaryProtocol.prototype.getTransport = function() {\n\t  return this.trans;\n\t};\n\n\tTBinaryProtocol.prototype.skip = function(type) {\n\t  switch (type) {\n\t    case Type.STOP:\n\t      return;\n\t    case Type.BOOL:\n\t      this.readBool();\n\t      break;\n\t    case Type.BYTE:\n\t      this.readByte();\n\t      break;\n\t    case Type.I16:\n\t      this.readI16();\n\t      break;\n\t    case Type.I32:\n\t      this.readI32();\n\t      break;\n\t    case Type.I64:\n\t      this.readI64();\n\t      break;\n\t    case Type.DOUBLE:\n\t      this.readDouble();\n\t      break;\n\t    case Type.STRING:\n\t      this.readString();\n\t      break;\n\t    case Type.STRUCT:\n\t      this.readStructBegin();\n\t      while (true) {\n\t        var r = this.readFieldBegin();\n\t        if (r.ftype === Type.STOP) {\n\t          break;\n\t        }\n\t        this.skip(r.ftype);\n\t        this.readFieldEnd();\n\t      }\n\t      this.readStructEnd();\n\t      break;\n\t    case Type.MAP:\n\t      var mapBegin = this.readMapBegin();\n\t      for (var i = 0; i < mapBegin.size; ++i) {\n\t        this.skip(mapBegin.ktype);\n\t        this.skip(mapBegin.vtype);\n\t      }\n\t      this.readMapEnd();\n\t      break;\n\t    case Type.SET:\n\t      var setBegin = this.readSetBegin();\n\t      for (var i2 = 0; i2 < setBegin.size; ++i2) {\n\t        this.skip(setBegin.etype);\n\t      }\n\t      this.readSetEnd();\n\t      break;\n\t    case Type.LIST:\n\t      var listBegin = this.readListBegin();\n\t      for (var i3 = 0; i3 < listBegin.size; ++i3) {\n\t        this.skip(listBegin.etype);\n\t      }\n\t      this.readListEnd();\n\t      break;\n\t    default:\n\t      throw new  Error(\"Invalid type: \" + type);\n\t  }\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\n\tmodule.exports = {\n\t  'info' : function logInfo() {},\n\t  'warning' : function logWarning() {},\n\t  'error' : function logError() {},\n\t  'debug' : function logDebug() {},\n\t  'trace' : function logTrace() {}\n\t};\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {//     Int64.js\n\t//\n\t//     Copyright (c) 2012 Robert Kieffer\n\t//     MIT License - http://opensource.org/licenses/mit-license.php\n\n\t/**\n\t * Support for handling 64-bit int numbers in Javascript (node.js)\n\t *\n\t * JS Numbers are IEEE-754 binary double-precision floats, which limits the\n\t * range of values that can be represented with integer precision to:\n\t *\n\t * 2^^53 <= N <= 2^53\n\t *\n\t * Int64 objects wrap a node Buffer that holds the 8-bytes of int64 data.  These\n\t * objects operate directly on the buffer which means that if they are created\n\t * using an existing buffer then setting the value will modify the Buffer, and\n\t * vice-versa.\n\t *\n\t * Internal Representation\n\t *\n\t * The internal buffer format is Big Endian.  I.e. the most-significant byte is\n\t * at buffer[0], the least-significant at buffer[7].  For the purposes of\n\t * converting to/from JS native numbers, the value is assumed to be a signed\n\t * integer stored in 2's complement form.\n\t *\n\t * For details about IEEE-754 see:\n\t * http://en.wikipedia.org/wiki/Double_precision_floating-point_format\n\t */\n\n\t// Useful masks and values for bit twiddling\n\tvar MASK31 =  0x7fffffff, VAL31 = 0x80000000;\n\tvar MASK32 =  0xffffffff, VAL32 = 0x100000000;\n\n\t// Map for converting hex octets to strings\n\tvar _HEX = [];\n\tfor (var i = 0; i < 256; i++) {\n\t  _HEX[i] = (i > 0xF ? '' : '0') + i.toString(16);\n\t}\n\n\t//\n\t// Int64\n\t//\n\n\t/**\n\t * Constructor accepts any of the following argument types:\n\t *\n\t * new Int64(buffer[, offset=0]) - Existing Buffer with byte offset\n\t * new Int64(Uint8Array[, offset=0]) - Existing Uint8Array with a byte offset\n\t * new Int64(string)             - Hex string (throws if n is outside int64 range)\n\t * new Int64(number)             - Number (throws if n is outside int64 range)\n\t * new Int64(hi, lo)             - Raw bits as two 32-bit values\n\t */\n\tvar Int64 = module.exports = function(a1, a2) {\n\t  if (a1 instanceof Buffer) {\n\t    this.buffer = a1;\n\t    this.offset = a2 || 0;\n\t  } else if (Object.prototype.toString.call(a1) == '[object Uint8Array]') {\n\t    // Under Browserify, Buffers can extend Uint8Arrays rather than an\n\t    // instance of Buffer. We could assume the passed in Uint8Array is actually\n\t    // a buffer but that won't handle the case where a raw Uint8Array is passed\n\t    // in. We construct a new Buffer just in case.\n\t    this.buffer = new Buffer(a1);\n\t    this.offset = a2 || 0;\n\t  } else {\n\t    this.buffer = this.buffer || new Buffer(8);\n\t    this.offset = 0;\n\t    this.setValue.apply(this, arguments);\n\t  }\n\t};\n\n\n\t// Max integer value that JS can accurately represent\n\tInt64.MAX_INT = Math.pow(2, 53);\n\n\t// Min integer value that JS can accurately represent\n\tInt64.MIN_INT = -Math.pow(2, 53);\n\n\tInt64.prototype = {\n\t  /**\n\t   * Do in-place 2's compliment.  See\n\t   * http://en.wikipedia.org/wiki/Two's_complement\n\t   */\n\t  _2scomp: function() {\n\t    var b = this.buffer, o = this.offset, carry = 1;\n\t    for (var i = o + 7; i >= o; i--) {\n\t      var v = (b[i] ^ 0xff) + carry;\n\t      b[i] = v & 0xff;\n\t      carry = v >> 8;\n\t    }\n\t  },\n\n\t  /**\n\t   * Set the value. Takes any of the following arguments:\n\t   *\n\t   * setValue(string) - A hexidecimal string\n\t   * setValue(number) - Number (throws if n is outside int64 range)\n\t   * setValue(hi, lo) - Raw bits as two 32-bit values\n\t   */\n\t  setValue: function(hi, lo) {\n\t    var negate = false;\n\t    if (arguments.length == 1) {\n\t      if (typeof(hi) == 'number') {\n\t        // Simplify bitfield retrieval by using abs() value.  We restore sign\n\t        // later\n\t        negate = hi < 0;\n\t        hi = Math.abs(hi);\n\t        lo = hi % VAL32;\n\t        hi = hi / VAL32;\n\t        if (hi > VAL32) throw new RangeError(hi  + ' is outside Int64 range');\n\t        hi = hi | 0;\n\t      } else if (typeof(hi) == 'string') {\n\t        hi = (hi + '').replace(/^0x/, '');\n\t        lo = hi.substr(-8);\n\t        hi = hi.length > 8 ? hi.substr(0, hi.length - 8) : '';\n\t        hi = parseInt(hi, 16);\n\t        lo = parseInt(lo, 16);\n\t      } else {\n\t        throw new Error(hi + ' must be a Number or String');\n\t      }\n\t    }\n\n\t    // Technically we should throw if hi or lo is outside int32 range here, but\n\t    // it's not worth the effort. Anything past the 32'nd bit is ignored.\n\n\t    // Copy bytes to buffer\n\t    var b = this.buffer, o = this.offset;\n\t    for (var i = 7; i >= 0; i--) {\n\t      b[o+i] = lo & 0xff;\n\t      lo = i == 4 ? hi : lo >>> 8;\n\t    }\n\n\t    // Restore sign of passed argument\n\t    if (negate) this._2scomp();\n\t  },\n\n\t  /**\n\t   * Convert to a native JS number.\n\t   *\n\t   * WARNING: Do not expect this value to be accurate to integer precision for\n\t   * large (positive or negative) numbers!\n\t   *\n\t   * @param allowImprecise If true, no check is performed to verify the\n\t   * returned value is accurate to integer precision.  If false, imprecise\n\t   * numbers (very large positive or negative numbers) will be forced to +/-\n\t   * Infinity.\n\t   */\n\t  toNumber: function(allowImprecise) {\n\t    var b = this.buffer, o = this.offset;\n\n\t    // Running sum of octets, doing a 2's complement\n\t    var negate = b[o] & 0x80, x = 0, carry = 1;\n\t    for (var i = 7, m = 1; i >= 0; i--, m *= 256) {\n\t      var v = b[o+i];\n\n\t      // 2's complement for negative numbers\n\t      if (negate) {\n\t        v = (v ^ 0xff) + carry;\n\t        carry = v >> 8;\n\t        v = v & 0xff;\n\t      }\n\n\t      x += v * m;\n\t    }\n\n\t    // Return Infinity if we've lost integer precision\n\t    if (!allowImprecise && x >= Int64.MAX_INT) {\n\t      return negate ? -Infinity : Infinity;\n\t    }\n\n\t    return negate ? -x : x;\n\t  },\n\n\t  /**\n\t   * Convert to a JS Number. Returns +/-Infinity for values that can't be\n\t   * represented to integer precision.\n\t   */\n\t  valueOf: function() {\n\t    return this.toNumber(false);\n\t  },\n\n\t  /**\n\t   * Return string value\n\t   *\n\t   * @param radix Just like Number#toString()'s radix\n\t   */\n\t  toString: function(radix) {\n\t    return this.valueOf().toString(radix || 10);\n\t  },\n\n\t  /**\n\t   * Return a string showing the buffer octets, with MSB on the left.\n\t   *\n\t   * @param sep separator string. default is '' (empty string)\n\t   */\n\t  toOctetString: function(sep) {\n\t    var out = new Array(8);\n\t    var b = this.buffer, o = this.offset;\n\t    for (var i = 0; i < 8; i++) {\n\t      out[i] = _HEX[b[o+i]];\n\t    }\n\t    return out.join(sep || '');\n\t  },\n\n\t  /**\n\t   * Returns the int64's 8 bytes in a buffer.\n\t   *\n\t   * @param {bool} [rawBuffer=false]  If no offset and this is true, return the internal buffer.  Should only be used if\n\t   *                                  you're discarding the Int64 afterwards, as it breaks encapsulation.\n\t   */\n\t  toBuffer: function(rawBuffer) {\n\t    if (rawBuffer && this.offset === 0) return this.buffer;\n\n\t    var out = new Buffer(8);\n\t    this.buffer.copy(out, 0, this.offset, this.offset + 8);\n\t    return out;\n\t  },\n\n\t  /**\n\t   * Copy 8 bytes of int64 into target buffer at target offset.\n\t   *\n\t   * @param {Buffer} targetBuffer       Buffer to copy into.\n\t   * @param {number} [targetOffset=0]   Offset into target buffer.\n\t   */\n\t  copy: function(targetBuffer, targetOffset) {\n\t    this.buffer.copy(targetBuffer, targetOffset || 0, this.offset, this.offset + 8);\n\t  },\n\n\t  /**\n\t   * Pretty output in console.log\n\t   */\n\t  inspect: function() {\n\t    return '[Int64 value:' + this + ' octets:' + this.toOctetString(' ') + ']';\n\t  }\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\n\tmodule.exports = createClient;\n\n\t/**\n\t * Creates a new client object for the specified Thrift service.\n\t * @param {object} ServiceClient - The module containing the generated service client\n\t * @param {Connection} Connection - The connection to use.\n\t * @returns {object} The client object.\n\t */\n\tfunction createClient(ServiceClient, connection) {\n\t  // TODO validate required options and throw otherwise\n\t  if (ServiceClient.Client) {\n\t    ServiceClient = ServiceClient.Client;\n\t  }\n\t  // TODO detangle these initialization calls\n\t  // creating \"client\" requires\n\t  //   - new service client instance\n\t  //\n\t  // New service client instance requires\n\t  //   - new transport instance\n\t  //   - protocol class reference\n\t  //\n\t  // New transport instance requires\n\t  //   - Buffer to use (or none)\n\t  //   - Callback to call on flush\n\n\t  // Wrap the write method\n\t  var writeCb = function(buf, seqid) {\n\t    connection.write(buf, seqid);\n\t  };\n\t  var transport = new connection.transport(undefined, writeCb);\n\t  var client = new ServiceClient(transport, connection.protocol);\n\t  transport.client = client;\n\t  connection.client = client;\n\t  return client;\n\t};\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process, Buffer) {/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\tvar util = __webpack_require__(16);\n\tvar http = __webpack_require__(35);\n\tvar https = __webpack_require__(65);\n\tvar EventEmitter = __webpack_require__(21).EventEmitter;\n\tvar thrift = __webpack_require__(15);\n\n\tvar TBufferedTransport = __webpack_require__(23);\n\tvar TBinaryProtocol = __webpack_require__(30);\n\tvar InputBufferUnderrunError = __webpack_require__(29);\n\n\tvar createClient = __webpack_require__(33);\n\n\t/**\n\t * @class\n\t * @name ConnectOptions\n\t * @property {string} transport - The Thrift layered transport to use (TBufferedTransport, etc).\n\t * @property {string} protocol - The Thrift serialization protocol to use (TBinaryProtocol, etc.).\n\t * @property {string} path - The URL path to POST to (e.g. \"/\", \"/mySvc\", \"/thrift/quoteSvc\", etc.).\n\t * @property {object} headers - A standard Node.js header hash, an object hash containing key/value\n\t *        pairs where the key is the header name string and the value is the header value string.\n\t * @property {boolean} https - True causes the connection to use https, otherwise http is used.\n\t * @property {object} nodeOptions - Options passed on to node.\n\t * @example\n\t *     //Use a connection that requires ssl/tls, closes the connection after each request,\n\t *     //  uses the buffered transport layer, uses the JSON protocol and directs RPC traffic\n\t *     //  to https://thrift.example.com:9090/hello\n\t *     var thrift = require('thrift');\n\t *     var options = {\n\t *        transport: thrift.TBufferedTransport,\n\t *        protocol: thrift.TJSONProtocol,\n\t *        path: \"/hello\",\n\t *        headers: {\"Connection\": \"close\"},\n\t *        https: true\n\t *     };\n\t *     var con = thrift.createHttpConnection(\"thrift.example.com\", 9090, options);\n\t *     var client = thrift.createHttpClient(myService, connection);\n\t *     client.myServiceFunction();\n\t */\n\n\t/**\n\t * Initializes a Thrift HttpConnection instance (use createHttpConnection() rather than\n\t *    instantiating directly).\n\t * @constructor\n\t * @param {string} host - The host name or IP to connect to.\n\t * @param {number} port - The TCP port to connect to.\n\t * @param {ConnectOptions} options - The configuration options to use.\n\t * @throws {error} Exceptions other than InputBufferUnderrunError are rethrown\n\t * @event {error} The \"error\" event is fired when a Node.js error event occurs during\n\t *     request or response processing, in which case the node error is passed on. An \"error\"\n\t *     event may also be fired when the connection can not map a response back to the\n\t *     appropriate client (an internal error), generating a TApplicationException.\n\t * @classdesc HttpConnection objects provide Thrift end point transport\n\t *     semantics implemented over the Node.js http.request() method.\n\t * @see {@link createHttpConnection}\n\t */\n\tvar HttpConnection = exports.HttpConnection = function(host, port, options) {\n\t  //Initialize the emitter base object\n\t  EventEmitter.call(this);\n\n\t  //Set configuration\n\t  var self = this;\n\t  this.options = options || {};\n\t  this.host = host;\n\t  this.port = port;\n\t  this.https = this.options.https || false;\n\t  this.transport = this.options.transport || TBufferedTransport;\n\t  this.protocol = this.options.protocol || TBinaryProtocol;\n\n\t  //Prepare Node.js options\n\t  this.nodeOptions = {\n\t    host: this.host,\n\t    port: this.port || 80,\n\t    path: this.options.path || '/',\n\t    method: 'POST',\n\t    headers: this.options.headers || {},\n\t    responseType: this.options.responseType || null\n\t  };\n\t  for (var attrname in this.options.nodeOptions) {\n\t    this.nodeOptions[attrname] = this.options.nodeOptions[attrname];\n\t  }\n\t  /*jshint -W069 */\n\t  if (! this.nodeOptions.headers['Connection']) {\n\t    this.nodeOptions.headers['Connection'] = 'keep-alive';\n\t  }\n\t  /*jshint +W069 */\n\n\t  //The sequence map is used to map seqIDs back to the\n\t  //  calling client in multiplexed scenarios\n\t  this.seqId2Service = {};\n\n\t  function decodeCallback(transport_with_data) {\n\t    var proto = new self.protocol(transport_with_data);\n\t    try {\n\t      while (true) {\n\t        var header = proto.readMessageBegin();\n\t        var dummy_seqid = header.rseqid * -1;\n\t        var client = self.client;\n\t        //The Multiplexed Protocol stores a hash of seqid to service names\n\t        //  in seqId2Service. If the SeqId is found in the hash we need to\n\t        //  lookup the appropriate client for this call.\n\t        //  The client var is a single client object when not multiplexing,\n\t        //  when using multiplexing it is a service name keyed hash of client\n\t        //  objects.\n\t        //NOTE: The 2 way interdependencies between protocols, transports,\n\t        //  connections and clients in the Node.js implementation are irregular\n\t        //  and make the implementation difficult to extend and maintain. We\n\t        //  should bring this stuff inline with typical thrift I/O stack\n\t        //  operation soon.\n\t        //  --ra\n\t        var service_name = self.seqId2Service[header.rseqid];\n\t        if (service_name) {\n\t          client = self.client[service_name];\n\t          delete self.seqId2Service[header.rseqid];\n\t        }\n\t        /*jshint -W083 */\n\t        client._reqs[dummy_seqid] = function(err, success){\n\t          transport_with_data.commitPosition();\n\t          var clientCallback = client._reqs[header.rseqid];\n\t          delete client._reqs[header.rseqid];\n\t          if (clientCallback) {\n\t            process.nextTick(function() {\n\t              clientCallback(err, success);\n\t            });\n\t          }\n\t        };\n\t        /*jshint +W083 */\n\t        if(client['recv_' + header.fname]) {\n\t          client['recv_' + header.fname](proto, header.mtype, dummy_seqid);\n\t        } else {\n\t          delete client._reqs[dummy_seqid];\n\t          self.emit(\"error\",\n\t                    new thrift.TApplicationException(\n\t                       thrift.TApplicationExceptionType.WRONG_METHOD_NAME,\n\t                       \"Received a response to an unknown RPC function\"));\n\t        }\n\t      }\n\t    }\n\t    catch (e) {\n\t      if (e instanceof InputBufferUnderrunError) {\n\t        transport_with_data.rollbackPosition();\n\t      } else {\n\t        self.emit('error', e);\n\t      }\n\t    }\n\t  }\n\n\n\t  //Response handler\n\t  //////////////////////////////////////////////////\n\t  this.responseCallback = function(response) {\n\t    var data = [];\n\t    var dataLen = 0;\n\n\t    response.on('error', function (e) {\n\t      self.emit(\"error\", e);\n\t    });\n\n\t    // When running directly under node, chunk will be a buffer,\n\t    // however, when running in a Browser (e.g. Browserify), chunk\n\t    // will be a string or an ArrayBuffer.\n\t    response.on('data', function (chunk) {\n\t      if ((typeof chunk == 'string') ||\n\t          (Object.prototype.toString.call(chunk) == '[object Uint8Array]')) {\n\t        // Wrap ArrayBuffer/string in a Buffer so data[i].copy will work\n\t        data.push(new Buffer(chunk));\n\t      } else {\n\t        data.push(chunk);\n\t      }\n\t      dataLen += chunk.length;\n\t    });\n\n\t    response.on('end', function(){\n\t      var buf = new Buffer(dataLen);\n\t      for (var i=0, len=data.length, pos=0; i<len; i++) {\n\t        data[i].copy(buf, pos);\n\t        pos += data[i].length;\n\t      }\n\t      //Get the receiver function for the transport and\n\t      //  call it with the buffer\n\t      self.transport.receiver(decodeCallback)(buf);\n\t    });\n\t  };\n\t};\n\tutil.inherits(HttpConnection, EventEmitter);\n\n\t/**\n\t * Writes Thrift message data to the connection\n\t * @param {Buffer} data - A Node.js Buffer containing the data to write\n\t * @returns {void} No return value.\n\t * @event {error} the \"error\" event is raised upon request failure passing the\n\t *     Node.js error object to the listener.\n\t */\n\tHttpConnection.prototype.write = function(data) {\n\t  var self = this;\n\t  self.nodeOptions.headers[\"Content-length\"] = data.length;\n\t  var req = (self.https) ?\n\t      https.request(self.nodeOptions, self.responseCallback) :\n\t      http.request(self.nodeOptions, self.responseCallback);\n\t  req.on('error', function(err) {\n\t    self.emit(\"error\", err);\n\t  });\n\t  req.write(data);\n\t  req.end();\n\t};\n\n\t/**\n\t * Creates a new HttpConnection object, used by Thrift clients to connect\n\t *    to Thrift HTTP based servers.\n\t * @param {string} host - The host name or IP to connect to.\n\t * @param {number} port - The TCP port to connect to.\n\t * @param {ConnectOptions} options - The configuration options to use.\n\t * @returns {HttpConnection} The connection object.\n\t * @see {@link ConnectOptions}\n\t */\n\texports.createHttpConnection = function(host, port, options) {\n\t  return new HttpConnection(host, port, options);\n\t};\n\n\texports.createHttpClient = createClient\n\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17), __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {var ClientRequest = __webpack_require__(36)\n\tvar extend = __webpack_require__(57)\n\tvar statusCodes = __webpack_require__(58)\n\tvar url = __webpack_require__(59)\n\n\tvar http = exports\n\n\thttp.request = function (opts, cb) {\n\t\tif (typeof opts === 'string')\n\t\t\topts = url.parse(opts)\n\t\telse\n\t\t\topts = extend(opts)\n\n\t\t// Normally, the page is loaded from http or https, so not specifying a protocol\n\t\t// will result in a (valid) protocol-relative url. However, this won't work if\n\t\t// the protocol is something else, like 'file:'\n\t\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\n\n\t\tvar protocol = opts.protocol || defaultProtocol\n\t\tvar host = opts.hostname || opts.host\n\t\tvar port = opts.port\n\t\tvar path = opts.path || '/'\n\n\t\t// Necessary for IPv6 addresses\n\t\tif (host && host.indexOf(':') !== -1)\n\t\t\thost = '[' + host + ']'\n\n\t\t// This may be a relative url. The browser should always be able to interpret it correctly.\n\t\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\n\t\topts.method = (opts.method || 'GET').toUpperCase()\n\t\topts.headers = opts.headers || {}\n\n\t\t// Also valid opts.auth, opts.mode\n\n\t\tvar req = new ClientRequest(opts)\n\t\tif (cb)\n\t\t\treq.on('response', cb)\n\t\treturn req\n\t}\n\n\thttp.get = function get (opts, cb) {\n\t\tvar req = http.request(opts, cb)\n\t\treq.end()\n\t\treturn req\n\t}\n\n\thttp.Agent = function () {}\n\thttp.Agent.defaultMaxSockets = 4\n\n\thttp.STATUS_CODES = statusCodes\n\n\thttp.METHODS = [\n\t\t'CHECKOUT',\n\t\t'CONNECT',\n\t\t'COPY',\n\t\t'DELETE',\n\t\t'GET',\n\t\t'HEAD',\n\t\t'LOCK',\n\t\t'M-SEARCH',\n\t\t'MERGE',\n\t\t'MKACTIVITY',\n\t\t'MKCOL',\n\t\t'MOVE',\n\t\t'NOTIFY',\n\t\t'OPTIONS',\n\t\t'PATCH',\n\t\t'POST',\n\t\t'PROPFIND',\n\t\t'PROPPATCH',\n\t\t'PURGE',\n\t\t'PUT',\n\t\t'REPORT',\n\t\t'SEARCH',\n\t\t'SUBSCRIBE',\n\t\t'TRACE',\n\t\t'UNLOCK',\n\t\t'UNSUBSCRIBE'\n\t]\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {var capability = __webpack_require__(37)\n\tvar inherits = __webpack_require__(38)\n\tvar response = __webpack_require__(39)\n\tvar stream = __webpack_require__(40)\n\tvar toArrayBuffer = __webpack_require__(56)\n\n\tvar IncomingMessage = response.IncomingMessage\n\tvar rStates = response.readyStates\n\n\tfunction decideMode (preferBinary, useFetch) {\n\t\tif (capability.fetch && useFetch) {\n\t\t\treturn 'fetch'\n\t\t} else if (capability.mozchunkedarraybuffer) {\n\t\t\treturn 'moz-chunked-arraybuffer'\n\t\t} else if (capability.msstream) {\n\t\t\treturn 'ms-stream'\n\t\t} else if (capability.arraybuffer && preferBinary) {\n\t\t\treturn 'arraybuffer'\n\t\t} else if (capability.vbArray && preferBinary) {\n\t\t\treturn 'text:vbarray'\n\t\t} else {\n\t\t\treturn 'text'\n\t\t}\n\t}\n\n\tvar ClientRequest = module.exports = function (opts) {\n\t\tvar self = this\n\t\tstream.Writable.call(self)\n\n\t\tself._opts = opts\n\t\tself._body = []\n\t\tself._headers = {}\n\t\tif (opts.auth)\n\t\t\tself.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))\n\t\tObject.keys(opts.headers).forEach(function (name) {\n\t\t\tself.setHeader(name, opts.headers[name])\n\t\t})\n\n\t\tvar preferBinary\n\t\tvar useFetch = true\n\t\tif (opts.mode === 'disable-fetch' || 'timeout' in opts) {\n\t\t\t// If the use of XHR should be preferred and includes preserving the 'content-type' header.\n\t\t\t// Force XHR to be used since the Fetch API does not yet support timeouts.\n\t\t\tuseFetch = false\n\t\t\tpreferBinary = true\n\t\t} else if (opts.mode === 'prefer-streaming') {\n\t\t\t// If streaming is a high priority but binary compatibility and\n\t\t\t// the accuracy of the 'content-type' header aren't\n\t\t\tpreferBinary = false\n\t\t} else if (opts.mode === 'allow-wrong-content-type') {\n\t\t\t// If streaming is more important than preserving the 'content-type' header\n\t\t\tpreferBinary = !capability.overrideMimeType\n\t\t} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n\t\t\t// Use binary if text streaming may corrupt data or the content-type header, or for speed\n\t\t\tpreferBinary = true\n\t\t} else {\n\t\t\tthrow new Error('Invalid value for opts.mode')\n\t\t}\n\t\tself._mode = decideMode(preferBinary, useFetch)\n\n\t\tself.on('finish', function () {\n\t\t\tself._onFinish()\n\t\t})\n\t}\n\n\tinherits(ClientRequest, stream.Writable)\n\n\tClientRequest.prototype.setHeader = function (name, value) {\n\t\tvar self = this\n\t\tvar lowerName = name.toLowerCase()\n\t\t// This check is not necessary, but it prevents warnings from browsers about setting unsafe\n\t\t// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n\t\t// http-browserify did it, so I will too.\n\t\tif (unsafeHeaders.indexOf(lowerName) !== -1)\n\t\t\treturn\n\n\t\tself._headers[lowerName] = {\n\t\t\tname: name,\n\t\t\tvalue: value\n\t\t}\n\t}\n\n\tClientRequest.prototype.getHeader = function (name) {\n\t\tvar header = this._headers[name.toLowerCase()]\n\t\tif (header)\n\t\t\treturn header.value\n\t\treturn null\n\t}\n\n\tClientRequest.prototype.removeHeader = function (name) {\n\t\tvar self = this\n\t\tdelete self._headers[name.toLowerCase()]\n\t}\n\n\tClientRequest.prototype._onFinish = function () {\n\t\tvar self = this\n\n\t\tif (self._destroyed)\n\t\t\treturn\n\t\tvar opts = self._opts\n\n\t\tvar headersObj = self._headers\n\t\tvar body = null\n\t\tif (opts.method !== 'GET' && opts.method !== 'HEAD') {\n\t\t\tif (capability.blobConstructor) {\n\t\t\t\tbody = new global.Blob(self._body.map(function (buffer) {\n\t\t\t\t\treturn toArrayBuffer(buffer)\n\t\t\t\t}), {\n\t\t\t\t\ttype: (headersObj['content-type'] || {}).value || ''\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// get utf8 string\n\t\t\t\tbody = Buffer.concat(self._body).toString()\n\t\t\t}\n\t\t}\n\n\t\t// create flattened list of headers\n\t\tvar headersList = []\n\t\tObject.keys(headersObj).forEach(function (keyName) {\n\t\t\tvar name = headersObj[keyName].name\n\t\t\tvar value = headersObj[keyName].value\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tvalue.forEach(function (v) {\n\t\t\t\t\theadersList.push([name, v])\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\theadersList.push([name, value])\n\t\t\t}\n\t\t})\n\n\t\tif (self._mode === 'fetch') {\n\t\t\tglobal.fetch(self._opts.url, {\n\t\t\t\tmethod: self._opts.method,\n\t\t\t\theaders: headersList,\n\t\t\t\tbody: body || undefined,\n\t\t\t\tmode: 'cors',\n\t\t\t\tcredentials: opts.withCredentials ? 'include' : 'same-origin'\n\t\t\t}).then(function (response) {\n\t\t\t\tself._fetchResponse = response\n\t\t\t\tself._connect()\n\t\t\t}, function (reason) {\n\t\t\t\tself.emit('error', reason)\n\t\t\t})\n\t\t} else {\n\t\t\tvar xhr = self._xhr = new global.XMLHttpRequest()\n\t\t\ttry {\n\t\t\t\txhr.open(self._opts.method, self._opts.url, true)\n\t\t\t} catch (err) {\n\t\t\t\tprocess.nextTick(function () {\n\t\t\t\t\tself.emit('error', err)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Can't set responseType on really old browsers\n\t\t\tif ('responseType' in xhr)\n\t\t\t\txhr.responseType = self._mode.split(':')[0]\n\n\t\t\tif ('withCredentials' in xhr)\n\t\t\t\txhr.withCredentials = !!opts.withCredentials\n\n\t\t\tif (self._mode === 'text' && 'overrideMimeType' in xhr)\n\t\t\t\txhr.overrideMimeType('text/plain; charset=x-user-defined')\n\n\t\t\tif ('timeout' in opts) {\n\t\t\t\txhr.timeout = opts.timeout\n\t\t\t\txhr.ontimeout = function () {\n\t\t\t\t\tself.emit('timeout')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\theadersList.forEach(function (header) {\n\t\t\t\txhr.setRequestHeader(header[0], header[1])\n\t\t\t})\n\n\t\t\tself._response = null\n\t\t\txhr.onreadystatechange = function () {\n\t\t\t\tswitch (xhr.readyState) {\n\t\t\t\t\tcase rStates.LOADING:\n\t\t\t\t\tcase rStates.DONE:\n\t\t\t\t\t\tself._onXHRProgress()\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Necessary for streaming in Firefox, since xhr.response is ONLY defined\n\t\t\t// in onprogress, not in onreadystatechange with xhr.readyState = 3\n\t\t\tif (self._mode === 'moz-chunked-arraybuffer') {\n\t\t\t\txhr.onprogress = function () {\n\t\t\t\t\tself._onXHRProgress()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\txhr.onerror = function () {\n\t\t\t\tif (self._destroyed)\n\t\t\t\t\treturn\n\t\t\t\tself.emit('error', new Error('XHR error'))\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\txhr.send(body)\n\t\t\t} catch (err) {\n\t\t\t\tprocess.nextTick(function () {\n\t\t\t\t\tself.emit('error', err)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if xhr.status is readable and non-zero, indicating no error.\n\t * Even though the spec says it should be available in readyState 3,\n\t * accessing it throws an exception in IE8\n\t */\n\tfunction statusValid (xhr) {\n\t\ttry {\n\t\t\tvar status = xhr.status\n\t\t\treturn (status !== null && status !== 0)\n\t\t} catch (e) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tClientRequest.prototype._onXHRProgress = function () {\n\t\tvar self = this\n\n\t\tif (!statusValid(self._xhr) || self._destroyed)\n\t\t\treturn\n\n\t\tif (!self._response)\n\t\t\tself._connect()\n\n\t\tself._response._onXHRProgress()\n\t}\n\n\tClientRequest.prototype._connect = function () {\n\t\tvar self = this\n\n\t\tif (self._destroyed)\n\t\t\treturn\n\n\t\tself._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)\n\t\tself._response.on('error', function(err) {\n\t\t\tself.emit('error', err)\n\t\t})\n\n\t\tself.emit('response', self._response)\n\t}\n\n\tClientRequest.prototype._write = function (chunk, encoding, cb) {\n\t\tvar self = this\n\n\t\tself._body.push(chunk)\n\t\tcb()\n\t}\n\n\tClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {\n\t\tvar self = this\n\t\tself._destroyed = true\n\t\tif (self._response)\n\t\t\tself._response._destroyed = true\n\t\tif (self._xhr)\n\t\t\tself._xhr.abort()\n\t\t// Currently, there isn't a way to truly abort a fetch.\n\t\t// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27\n\t}\n\n\tClientRequest.prototype.end = function (data, encoding, cb) {\n\t\tvar self = this\n\t\tif (typeof data === 'function') {\n\t\t\tcb = data\n\t\t\tdata = undefined\n\t\t}\n\n\t\tstream.Writable.prototype.end.call(self, data, encoding, cb)\n\t}\n\n\tClientRequest.prototype.flushHeaders = function () {}\n\tClientRequest.prototype.setTimeout = function () {}\n\tClientRequest.prototype.setNoDelay = function () {}\n\tClientRequest.prototype.setSocketKeepAlive = function () {}\n\n\t// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n\tvar unsafeHeaders = [\n\t\t'accept-charset',\n\t\t'accept-encoding',\n\t\t'access-control-request-headers',\n\t\t'access-control-request-method',\n\t\t'connection',\n\t\t'content-length',\n\t\t'cookie',\n\t\t'cookie2',\n\t\t'date',\n\t\t'dnt',\n\t\t'expect',\n\t\t'host',\n\t\t'keep-alive',\n\t\t'origin',\n\t\t'referer',\n\t\t'te',\n\t\t'trailer',\n\t\t'transfer-encoding',\n\t\t'upgrade',\n\t\t'user-agent',\n\t\t'via'\n\t]\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer, (function() { return this; }()), __webpack_require__(17)))\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)\n\n\texports.blobConstructor = false\n\ttry {\n\t\tnew Blob([new ArrayBuffer(1)])\n\t\texports.blobConstructor = true\n\t} catch (e) {}\n\n\t// The xhr request to example.com may violate some restrictive CSP configurations,\n\t// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n\t// and assume support for certain features below.\n\tvar xhr\n\tfunction getXHR () {\n\t\t// Cache the xhr value\n\t\tif (xhr !== undefined) return xhr\n\n\t\tif (global.XMLHttpRequest) {\n\t\t\txhr = new global.XMLHttpRequest()\n\t\t\t// If XDomainRequest is available (ie only, where xhr might not work\n\t\t\t// cross domain), use the page location. Otherwise use example.com\n\t\t\t// Note: this doesn't actually make an http request.\n\t\t\ttry {\n\t\t\t\txhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')\n\t\t\t} catch(e) {\n\t\t\t\txhr = null\n\t\t\t}\n\t\t} else {\n\t\t\t// Service workers don't have XHR\n\t\t\txhr = null\n\t\t}\n\t\treturn xhr\n\t}\n\n\tfunction checkTypeSupport (type) {\n\t\tvar xhr = getXHR()\n\t\tif (!xhr) return false\n\t\ttry {\n\t\t\txhr.responseType = type\n\t\t\treturn xhr.responseType === type\n\t\t} catch (e) {}\n\t\treturn false\n\t}\n\n\t// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n\t// Safari 7.1 appears to have fixed this bug.\n\tvar haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'\n\tvar haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)\n\n\t// If fetch is supported, then arraybuffer will be supported too. Skip calling\n\t// checkTypeSupport(), since that calls getXHR().\n\texports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))\n\n\t// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n\t// be used if it's available, just return false for these to avoid the warnings.\n\texports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')\n\texports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&\n\t\tcheckTypeSupport('moz-chunked-arraybuffer')\n\n\t// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n\t// getXHR().\n\texports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)\n\n\texports.vbArray = isFunction(global.VBArray)\n\n\tfunction isFunction (value) {\n\t\treturn typeof value === 'function'\n\t}\n\n\txhr = null // Help gc\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports) {\n\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {var capability = __webpack_require__(37)\n\tvar inherits = __webpack_require__(38)\n\tvar stream = __webpack_require__(40)\n\n\tvar rStates = exports.readyStates = {\n\t\tUNSENT: 0,\n\t\tOPENED: 1,\n\t\tHEADERS_RECEIVED: 2,\n\t\tLOADING: 3,\n\t\tDONE: 4\n\t}\n\n\tvar IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {\n\t\tvar self = this\n\t\tstream.Readable.call(self)\n\n\t\tself._mode = mode\n\t\tself.headers = {}\n\t\tself.rawHeaders = []\n\t\tself.trailers = {}\n\t\tself.rawTrailers = []\n\n\t\t// Fake the 'close' event, but only once 'end' fires\n\t\tself.on('end', function () {\n\t\t\t// The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('close')\n\t\t\t})\n\t\t})\n\n\t\tif (mode === 'fetch') {\n\t\t\tself._fetchResponse = response\n\n\t\t\tself.url = response.url\n\t\t\tself.statusCode = response.status\n\t\t\tself.statusMessage = response.statusText\n\t\t\t\n\t\t\tresponse.headers.forEach(function(header, key){\n\t\t\t\tself.headers[key.toLowerCase()] = header\n\t\t\t\tself.rawHeaders.push(key, header)\n\t\t\t})\n\n\n\t\t\t// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed\n\t\t\tvar reader = response.body.getReader()\n\t\t\tfunction read () {\n\t\t\t\treader.read().then(function (result) {\n\t\t\t\t\tif (self._destroyed)\n\t\t\t\t\t\treturn\n\t\t\t\t\tif (result.done) {\n\t\t\t\t\t\tself.push(null)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tself.push(new Buffer(result.value))\n\t\t\t\t\tread()\n\t\t\t\t}).catch(function(err) {\n\t\t\t\t\tself.emit('error', err)\n\t\t\t\t})\n\t\t\t}\n\t\t\tread()\n\n\t\t} else {\n\t\t\tself._xhr = xhr\n\t\t\tself._pos = 0\n\n\t\t\tself.url = xhr.responseURL\n\t\t\tself.statusCode = xhr.status\n\t\t\tself.statusMessage = xhr.statusText\n\t\t\tvar headers = xhr.getAllResponseHeaders().split(/\\r?\\n/)\n\t\t\theaders.forEach(function (header) {\n\t\t\t\tvar matches = header.match(/^([^:]+):\\s*(.*)/)\n\t\t\t\tif (matches) {\n\t\t\t\t\tvar key = matches[1].toLowerCase()\n\t\t\t\t\tif (key === 'set-cookie') {\n\t\t\t\t\t\tif (self.headers[key] === undefined) {\n\t\t\t\t\t\t\tself.headers[key] = []\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.headers[key].push(matches[2])\n\t\t\t\t\t} else if (self.headers[key] !== undefined) {\n\t\t\t\t\t\tself.headers[key] += ', ' + matches[2]\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.headers[key] = matches[2]\n\t\t\t\t\t}\n\t\t\t\t\tself.rawHeaders.push(matches[1], matches[2])\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tself._charset = 'x-user-defined'\n\t\t\tif (!capability.overrideMimeType) {\n\t\t\t\tvar mimeType = self.rawHeaders['mime-type']\n\t\t\t\tif (mimeType) {\n\t\t\t\t\tvar charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/)\n\t\t\t\t\tif (charsetMatch) {\n\t\t\t\t\t\tself._charset = charsetMatch[1].toLowerCase()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!self._charset)\n\t\t\t\t\tself._charset = 'utf-8' // best guess\n\t\t\t}\n\t\t}\n\t}\n\n\tinherits(IncomingMessage, stream.Readable)\n\n\tIncomingMessage.prototype._read = function () {}\n\n\tIncomingMessage.prototype._onXHRProgress = function () {\n\t\tvar self = this\n\n\t\tvar xhr = self._xhr\n\n\t\tvar response = null\n\t\tswitch (self._mode) {\n\t\t\tcase 'text:vbarray': // For IE9\n\t\t\t\tif (xhr.readyState !== rStates.DONE)\n\t\t\t\t\tbreak\n\t\t\t\ttry {\n\t\t\t\t\t// This fails in IE8\n\t\t\t\t\tresponse = new global.VBArray(xhr.responseBody).toArray()\n\t\t\t\t} catch (e) {}\n\t\t\t\tif (response !== null) {\n\t\t\t\t\tself.push(new Buffer(response))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\t// Falls through in IE8\t\n\t\t\tcase 'text':\n\t\t\t\ttry { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4\n\t\t\t\t\tresponse = xhr.responseText\n\t\t\t\t} catch (e) {\n\t\t\t\t\tself._mode = 'text:vbarray'\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif (response.length > self._pos) {\n\t\t\t\t\tvar newData = response.substr(self._pos)\n\t\t\t\t\tif (self._charset === 'x-user-defined') {\n\t\t\t\t\t\tvar buffer = new Buffer(newData.length)\n\t\t\t\t\t\tfor (var i = 0; i < newData.length; i++)\n\t\t\t\t\t\t\tbuffer[i] = newData.charCodeAt(i) & 0xff\n\n\t\t\t\t\t\tself.push(buffer)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.push(newData, self._charset)\n\t\t\t\t\t}\n\t\t\t\t\tself._pos = response.length\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase 'arraybuffer':\n\t\t\t\tif (xhr.readyState !== rStates.DONE || !xhr.response)\n\t\t\t\t\tbreak\n\t\t\t\tresponse = xhr.response\n\t\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\t\tbreak\n\t\t\tcase 'moz-chunked-arraybuffer': // take whole\n\t\t\t\tresponse = xhr.response\n\t\t\t\tif (xhr.readyState !== rStates.LOADING || !response)\n\t\t\t\t\tbreak\n\t\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\t\tbreak\n\t\t\tcase 'ms-stream':\n\t\t\t\tresponse = xhr.response\n\t\t\t\tif (xhr.readyState !== rStates.LOADING)\n\t\t\t\t\tbreak\n\t\t\t\tvar reader = new global.MSStreamReader()\n\t\t\t\treader.onprogress = function () {\n\t\t\t\t\tif (reader.result.byteLength > self._pos) {\n\t\t\t\t\t\tself.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))\n\t\t\t\t\t\tself._pos = reader.result.byteLength\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treader.onload = function () {\n\t\t\t\t\tself.push(null)\n\t\t\t\t}\n\t\t\t\t// reader.onerror = ??? // TODO: this\n\t\t\t\treader.readAsArrayBuffer(response)\n\t\t\t\tbreak\n\t\t}\n\n\t\t// The ms-stream case handles end separately in reader.onload()\n\t\tif (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n\t\t\tself.push(null)\n\t\t}\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17), __webpack_require__(24).Buffer, (function() { return this; }())))\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(41);\n\texports.Stream = exports;\n\texports.Readable = exports;\n\texports.Writable = __webpack_require__(49);\n\texports.Duplex = __webpack_require__(48);\n\texports.Transform = __webpack_require__(54);\n\texports.PassThrough = __webpack_require__(55);\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\n\tmodule.exports = Readable;\n\n\t/*<replacement>*/\n\tvar processNextTick = __webpack_require__(42);\n\t/*</replacement>*/\n\n\t/*<replacement>*/\n\tvar isArray = __webpack_require__(27);\n\t/*</replacement>*/\n\n\t/*<replacement>*/\n\tvar Duplex;\n\t/*</replacement>*/\n\n\tReadable.ReadableState = ReadableState;\n\n\t/*<replacement>*/\n\tvar EE = __webpack_require__(21).EventEmitter;\n\n\tvar EElistenerCount = function (emitter, type) {\n\t  return emitter.listeners(type).length;\n\t};\n\t/*</replacement>*/\n\n\t/*<replacement>*/\n\tvar Stream = __webpack_require__(43);\n\t/*</replacement>*/\n\n\tvar Buffer = __webpack_require__(24).Buffer;\n\t/*<replacement>*/\n\tvar bufferShim = __webpack_require__(44);\n\t/*</replacement>*/\n\n\t/*<replacement>*/\n\tvar util = __webpack_require__(45);\n\tutil.inherits = __webpack_require__(38);\n\t/*</replacement>*/\n\n\t/*<replacement>*/\n\tvar debugUtil = __webpack_require__(46);\n\tvar debug = void 0;\n\tif (debugUtil && debugUtil.debuglog) {\n\t  debug = debugUtil.debuglog('stream');\n\t} else {\n\t  debug = function () {};\n\t}\n\t/*</replacement>*/\n\n\tvar BufferList = __webpack_require__(47);\n\tvar StringDecoder;\n\n\tutil.inherits(Readable, Stream);\n\n\tvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\n\tfunction prependListener(emitter, event, fn) {\n\t  // Sadly this is not cacheable as some libraries bundle their own\n\t  // event emitter implementation with them.\n\t  if (typeof emitter.prependListener === 'function') {\n\t    return emitter.prependListener(event, fn);\n\t  } else {\n\t    // This is a hack to make sure that our error handler is attached before any\n\t    // userland ones.  NEVER DO THIS. This is here only because this code needs\n\t    // to continue to work with older versions of Node.js that do not include\n\t    // the prependListener() method. The goal is to eventually remove this hack.\n\t    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n\t  }\n\t}\n\n\tfunction ReadableState(options, stream) {\n\t  Duplex = Duplex || __webpack_require__(48);\n\n\t  options = options || {};\n\n\t  // object stream flag. Used to make read(n) ignore n and to\n\t  // make all the buffer merging and length checks go away\n\t  this.objectMode = !!options.objectMode;\n\n\t  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n\t  // the point at which it stops calling _read() to fill the buffer\n\t  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\t  var hwm = options.highWaterMark;\n\t  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\t  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n\t  // cast to ints.\n\t  this.highWaterMark = ~~this.highWaterMark;\n\n\t  // A linked list is used to store data chunks instead of an array because the\n\t  // linked list can remove elements from the beginning faster than\n\t  // array.shift()\n\t  this.buffer = new BufferList();\n\t  this.length = 0;\n\t  this.pipes = null;\n\t  this.pipesCount = 0;\n\t  this.flowing = null;\n\t  this.ended = false;\n\t  this.endEmitted = false;\n\t  this.reading = false;\n\n\t  // a flag to be able to tell if the onwrite cb is called immediately,\n\t  // or on a later tick.  We set this to true at first, because any\n\t  // actions that shouldn't happen until \"later\" should generally also\n\t  // not happen before the first write call.\n\t  this.sync = true;\n\n\t  // whenever we return null, then we set a flag to say\n\t  // that we're awaiting a 'readable' event emission.\n\t  this.needReadable = false;\n\t  this.emittedReadable = false;\n\t  this.readableListening = false;\n\t  this.resumeScheduled = false;\n\n\t  // Crypto is kind of old and crusty.  Historically, its default string\n\t  // encoding is 'binary' so we have to make this configurable.\n\t  // Everything else in the universe uses 'utf8', though.\n\t  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n\t  // when piping, we only care about 'readable' events that happen\n\t  // after read()ing all the bytes and not getting any pushback.\n\t  this.ranOut = false;\n\n\t  // the number of writers that are awaiting a drain event in .pipe()s\n\t  this.awaitDrain = 0;\n\n\t  // if true, a maybeReadMore has been scheduled\n\t  this.readingMore = false;\n\n\t  this.decoder = null;\n\t  this.encoding = null;\n\t  if (options.encoding) {\n\t    if (!StringDecoder) StringDecoder = __webpack_require__(53).StringDecoder;\n\t    this.decoder = new StringDecoder(options.encoding);\n\t    this.encoding = options.encoding;\n\t  }\n\t}\n\n\tfunction Readable(options) {\n\t  Duplex = Duplex || __webpack_require__(48);\n\n\t  if (!(this instanceof Readable)) return new Readable(options);\n\n\t  this._readableState = new ReadableState(options, this);\n\n\t  // legacy\n\t  this.readable = true;\n\n\t  if (options && typeof options.read === 'function') this._read = options.read;\n\n\t  Stream.call(this);\n\t}\n\n\t// Manually shove something into the read() buffer.\n\t// This returns true if the highWaterMark has not been hit yet,\n\t// similar to how Writable.write() returns true if you should\n\t// write() some more.\n\tReadable.prototype.push = function (chunk, encoding) {\n\t  var state = this._readableState;\n\n\t  if (!state.objectMode && typeof chunk === 'string') {\n\t    encoding = encoding || state.defaultEncoding;\n\t    if (encoding !== state.encoding) {\n\t      chunk = bufferShim.from(chunk, encoding);\n\t      encoding = '';\n\t    }\n\t  }\n\n\t  return readableAddChunk(this, state, chunk, encoding, false);\n\t};\n\n\t// Unshift should *always* be something directly out of read()\n\tReadable.prototype.unshift = function (chunk) {\n\t  var state = this._readableState;\n\t  return readableAddChunk(this, state, chunk, '', true);\n\t};\n\n\tReadable.prototype.isPaused = function () {\n\t  return this._readableState.flowing === false;\n\t};\n\n\tfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n\t  var er = chunkInvalid(state, chunk);\n\t  if (er) {\n\t    stream.emit('error', er);\n\t  } else if (chunk === null) {\n\t    state.reading = false;\n\t    onEofChunk(stream, state);\n\t  } else if (state.objectMode || chunk && chunk.length > 0) {\n\t    if (state.ended && !addToFront) {\n\t      var e = new Error('stream.push() after EOF');\n\t      stream.emit('error', e);\n\t    } else if (state.endEmitted && addToFront) {\n\t      var _e = new Error('stream.unshift() after end event');\n\t      stream.emit('error', _e);\n\t    } else {\n\t      var skipAdd;\n\t      if (state.decoder && !addToFront && !encoding) {\n\t        chunk = state.decoder.write(chunk);\n\t        skipAdd = !state.objectMode && chunk.length === 0;\n\t      }\n\n\t      if (!addToFront) state.reading = false;\n\n\t      // Don't add to the buffer if we've decoded to an empty string chunk and\n\t      // we're not in object mode\n\t      if (!skipAdd) {\n\t        // if we want the data now, just emit it.\n\t        if (state.flowing && state.length === 0 && !state.sync) {\n\t          stream.emit('data', chunk);\n\t          stream.read(0);\n\t        } else {\n\t          // update the buffer info.\n\t          state.length += state.objectMode ? 1 : chunk.length;\n\t          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n\t          if (state.needReadable) emitReadable(stream);\n\t        }\n\t      }\n\n\t      maybeReadMore(stream, state);\n\t    }\n\t  } else if (!addToFront) {\n\t    state.reading = false;\n\t  }\n\n\t  return needMoreData(state);\n\t}\n\n\t// if it's past the high water mark, we can push in some more.\n\t// Also, if we have no data yet, we can stand some\n\t// more bytes.  This is to work around cases where hwm=0,\n\t// such as the repl.  Also, if the push() triggered a\n\t// readable event, and the user called read(largeNumber) such that\n\t// needReadable was set, then we ought to push more, so that another\n\t// 'readable' event will be triggered.\n\tfunction needMoreData(state) {\n\t  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n\t}\n\n\t// backwards compatibility.\n\tReadable.prototype.setEncoding = function (enc) {\n\t  if (!StringDecoder) StringDecoder = __webpack_require__(53).StringDecoder;\n\t  this._readableState.decoder = new StringDecoder(enc);\n\t  this._readableState.encoding = enc;\n\t  return this;\n\t};\n\n\t// Don't raise the hwm > 8MB\n\tvar MAX_HWM = 0x800000;\n\tfunction computeNewHighWaterMark(n) {\n\t  if (n >= MAX_HWM) {\n\t    n = MAX_HWM;\n\t  } else {\n\t    // Get the next highest power of 2 to prevent increasing hwm excessively in\n\t    // tiny amounts\n\t    n--;\n\t    n |= n >>> 1;\n\t    n |= n >>> 2;\n\t    n |= n >>> 4;\n\t    n |= n >>> 8;\n\t    n |= n >>> 16;\n\t    n++;\n\t  }\n\t  return n;\n\t}\n\n\t// This function is designed to be inlinable, so please take care when making\n\t// changes to the function body.\n\tfunction howMuchToRead(n, state) {\n\t  if (n <= 0 || state.length === 0 && state.ended) return 0;\n\t  if (state.objectMode) return 1;\n\t  if (n !== n) {\n\t    // Only flow one buffer at a time\n\t    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n\t  }\n\t  // If we're asking for more than the current hwm, then raise the hwm.\n\t  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n\t  if (n <= state.length) return n;\n\t  // Don't have enough\n\t  if (!state.ended) {\n\t    state.needReadable = true;\n\t    return 0;\n\t  }\n\t  return state.length;\n\t}\n\n\t// you can override either this method, or the async _read(n) below.\n\tReadable.prototype.read = function (n) {\n\t  debug('read', n);\n\t  n = parseInt(n, 10);\n\t  var state = this._readableState;\n\t  var nOrig = n;\n\n\t  if (n !== 0) state.emittedReadable = false;\n\n\t  // if we're doing read(0) to trigger a readable event, but we\n\t  // already have a bunch of data in the buffer, then just trigger\n\t  // the 'readable' event and move on.\n\t  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n\t    debug('read: emitReadable', state.length, state.ended);\n\t    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n\t    return null;\n\t  }\n\n\t  n = howMuchToRead(n, state);\n\n\t  // if we've ended, and we're now clear, then finish it up.\n\t  if (n === 0 && state.ended) {\n\t    if (state.length === 0) endReadable(this);\n\t    return null;\n\t  }\n\n\t  // All the actual chunk generation logic needs to be\n\t  // *below* the call to _read.  The reason is that in certain\n\t  // synthetic stream cases, such as passthrough streams, _read\n\t  // may be a completely synchronous operation which may change\n\t  // the state of the read buffer, providing enough data when\n\t  // before there was *not* enough.\n\t  //\n\t  // So, the steps are:\n\t  // 1. Figure out what the state of things will be after we do\n\t  // a read from the buffer.\n\t  //\n\t  // 2. If that resulting state will trigger a _read, then call _read.\n\t  // Note that this may be asynchronous, or synchronous.  Yes, it is\n\t  // deeply ugly to write APIs this way, but that still doesn't mean\n\t  // that the Readable class should behave improperly, as streams are\n\t  // designed to be sync/async agnostic.\n\t  // Take note if the _read call is sync or async (ie, if the read call\n\t  // has returned yet), so that we know whether or not it's safe to emit\n\t  // 'readable' etc.\n\t  //\n\t  // 3. Actually pull the requested chunks out of the buffer and return.\n\n\t  // if we need a readable event, then we need to do some reading.\n\t  var doRead = state.needReadable;\n\t  debug('need readable', doRead);\n\n\t  // if we currently have less than the highWaterMark, then also read some\n\t  if (state.length === 0 || state.length - n < state.highWaterMark) {\n\t    doRead = true;\n\t    debug('length less than watermark', doRead);\n\t  }\n\n\t  // however, if we've ended, then there's no point, and if we're already\n\t  // reading, then it's unnecessary.\n\t  if (state.ended || state.reading) {\n\t    doRead = false;\n\t    debug('reading or ended', doRead);\n\t  } else if (doRead) {\n\t    debug('do read');\n\t    state.reading = true;\n\t    state.sync = true;\n\t    // if the length is currently zero, then we *need* a readable event.\n\t    if (state.length === 0) state.needReadable = true;\n\t    // call internal read method\n\t    this._read(state.highWaterMark);\n\t    state.sync = false;\n\t    // If _read pushed data synchronously, then `reading` will be false,\n\t    // and we need to re-evaluate how much data we can return to the user.\n\t    if (!state.reading) n = howMuchToRead(nOrig, state);\n\t  }\n\n\t  var ret;\n\t  if (n > 0) ret = fromList(n, state);else ret = null;\n\n\t  if (ret === null) {\n\t    state.needReadable = true;\n\t    n = 0;\n\t  } else {\n\t    state.length -= n;\n\t  }\n\n\t  if (state.length === 0) {\n\t    // If we have nothing in the buffer, then we want to know\n\t    // as soon as we *do* get something into the buffer.\n\t    if (!state.ended) state.needReadable = true;\n\n\t    // If we tried to read() past the EOF, then emit end on the next tick.\n\t    if (nOrig !== n && state.ended) endReadable(this);\n\t  }\n\n\t  if (ret !== null) this.emit('data', ret);\n\n\t  return ret;\n\t};\n\n\tfunction chunkInvalid(state, chunk) {\n\t  var er = null;\n\t  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n\t    er = new TypeError('Invalid non-string/buffer chunk');\n\t  }\n\t  return er;\n\t}\n\n\tfunction onEofChunk(stream, state) {\n\t  if (state.ended) return;\n\t  if (state.decoder) {\n\t    var chunk = state.decoder.end();\n\t    if (chunk && chunk.length) {\n\t      state.buffer.push(chunk);\n\t      state.length += state.objectMode ? 1 : chunk.length;\n\t    }\n\t  }\n\t  state.ended = true;\n\n\t  // emit 'readable' now to make sure it gets picked up.\n\t  emitReadable(stream);\n\t}\n\n\t// Don't emit readable right away in sync mode, because this can trigger\n\t// another read() call => stack overflow.  This way, it might trigger\n\t// a nextTick recursion warning, but that's not so bad.\n\tfunction emitReadable(stream) {\n\t  var state = stream._readableState;\n\t  state.needReadable = false;\n\t  if (!state.emittedReadable) {\n\t    debug('emitReadable', state.flowing);\n\t    state.emittedReadable = true;\n\t    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n\t  }\n\t}\n\n\tfunction emitReadable_(stream) {\n\t  debug('emit readable');\n\t  stream.emit('readable');\n\t  flow(stream);\n\t}\n\n\t// at this point, the user has presumably seen the 'readable' event,\n\t// and called read() to consume some data.  that may have triggered\n\t// in turn another _read(n) call, in which case reading = true if\n\t// it's in progress.\n\t// However, if we're not ended, or reading, and the length < hwm,\n\t// then go ahead and try to read some more preemptively.\n\tfunction maybeReadMore(stream, state) {\n\t  if (!state.readingMore) {\n\t    state.readingMore = true;\n\t    processNextTick(maybeReadMore_, stream, state);\n\t  }\n\t}\n\n\tfunction maybeReadMore_(stream, state) {\n\t  var len = state.length;\n\t  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n\t    debug('maybeReadMore read 0');\n\t    stream.read(0);\n\t    if (len === state.length)\n\t      // didn't get any data, stop spinning.\n\t      break;else len = state.length;\n\t  }\n\t  state.readingMore = false;\n\t}\n\n\t// abstract method.  to be overridden in specific implementation classes.\n\t// call cb(er, data) where data is <= n in length.\n\t// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n\t// arbitrary, and perhaps not very meaningful.\n\tReadable.prototype._read = function (n) {\n\t  this.emit('error', new Error('_read() is not implemented'));\n\t};\n\n\tReadable.prototype.pipe = function (dest, pipeOpts) {\n\t  var src = this;\n\t  var state = this._readableState;\n\n\t  switch (state.pipesCount) {\n\t    case 0:\n\t      state.pipes = dest;\n\t      break;\n\t    case 1:\n\t      state.pipes = [state.pipes, dest];\n\t      break;\n\t    default:\n\t      state.pipes.push(dest);\n\t      break;\n\t  }\n\t  state.pipesCount += 1;\n\t  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n\t  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n\t  var endFn = doEnd ? onend : cleanup;\n\t  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n\t  dest.on('unpipe', onunpipe);\n\t  function onunpipe(readable) {\n\t    debug('onunpipe');\n\t    if (readable === src) {\n\t      cleanup();\n\t    }\n\t  }\n\n\t  function onend() {\n\t    debug('onend');\n\t    dest.end();\n\t  }\n\n\t  // when the dest drains, it reduces the awaitDrain counter\n\t  // on the source.  This would be more elegant with a .once()\n\t  // handler in flow(), but adding and removing repeatedly is\n\t  // too slow.\n\t  var ondrain = pipeOnDrain(src);\n\t  dest.on('drain', ondrain);\n\n\t  var cleanedUp = false;\n\t  function cleanup() {\n\t    debug('cleanup');\n\t    // cleanup event handlers once the pipe is broken\n\t    dest.removeListener('close', onclose);\n\t    dest.removeListener('finish', onfinish);\n\t    dest.removeListener('drain', ondrain);\n\t    dest.removeListener('error', onerror);\n\t    dest.removeListener('unpipe', onunpipe);\n\t    src.removeListener('end', onend);\n\t    src.removeListener('end', cleanup);\n\t    src.removeListener('data', ondata);\n\n\t    cleanedUp = true;\n\n\t    // if the reader is waiting for a drain event from this\n\t    // specific writer, then it would cause it to never start\n\t    // flowing again.\n\t    // So, if this is awaiting a drain, then we just call it now.\n\t    // If we don't know, then assume that we are waiting for one.\n\t    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n\t  }\n\n\t  // If the user pushes more data while we're writing to dest then we'll end up\n\t  // in ondata again. However, we only want to increase awaitDrain once because\n\t  // dest will only emit one 'drain' event for the multiple writes.\n\t  // => Introduce a guard on increasing awaitDrain.\n\t  var increasedAwaitDrain = false;\n\t  src.on('data', ondata);\n\t  function ondata(chunk) {\n\t    debug('ondata');\n\t    increasedAwaitDrain = false;\n\t    var ret = dest.write(chunk);\n\t    if (false === ret && !increasedAwaitDrain) {\n\t      // If the user unpiped during `dest.write()`, it is possible\n\t      // to get stuck in a permanently paused state if that write\n\t      // also returned false.\n\t      // => Check whether `dest` is still a piping destination.\n\t      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n\t        debug('false write response, pause', src._readableState.awaitDrain);\n\t        src._readableState.awaitDrain++;\n\t        increasedAwaitDrain = true;\n\t      }\n\t      src.pause();\n\t    }\n\t  }\n\n\t  // if the dest has an error, then stop piping into it.\n\t  // however, don't suppress the throwing behavior for this.\n\t  function onerror(er) {\n\t    debug('onerror', er);\n\t    unpipe();\n\t    dest.removeListener('error', onerror);\n\t    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n\t  }\n\n\t  // Make sure our error handler is attached before userland ones.\n\t  prependListener(dest, 'error', onerror);\n\n\t  // Both close and finish should trigger unpipe, but only once.\n\t  function onclose() {\n\t    dest.removeListener('finish', onfinish);\n\t    unpipe();\n\t  }\n\t  dest.once('close', onclose);\n\t  function onfinish() {\n\t    debug('onfinish');\n\t    dest.removeListener('close', onclose);\n\t    unpipe();\n\t  }\n\t  dest.once('finish', onfinish);\n\n\t  function unpipe() {\n\t    debug('unpipe');\n\t    src.unpipe(dest);\n\t  }\n\n\t  // tell the dest that it's being piped to\n\t  dest.emit('pipe', src);\n\n\t  // start the flow if it hasn't been started already.\n\t  if (!state.flowing) {\n\t    debug('pipe resume');\n\t    src.resume();\n\t  }\n\n\t  return dest;\n\t};\n\n\tfunction pipeOnDrain(src) {\n\t  return function () {\n\t    var state = src._readableState;\n\t    debug('pipeOnDrain', state.awaitDrain);\n\t    if (state.awaitDrain) state.awaitDrain--;\n\t    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n\t      state.flowing = true;\n\t      flow(src);\n\t    }\n\t  };\n\t}\n\n\tReadable.prototype.unpipe = function (dest) {\n\t  var state = this._readableState;\n\n\t  // if we're not piping anywhere, then do nothing.\n\t  if (state.pipesCount === 0) return this;\n\n\t  // just one destination.  most common case.\n\t  if (state.pipesCount === 1) {\n\t    // passed in one, but it's not the right one.\n\t    if (dest && dest !== state.pipes) return this;\n\n\t    if (!dest) dest = state.pipes;\n\n\t    // got a match.\n\t    state.pipes = null;\n\t    state.pipesCount = 0;\n\t    state.flowing = false;\n\t    if (dest) dest.emit('unpipe', this);\n\t    return this;\n\t  }\n\n\t  // slow case. multiple pipe destinations.\n\n\t  if (!dest) {\n\t    // remove all.\n\t    var dests = state.pipes;\n\t    var len = state.pipesCount;\n\t    state.pipes = null;\n\t    state.pipesCount = 0;\n\t    state.flowing = false;\n\n\t    for (var i = 0; i < len; i++) {\n\t      dests[i].emit('unpipe', this);\n\t    }return this;\n\t  }\n\n\t  // try to find the right one.\n\t  var index = indexOf(state.pipes, dest);\n\t  if (index === -1) return this;\n\n\t  state.pipes.splice(index, 1);\n\t  state.pipesCount -= 1;\n\t  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n\t  dest.emit('unpipe', this);\n\n\t  return this;\n\t};\n\n\t// set up data events if they are asked for\n\t// Ensure readable listeners eventually get something\n\tReadable.prototype.on = function (ev, fn) {\n\t  var res = Stream.prototype.on.call(this, ev, fn);\n\n\t  if (ev === 'data') {\n\t    // Start flowing on next tick if stream isn't explicitly paused\n\t    if (this._readableState.flowing !== false) this.resume();\n\t  } else if (ev === 'readable') {\n\t    var state = this._readableState;\n\t    if (!state.endEmitted && !state.readableListening) {\n\t      state.readableListening = state.needReadable = true;\n\t      state.emittedReadable = false;\n\t      if (!state.reading) {\n\t        processNextTick(nReadingNextTick, this);\n\t      } else if (state.length) {\n\t        emitReadable(this, state);\n\t      }\n\t    }\n\t  }\n\n\t  return res;\n\t};\n\tReadable.prototype.addListener = Readable.prototype.on;\n\n\tfunction nReadingNextTick(self) {\n\t  debug('readable nexttick read 0');\n\t  self.read(0);\n\t}\n\n\t// pause() and resume() are remnants of the legacy readable stream API\n\t// If the user uses them, then switch into old mode.\n\tReadable.prototype.resume = function () {\n\t  var state = this._readableState;\n\t  if (!state.flowing) {\n\t    debug('resume');\n\t    state.flowing = true;\n\t    resume(this, state);\n\t  }\n\t  return this;\n\t};\n\n\tfunction resume(stream, state) {\n\t  if (!state.resumeScheduled) {\n\t    state.resumeScheduled = true;\n\t    processNextTick(resume_, stream, state);\n\t  }\n\t}\n\n\tfunction resume_(stream, state) {\n\t  if (!state.reading) {\n\t    debug('resume read 0');\n\t    stream.read(0);\n\t  }\n\n\t  state.resumeScheduled = false;\n\t  state.awaitDrain = 0;\n\t  stream.emit('resume');\n\t  flow(stream);\n\t  if (state.flowing && !state.reading) stream.read(0);\n\t}\n\n\tReadable.prototype.pause = function () {\n\t  debug('call pause flowing=%j', this._readableState.flowing);\n\t  if (false !== this._readableState.flowing) {\n\t    debug('pause');\n\t    this._readableState.flowing = false;\n\t    this.emit('pause');\n\t  }\n\t  return this;\n\t};\n\n\tfunction flow(stream) {\n\t  var state = stream._readableState;\n\t  debug('flow', state.flowing);\n\t  while (state.flowing && stream.read() !== null) {}\n\t}\n\n\t// wrap an old-style stream as the async data source.\n\t// This is *not* part of the readable stream interface.\n\t// It is an ugly unfortunate mess of history.\n\tReadable.prototype.wrap = function (stream) {\n\t  var state = this._readableState;\n\t  var paused = false;\n\n\t  var self = this;\n\t  stream.on('end', function () {\n\t    debug('wrapped end');\n\t    if (state.decoder && !state.ended) {\n\t      var chunk = state.decoder.end();\n\t      if (chunk && chunk.length) self.push(chunk);\n\t    }\n\n\t    self.push(null);\n\t  });\n\n\t  stream.on('data', function (chunk) {\n\t    debug('wrapped data');\n\t    if (state.decoder) chunk = state.decoder.write(chunk);\n\n\t    // don't skip over falsy values in objectMode\n\t    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n\t    var ret = self.push(chunk);\n\t    if (!ret) {\n\t      paused = true;\n\t      stream.pause();\n\t    }\n\t  });\n\n\t  // proxy all the other methods.\n\t  // important when wrapping filters and duplexes.\n\t  for (var i in stream) {\n\t    if (this[i] === undefined && typeof stream[i] === 'function') {\n\t      this[i] = function (method) {\n\t        return function () {\n\t          return stream[method].apply(stream, arguments);\n\t        };\n\t      }(i);\n\t    }\n\t  }\n\n\t  // proxy certain important events.\n\t  for (var n = 0; n < kProxyEvents.length; n++) {\n\t    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));\n\t  }\n\n\t  // when we try to consume some more bytes, simply unpause the\n\t  // underlying stream.\n\t  self._read = function (n) {\n\t    debug('wrapped _read', n);\n\t    if (paused) {\n\t      paused = false;\n\t      stream.resume();\n\t    }\n\t  };\n\n\t  return self;\n\t};\n\n\t// exposed for testing purposes only.\n\tReadable._fromList = fromList;\n\n\t// Pluck off n bytes from an array of buffers.\n\t// Length is the combined lengths of all the buffers in the list.\n\t// This function is designed to be inlinable, so please take care when making\n\t// changes to the function body.\n\tfunction fromList(n, state) {\n\t  // nothing buffered\n\t  if (state.length === 0) return null;\n\n\t  var ret;\n\t  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n\t    // read it all, truncate the list\n\t    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n\t    state.buffer.clear();\n\t  } else {\n\t    // read part of list\n\t    ret = fromListPartial(n, state.buffer, state.decoder);\n\t  }\n\n\t  return ret;\n\t}\n\n\t// Extracts only enough buffered data to satisfy the amount requested.\n\t// This function is designed to be inlinable, so please take care when making\n\t// changes to the function body.\n\tfunction fromListPartial(n, list, hasStrings) {\n\t  var ret;\n\t  if (n < list.head.data.length) {\n\t    // slice is the same for buffers and strings\n\t    ret = list.head.data.slice(0, n);\n\t    list.head.data = list.head.data.slice(n);\n\t  } else if (n === list.head.data.length) {\n\t    // first chunk is a perfect match\n\t    ret = list.shift();\n\t  } else {\n\t    // result spans more than one buffer\n\t    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n\t  }\n\t  return ret;\n\t}\n\n\t// Copies a specified amount of characters from the list of buffered data\n\t// chunks.\n\t// This function is designed to be inlinable, so please take care when making\n\t// changes to the function body.\n\tfunction copyFromBufferString(n, list) {\n\t  var p = list.head;\n\t  var c = 1;\n\t  var ret = p.data;\n\t  n -= ret.length;\n\t  while (p = p.next) {\n\t    var str = p.data;\n\t    var nb = n > str.length ? str.length : n;\n\t    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n\t    n -= nb;\n\t    if (n === 0) {\n\t      if (nb === str.length) {\n\t        ++c;\n\t        if (p.next) list.head = p.next;else list.head = list.tail = null;\n\t      } else {\n\t        list.head = p;\n\t        p.data = str.slice(nb);\n\t      }\n\t      break;\n\t    }\n\t    ++c;\n\t  }\n\t  list.length -= c;\n\t  return ret;\n\t}\n\n\t// Copies a specified amount of bytes from the list of buffered data chunks.\n\t// This function is designed to be inlinable, so please take care when making\n\t// changes to the function body.\n\tfunction copyFromBuffer(n, list) {\n\t  var ret = bufferShim.allocUnsafe(n);\n\t  var p = list.head;\n\t  var c = 1;\n\t  p.data.copy(ret);\n\t  n -= p.data.length;\n\t  while (p = p.next) {\n\t    var buf = p.data;\n\t    var nb = n > buf.length ? buf.length : n;\n\t    buf.copy(ret, ret.length - n, 0, nb);\n\t    n -= nb;\n\t    if (n === 0) {\n\t      if (nb === buf.length) {\n\t        ++c;\n\t        if (p.next) list.head = p.next;else list.head = list.tail = null;\n\t      } else {\n\t        list.head = p;\n\t        p.data = buf.slice(nb);\n\t      }\n\t      break;\n\t    }\n\t    ++c;\n\t  }\n\t  list.length -= c;\n\t  return ret;\n\t}\n\n\tfunction endReadable(stream) {\n\t  var state = stream._readableState;\n\n\t  // If we get here before consuming all the bytes, then that is a\n\t  // bug in node.  Should never happen.\n\t  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n\t  if (!state.endEmitted) {\n\t    state.ended = true;\n\t    processNextTick(endReadableNT, state, stream);\n\t  }\n\t}\n\n\tfunction endReadableNT(state, stream) {\n\t  // Check that we didn't get one last unshift.\n\t  if (!state.endEmitted && state.length === 0) {\n\t    state.endEmitted = true;\n\t    stream.readable = false;\n\t    stream.emit('end');\n\t  }\n\t}\n\n\tfunction forEach(xs, f) {\n\t  for (var i = 0, l = xs.length; i < l; i++) {\n\t    f(xs[i], i);\n\t  }\n\t}\n\n\tfunction indexOf(xs, x) {\n\t  for (var i = 0, l = xs.length; i < l; i++) {\n\t    if (xs[i] === x) return i;\n\t  }\n\t  return -1;\n\t}\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\n\tif (!process.version ||\n\t    process.version.indexOf('v0.') === 0 ||\n\t    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n\t  module.exports = nextTick;\n\t} else {\n\t  module.exports = process.nextTick;\n\t}\n\n\tfunction nextTick(fn, arg1, arg2, arg3) {\n\t  if (typeof fn !== 'function') {\n\t    throw new TypeError('\"callback\" argument must be a function');\n\t  }\n\t  var len = arguments.length;\n\t  var args, i;\n\t  switch (len) {\n\t  case 0:\n\t  case 1:\n\t    return process.nextTick(fn);\n\t  case 2:\n\t    return process.nextTick(function afterTickOne() {\n\t      fn.call(null, arg1);\n\t    });\n\t  case 3:\n\t    return process.nextTick(function afterTickTwo() {\n\t      fn.call(null, arg1, arg2);\n\t    });\n\t  case 4:\n\t    return process.nextTick(function afterTickThree() {\n\t      fn.call(null, arg1, arg2, arg3);\n\t    });\n\t  default:\n\t    args = new Array(len - 1);\n\t    i = 0;\n\t    while (i < args.length) {\n\t      args[i++] = arguments[i];\n\t    }\n\t    return process.nextTick(function afterTick() {\n\t      fn.apply(null, args);\n\t    });\n\t  }\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(21).EventEmitter;\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\n\tvar buffer = __webpack_require__(24);\n\tvar Buffer = buffer.Buffer;\n\tvar SlowBuffer = buffer.SlowBuffer;\n\tvar MAX_LEN = buffer.kMaxLength || 2147483647;\n\texports.alloc = function alloc(size, fill, encoding) {\n\t  if (typeof Buffer.alloc === 'function') {\n\t    return Buffer.alloc(size, fill, encoding);\n\t  }\n\t  if (typeof encoding === 'number') {\n\t    throw new TypeError('encoding must not be number');\n\t  }\n\t  if (typeof size !== 'number') {\n\t    throw new TypeError('size must be a number');\n\t  }\n\t  if (size > MAX_LEN) {\n\t    throw new RangeError('size is too large');\n\t  }\n\t  var enc = encoding;\n\t  var _fill = fill;\n\t  if (_fill === undefined) {\n\t    enc = undefined;\n\t    _fill = 0;\n\t  }\n\t  var buf = new Buffer(size);\n\t  if (typeof _fill === 'string') {\n\t    var fillBuf = new Buffer(_fill, enc);\n\t    var flen = fillBuf.length;\n\t    var i = -1;\n\t    while (++i < size) {\n\t      buf[i] = fillBuf[i % flen];\n\t    }\n\t  } else {\n\t    buf.fill(_fill);\n\t  }\n\t  return buf;\n\t}\n\texports.allocUnsafe = function allocUnsafe(size) {\n\t  if (typeof Buffer.allocUnsafe === 'function') {\n\t    return Buffer.allocUnsafe(size);\n\t  }\n\t  if (typeof size !== 'number') {\n\t    throw new TypeError('size must be a number');\n\t  }\n\t  if (size > MAX_LEN) {\n\t    throw new RangeError('size is too large');\n\t  }\n\t  return new Buffer(size);\n\t}\n\texports.from = function from(value, encodingOrOffset, length) {\n\t  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {\n\t    return Buffer.from(value, encodingOrOffset, length);\n\t  }\n\t  if (typeof value === 'number') {\n\t    throw new TypeError('\"value\" argument must not be a number');\n\t  }\n\t  if (typeof value === 'string') {\n\t    return new Buffer(value, encodingOrOffset);\n\t  }\n\t  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n\t    var offset = encodingOrOffset;\n\t    if (arguments.length === 1) {\n\t      return new Buffer(value);\n\t    }\n\t    if (typeof offset === 'undefined') {\n\t      offset = 0;\n\t    }\n\t    var len = length;\n\t    if (typeof len === 'undefined') {\n\t      len = value.byteLength - offset;\n\t    }\n\t    if (offset >= value.byteLength) {\n\t      throw new RangeError('\\'offset\\' is out of bounds');\n\t    }\n\t    if (len > value.byteLength - offset) {\n\t      throw new RangeError('\\'length\\' is out of bounds');\n\t    }\n\t    return new Buffer(value.slice(offset, offset + len));\n\t  }\n\t  if (Buffer.isBuffer(value)) {\n\t    var out = new Buffer(value.length);\n\t    value.copy(out, 0, 0, value.length);\n\t    return out;\n\t  }\n\t  if (value) {\n\t    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {\n\t      return new Buffer(value);\n\t    }\n\t    if (value.type === 'Buffer' && Array.isArray(value.data)) {\n\t      return new Buffer(value.data);\n\t    }\n\t  }\n\n\t  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');\n\t}\n\texports.allocUnsafeSlow = function allocUnsafeSlow(size) {\n\t  if (typeof Buffer.allocUnsafeSlow === 'function') {\n\t    return Buffer.allocUnsafeSlow(size);\n\t  }\n\t  if (typeof size !== 'number') {\n\t    throw new TypeError('size must be a number');\n\t  }\n\t  if (size >= MAX_LEN) {\n\t    throw new RangeError('size is too large');\n\t  }\n\t  return new SlowBuffer(size);\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t// NOTE: These type checking functions intentionally don't use `instanceof`\n\t// because it is fragile and can be easily faked with `Object.create()`.\n\n\tfunction isArray(arg) {\n\t  if (Array.isArray) {\n\t    return Array.isArray(arg);\n\t  }\n\t  return objectToString(arg) === '[object Array]';\n\t}\n\texports.isArray = isArray;\n\n\tfunction isBoolean(arg) {\n\t  return typeof arg === 'boolean';\n\t}\n\texports.isBoolean = isBoolean;\n\n\tfunction isNull(arg) {\n\t  return arg === null;\n\t}\n\texports.isNull = isNull;\n\n\tfunction isNullOrUndefined(arg) {\n\t  return arg == null;\n\t}\n\texports.isNullOrUndefined = isNullOrUndefined;\n\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\texports.isNumber = isNumber;\n\n\tfunction isString(arg) {\n\t  return typeof arg === 'string';\n\t}\n\texports.isString = isString;\n\n\tfunction isSymbol(arg) {\n\t  return typeof arg === 'symbol';\n\t}\n\texports.isSymbol = isSymbol;\n\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\texports.isUndefined = isUndefined;\n\n\tfunction isRegExp(re) {\n\t  return objectToString(re) === '[object RegExp]';\n\t}\n\texports.isRegExp = isRegExp;\n\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\texports.isObject = isObject;\n\n\tfunction isDate(d) {\n\t  return objectToString(d) === '[object Date]';\n\t}\n\texports.isDate = isDate;\n\n\tfunction isError(e) {\n\t  return (objectToString(e) === '[object Error]' || e instanceof Error);\n\t}\n\texports.isError = isError;\n\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\texports.isFunction = isFunction;\n\n\tfunction isPrimitive(arg) {\n\t  return arg === null ||\n\t         typeof arg === 'boolean' ||\n\t         typeof arg === 'number' ||\n\t         typeof arg === 'string' ||\n\t         typeof arg === 'symbol' ||  // ES6 symbol\n\t         typeof arg === 'undefined';\n\t}\n\texports.isPrimitive = isPrimitive;\n\n\texports.isBuffer = Buffer.isBuffer;\n\n\tfunction objectToString(o) {\n\t  return Object.prototype.toString.call(o);\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports) {\n\n\t/* (ignored) */\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar Buffer = __webpack_require__(24).Buffer;\n\t/*<replacement>*/\n\tvar bufferShim = __webpack_require__(44);\n\t/*</replacement>*/\n\n\tmodule.exports = BufferList;\n\n\tfunction BufferList() {\n\t  this.head = null;\n\t  this.tail = null;\n\t  this.length = 0;\n\t}\n\n\tBufferList.prototype.push = function (v) {\n\t  var entry = { data: v, next: null };\n\t  if (this.length > 0) this.tail.next = entry;else this.head = entry;\n\t  this.tail = entry;\n\t  ++this.length;\n\t};\n\n\tBufferList.prototype.unshift = function (v) {\n\t  var entry = { data: v, next: this.head };\n\t  if (this.length === 0) this.tail = entry;\n\t  this.head = entry;\n\t  ++this.length;\n\t};\n\n\tBufferList.prototype.shift = function () {\n\t  if (this.length === 0) return;\n\t  var ret = this.head.data;\n\t  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n\t  --this.length;\n\t  return ret;\n\t};\n\n\tBufferList.prototype.clear = function () {\n\t  this.head = this.tail = null;\n\t  this.length = 0;\n\t};\n\n\tBufferList.prototype.join = function (s) {\n\t  if (this.length === 0) return '';\n\t  var p = this.head;\n\t  var ret = '' + p.data;\n\t  while (p = p.next) {\n\t    ret += s + p.data;\n\t  }return ret;\n\t};\n\n\tBufferList.prototype.concat = function (n) {\n\t  if (this.length === 0) return bufferShim.alloc(0);\n\t  if (this.length === 1) return this.head.data;\n\t  var ret = bufferShim.allocUnsafe(n >>> 0);\n\t  var p = this.head;\n\t  var i = 0;\n\t  while (p) {\n\t    p.data.copy(ret, i);\n\t    i += p.data.length;\n\t    p = p.next;\n\t  }\n\t  return ret;\n\t};\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// a duplex stream is just a stream that is both readable and writable.\n\t// Since JS doesn't have multiple prototypal inheritance, this class\n\t// prototypally inherits from Readable, and then parasitically from\n\t// Writable.\n\n\t'use strict';\n\n\t/*<replacement>*/\n\n\tvar objectKeys = Object.keys || function (obj) {\n\t  var keys = [];\n\t  for (var key in obj) {\n\t    keys.push(key);\n\t  }return keys;\n\t};\n\t/*</replacement>*/\n\n\tmodule.exports = Duplex;\n\n\t/*<replacement>*/\n\tvar processNextTick = __webpack_require__(42);\n\t/*</replacement>*/\n\n\t/*<replacement>*/\n\tvar util = __webpack_require__(45);\n\tutil.inherits = __webpack_require__(38);\n\t/*</replacement>*/\n\n\tvar Readable = __webpack_require__(41);\n\tvar Writable = __webpack_require__(49);\n\n\tutil.inherits(Duplex, Readable);\n\n\tvar keys = objectKeys(Writable.prototype);\n\tfor (var v = 0; v < keys.length; v++) {\n\t  var method = keys[v];\n\t  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n\t}\n\n\tfunction Duplex(options) {\n\t  if (!(this instanceof Duplex)) return new Duplex(options);\n\n\t  Readable.call(this, options);\n\t  Writable.call(this, options);\n\n\t  if (options && options.readable === false) this.readable = false;\n\n\t  if (options && options.writable === false) this.writable = false;\n\n\t  this.allowHalfOpen = true;\n\t  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n\t  this.once('end', onend);\n\t}\n\n\t// the no-half-open enforcer\n\tfunction onend() {\n\t  // if we allow half-open state, or if the writable side ended,\n\t  // then we're ok.\n\t  if (this.allowHalfOpen || this._writableState.ended) return;\n\n\t  // no more data can be written.\n\t  // But allow more writes to happen in this tick.\n\t  processNextTick(onEndNT, this);\n\t}\n\n\tfunction onEndNT(self) {\n\t  self.end();\n\t}\n\n\tfunction forEach(xs, f) {\n\t  for (var i = 0, l = xs.length; i < l; i++) {\n\t    f(xs[i], i);\n\t  }\n\t}\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.\n\t// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n\t// the drain event emission and buffering.\n\n\t'use strict';\n\n\tmodule.exports = Writable;\n\n\t/*<replacement>*/\n\tvar processNextTick = __webpack_require__(42);\n\t/*</replacement>*/\n\n\t/*<replacement>*/\n\tvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;\n\t/*</replacement>*/\n\n\t/*<replacement>*/\n\tvar Duplex;\n\t/*</replacement>*/\n\n\tWritable.WritableState = WritableState;\n\n\t/*<replacement>*/\n\tvar util = __webpack_require__(45);\n\tutil.inherits = __webpack_require__(38);\n\t/*</replacement>*/\n\n\t/*<replacement>*/\n\tvar internalUtil = {\n\t  deprecate: __webpack_require__(52)\n\t};\n\t/*</replacement>*/\n\n\t/*<replacement>*/\n\tvar Stream = __webpack_require__(43);\n\t/*</replacement>*/\n\n\tvar Buffer = __webpack_require__(24).Buffer;\n\t/*<replacement>*/\n\tvar bufferShim = __webpack_require__(44);\n\t/*</replacement>*/\n\n\tutil.inherits(Writable, Stream);\n\n\tfunction nop() {}\n\n\tfunction WriteReq(chunk, encoding, cb) {\n\t  this.chunk = chunk;\n\t  this.encoding = encoding;\n\t  this.callback = cb;\n\t  this.next = null;\n\t}\n\n\tfunction WritableState(options, stream) {\n\t  Duplex = Duplex || __webpack_require__(48);\n\n\t  options = options || {};\n\n\t  // object stream flag to indicate whether or not this stream\n\t  // contains buffers or objects.\n\t  this.objectMode = !!options.objectMode;\n\n\t  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n\t  // the point at which write() starts returning false\n\t  // Note: 0 is a valid value, means that we always return false if\n\t  // the entire buffer is not flushed immediately on write()\n\t  var hwm = options.highWaterMark;\n\t  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\t  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n\t  // cast to ints.\n\t  this.highWaterMark = ~~this.highWaterMark;\n\n\t  // drain event flag.\n\t  this.needDrain = false;\n\t  // at the start of calling end()\n\t  this.ending = false;\n\t  // when end() has been called, and returned\n\t  this.ended = false;\n\t  // when 'finish' is emitted\n\t  this.finished = false;\n\n\t  // should we decode strings into buffers before passing to _write?\n\t  // this is here so that some node-core streams can optimize string\n\t  // handling at a lower level.\n\t  var noDecode = options.decodeStrings === false;\n\t  this.decodeStrings = !noDecode;\n\n\t  // Crypto is kind of old and crusty.  Historically, its default string\n\t  // encoding is 'binary' so we have to make this configurable.\n\t  // Everything else in the universe uses 'utf8', though.\n\t  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n\t  // not an actual buffer we keep track of, but a measurement\n\t  // of how much we're waiting to get pushed to some underlying\n\t  // socket or file.\n\t  this.length = 0;\n\n\t  // a flag to see when we're in the middle of a write.\n\t  this.writing = false;\n\n\t  // when true all writes will be buffered until .uncork() call\n\t  this.corked = 0;\n\n\t  // a flag to be able to tell if the onwrite cb is called immediately,\n\t  // or on a later tick.  We set this to true at first, because any\n\t  // actions that shouldn't happen until \"later\" should generally also\n\t  // not happen before the first write call.\n\t  this.sync = true;\n\n\t  // a flag to know if we're processing previously buffered items, which\n\t  // may call the _write() callback in the same tick, so that we don't\n\t  // end up in an overlapped onwrite situation.\n\t  this.bufferProcessing = false;\n\n\t  // the callback that's passed to _write(chunk,cb)\n\t  this.onwrite = function (er) {\n\t    onwrite(stream, er);\n\t  };\n\n\t  // the callback that the user supplies to write(chunk,encoding,cb)\n\t  this.writecb = null;\n\n\t  // the amount that is being written when _write is called.\n\t  this.writelen = 0;\n\n\t  this.bufferedRequest = null;\n\t  this.lastBufferedRequest = null;\n\n\t  // number of pending user-supplied write callbacks\n\t  // this must be 0 before 'finish' can be emitted\n\t  this.pendingcb = 0;\n\n\t  // emit prefinish if the only thing we're waiting for is _write cbs\n\t  // This is relevant for synchronous Transform streams\n\t  this.prefinished = false;\n\n\t  // True if the error was already emitted and should not be thrown again\n\t  this.errorEmitted = false;\n\n\t  // count buffered requests\n\t  this.bufferedRequestCount = 0;\n\n\t  // allocate the first CorkedRequest, there is always\n\t  // one allocated and free to use, and we maintain at most two\n\t  this.corkedRequestsFree = new CorkedRequest(this);\n\t}\n\n\tWritableState.prototype.getBuffer = function getBuffer() {\n\t  var current = this.bufferedRequest;\n\t  var out = [];\n\t  while (current) {\n\t    out.push(current);\n\t    current = current.next;\n\t  }\n\t  return out;\n\t};\n\n\t(function () {\n\t  try {\n\t    Object.defineProperty(WritableState.prototype, 'buffer', {\n\t      get: internalUtil.deprecate(function () {\n\t        return this.getBuffer();\n\t      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n\t    });\n\t  } catch (_) {}\n\t})();\n\n\t// Test _writableState for inheritance to account for Duplex streams,\n\t// whose prototype chain only points to Readable.\n\tvar realHasInstance;\n\tif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n\t  realHasInstance = Function.prototype[Symbol.hasInstance];\n\t  Object.defineProperty(Writable, Symbol.hasInstance, {\n\t    value: function (object) {\n\t      if (realHasInstance.call(this, object)) return true;\n\n\t      return object && object._writableState instanceof WritableState;\n\t    }\n\t  });\n\t} else {\n\t  realHasInstance = function (object) {\n\t    return object instanceof this;\n\t  };\n\t}\n\n\tfunction Writable(options) {\n\t  Duplex = Duplex || __webpack_require__(48);\n\n\t  // Writable ctor is applied to Duplexes, too.\n\t  // `realHasInstance` is necessary because using plain `instanceof`\n\t  // would return false, as no `_writableState` property is attached.\n\n\t  // Trying to use the custom `instanceof` for Writable here will also break the\n\t  // Node.js LazyTransform implementation, which has a non-trivial getter for\n\t  // `_writableState` that would lead to infinite recursion.\n\t  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n\t    return new Writable(options);\n\t  }\n\n\t  this._writableState = new WritableState(options, this);\n\n\t  // legacy.\n\t  this.writable = true;\n\n\t  if (options) {\n\t    if (typeof options.write === 'function') this._write = options.write;\n\n\t    if (typeof options.writev === 'function') this._writev = options.writev;\n\t  }\n\n\t  Stream.call(this);\n\t}\n\n\t// Otherwise people can pipe Writable streams, which is just wrong.\n\tWritable.prototype.pipe = function () {\n\t  this.emit('error', new Error('Cannot pipe, not readable'));\n\t};\n\n\tfunction writeAfterEnd(stream, cb) {\n\t  var er = new Error('write after end');\n\t  // TODO: defer error events consistently everywhere, not just the cb\n\t  stream.emit('error', er);\n\t  processNextTick(cb, er);\n\t}\n\n\t// Checks that a user-supplied chunk is valid, especially for the particular\n\t// mode the stream is in. Currently this means that `null` is never accepted\n\t// and undefined/non-string values are only allowed in object mode.\n\tfunction validChunk(stream, state, chunk, cb) {\n\t  var valid = true;\n\t  var er = false;\n\n\t  if (chunk === null) {\n\t    er = new TypeError('May not write null values to stream');\n\t  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n\t    er = new TypeError('Invalid non-string/buffer chunk');\n\t  }\n\t  if (er) {\n\t    stream.emit('error', er);\n\t    processNextTick(cb, er);\n\t    valid = false;\n\t  }\n\t  return valid;\n\t}\n\n\tWritable.prototype.write = function (chunk, encoding, cb) {\n\t  var state = this._writableState;\n\t  var ret = false;\n\t  var isBuf = Buffer.isBuffer(chunk);\n\n\t  if (typeof encoding === 'function') {\n\t    cb = encoding;\n\t    encoding = null;\n\t  }\n\n\t  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n\t  if (typeof cb !== 'function') cb = nop;\n\n\t  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n\t    state.pendingcb++;\n\t    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n\t  }\n\n\t  return ret;\n\t};\n\n\tWritable.prototype.cork = function () {\n\t  var state = this._writableState;\n\n\t  state.corked++;\n\t};\n\n\tWritable.prototype.uncork = function () {\n\t  var state = this._writableState;\n\n\t  if (state.corked) {\n\t    state.corked--;\n\n\t    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n\t  }\n\t};\n\n\tWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n\t  // node::ParseEncoding() requires lower case.\n\t  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n\t  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n\t  this._writableState.defaultEncoding = encoding;\n\t  return this;\n\t};\n\n\tfunction decodeChunk(state, chunk, encoding) {\n\t  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n\t    chunk = bufferShim.from(chunk, encoding);\n\t  }\n\t  return chunk;\n\t}\n\n\t// if we're already writing something, then just put this\n\t// in the queue, and wait our turn.  Otherwise, call _write\n\t// If we return false, then we need a drain event, so set that flag.\n\tfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n\t  if (!isBuf) {\n\t    chunk = decodeChunk(state, chunk, encoding);\n\t    if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n\t  }\n\t  var len = state.objectMode ? 1 : chunk.length;\n\n\t  state.length += len;\n\n\t  var ret = state.length < state.highWaterMark;\n\t  // we must ensure that previous needDrain will not be reset to false.\n\t  if (!ret) state.needDrain = true;\n\n\t  if (state.writing || state.corked) {\n\t    var last = state.lastBufferedRequest;\n\t    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n\t    if (last) {\n\t      last.next = state.lastBufferedRequest;\n\t    } else {\n\t      state.bufferedRequest = state.lastBufferedRequest;\n\t    }\n\t    state.bufferedRequestCount += 1;\n\t  } else {\n\t    doWrite(stream, state, false, len, chunk, encoding, cb);\n\t  }\n\n\t  return ret;\n\t}\n\n\tfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n\t  state.writelen = len;\n\t  state.writecb = cb;\n\t  state.writing = true;\n\t  state.sync = true;\n\t  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n\t  state.sync = false;\n\t}\n\n\tfunction onwriteError(stream, state, sync, er, cb) {\n\t  --state.pendingcb;\n\t  if (sync) processNextTick(cb, er);else cb(er);\n\n\t  stream._writableState.errorEmitted = true;\n\t  stream.emit('error', er);\n\t}\n\n\tfunction onwriteStateUpdate(state) {\n\t  state.writing = false;\n\t  state.writecb = null;\n\t  state.length -= state.writelen;\n\t  state.writelen = 0;\n\t}\n\n\tfunction onwrite(stream, er) {\n\t  var state = stream._writableState;\n\t  var sync = state.sync;\n\t  var cb = state.writecb;\n\n\t  onwriteStateUpdate(state);\n\n\t  if (er) onwriteError(stream, state, sync, er, cb);else {\n\t    // Check if we're actually ready to finish, but don't emit yet\n\t    var finished = needFinish(state);\n\n\t    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n\t      clearBuffer(stream, state);\n\t    }\n\n\t    if (sync) {\n\t      /*<replacement>*/\n\t      asyncWrite(afterWrite, stream, state, finished, cb);\n\t      /*</replacement>*/\n\t    } else {\n\t      afterWrite(stream, state, finished, cb);\n\t    }\n\t  }\n\t}\n\n\tfunction afterWrite(stream, state, finished, cb) {\n\t  if (!finished) onwriteDrain(stream, state);\n\t  state.pendingcb--;\n\t  cb();\n\t  finishMaybe(stream, state);\n\t}\n\n\t// Must force callback to be called on nextTick, so that we don't\n\t// emit 'drain' before the write() consumer gets the 'false' return\n\t// value, and has a chance to attach a 'drain' listener.\n\tfunction onwriteDrain(stream, state) {\n\t  if (state.length === 0 && state.needDrain) {\n\t    state.needDrain = false;\n\t    stream.emit('drain');\n\t  }\n\t}\n\n\t// if there's something in the buffer waiting, then process it\n\tfunction clearBuffer(stream, state) {\n\t  state.bufferProcessing = true;\n\t  var entry = state.bufferedRequest;\n\n\t  if (stream._writev && entry && entry.next) {\n\t    // Fast case, write everything using _writev()\n\t    var l = state.bufferedRequestCount;\n\t    var buffer = new Array(l);\n\t    var holder = state.corkedRequestsFree;\n\t    holder.entry = entry;\n\n\t    var count = 0;\n\t    while (entry) {\n\t      buffer[count] = entry;\n\t      entry = entry.next;\n\t      count += 1;\n\t    }\n\n\t    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n\t    // doWrite is almost always async, defer these to save a bit of time\n\t    // as the hot path ends with doWrite\n\t    state.pendingcb++;\n\t    state.lastBufferedRequest = null;\n\t    if (holder.next) {\n\t      state.corkedRequestsFree = holder.next;\n\t      holder.next = null;\n\t    } else {\n\t      state.corkedRequestsFree = new CorkedRequest(state);\n\t    }\n\t  } else {\n\t    // Slow case, write chunks one-by-one\n\t    while (entry) {\n\t      var chunk = entry.chunk;\n\t      var encoding = entry.encoding;\n\t      var cb = entry.callback;\n\t      var len = state.objectMode ? 1 : chunk.length;\n\n\t      doWrite(stream, state, false, len, chunk, encoding, cb);\n\t      entry = entry.next;\n\t      // if we didn't call the onwrite immediately, then\n\t      // it means that we need to wait until it does.\n\t      // also, that means that the chunk and cb are currently\n\t      // being processed, so move the buffer counter past them.\n\t      if (state.writing) {\n\t        break;\n\t      }\n\t    }\n\n\t    if (entry === null) state.lastBufferedRequest = null;\n\t  }\n\n\t  state.bufferedRequestCount = 0;\n\t  state.bufferedRequest = entry;\n\t  state.bufferProcessing = false;\n\t}\n\n\tWritable.prototype._write = function (chunk, encoding, cb) {\n\t  cb(new Error('_write() is not implemented'));\n\t};\n\n\tWritable.prototype._writev = null;\n\n\tWritable.prototype.end = function (chunk, encoding, cb) {\n\t  var state = this._writableState;\n\n\t  if (typeof chunk === 'function') {\n\t    cb = chunk;\n\t    chunk = null;\n\t    encoding = null;\n\t  } else if (typeof encoding === 'function') {\n\t    cb = encoding;\n\t    encoding = null;\n\t  }\n\n\t  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n\t  // .end() fully uncorks\n\t  if (state.corked) {\n\t    state.corked = 1;\n\t    this.uncork();\n\t  }\n\n\t  // ignore unnecessary end() calls.\n\t  if (!state.ending && !state.finished) endWritable(this, state, cb);\n\t};\n\n\tfunction needFinish(state) {\n\t  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n\t}\n\n\tfunction prefinish(stream, state) {\n\t  if (!state.prefinished) {\n\t    state.prefinished = true;\n\t    stream.emit('prefinish');\n\t  }\n\t}\n\n\tfunction finishMaybe(stream, state) {\n\t  var need = needFinish(state);\n\t  if (need) {\n\t    if (state.pendingcb === 0) {\n\t      prefinish(stream, state);\n\t      state.finished = true;\n\t      stream.emit('finish');\n\t    } else {\n\t      prefinish(stream, state);\n\t    }\n\t  }\n\t  return need;\n\t}\n\n\tfunction endWritable(stream, state, cb) {\n\t  state.ending = true;\n\t  finishMaybe(stream, state);\n\t  if (cb) {\n\t    if (state.finished) processNextTick(cb);else stream.once('finish', cb);\n\t  }\n\t  state.ended = true;\n\t  stream.writable = false;\n\t}\n\n\t// It seems a linked list but it is not\n\t// there will be only 2 of these for each stream\n\tfunction CorkedRequest(state) {\n\t  var _this = this;\n\n\t  this.next = null;\n\t  this.entry = null;\n\t  this.finish = function (err) {\n\t    var entry = _this.entry;\n\t    _this.entry = null;\n\t    while (entry) {\n\t      var cb = entry.callback;\n\t      state.pendingcb--;\n\t      cb(err);\n\t      entry = entry.next;\n\t    }\n\t    if (state.corkedRequestsFree) {\n\t      state.corkedRequestsFree.next = _this;\n\t    } else {\n\t      state.corkedRequestsFree = _this;\n\t    }\n\t  };\n\t}\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17), __webpack_require__(50).setImmediate))\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar apply = Function.prototype.apply;\n\n\t// DOM APIs, for completeness\n\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) {\n\t  if (timeout) {\n\t    timeout.close();\n\t  }\n\t};\n\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\n\t// setimmediate attaches itself to the global object\n\t__webpack_require__(51);\n\texports.setImmediate = setImmediate;\n\texports.clearImmediate = clearImmediate;\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n\t    \"use strict\";\n\n\t    if (global.setImmediate) {\n\t        return;\n\t    }\n\n\t    var nextHandle = 1; // Spec says greater than zero\n\t    var tasksByHandle = {};\n\t    var currentlyRunningATask = false;\n\t    var doc = global.document;\n\t    var registerImmediate;\n\n\t    function setImmediate(callback) {\n\t      // Callback can either be a function or a string\n\t      if (typeof callback !== \"function\") {\n\t        callback = new Function(\"\" + callback);\n\t      }\n\t      // Copy function arguments\n\t      var args = new Array(arguments.length - 1);\n\t      for (var i = 0; i < args.length; i++) {\n\t          args[i] = arguments[i + 1];\n\t      }\n\t      // Store and register the task\n\t      var task = { callback: callback, args: args };\n\t      tasksByHandle[nextHandle] = task;\n\t      registerImmediate(nextHandle);\n\t      return nextHandle++;\n\t    }\n\n\t    function clearImmediate(handle) {\n\t        delete tasksByHandle[handle];\n\t    }\n\n\t    function run(task) {\n\t        var callback = task.callback;\n\t        var args = task.args;\n\t        switch (args.length) {\n\t        case 0:\n\t            callback();\n\t            break;\n\t        case 1:\n\t            callback(args[0]);\n\t            break;\n\t        case 2:\n\t            callback(args[0], args[1]);\n\t            break;\n\t        case 3:\n\t            callback(args[0], args[1], args[2]);\n\t            break;\n\t        default:\n\t            callback.apply(undefined, args);\n\t            break;\n\t        }\n\t    }\n\n\t    function runIfPresent(handle) {\n\t        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n\t        // So if we're currently running a task, we'll need to delay this invocation.\n\t        if (currentlyRunningATask) {\n\t            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n\t            // \"too much recursion\" error.\n\t            setTimeout(runIfPresent, 0, handle);\n\t        } else {\n\t            var task = tasksByHandle[handle];\n\t            if (task) {\n\t                currentlyRunningATask = true;\n\t                try {\n\t                    run(task);\n\t                } finally {\n\t                    clearImmediate(handle);\n\t                    currentlyRunningATask = false;\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    function installNextTickImplementation() {\n\t        registerImmediate = function(handle) {\n\t            process.nextTick(function () { runIfPresent(handle); });\n\t        };\n\t    }\n\n\t    function canUsePostMessage() {\n\t        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n\t        // where `global.postMessage` means something completely different and can't be used for this purpose.\n\t        if (global.postMessage && !global.importScripts) {\n\t            var postMessageIsAsynchronous = true;\n\t            var oldOnMessage = global.onmessage;\n\t            global.onmessage = function() {\n\t                postMessageIsAsynchronous = false;\n\t            };\n\t            global.postMessage(\"\", \"*\");\n\t            global.onmessage = oldOnMessage;\n\t            return postMessageIsAsynchronous;\n\t        }\n\t    }\n\n\t    function installPostMessageImplementation() {\n\t        // Installs an event handler on `global` for the `message` event: see\n\t        // * https://developer.mozilla.org/en/DOM/window.postMessage\n\t        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n\t        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\t        var onGlobalMessage = function(event) {\n\t            if (event.source === global &&\n\t                typeof event.data === \"string\" &&\n\t                event.data.indexOf(messagePrefix) === 0) {\n\t                runIfPresent(+event.data.slice(messagePrefix.length));\n\t            }\n\t        };\n\n\t        if (global.addEventListener) {\n\t            global.addEventListener(\"message\", onGlobalMessage, false);\n\t        } else {\n\t            global.attachEvent(\"onmessage\", onGlobalMessage);\n\t        }\n\n\t        registerImmediate = function(handle) {\n\t            global.postMessage(messagePrefix + handle, \"*\");\n\t        };\n\t    }\n\n\t    function installMessageChannelImplementation() {\n\t        var channel = new MessageChannel();\n\t        channel.port1.onmessage = function(event) {\n\t            var handle = event.data;\n\t            runIfPresent(handle);\n\t        };\n\n\t        registerImmediate = function(handle) {\n\t            channel.port2.postMessage(handle);\n\t        };\n\t    }\n\n\t    function installReadyStateChangeImplementation() {\n\t        var html = doc.documentElement;\n\t        registerImmediate = function(handle) {\n\t            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n\t            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\t            var script = doc.createElement(\"script\");\n\t            script.onreadystatechange = function () {\n\t                runIfPresent(handle);\n\t                script.onreadystatechange = null;\n\t                html.removeChild(script);\n\t                script = null;\n\t            };\n\t            html.appendChild(script);\n\t        };\n\t    }\n\n\t    function installSetTimeoutImplementation() {\n\t        registerImmediate = function(handle) {\n\t            setTimeout(runIfPresent, 0, handle);\n\t        };\n\t    }\n\n\t    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\t    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n\t    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n\t    // Don't get fooled by e.g. browserify environments.\n\t    if ({}.toString.call(global.process) === \"[object process]\") {\n\t        // For Node.js before 0.9\n\t        installNextTickImplementation();\n\n\t    } else if (canUsePostMessage()) {\n\t        // For non-IE10 modern browsers\n\t        installPostMessageImplementation();\n\n\t    } else if (global.MessageChannel) {\n\t        // For web workers, where supported\n\t        installMessageChannelImplementation();\n\n\t    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n\t        // For IE 6–8\n\t        installReadyStateChangeImplementation();\n\n\t    } else {\n\t        // For older browsers\n\t        installSetTimeoutImplementation();\n\t    }\n\n\t    attachTo.setImmediate = setImmediate;\n\t    attachTo.clearImmediate = clearImmediate;\n\t}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(17)))\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\n\t/**\n\t * Module exports.\n\t */\n\n\tmodule.exports = deprecate;\n\n\t/**\n\t * Mark that a method should not be used.\n\t * Returns a modified function which warns once by default.\n\t *\n\t * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n\t *\n\t * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n\t * will throw an Error when invoked.\n\t *\n\t * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n\t * will invoke `console.trace()` instead of `console.error()`.\n\t *\n\t * @param {Function} fn - the function to deprecate\n\t * @param {String} msg - the string to print to the console when `fn` is invoked\n\t * @returns {Function} a new \"deprecated\" version of `fn`\n\t * @api public\n\t */\n\n\tfunction deprecate (fn, msg) {\n\t  if (config('noDeprecation')) {\n\t    return fn;\n\t  }\n\n\t  var warned = false;\n\t  function deprecated() {\n\t    if (!warned) {\n\t      if (config('throwDeprecation')) {\n\t        throw new Error(msg);\n\t      } else if (config('traceDeprecation')) {\n\t        console.trace(msg);\n\t      } else {\n\t        console.warn(msg);\n\t      }\n\t      warned = true;\n\t    }\n\t    return fn.apply(this, arguments);\n\t  }\n\n\t  return deprecated;\n\t}\n\n\t/**\n\t * Checks `localStorage` for boolean values for the given `name`.\n\t *\n\t * @param {String} name\n\t * @returns {Boolean}\n\t * @api private\n\t */\n\n\tfunction config (name) {\n\t  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n\t  try {\n\t    if (!global.localStorage) return false;\n\t  } catch (_) {\n\t    return false;\n\t  }\n\t  var val = global.localStorage[name];\n\t  if (null == val) return false;\n\t  return String(val).toLowerCase() === 'true';\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar Buffer = __webpack_require__(24).Buffer;\n\tvar bufferShim = __webpack_require__(44);\n\n\tvar isEncoding = Buffer.isEncoding || function (encoding) {\n\t  encoding = '' + encoding;\n\t  switch (encoding && encoding.toLowerCase()) {\n\t    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n\t      return true;\n\t    default:\n\t      return false;\n\t  }\n\t};\n\n\tfunction _normalizeEncoding(enc) {\n\t  if (!enc) return 'utf8';\n\t  var retried;\n\t  while (true) {\n\t    switch (enc) {\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return 'utf8';\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return 'utf16le';\n\t      case 'latin1':\n\t      case 'binary':\n\t        return 'latin1';\n\t      case 'base64':\n\t      case 'ascii':\n\t      case 'hex':\n\t        return enc;\n\t      default:\n\t        if (retried) return; // undefined\n\t        enc = ('' + enc).toLowerCase();\n\t        retried = true;\n\t    }\n\t  }\n\t};\n\n\t// Do not cache `Buffer.isEncoding` when checking encoding names as some\n\t// modules monkey-patch it to support additional encodings\n\tfunction normalizeEncoding(enc) {\n\t  var nenc = _normalizeEncoding(enc);\n\t  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n\t  return nenc || enc;\n\t}\n\n\t// StringDecoder provides an interface for efficiently splitting a series of\n\t// buffers into a series of JS strings without breaking apart multi-byte\n\t// characters.\n\texports.StringDecoder = StringDecoder;\n\tfunction StringDecoder(encoding) {\n\t  this.encoding = normalizeEncoding(encoding);\n\t  var nb;\n\t  switch (this.encoding) {\n\t    case 'utf16le':\n\t      this.text = utf16Text;\n\t      this.end = utf16End;\n\t      nb = 4;\n\t      break;\n\t    case 'utf8':\n\t      this.fillLast = utf8FillLast;\n\t      nb = 4;\n\t      break;\n\t    case 'base64':\n\t      this.text = base64Text;\n\t      this.end = base64End;\n\t      nb = 3;\n\t      break;\n\t    default:\n\t      this.write = simpleWrite;\n\t      this.end = simpleEnd;\n\t      return;\n\t  }\n\t  this.lastNeed = 0;\n\t  this.lastTotal = 0;\n\t  this.lastChar = bufferShim.allocUnsafe(nb);\n\t}\n\n\tStringDecoder.prototype.write = function (buf) {\n\t  if (buf.length === 0) return '';\n\t  var r;\n\t  var i;\n\t  if (this.lastNeed) {\n\t    r = this.fillLast(buf);\n\t    if (r === undefined) return '';\n\t    i = this.lastNeed;\n\t    this.lastNeed = 0;\n\t  } else {\n\t    i = 0;\n\t  }\n\t  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n\t  return r || '';\n\t};\n\n\tStringDecoder.prototype.end = utf8End;\n\n\t// Returns only complete characters in a Buffer\n\tStringDecoder.prototype.text = utf8Text;\n\n\t// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\n\tStringDecoder.prototype.fillLast = function (buf) {\n\t  if (this.lastNeed <= buf.length) {\n\t    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n\t    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n\t  }\n\t  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n\t  this.lastNeed -= buf.length;\n\t};\n\n\t// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n\t// continuation byte.\n\tfunction utf8CheckByte(byte) {\n\t  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n\t  return -1;\n\t}\n\n\t// Checks at most 3 bytes at the end of a Buffer in order to detect an\n\t// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n\t// needed to complete the UTF-8 character (if applicable) are returned.\n\tfunction utf8CheckIncomplete(self, buf, i) {\n\t  var j = buf.length - 1;\n\t  if (j < i) return 0;\n\t  var nb = utf8CheckByte(buf[j]);\n\t  if (nb >= 0) {\n\t    if (nb > 0) self.lastNeed = nb - 1;\n\t    return nb;\n\t  }\n\t  if (--j < i) return 0;\n\t  nb = utf8CheckByte(buf[j]);\n\t  if (nb >= 0) {\n\t    if (nb > 0) self.lastNeed = nb - 2;\n\t    return nb;\n\t  }\n\t  if (--j < i) return 0;\n\t  nb = utf8CheckByte(buf[j]);\n\t  if (nb >= 0) {\n\t    if (nb > 0) {\n\t      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n\t    }\n\t    return nb;\n\t  }\n\t  return 0;\n\t}\n\n\t// Validates as many continuation bytes for a multi-byte UTF-8 character as\n\t// needed or are available. If we see a non-continuation byte where we expect\n\t// one, we \"replace\" the validated continuation bytes we've seen so far with\n\t// UTF-8 replacement characters ('\\ufffd'), to match v8's UTF-8 decoding\n\t// behavior. The continuation byte check is included three times in the case\n\t// where all of the continuation bytes for a character exist in the same buffer.\n\t// It is also done this way as a slight performance increase instead of using a\n\t// loop.\n\tfunction utf8CheckExtraBytes(self, buf, p) {\n\t  if ((buf[0] & 0xC0) !== 0x80) {\n\t    self.lastNeed = 0;\n\t    return '\\ufffd'.repeat(p);\n\t  }\n\t  if (self.lastNeed > 1 && buf.length > 1) {\n\t    if ((buf[1] & 0xC0) !== 0x80) {\n\t      self.lastNeed = 1;\n\t      return '\\ufffd'.repeat(p + 1);\n\t    }\n\t    if (self.lastNeed > 2 && buf.length > 2) {\n\t      if ((buf[2] & 0xC0) !== 0x80) {\n\t        self.lastNeed = 2;\n\t        return '\\ufffd'.repeat(p + 2);\n\t      }\n\t    }\n\t  }\n\t}\n\n\t// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\n\tfunction utf8FillLast(buf) {\n\t  var p = this.lastTotal - this.lastNeed;\n\t  var r = utf8CheckExtraBytes(this, buf, p);\n\t  if (r !== undefined) return r;\n\t  if (this.lastNeed <= buf.length) {\n\t    buf.copy(this.lastChar, p, 0, this.lastNeed);\n\t    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n\t  }\n\t  buf.copy(this.lastChar, p, 0, buf.length);\n\t  this.lastNeed -= buf.length;\n\t}\n\n\t// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n\t// partial character, the character's bytes are buffered until the required\n\t// number of bytes are available.\n\tfunction utf8Text(buf, i) {\n\t  var total = utf8CheckIncomplete(this, buf, i);\n\t  if (!this.lastNeed) return buf.toString('utf8', i);\n\t  this.lastTotal = total;\n\t  var end = buf.length - (total - this.lastNeed);\n\t  buf.copy(this.lastChar, 0, end);\n\t  return buf.toString('utf8', i, end);\n\t}\n\n\t// For UTF-8, a replacement character for each buffered byte of a (partial)\n\t// character needs to be added to the output.\n\tfunction utf8End(buf) {\n\t  var r = buf && buf.length ? this.write(buf) : '';\n\t  if (this.lastNeed) return r + '\\ufffd'.repeat(this.lastTotal - this.lastNeed);\n\t  return r;\n\t}\n\n\t// UTF-16LE typically needs two bytes per character, but even if we have an even\n\t// number of bytes available, we need to check if we end on a leading/high\n\t// surrogate. In that case, we need to wait for the next two bytes in order to\n\t// decode the last character properly.\n\tfunction utf16Text(buf, i) {\n\t  if ((buf.length - i) % 2 === 0) {\n\t    var r = buf.toString('utf16le', i);\n\t    if (r) {\n\t      var c = r.charCodeAt(r.length - 1);\n\t      if (c >= 0xD800 && c <= 0xDBFF) {\n\t        this.lastNeed = 2;\n\t        this.lastTotal = 4;\n\t        this.lastChar[0] = buf[buf.length - 2];\n\t        this.lastChar[1] = buf[buf.length - 1];\n\t        return r.slice(0, -1);\n\t      }\n\t    }\n\t    return r;\n\t  }\n\t  this.lastNeed = 1;\n\t  this.lastTotal = 2;\n\t  this.lastChar[0] = buf[buf.length - 1];\n\t  return buf.toString('utf16le', i, buf.length - 1);\n\t}\n\n\t// For UTF-16LE we do not explicitly append special replacement characters if we\n\t// end on a partial character, we simply let v8 handle that.\n\tfunction utf16End(buf) {\n\t  var r = buf && buf.length ? this.write(buf) : '';\n\t  if (this.lastNeed) {\n\t    var end = this.lastTotal - this.lastNeed;\n\t    return r + this.lastChar.toString('utf16le', 0, end);\n\t  }\n\t  return r;\n\t}\n\n\tfunction base64Text(buf, i) {\n\t  var n = (buf.length - i) % 3;\n\t  if (n === 0) return buf.toString('base64', i);\n\t  this.lastNeed = 3 - n;\n\t  this.lastTotal = 3;\n\t  if (n === 1) {\n\t    this.lastChar[0] = buf[buf.length - 1];\n\t  } else {\n\t    this.lastChar[0] = buf[buf.length - 2];\n\t    this.lastChar[1] = buf[buf.length - 1];\n\t  }\n\t  return buf.toString('base64', i, buf.length - n);\n\t}\n\n\tfunction base64End(buf) {\n\t  var r = buf && buf.length ? this.write(buf) : '';\n\t  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n\t  return r;\n\t}\n\n\t// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\n\tfunction simpleWrite(buf) {\n\t  return buf.toString(this.encoding);\n\t}\n\n\tfunction simpleEnd(buf) {\n\t  return buf && buf.length ? this.write(buf) : '';\n\t}\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// a transform stream is a readable/writable stream where you do\n\t// something with the data.  Sometimes it's called a \"filter\",\n\t// but that's not a great name for it, since that implies a thing where\n\t// some bits pass through, and others are simply ignored.  (That would\n\t// be a valid example of a transform, of course.)\n\t//\n\t// While the output is causally related to the input, it's not a\n\t// necessarily symmetric or synchronous transformation.  For example,\n\t// a zlib stream might take multiple plain-text writes(), and then\n\t// emit a single compressed chunk some time in the future.\n\t//\n\t// Here's how this works:\n\t//\n\t// The Transform stream has all the aspects of the readable and writable\n\t// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n\t// internally, and returns false if there's a lot of pending writes\n\t// buffered up.  When you call read(), that calls _read(n) until\n\t// there's enough pending readable data buffered up.\n\t//\n\t// In a transform stream, the written data is placed in a buffer.  When\n\t// _read(n) is called, it transforms the queued up data, calling the\n\t// buffered _write cb's as it consumes chunks.  If consuming a single\n\t// written chunk would result in multiple output chunks, then the first\n\t// outputted bit calls the readcb, and subsequent chunks just go into\n\t// the read buffer, and will cause it to emit 'readable' if necessary.\n\t//\n\t// This way, back-pressure is actually determined by the reading side,\n\t// since _read has to be called to start processing a new chunk.  However,\n\t// a pathological inflate type of transform can cause excessive buffering\n\t// here.  For example, imagine a stream where every byte of input is\n\t// interpreted as an integer from 0-255, and then results in that many\n\t// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n\t// 1kb of data being output.  In this case, you could write a very small\n\t// amount of input, and end up with a very large amount of output.  In\n\t// such a pathological inflating mechanism, there'd be no way to tell\n\t// the system to stop doing the transform.  A single 4MB write could\n\t// cause the system to run out of memory.\n\t//\n\t// However, even in such a pathological case, only a single written chunk\n\t// would be consumed, and then the rest would wait (un-transformed) until\n\t// the results of the previous transformed chunk were consumed.\n\n\t'use strict';\n\n\tmodule.exports = Transform;\n\n\tvar Duplex = __webpack_require__(48);\n\n\t/*<replacement>*/\n\tvar util = __webpack_require__(45);\n\tutil.inherits = __webpack_require__(38);\n\t/*</replacement>*/\n\n\tutil.inherits(Transform, Duplex);\n\n\tfunction TransformState(stream) {\n\t  this.afterTransform = function (er, data) {\n\t    return afterTransform(stream, er, data);\n\t  };\n\n\t  this.needTransform = false;\n\t  this.transforming = false;\n\t  this.writecb = null;\n\t  this.writechunk = null;\n\t  this.writeencoding = null;\n\t}\n\n\tfunction afterTransform(stream, er, data) {\n\t  var ts = stream._transformState;\n\t  ts.transforming = false;\n\n\t  var cb = ts.writecb;\n\n\t  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n\t  ts.writechunk = null;\n\t  ts.writecb = null;\n\n\t  if (data !== null && data !== undefined) stream.push(data);\n\n\t  cb(er);\n\n\t  var rs = stream._readableState;\n\t  rs.reading = false;\n\t  if (rs.needReadable || rs.length < rs.highWaterMark) {\n\t    stream._read(rs.highWaterMark);\n\t  }\n\t}\n\n\tfunction Transform(options) {\n\t  if (!(this instanceof Transform)) return new Transform(options);\n\n\t  Duplex.call(this, options);\n\n\t  this._transformState = new TransformState(this);\n\n\t  var stream = this;\n\n\t  // start out asking for a readable event once data is transformed.\n\t  this._readableState.needReadable = true;\n\n\t  // we have implemented the _read method, and done the other things\n\t  // that Readable wants before the first _read call, so unset the\n\t  // sync guard flag.\n\t  this._readableState.sync = false;\n\n\t  if (options) {\n\t    if (typeof options.transform === 'function') this._transform = options.transform;\n\n\t    if (typeof options.flush === 'function') this._flush = options.flush;\n\t  }\n\n\t  // When the writable side finishes, then flush out anything remaining.\n\t  this.once('prefinish', function () {\n\t    if (typeof this._flush === 'function') this._flush(function (er, data) {\n\t      done(stream, er, data);\n\t    });else done(stream);\n\t  });\n\t}\n\n\tTransform.prototype.push = function (chunk, encoding) {\n\t  this._transformState.needTransform = false;\n\t  return Duplex.prototype.push.call(this, chunk, encoding);\n\t};\n\n\t// This is the part where you do stuff!\n\t// override this function in implementation classes.\n\t// 'chunk' is an input chunk.\n\t//\n\t// Call `push(newChunk)` to pass along transformed output\n\t// to the readable side.  You may call 'push' zero or more times.\n\t//\n\t// Call `cb(err)` when you are done with this chunk.  If you pass\n\t// an error, then that'll put the hurt on the whole operation.  If you\n\t// never call cb(), then you'll never get another chunk.\n\tTransform.prototype._transform = function (chunk, encoding, cb) {\n\t  throw new Error('_transform() is not implemented');\n\t};\n\n\tTransform.prototype._write = function (chunk, encoding, cb) {\n\t  var ts = this._transformState;\n\t  ts.writecb = cb;\n\t  ts.writechunk = chunk;\n\t  ts.writeencoding = encoding;\n\t  if (!ts.transforming) {\n\t    var rs = this._readableState;\n\t    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n\t  }\n\t};\n\n\t// Doesn't matter what the args are here.\n\t// _transform does all the work.\n\t// That we got here means that the readable side wants more data.\n\tTransform.prototype._read = function (n) {\n\t  var ts = this._transformState;\n\n\t  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n\t    ts.transforming = true;\n\t    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n\t  } else {\n\t    // mark that we need a transform, so that any data that comes in\n\t    // will get processed, now that we've asked for it.\n\t    ts.needTransform = true;\n\t  }\n\t};\n\n\tfunction done(stream, er, data) {\n\t  if (er) return stream.emit('error', er);\n\n\t  if (data !== null && data !== undefined) stream.push(data);\n\n\t  // if there's nothing in the write buffer, then that means\n\t  // that nothing more will ever be provided\n\t  var ws = stream._writableState;\n\t  var ts = stream._transformState;\n\n\t  if (ws.length) throw new Error('Calling transform done when ws.length != 0');\n\n\t  if (ts.transforming) throw new Error('Calling transform done when still transforming');\n\n\t  return stream.push(null);\n\t}\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// a passthrough stream.\n\t// basically just the most minimal sort of Transform stream.\n\t// Every written chunk gets output as-is.\n\n\t'use strict';\n\n\tmodule.exports = PassThrough;\n\n\tvar Transform = __webpack_require__(54);\n\n\t/*<replacement>*/\n\tvar util = __webpack_require__(45);\n\tutil.inherits = __webpack_require__(38);\n\t/*</replacement>*/\n\n\tutil.inherits(PassThrough, Transform);\n\n\tfunction PassThrough(options) {\n\t  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n\t  Transform.call(this, options);\n\t}\n\n\tPassThrough.prototype._transform = function (chunk, encoding, cb) {\n\t  cb(null, chunk);\n\t};\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Buffer = __webpack_require__(24).Buffer\n\n\tmodule.exports = function (buf) {\n\t\t// If the buffer is backed by a Uint8Array, a faster version will work\n\t\tif (buf instanceof Uint8Array) {\n\t\t\t// If the buffer isn't a subarray, return the underlying ArrayBuffer\n\t\t\tif (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n\t\t\t\treturn buf.buffer\n\t\t\t} else if (typeof buf.buffer.slice === 'function') {\n\t\t\t\t// Otherwise we need to get a proper copy\n\t\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)\n\t\t\t}\n\t\t}\n\n\t\tif (Buffer.isBuffer(buf)) {\n\t\t\t// This is the slow version that will work with any Buffer\n\t\t\t// implementation (even in old browsers)\n\t\t\tvar arrayCopy = new Uint8Array(buf.length)\n\t\t\tvar len = buf.length\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tarrayCopy[i] = buf[i]\n\t\t\t}\n\t\t\treturn arrayCopy.buffer\n\t\t} else {\n\t\t\tthrow new Error('Argument must be a Buffer')\n\t\t}\n\t}\n\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = extend\n\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\tfunction extend() {\n\t    var target = {}\n\n\t    for (var i = 0; i < arguments.length; i++) {\n\t        var source = arguments[i]\n\n\t        for (var key in source) {\n\t            if (hasOwnProperty.call(source, key)) {\n\t                target[key] = source[key]\n\t            }\n\t        }\n\t    }\n\n\t    return target\n\t}\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t  \"100\": \"Continue\",\n\t  \"101\": \"Switching Protocols\",\n\t  \"102\": \"Processing\",\n\t  \"200\": \"OK\",\n\t  \"201\": \"Created\",\n\t  \"202\": \"Accepted\",\n\t  \"203\": \"Non-Authoritative Information\",\n\t  \"204\": \"No Content\",\n\t  \"205\": \"Reset Content\",\n\t  \"206\": \"Partial Content\",\n\t  \"207\": \"Multi-Status\",\n\t  \"208\": \"Already Reported\",\n\t  \"226\": \"IM Used\",\n\t  \"300\": \"Multiple Choices\",\n\t  \"301\": \"Moved Permanently\",\n\t  \"302\": \"Found\",\n\t  \"303\": \"See Other\",\n\t  \"304\": \"Not Modified\",\n\t  \"305\": \"Use Proxy\",\n\t  \"307\": \"Temporary Redirect\",\n\t  \"308\": \"Permanent Redirect\",\n\t  \"400\": \"Bad Request\",\n\t  \"401\": \"Unauthorized\",\n\t  \"402\": \"Payment Required\",\n\t  \"403\": \"Forbidden\",\n\t  \"404\": \"Not Found\",\n\t  \"405\": \"Method Not Allowed\",\n\t  \"406\": \"Not Acceptable\",\n\t  \"407\": \"Proxy Authentication Required\",\n\t  \"408\": \"Request Timeout\",\n\t  \"409\": \"Conflict\",\n\t  \"410\": \"Gone\",\n\t  \"411\": \"Length Required\",\n\t  \"412\": \"Precondition Failed\",\n\t  \"413\": \"Payload Too Large\",\n\t  \"414\": \"URI Too Long\",\n\t  \"415\": \"Unsupported Media Type\",\n\t  \"416\": \"Range Not Satisfiable\",\n\t  \"417\": \"Expectation Failed\",\n\t  \"418\": \"I'm a teapot\",\n\t  \"421\": \"Misdirected Request\",\n\t  \"422\": \"Unprocessable Entity\",\n\t  \"423\": \"Locked\",\n\t  \"424\": \"Failed Dependency\",\n\t  \"425\": \"Unordered Collection\",\n\t  \"426\": \"Upgrade Required\",\n\t  \"428\": \"Precondition Required\",\n\t  \"429\": \"Too Many Requests\",\n\t  \"431\": \"Request Header Fields Too Large\",\n\t  \"451\": \"Unavailable For Legal Reasons\",\n\t  \"500\": \"Internal Server Error\",\n\t  \"501\": \"Not Implemented\",\n\t  \"502\": \"Bad Gateway\",\n\t  \"503\": \"Service Unavailable\",\n\t  \"504\": \"Gateway Timeout\",\n\t  \"505\": \"HTTP Version Not Supported\",\n\t  \"506\": \"Variant Also Negotiates\",\n\t  \"507\": \"Insufficient Storage\",\n\t  \"508\": \"Loop Detected\",\n\t  \"509\": \"Bandwidth Limit Exceeded\",\n\t  \"510\": \"Not Extended\",\n\t  \"511\": \"Network Authentication Required\"\n\t}\n\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t'use strict';\n\n\tvar punycode = __webpack_require__(60);\n\tvar util = __webpack_require__(61);\n\n\texports.parse = urlParse;\n\texports.resolve = urlResolve;\n\texports.resolveObject = urlResolveObject;\n\texports.format = urlFormat;\n\n\texports.Url = Url;\n\n\tfunction Url() {\n\t  this.protocol = null;\n\t  this.slashes = null;\n\t  this.auth = null;\n\t  this.host = null;\n\t  this.port = null;\n\t  this.hostname = null;\n\t  this.hash = null;\n\t  this.search = null;\n\t  this.query = null;\n\t  this.pathname = null;\n\t  this.path = null;\n\t  this.href = null;\n\t}\n\n\t// Reference: RFC 3986, RFC 1808, RFC 2396\n\n\t// define these here so at least they only have to be\n\t// compiled once on the first module load.\n\tvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n\t    portPattern = /:[0-9]*$/,\n\n\t    // Special case for a simple path URL\n\t    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n\t    // RFC 2396: characters reserved for delimiting URLs.\n\t    // We actually just auto-escape these.\n\t    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n\t    // RFC 2396: characters not allowed for various reasons.\n\t    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n\t    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n\t    autoEscape = ['\\''].concat(unwise),\n\t    // Characters that are never ever allowed in a hostname.\n\t    // Note that any invalid chars are also handled, but these\n\t    // are the ones that are *expected* to be seen, so we fast-path\n\t    // them.\n\t    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n\t    hostEndingChars = ['/', '?', '#'],\n\t    hostnameMaxLen = 255,\n\t    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n\t    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n\t    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n\t    unsafeProtocol = {\n\t      'javascript': true,\n\t      'javascript:': true\n\t    },\n\t    // protocols that never have a hostname.\n\t    hostlessProtocol = {\n\t      'javascript': true,\n\t      'javascript:': true\n\t    },\n\t    // protocols that always contain a // bit.\n\t    slashedProtocol = {\n\t      'http': true,\n\t      'https': true,\n\t      'ftp': true,\n\t      'gopher': true,\n\t      'file': true,\n\t      'http:': true,\n\t      'https:': true,\n\t      'ftp:': true,\n\t      'gopher:': true,\n\t      'file:': true\n\t    },\n\t    querystring = __webpack_require__(62);\n\n\tfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n\t  if (url && util.isObject(url) && url instanceof Url) return url;\n\n\t  var u = new Url;\n\t  u.parse(url, parseQueryString, slashesDenoteHost);\n\t  return u;\n\t}\n\n\tUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n\t  if (!util.isString(url)) {\n\t    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n\t  }\n\n\t  // Copy chrome, IE, opera backslash-handling behavior.\n\t  // Back slashes before the query string get converted to forward slashes\n\t  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n\t  var queryIndex = url.indexOf('?'),\n\t      splitter =\n\t          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n\t      uSplit = url.split(splitter),\n\t      slashRegex = /\\\\/g;\n\t  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n\t  url = uSplit.join(splitter);\n\n\t  var rest = url;\n\n\t  // trim before proceeding.\n\t  // This is to support parse stuff like \"  http://foo.com  \\n\"\n\t  rest = rest.trim();\n\n\t  if (!slashesDenoteHost && url.split('#').length === 1) {\n\t    // Try fast path regexp\n\t    var simplePath = simplePathPattern.exec(rest);\n\t    if (simplePath) {\n\t      this.path = rest;\n\t      this.href = rest;\n\t      this.pathname = simplePath[1];\n\t      if (simplePath[2]) {\n\t        this.search = simplePath[2];\n\t        if (parseQueryString) {\n\t          this.query = querystring.parse(this.search.substr(1));\n\t        } else {\n\t          this.query = this.search.substr(1);\n\t        }\n\t      } else if (parseQueryString) {\n\t        this.search = '';\n\t        this.query = {};\n\t      }\n\t      return this;\n\t    }\n\t  }\n\n\t  var proto = protocolPattern.exec(rest);\n\t  if (proto) {\n\t    proto = proto[0];\n\t    var lowerProto = proto.toLowerCase();\n\t    this.protocol = lowerProto;\n\t    rest = rest.substr(proto.length);\n\t  }\n\n\t  // figure out if it's got a host\n\t  // user@server is *always* interpreted as a hostname, and url\n\t  // resolution will treat //foo/bar as host=foo,path=bar because that's\n\t  // how the browser resolves relative URLs.\n\t  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n\t    var slashes = rest.substr(0, 2) === '//';\n\t    if (slashes && !(proto && hostlessProtocol[proto])) {\n\t      rest = rest.substr(2);\n\t      this.slashes = true;\n\t    }\n\t  }\n\n\t  if (!hostlessProtocol[proto] &&\n\t      (slashes || (proto && !slashedProtocol[proto]))) {\n\n\t    // there's a hostname.\n\t    // the first instance of /, ?, ;, or # ends the host.\n\t    //\n\t    // If there is an @ in the hostname, then non-host chars *are* allowed\n\t    // to the left of the last @ sign, unless some host-ending character\n\t    // comes *before* the @-sign.\n\t    // URLs are obnoxious.\n\t    //\n\t    // ex:\n\t    // http://a@b@c/ => user:a@b host:c\n\t    // http://a@b?@c => user:a host:c path:/?@c\n\n\t    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n\t    // Review our test case against browsers more comprehensively.\n\n\t    // find the first instance of any hostEndingChars\n\t    var hostEnd = -1;\n\t    for (var i = 0; i < hostEndingChars.length; i++) {\n\t      var hec = rest.indexOf(hostEndingChars[i]);\n\t      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n\t        hostEnd = hec;\n\t    }\n\n\t    // at this point, either we have an explicit point where the\n\t    // auth portion cannot go past, or the last @ char is the decider.\n\t    var auth, atSign;\n\t    if (hostEnd === -1) {\n\t      // atSign can be anywhere.\n\t      atSign = rest.lastIndexOf('@');\n\t    } else {\n\t      // atSign must be in auth portion.\n\t      // http://a@b/c@d => host:b auth:a path:/c@d\n\t      atSign = rest.lastIndexOf('@', hostEnd);\n\t    }\n\n\t    // Now we have a portion which is definitely the auth.\n\t    // Pull that off.\n\t    if (atSign !== -1) {\n\t      auth = rest.slice(0, atSign);\n\t      rest = rest.slice(atSign + 1);\n\t      this.auth = decodeURIComponent(auth);\n\t    }\n\n\t    // the host is the remaining to the left of the first non-host char\n\t    hostEnd = -1;\n\t    for (var i = 0; i < nonHostChars.length; i++) {\n\t      var hec = rest.indexOf(nonHostChars[i]);\n\t      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n\t        hostEnd = hec;\n\t    }\n\t    // if we still have not hit it, then the entire thing is a host.\n\t    if (hostEnd === -1)\n\t      hostEnd = rest.length;\n\n\t    this.host = rest.slice(0, hostEnd);\n\t    rest = rest.slice(hostEnd);\n\n\t    // pull out port.\n\t    this.parseHost();\n\n\t    // we've indicated that there is a hostname,\n\t    // so even if it's empty, it has to be present.\n\t    this.hostname = this.hostname || '';\n\n\t    // if hostname begins with [ and ends with ]\n\t    // assume that it's an IPv6 address.\n\t    var ipv6Hostname = this.hostname[0] === '[' &&\n\t        this.hostname[this.hostname.length - 1] === ']';\n\n\t    // validate a little.\n\t    if (!ipv6Hostname) {\n\t      var hostparts = this.hostname.split(/\\./);\n\t      for (var i = 0, l = hostparts.length; i < l; i++) {\n\t        var part = hostparts[i];\n\t        if (!part) continue;\n\t        if (!part.match(hostnamePartPattern)) {\n\t          var newpart = '';\n\t          for (var j = 0, k = part.length; j < k; j++) {\n\t            if (part.charCodeAt(j) > 127) {\n\t              // we replace non-ASCII char with a temporary placeholder\n\t              // we need this to make sure size of hostname is not\n\t              // broken by replacing non-ASCII by nothing\n\t              newpart += 'x';\n\t            } else {\n\t              newpart += part[j];\n\t            }\n\t          }\n\t          // we test again with ASCII char only\n\t          if (!newpart.match(hostnamePartPattern)) {\n\t            var validParts = hostparts.slice(0, i);\n\t            var notHost = hostparts.slice(i + 1);\n\t            var bit = part.match(hostnamePartStart);\n\t            if (bit) {\n\t              validParts.push(bit[1]);\n\t              notHost.unshift(bit[2]);\n\t            }\n\t            if (notHost.length) {\n\t              rest = '/' + notHost.join('.') + rest;\n\t            }\n\t            this.hostname = validParts.join('.');\n\t            break;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    if (this.hostname.length > hostnameMaxLen) {\n\t      this.hostname = '';\n\t    } else {\n\t      // hostnames are always lower case.\n\t      this.hostname = this.hostname.toLowerCase();\n\t    }\n\n\t    if (!ipv6Hostname) {\n\t      // IDNA Support: Returns a punycoded representation of \"domain\".\n\t      // It only converts parts of the domain name that\n\t      // have non-ASCII characters, i.e. it doesn't matter if\n\t      // you call it with a domain that already is ASCII-only.\n\t      this.hostname = punycode.toASCII(this.hostname);\n\t    }\n\n\t    var p = this.port ? ':' + this.port : '';\n\t    var h = this.hostname || '';\n\t    this.host = h + p;\n\t    this.href += this.host;\n\n\t    // strip [ and ] from the hostname\n\t    // the host field still retains them, though\n\t    if (ipv6Hostname) {\n\t      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\t      if (rest[0] !== '/') {\n\t        rest = '/' + rest;\n\t      }\n\t    }\n\t  }\n\n\t  // now rest is set to the post-host stuff.\n\t  // chop off any delim chars.\n\t  if (!unsafeProtocol[lowerProto]) {\n\n\t    // First, make 100% sure that any \"autoEscape\" chars get\n\t    // escaped, even if encodeURIComponent doesn't think they\n\t    // need to be.\n\t    for (var i = 0, l = autoEscape.length; i < l; i++) {\n\t      var ae = autoEscape[i];\n\t      if (rest.indexOf(ae) === -1)\n\t        continue;\n\t      var esc = encodeURIComponent(ae);\n\t      if (esc === ae) {\n\t        esc = escape(ae);\n\t      }\n\t      rest = rest.split(ae).join(esc);\n\t    }\n\t  }\n\n\n\t  // chop off from the tail first.\n\t  var hash = rest.indexOf('#');\n\t  if (hash !== -1) {\n\t    // got a fragment string.\n\t    this.hash = rest.substr(hash);\n\t    rest = rest.slice(0, hash);\n\t  }\n\t  var qm = rest.indexOf('?');\n\t  if (qm !== -1) {\n\t    this.search = rest.substr(qm);\n\t    this.query = rest.substr(qm + 1);\n\t    if (parseQueryString) {\n\t      this.query = querystring.parse(this.query);\n\t    }\n\t    rest = rest.slice(0, qm);\n\t  } else if (parseQueryString) {\n\t    // no query string, but parseQueryString still requested\n\t    this.search = '';\n\t    this.query = {};\n\t  }\n\t  if (rest) this.pathname = rest;\n\t  if (slashedProtocol[lowerProto] &&\n\t      this.hostname && !this.pathname) {\n\t    this.pathname = '/';\n\t  }\n\n\t  //to support http.request\n\t  if (this.pathname || this.search) {\n\t    var p = this.pathname || '';\n\t    var s = this.search || '';\n\t    this.path = p + s;\n\t  }\n\n\t  // finally, reconstruct the href based on what has been validated.\n\t  this.href = this.format();\n\t  return this;\n\t};\n\n\t// format a parsed object into a url string\n\tfunction urlFormat(obj) {\n\t  // ensure it's an object, and not a string url.\n\t  // If it's an obj, this is a no-op.\n\t  // this way, you can call url_format() on strings\n\t  // to clean up potentially wonky urls.\n\t  if (util.isString(obj)) obj = urlParse(obj);\n\t  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n\t  return obj.format();\n\t}\n\n\tUrl.prototype.format = function() {\n\t  var auth = this.auth || '';\n\t  if (auth) {\n\t    auth = encodeURIComponent(auth);\n\t    auth = auth.replace(/%3A/i, ':');\n\t    auth += '@';\n\t  }\n\n\t  var protocol = this.protocol || '',\n\t      pathname = this.pathname || '',\n\t      hash = this.hash || '',\n\t      host = false,\n\t      query = '';\n\n\t  if (this.host) {\n\t    host = auth + this.host;\n\t  } else if (this.hostname) {\n\t    host = auth + (this.hostname.indexOf(':') === -1 ?\n\t        this.hostname :\n\t        '[' + this.hostname + ']');\n\t    if (this.port) {\n\t      host += ':' + this.port;\n\t    }\n\t  }\n\n\t  if (this.query &&\n\t      util.isObject(this.query) &&\n\t      Object.keys(this.query).length) {\n\t    query = querystring.stringify(this.query);\n\t  }\n\n\t  var search = this.search || (query && ('?' + query)) || '';\n\n\t  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n\t  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n\t  // unless they had them to begin with.\n\t  if (this.slashes ||\n\t      (!protocol || slashedProtocol[protocol]) && host !== false) {\n\t    host = '//' + (host || '');\n\t    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n\t  } else if (!host) {\n\t    host = '';\n\t  }\n\n\t  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n\t  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n\t  pathname = pathname.replace(/[?#]/g, function(match) {\n\t    return encodeURIComponent(match);\n\t  });\n\t  search = search.replace('#', '%23');\n\n\t  return protocol + host + pathname + search + hash;\n\t};\n\n\tfunction urlResolve(source, relative) {\n\t  return urlParse(source, false, true).resolve(relative);\n\t}\n\n\tUrl.prototype.resolve = function(relative) {\n\t  return this.resolveObject(urlParse(relative, false, true)).format();\n\t};\n\n\tfunction urlResolveObject(source, relative) {\n\t  if (!source) return relative;\n\t  return urlParse(source, false, true).resolveObject(relative);\n\t}\n\n\tUrl.prototype.resolveObject = function(relative) {\n\t  if (util.isString(relative)) {\n\t    var rel = new Url();\n\t    rel.parse(relative, false, true);\n\t    relative = rel;\n\t  }\n\n\t  var result = new Url();\n\t  var tkeys = Object.keys(this);\n\t  for (var tk = 0; tk < tkeys.length; tk++) {\n\t    var tkey = tkeys[tk];\n\t    result[tkey] = this[tkey];\n\t  }\n\n\t  // hash is always overridden, no matter what.\n\t  // even href=\"\" will remove it.\n\t  result.hash = relative.hash;\n\n\t  // if the relative url is empty, then there's nothing left to do here.\n\t  if (relative.href === '') {\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\n\t  // hrefs like //foo/bar always cut to the protocol.\n\t  if (relative.slashes && !relative.protocol) {\n\t    // take everything except the protocol from relative\n\t    var rkeys = Object.keys(relative);\n\t    for (var rk = 0; rk < rkeys.length; rk++) {\n\t      var rkey = rkeys[rk];\n\t      if (rkey !== 'protocol')\n\t        result[rkey] = relative[rkey];\n\t    }\n\n\t    //urlParse appends trailing / to urls like http://www.example.com\n\t    if (slashedProtocol[result.protocol] &&\n\t        result.hostname && !result.pathname) {\n\t      result.path = result.pathname = '/';\n\t    }\n\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\n\t  if (relative.protocol && relative.protocol !== result.protocol) {\n\t    // if it's a known url protocol, then changing\n\t    // the protocol does weird things\n\t    // first, if it's not file:, then we MUST have a host,\n\t    // and if there was a path\n\t    // to begin with, then we MUST have a path.\n\t    // if it is file:, then the host is dropped,\n\t    // because that's known to be hostless.\n\t    // anything else is assumed to be absolute.\n\t    if (!slashedProtocol[relative.protocol]) {\n\t      var keys = Object.keys(relative);\n\t      for (var v = 0; v < keys.length; v++) {\n\t        var k = keys[v];\n\t        result[k] = relative[k];\n\t      }\n\t      result.href = result.format();\n\t      return result;\n\t    }\n\n\t    result.protocol = relative.protocol;\n\t    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n\t      var relPath = (relative.pathname || '').split('/');\n\t      while (relPath.length && !(relative.host = relPath.shift()));\n\t      if (!relative.host) relative.host = '';\n\t      if (!relative.hostname) relative.hostname = '';\n\t      if (relPath[0] !== '') relPath.unshift('');\n\t      if (relPath.length < 2) relPath.unshift('');\n\t      result.pathname = relPath.join('/');\n\t    } else {\n\t      result.pathname = relative.pathname;\n\t    }\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    result.host = relative.host || '';\n\t    result.auth = relative.auth;\n\t    result.hostname = relative.hostname || relative.host;\n\t    result.port = relative.port;\n\t    // to support http.request\n\t    if (result.pathname || result.search) {\n\t      var p = result.pathname || '';\n\t      var s = result.search || '';\n\t      result.path = p + s;\n\t    }\n\t    result.slashes = result.slashes || relative.slashes;\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\n\t  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n\t      isRelAbs = (\n\t          relative.host ||\n\t          relative.pathname && relative.pathname.charAt(0) === '/'\n\t      ),\n\t      mustEndAbs = (isRelAbs || isSourceAbs ||\n\t                    (result.host && relative.pathname)),\n\t      removeAllDots = mustEndAbs,\n\t      srcPath = result.pathname && result.pathname.split('/') || [],\n\t      relPath = relative.pathname && relative.pathname.split('/') || [],\n\t      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n\t  // if the url is a non-slashed url, then relative\n\t  // links like ../.. should be able\n\t  // to crawl up to the hostname, as well.  This is strange.\n\t  // result.protocol has already been set by now.\n\t  // Later on, put the first path part into the host field.\n\t  if (psychotic) {\n\t    result.hostname = '';\n\t    result.port = null;\n\t    if (result.host) {\n\t      if (srcPath[0] === '') srcPath[0] = result.host;\n\t      else srcPath.unshift(result.host);\n\t    }\n\t    result.host = '';\n\t    if (relative.protocol) {\n\t      relative.hostname = null;\n\t      relative.port = null;\n\t      if (relative.host) {\n\t        if (relPath[0] === '') relPath[0] = relative.host;\n\t        else relPath.unshift(relative.host);\n\t      }\n\t      relative.host = null;\n\t    }\n\t    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n\t  }\n\n\t  if (isRelAbs) {\n\t    // it's absolute.\n\t    result.host = (relative.host || relative.host === '') ?\n\t                  relative.host : result.host;\n\t    result.hostname = (relative.hostname || relative.hostname === '') ?\n\t                      relative.hostname : result.hostname;\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    srcPath = relPath;\n\t    // fall through to the dot-handling below.\n\t  } else if (relPath.length) {\n\t    // it's relative\n\t    // throw away the existing file, and take the new path instead.\n\t    if (!srcPath) srcPath = [];\n\t    srcPath.pop();\n\t    srcPath = srcPath.concat(relPath);\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t  } else if (!util.isNullOrUndefined(relative.search)) {\n\t    // just pull out the search.\n\t    // like href='?foo'.\n\t    // Put this after the other two cases because it simplifies the booleans\n\t    if (psychotic) {\n\t      result.hostname = result.host = srcPath.shift();\n\t      //occationaly the auth can get stuck only in host\n\t      //this especially happens in cases like\n\t      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\t      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n\t                       result.host.split('@') : false;\n\t      if (authInHost) {\n\t        result.auth = authInHost.shift();\n\t        result.host = result.hostname = authInHost.shift();\n\t      }\n\t    }\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    //to support http.request\n\t    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n\t      result.path = (result.pathname ? result.pathname : '') +\n\t                    (result.search ? result.search : '');\n\t    }\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\n\t  if (!srcPath.length) {\n\t    // no path at all.  easy.\n\t    // we've already handled the other stuff above.\n\t    result.pathname = null;\n\t    //to support http.request\n\t    if (result.search) {\n\t      result.path = '/' + result.search;\n\t    } else {\n\t      result.path = null;\n\t    }\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\n\t  // if a url ENDs in . or .., then it must get a trailing slash.\n\t  // however, if it ends in anything else non-slashy,\n\t  // then it must NOT get a trailing slash.\n\t  var last = srcPath.slice(-1)[0];\n\t  var hasTrailingSlash = (\n\t      (result.host || relative.host || srcPath.length > 1) &&\n\t      (last === '.' || last === '..') || last === '');\n\n\t  // strip single dots, resolve double dots to parent dir\n\t  // if the path tries to go above the root, `up` ends up > 0\n\t  var up = 0;\n\t  for (var i = srcPath.length; i >= 0; i--) {\n\t    last = srcPath[i];\n\t    if (last === '.') {\n\t      srcPath.splice(i, 1);\n\t    } else if (last === '..') {\n\t      srcPath.splice(i, 1);\n\t      up++;\n\t    } else if (up) {\n\t      srcPath.splice(i, 1);\n\t      up--;\n\t    }\n\t  }\n\n\t  // if the path is allowed to go above the root, restore leading ..s\n\t  if (!mustEndAbs && !removeAllDots) {\n\t    for (; up--; up) {\n\t      srcPath.unshift('..');\n\t    }\n\t  }\n\n\t  if (mustEndAbs && srcPath[0] !== '' &&\n\t      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n\t    srcPath.unshift('');\n\t  }\n\n\t  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n\t    srcPath.push('');\n\t  }\n\n\t  var isAbsolute = srcPath[0] === '' ||\n\t      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n\t  // put the host back\n\t  if (psychotic) {\n\t    result.hostname = result.host = isAbsolute ? '' :\n\t                                    srcPath.length ? srcPath.shift() : '';\n\t    //occationaly the auth can get stuck only in host\n\t    //this especially happens in cases like\n\t    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\t    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n\t                     result.host.split('@') : false;\n\t    if (authInHost) {\n\t      result.auth = authInHost.shift();\n\t      result.host = result.hostname = authInHost.shift();\n\t    }\n\t  }\n\n\t  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n\t  if (mustEndAbs && !isAbsolute) {\n\t    srcPath.unshift('');\n\t  }\n\n\t  if (!srcPath.length) {\n\t    result.pathname = null;\n\t    result.path = null;\n\t  } else {\n\t    result.pathname = srcPath.join('/');\n\t  }\n\n\t  //to support request.http\n\t  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n\t    result.path = (result.pathname ? result.pathname : '') +\n\t                  (result.search ? result.search : '');\n\t  }\n\t  result.auth = relative.auth || result.auth;\n\t  result.slashes = result.slashes || relative.slashes;\n\t  result.href = result.format();\n\t  return result;\n\t};\n\n\tUrl.prototype.parseHost = function() {\n\t  var host = this.host;\n\t  var port = portPattern.exec(host);\n\t  if (port) {\n\t    port = port[0];\n\t    if (port !== ':') {\n\t      this.port = port.substr(1);\n\t    }\n\t    host = host.substr(0, host.length - port.length);\n\t  }\n\t  if (host) this.hostname = host;\n\t};\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */\n\t;(function(root) {\n\n\t\t/** Detect free variables */\n\t\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t\t!exports.nodeType && exports;\n\t\tvar freeModule = typeof module == 'object' && module &&\n\t\t\t!module.nodeType && module;\n\t\tvar freeGlobal = typeof global == 'object' && global;\n\t\tif (\n\t\t\tfreeGlobal.global === freeGlobal ||\n\t\t\tfreeGlobal.window === freeGlobal ||\n\t\t\tfreeGlobal.self === freeGlobal\n\t\t) {\n\t\t\troot = freeGlobal;\n\t\t}\n\n\t\t/**\n\t\t * The `punycode` object.\n\t\t * @name punycode\n\t\t * @type Object\n\t\t */\n\t\tvar punycode,\n\n\t\t/** Highest positive signed 32-bit float value */\n\t\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t\t/** Bootstring parameters */\n\t\tbase = 36,\n\t\ttMin = 1,\n\t\ttMax = 26,\n\t\tskew = 38,\n\t\tdamp = 700,\n\t\tinitialBias = 72,\n\t\tinitialN = 128, // 0x80\n\t\tdelimiter = '-', // '\\x2D'\n\n\t\t/** Regular expressions */\n\t\tregexPunycode = /^xn--/,\n\t\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\t\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t\t/** Error messages */\n\t\terrors = {\n\t\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t\t'invalid-input': 'Invalid input'\n\t\t},\n\n\t\t/** Convenience shortcuts */\n\t\tbaseMinusTMin = base - tMin,\n\t\tfloor = Math.floor,\n\t\tstringFromCharCode = String.fromCharCode,\n\n\t\t/** Temporary variable */\n\t\tkey;\n\n\t\t/*--------------------------------------------------------------------------*/\n\n\t\t/**\n\t\t * A generic error utility function.\n\t\t * @private\n\t\t * @param {String} type The error type.\n\t\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t\t */\n\t\tfunction error(type) {\n\t\t\tthrow RangeError(errors[type]);\n\t\t}\n\n\t\t/**\n\t\t * A generic `Array#map` utility function.\n\t\t * @private\n\t\t * @param {Array} array The array to iterate over.\n\t\t * @param {Function} callback The function that gets called for every array\n\t\t * item.\n\t\t * @returns {Array} A new array of values returned by the callback function.\n\t\t */\n\t\tfunction map(array, fn) {\n\t\t\tvar length = array.length;\n\t\t\tvar result = [];\n\t\t\twhile (length--) {\n\t\t\t\tresult[length] = fn(array[length]);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t\t * addresses.\n\t\t * @private\n\t\t * @param {String} domain The domain name or email address.\n\t\t * @param {Function} callback The function that gets called for every\n\t\t * character.\n\t\t * @returns {Array} A new string of characters returned by the callback\n\t\t * function.\n\t\t */\n\t\tfunction mapDomain(string, fn) {\n\t\t\tvar parts = string.split('@');\n\t\t\tvar result = '';\n\t\t\tif (parts.length > 1) {\n\t\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\t\tresult = parts[0] + '@';\n\t\t\t\tstring = parts[1];\n\t\t\t}\n\t\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\t\tvar labels = string.split('.');\n\t\t\tvar encoded = map(labels, fn).join('.');\n\t\t\treturn result + encoded;\n\t\t}\n\n\t\t/**\n\t\t * Creates an array containing the numeric code points of each Unicode\n\t\t * character in the string. While JavaScript uses UCS-2 internally,\n\t\t * this function will convert a pair of surrogate halves (each of which\n\t\t * UCS-2 exposes as separate characters) into a single code point,\n\t\t * matching UTF-16.\n\t\t * @see `punycode.ucs2.encode`\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode.ucs2\n\t\t * @name decode\n\t\t * @param {String} string The Unicode input string (UCS-2).\n\t\t * @returns {Array} The new array of code points.\n\t\t */\n\t\tfunction ucs2decode(string) {\n\t\t\tvar output = [],\n\t\t\t    counter = 0,\n\t\t\t    length = string.length,\n\t\t\t    value,\n\t\t\t    extra;\n\t\t\twhile (counter < length) {\n\t\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\t\toutput.push(value);\n\t\t\t\t\t\tcounter--;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t\t * Creates a string based on an array of numeric code points.\n\t\t * @see `punycode.ucs2.decode`\n\t\t * @memberOf punycode.ucs2\n\t\t * @name encode\n\t\t * @param {Array} codePoints The array of numeric code points.\n\t\t * @returns {String} The new Unicode string (UCS-2).\n\t\t */\n\t\tfunction ucs2encode(array) {\n\t\t\treturn map(array, function(value) {\n\t\t\t\tvar output = '';\n\t\t\t\tif (value > 0xFFFF) {\n\t\t\t\t\tvalue -= 0x10000;\n\t\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t\t}\n\t\t\t\toutput += stringFromCharCode(value);\n\t\t\t\treturn output;\n\t\t\t}).join('');\n\t\t}\n\n\t\t/**\n\t\t * Converts a basic code point into a digit/integer.\n\t\t * @see `digitToBasic()`\n\t\t * @private\n\t\t * @param {Number} codePoint The basic numeric code point value.\n\t\t * @returns {Number} The numeric value of a basic code point (for use in\n\t\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t\t * the code point does not represent a value.\n\t\t */\n\t\tfunction basicToDigit(codePoint) {\n\t\t\tif (codePoint - 48 < 10) {\n\t\t\t\treturn codePoint - 22;\n\t\t\t}\n\t\t\tif (codePoint - 65 < 26) {\n\t\t\t\treturn codePoint - 65;\n\t\t\t}\n\t\t\tif (codePoint - 97 < 26) {\n\t\t\t\treturn codePoint - 97;\n\t\t\t}\n\t\t\treturn base;\n\t\t}\n\n\t\t/**\n\t\t * Converts a digit/integer into a basic code point.\n\t\t * @see `basicToDigit()`\n\t\t * @private\n\t\t * @param {Number} digit The numeric value of a basic code point.\n\t\t * @returns {Number} The basic code point whose value (when used for\n\t\t * representing integers) is `digit`, which needs to be in the range\n\t\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t\t * used; else, the lowercase form is used. The behavior is undefined\n\t\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t\t */\n\t\tfunction digitToBasic(digit, flag) {\n\t\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t\t// 26..35 map to ASCII 0..9\n\t\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t\t}\n\n\t\t/**\n\t\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t\t * @private\n\t\t */\n\t\tfunction adapt(delta, numPoints, firstTime) {\n\t\t\tvar k = 0;\n\t\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\t\tdelta += floor(delta / numPoints);\n\t\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t\t}\n\t\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t\t}\n\n\t\t/**\n\t\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t\t * symbols.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t\t * @returns {String} The resulting string of Unicode symbols.\n\t\t */\n\t\tfunction decode(input) {\n\t\t\t// Don't use UCS-2\n\t\t\tvar output = [],\n\t\t\t    inputLength = input.length,\n\t\t\t    out,\n\t\t\t    i = 0,\n\t\t\t    n = initialN,\n\t\t\t    bias = initialBias,\n\t\t\t    basic,\n\t\t\t    j,\n\t\t\t    index,\n\t\t\t    oldi,\n\t\t\t    w,\n\t\t\t    k,\n\t\t\t    digit,\n\t\t\t    t,\n\t\t\t    /** Cached calculation results */\n\t\t\t    baseMinusT;\n\n\t\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t\t// the first basic code points to the output.\n\n\t\t\tbasic = input.lastIndexOf(delimiter);\n\t\t\tif (basic < 0) {\n\t\t\t\tbasic = 0;\n\t\t\t}\n\n\t\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t\t// if it's not a basic code point\n\t\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\t\terror('not-basic');\n\t\t\t\t}\n\t\t\t\toutput.push(input.charCodeAt(j));\n\t\t\t}\n\n\t\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t\t// points were copied; start at the beginning otherwise.\n\n\t\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t\t// value at the end to obtain `delta`.\n\t\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\t\terror('invalid-input');\n\t\t\t\t\t}\n\n\t\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\n\t\t\t\t\ti += digit * w;\n\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\t\tif (digit < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\n\t\t\t\t\tw *= baseMinusT;\n\n\t\t\t\t}\n\n\t\t\t\tout = output.length + 1;\n\t\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tn += floor(i / out);\n\t\t\t\ti %= out;\n\n\t\t\t\t// Insert `n` at position `i` of the output\n\t\t\t\toutput.splice(i++, 0, n);\n\n\t\t\t}\n\n\t\t\treturn ucs2encode(output);\n\t\t}\n\n\t\t/**\n\t\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t\t * Punycode string of ASCII-only symbols.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The string of Unicode symbols.\n\t\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t\t */\n\t\tfunction encode(input) {\n\t\t\tvar n,\n\t\t\t    delta,\n\t\t\t    handledCPCount,\n\t\t\t    basicLength,\n\t\t\t    bias,\n\t\t\t    j,\n\t\t\t    m,\n\t\t\t    q,\n\t\t\t    k,\n\t\t\t    t,\n\t\t\t    currentValue,\n\t\t\t    output = [],\n\t\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t\t    inputLength,\n\t\t\t    /** Cached calculation results */\n\t\t\t    handledCPCountPlusOne,\n\t\t\t    baseMinusT,\n\t\t\t    qMinusT;\n\n\t\t\t// Convert the input in UCS-2 to Unicode\n\t\t\tinput = ucs2decode(input);\n\n\t\t\t// Cache the length\n\t\t\tinputLength = input.length;\n\n\t\t\t// Initialize the state\n\t\t\tn = initialN;\n\t\t\tdelta = 0;\n\t\t\tbias = initialBias;\n\n\t\t\t// Handle the basic code points\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue < 0x80) {\n\t\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thandledCPCount = basicLength = output.length;\n\n\t\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t\t// `basicLength` is the number of basic code points.\n\n\t\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\t\tif (basicLength) {\n\t\t\t\toutput.push(delimiter);\n\t\t\t}\n\n\t\t\t// Main encoding loop:\n\t\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t\t// larger one:\n\t\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\t\tcurrentValue = input[j];\n\t\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\t\tm = currentValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t\t// but guard against overflow\n\t\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\t\tn = m;\n\n\t\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\t\tdelta = 0;\n\t\t\t\t\t\t++handledCPCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t++delta;\n\t\t\t\t++n;\n\n\t\t\t}\n\t\t\treturn output.join('');\n\t\t}\n\n\t\t/**\n\t\t * Converts a Punycode string representing a domain name or an email address\n\t\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t\t * it doesn't matter if you call it on a string that has already been\n\t\t * converted to Unicode.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The Punycoded domain name or email address to\n\t\t * convert to Unicode.\n\t\t * @returns {String} The Unicode representation of the given Punycode\n\t\t * string.\n\t\t */\n\t\tfunction toUnicode(input) {\n\t\t\treturn mapDomain(input, function(string) {\n\t\t\t\treturn regexPunycode.test(string)\n\t\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t\t: string;\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Converts a Unicode string representing a domain name or an email address to\n\t\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t\t * ASCII.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The domain name or email address to convert, as a\n\t\t * Unicode string.\n\t\t * @returns {String} The Punycode representation of the given domain name or\n\t\t * email address.\n\t\t */\n\t\tfunction toASCII(input) {\n\t\t\treturn mapDomain(input, function(string) {\n\t\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t\t: string;\n\t\t\t});\n\t\t}\n\n\t\t/*--------------------------------------------------------------------------*/\n\n\t\t/** Define the public API */\n\t\tpunycode = {\n\t\t\t/**\n\t\t\t * A string representing the current Punycode.js version number.\n\t\t\t * @memberOf punycode\n\t\t\t * @type String\n\t\t\t */\n\t\t\t'version': '1.3.2',\n\t\t\t/**\n\t\t\t * An object of methods to convert from JavaScript's internal character\n\t\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t\t * @memberOf punycode\n\t\t\t * @type Object\n\t\t\t */\n\t\t\t'ucs2': {\n\t\t\t\t'decode': ucs2decode,\n\t\t\t\t'encode': ucs2encode\n\t\t\t},\n\t\t\t'decode': decode,\n\t\t\t'encode': encode,\n\t\t\t'toASCII': toASCII,\n\t\t\t'toUnicode': toUnicode\n\t\t};\n\n\t\t/** Expose `punycode` */\n\t\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t\t// like the following:\n\t\tif (\n\t\t\ttrue\n\t\t) {\n\t\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\t\treturn punycode;\n\t\t\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else if (freeExports && freeModule) {\n\t\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\t\tfreeModule.exports = punycode;\n\t\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\t\tfor (key in punycode) {\n\t\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else { // in Rhino or a web browser\n\t\t\troot.punycode = punycode;\n\t\t}\n\n\t}(this));\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)(module), (function() { return this; }())))\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = {\n\t  isString: function(arg) {\n\t    return typeof(arg) === 'string';\n\t  },\n\t  isObject: function(arg) {\n\t    return typeof(arg) === 'object' && arg !== null;\n\t  },\n\t  isNull: function(arg) {\n\t    return arg === null;\n\t  },\n\t  isNullOrUndefined: function(arg) {\n\t    return arg == null;\n\t  }\n\t};\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.decode = exports.parse = __webpack_require__(63);\n\texports.encode = exports.stringify = __webpack_require__(64);\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t'use strict';\n\n\t// If obj.hasOwnProperty has been overridden, then calling\n\t// obj.hasOwnProperty(prop) will break.\n\t// See: https://github.com/joyent/node/issues/1707\n\tfunction hasOwnProperty(obj, prop) {\n\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t}\n\n\tmodule.exports = function(qs, sep, eq, options) {\n\t  sep = sep || '&';\n\t  eq = eq || '=';\n\t  var obj = {};\n\n\t  if (typeof qs !== 'string' || qs.length === 0) {\n\t    return obj;\n\t  }\n\n\t  var regexp = /\\+/g;\n\t  qs = qs.split(sep);\n\n\t  var maxKeys = 1000;\n\t  if (options && typeof options.maxKeys === 'number') {\n\t    maxKeys = options.maxKeys;\n\t  }\n\n\t  var len = qs.length;\n\t  // maxKeys <= 0 means that we should not limit keys count\n\t  if (maxKeys > 0 && len > maxKeys) {\n\t    len = maxKeys;\n\t  }\n\n\t  for (var i = 0; i < len; ++i) {\n\t    var x = qs[i].replace(regexp, '%20'),\n\t        idx = x.indexOf(eq),\n\t        kstr, vstr, k, v;\n\n\t    if (idx >= 0) {\n\t      kstr = x.substr(0, idx);\n\t      vstr = x.substr(idx + 1);\n\t    } else {\n\t      kstr = x;\n\t      vstr = '';\n\t    }\n\n\t    k = decodeURIComponent(kstr);\n\t    v = decodeURIComponent(vstr);\n\n\t    if (!hasOwnProperty(obj, k)) {\n\t      obj[k] = v;\n\t    } else if (Array.isArray(obj[k])) {\n\t      obj[k].push(v);\n\t    } else {\n\t      obj[k] = [obj[k], v];\n\t    }\n\t  }\n\n\t  return obj;\n\t};\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t'use strict';\n\n\tvar stringifyPrimitive = function(v) {\n\t  switch (typeof v) {\n\t    case 'string':\n\t      return v;\n\n\t    case 'boolean':\n\t      return v ? 'true' : 'false';\n\n\t    case 'number':\n\t      return isFinite(v) ? v : '';\n\n\t    default:\n\t      return '';\n\t  }\n\t};\n\n\tmodule.exports = function(obj, sep, eq, name) {\n\t  sep = sep || '&';\n\t  eq = eq || '=';\n\t  if (obj === null) {\n\t    obj = undefined;\n\t  }\n\n\t  if (typeof obj === 'object') {\n\t    return Object.keys(obj).map(function(k) {\n\t      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n\t      if (Array.isArray(obj[k])) {\n\t        return obj[k].map(function(v) {\n\t          return ks + encodeURIComponent(stringifyPrimitive(v));\n\t        }).join(sep);\n\t      } else {\n\t        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n\t      }\n\t    }).join(sep);\n\n\t  }\n\n\t  if (!name) return '';\n\t  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n\t         encodeURIComponent(stringifyPrimitive(obj));\n\t};\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar http = __webpack_require__(35);\n\n\tvar https = module.exports;\n\n\tfor (var key in http) {\n\t    if (http.hasOwnProperty(key)) https[key] = http[key];\n\t};\n\n\thttps.request = function (params, cb) {\n\t    if (!params) params = {};\n\t    params.scheme = 'https';\n\t    params.protocol = 'https:';\n\t    return http.request.call(this, params, cb);\n\t}\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\tvar util = __webpack_require__(16);\n\tvar WebSocket = __webpack_require__(67);\n\tvar EventEmitter = __webpack_require__(21).EventEmitter;\n\tvar thrift = __webpack_require__(15);\n\tvar ttransport = __webpack_require__(68);\n\tvar tprotocol = __webpack_require__(70);\n\n\tvar TBufferedTransport = __webpack_require__(23);\n\tvar TJSONProtocol = __webpack_require__(72);\n\tvar InputBufferUnderrunError = __webpack_require__(29);\n\n\tvar createClient = __webpack_require__(33);\n\n\texports.WSConnection = WSConnection;\n\n\t/**\n\t * @class\n\t * @name WSConnectOptions\n\t * @property {string} transport - The Thrift layered transport to use (TBufferedTransport, etc).\n\t * @property {string} protocol - The Thrift serialization protocol to use (TJSONProtocol, etc.).\n\t * @property {string} path - The URL path to connect to (e.g. \"/\", \"/mySvc\", \"/thrift/quoteSvc\", etc.).\n\t * @property {object} headers - A standard Node.js header hash, an object hash containing key/value\n\t *        pairs where the key is the header name string and the value is the header value string.\n\t * @property {boolean} secure - True causes the connection to use wss, otherwise ws is used.\n\t * @property {object} wsOptions - Options passed on to WebSocket.\n\t * @example\n\t *     //Use a secured websocket connection\n\t *     //  uses the buffered transport layer, uses the JSON protocol and directs RPC traffic\n\t *     //  to wss://thrift.example.com:9090/hello\n\t *     var thrift = require('thrift');\n\t *     var options = {\n\t *        transport: thrift.TBufferedTransport,\n\t *        protocol: thrift.TJSONProtocol,\n\t *        path: \"/hello\",\n\t *        secure: true\n\t *     };\n\t *     var con = thrift.createWSConnection(\"thrift.example.com\", 9090, options);\n\t *     con.open()\n\t *     var client = thrift.createWSClient(myService, connection);\n\t *     client.myServiceFunction();\n\t *     con.close()\n\t */\n\n\t/**\n\t * Initializes a Thrift WSConnection instance (use createWSConnection() rather than\n\t *    instantiating directly).\n\t * @constructor\n\t * @param {string} host - The host name or IP to connect to.\n\t * @param {number} port - The TCP port to connect to.\n\t * @param {WSConnectOptions} options - The configuration options to use.\n\t * @throws {error} Exceptions other than ttransport.InputBufferUnderrunError are rethrown\n\t * @event {error} The \"error\" event is fired when a Node.js error event occurs during\n\t *     request or response processing, in which case the node error is passed on. An \"error\"\n\t *     event may also be fired when the connectison can not map a response back to the\n\t *     appropriate client (an internal error), generating a TApplicationException.\n\t * @classdesc WSConnection objects provide Thrift end point transport\n\t *     semantics implemented using Websockets.\n\t * @see {@link createWSConnection}\n\t */\n\tfunction WSConnection(host, port, options) {\n\t  //Initialize the emitter base object\n\t  EventEmitter.call(this);\n\n\t  //Set configuration\n\t  var self = this;\n\t  this.options = options || {};\n\t  this.host = host;\n\t  this.port = port;\n\t  this.secure = this.options.secure || false;\n\t  this.transport = this.options.transport || TBufferedTransport;\n\t  this.protocol = this.options.protocol || TJSONProtocol;\n\t  this.path = this.options.path;\n\t  this.send_pending = [];\n\n\t  //The sequence map is used to map seqIDs back to the\n\t  //  calling client in multiplexed scenarios\n\t  this.seqId2Service = {};\n\n\t  //Prepare WebSocket options\n\t  this.wsOptions = {\n\t    host: this.host,\n\t    port: this.port || 80,\n\t    path: this.options.path || '/',\n\t    headers: this.options.headers || {}\n\t  };\n\t  for (var attrname in this.options.wsOptions) {\n\t    this.wsOptions[attrname] = this.options.wsOptions[attrname];\n\t  }\n\t};\n\tutil.inherits(WSConnection, EventEmitter);\n\n\tWSConnection.prototype.__reset = function() {\n\t  this.socket = null; //The web socket\n\t  this.send_pending = []; //Buffers/Callback pairs waiting to be sent\n\t};\n\n\tWSConnection.prototype.__onOpen = function() {\n\t  var self = this;\n\t  this.emit(\"open\");\n\t  if (this.send_pending.length > 0) {\n\t    //If the user made calls before the connection was fully\n\t    //open, send them now\n\t    this.send_pending.forEach(function(data) {\n\t      self.socket.send(data);\n\t    });\n\t    this.send_pending = [];\n\t  }\n\t};\n\n\tWSConnection.prototype.__onClose = function(evt) {\n\t  this.emit(\"close\");\n\t  this.__reset();\n\t};\n\n\tWSConnection.prototype.__decodeCallback = function(transport_with_data) {\n\t  var proto = new this.protocol(transport_with_data);\n\t  try {\n\t    while (true) {\n\t      var header = proto.readMessageBegin();\n\t      var dummy_seqid = header.rseqid * -1;\n\t      var client = this.client;\n\t      //The Multiplexed Protocol stores a hash of seqid to service names\n\t      //  in seqId2Service. If the SeqId is found in the hash we need to\n\t      //  lookup the appropriate client for this call.\n\t      //  The client var is a single client object when not multiplexing,\n\t      //  when using multiplexing it is a service name keyed hash of client\n\t      //  objects.\n\t      //NOTE: The 2 way interdependencies between protocols, transports,\n\t      //  connections and clients in the Node.js implementation are irregular\n\t      //  and make the implementation difficult to extend and maintain. We\n\t      //  should bring this stuff inline with typical thrift I/O stack\n\t      //  operation soon.\n\t      //  --ra\n\t      var service_name = this.seqId2Service[header.rseqid];\n\t      if (service_name) {\n\t        client = this.client[service_name];\n\t        delete this.seqId2Service[header.rseqid];\n\t      }\n\t      /*jshint -W083 */\n\t      client._reqs[dummy_seqid] = function(err, success) {\n\t        transport_with_data.commitPosition();\n\t        var clientCallback = client._reqs[header.rseqid];\n\t        delete client._reqs[header.rseqid];\n\t        if (clientCallback) {\n\t          clientCallback(err, success);\n\t        }\n\t      };\n\t      /*jshint +W083 */\n\t      if (client['recv_' + header.fname]) {\n\t        client['recv_' + header.fname](proto, header.mtype, dummy_seqid);\n\t      } else {\n\t        delete client._reqs[dummy_seqid];\n\t        this.emit(\"error\",\n\t          new thrift.TApplicationException(\n\t            thrift.TApplicationExceptionType.WRONG_METHOD_NAME,\n\t            \"Received a response to an unknown RPC function\"));\n\t      }\n\t    }\n\t  } catch (e) {\n\t    if (e instanceof InputBufferUnderrunError) {\n\t      transport_with_data.rollbackPosition();\n\t    } else {\n\t      throw e;\n\t    }\n\t  }\n\t};\n\n\tWSConnection.prototype.__onData = function(data) {\n\t  if (Object.prototype.toString.call(data) == \"[object ArrayBuffer]\") {\n\t    data = new Uint8Array(data);\n\t  }\n\t  var buf = new Buffer(data);\n\t  this.transport.receiver(this.__decodeCallback.bind(this))(buf);\n\n\t};\n\n\tWSConnection.prototype.__onMessage = function(evt) {\n\t  this.__onData(evt.data);\n\t};\n\n\tWSConnection.prototype.__onError = function(evt) {\n\t  this.emit(\"error\", evt);\n\t  this.socket.close();\n\t};\n\n\t/**\n\t * Returns true if the transport is open\n\t * @readonly\n\t * @returns {boolean}\n\t */\n\tWSConnection.prototype.isOpen = function() {\n\t  return this.socket && this.socket.readyState == this.socket.OPEN;\n\t};\n\n\t/**\n\t * Opens the transport connection\n\t */\n\tWSConnection.prototype.open = function() {\n\t  //If OPEN/CONNECTING/CLOSING ignore additional opens\n\t  if (this.socket && this.socket.readyState != this.socket.CLOSED) {\n\t    return;\n\t  }\n\t  //If there is no socket or the socket is closed:\n\t  this.socket = new WebSocket(this.uri(), \"\", this.wsOptions);\n\t  this.socket.binaryType = 'arraybuffer';\n\t  this.socket.onopen = this.__onOpen.bind(this);\n\t  this.socket.onmessage = this.__onMessage.bind(this);\n\t  this.socket.onerror = this.__onError.bind(this);\n\t  this.socket.onclose = this.__onClose.bind(this);\n\t};\n\n\t/**\n\t * Closes the transport connection\n\t */\n\tWSConnection.prototype.close = function() {\n\t  this.socket.close();\n\t};\n\n\t/**\n\t * Return URI for the connection\n\t * @returns {string} URI\n\t */\n\tWSConnection.prototype.uri = function() {\n\t  var schema = this.secure ? 'wss' : 'ws';\n\t  var port = '';\n\t  var path = this.path || '/';\n\t  var host = this.host;\n\n\t  // avoid port if default for schema\n\t  if (this.port && (('wss' == schema && this.port != 443) ||\n\t    ('ws' == schema && this.port != 80))) {\n\t    port = ':' + this.port;\n\t  }\n\n\t  return schema + '://' + host + port + path;\n\t};\n\n\t/**\n\t * Writes Thrift message data to the connection\n\t * @param {Buffer} data - A Node.js Buffer containing the data to write\n\t * @returns {void} No return value.\n\t * @event {error} the \"error\" event is raised upon request failure passing the\n\t *     Node.js error object to the listener.\n\t */\n\tWSConnection.prototype.write = function(data) {\n\t  if (this.isOpen()) {\n\t    //Send data and register a callback to invoke the client callback\n\t    this.socket.send(data);\n\t  } else {\n\t    //Queue the send to go out __onOpen\n\t    this.send_pending.push(data);\n\t  }\n\t};\n\n\t/**\n\t * Creates a new WSConnection object, used by Thrift clients to connect\n\t *    to Thrift HTTP based servers.\n\t * @param {string} host - The host name or IP to connect to.\n\t * @param {number} port - The TCP port to connect to.\n\t * @param {WSConnectOptions} options - The configuration options to use.\n\t * @returns {WSConnection} The connection object.\n\t * @see {@link WSConnectOptions}\n\t */\n\texports.createWSConnection = function(host, port, options) {\n\t  return new WSConnection(host, port, options);\n\t};\n\n\texports.createWSClient = createClient;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports) {\n\n\t\n\t/**\n\t * Module dependencies.\n\t */\n\n\tvar global = (function() { return this; })();\n\n\t/**\n\t * WebSocket constructor.\n\t */\n\n\tvar WebSocket = global.WebSocket || global.MozWebSocket;\n\n\t/**\n\t * Module exports.\n\t */\n\n\tmodule.exports = WebSocket ? ws : null;\n\n\t/**\n\t * WebSocket constructor.\n\t *\n\t * The third `opts` options object gets ignored in web browsers, since it's\n\t * non-standard, and throws a TypeError if passed to the constructor.\n\t * See: https://github.com/einaros/ws/issues/227\n\t *\n\t * @param {String} uri\n\t * @param {Array} protocols (optional)\n\t * @param {Object) opts (optional)\n\t * @api public\n\t */\n\n\tfunction ws(uri, protocols, opts) {\n\t  var instance;\n\t  if (protocols) {\n\t    instance = new WebSocket(uri, protocols);\n\t  } else {\n\t    instance = new WebSocket(uri);\n\t  }\n\t  return instance;\n\t}\n\n\tif (WebSocket) ws.prototype = WebSocket.prototype;\n\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\n\tmodule.exports.TBufferedTransport = __webpack_require__(23);\n\tmodule.exports.TFramedTransport = __webpack_require__(69);\n\tmodule.exports.InputBufferUnderrunError = __webpack_require__(29);\n\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\n\tvar binary = __webpack_require__(28);\n\tvar InputBufferUnderrunError = __webpack_require__(29);\n\n\tmodule.exports = TFramedTransport;\n\n\tfunction TFramedTransport(buffer, callback) {\n\t  this.inBuf = buffer || new Buffer(0);\n\t  this.outBuffers = [];\n\t  this.outCount = 0;\n\t  this.readPos = 0;\n\t  this.onFlush = callback;\n\t};\n\n\tTFramedTransport.receiver = function(callback, seqid) {\n\t  var residual = null;\n\n\t  return function(data) {\n\t    // Prepend any residual data from our previous read\n\t    if (residual) {\n\t      data = Buffer.concat([residual, data]);\n\t      residual = null;\n\t    }\n\n\t    // framed transport\n\t    while (data.length) {\n\t      if (data.length < 4) {\n\t        // Not enough bytes to continue, save and resume on next packet\n\t        residual = data;\n\t        return;\n\t      }\n\t      var frameSize = binary.readI32(data, 0);\n\t      if (data.length < 4 + frameSize) {\n\t        // Not enough bytes to continue, save and resume on next packet\n\t        residual = data;\n\t        return;\n\t      }\n\n\t      var frame = data.slice(4, 4 + frameSize);\n\t      residual = data.slice(4 + frameSize);\n\n\t      callback(new TFramedTransport(frame), seqid);\n\n\t      data = residual;\n\t      residual = null;\n\t    }\n\t  };\n\t};\n\n\tTFramedTransport.prototype.commitPosition = function(){},\n\tTFramedTransport.prototype.rollbackPosition = function(){},\n\n\t  // TODO: Implement open/close support\n\tTFramedTransport.prototype.isOpen = function() {\n\t  return true;\n\t};\n\tTFramedTransport.prototype.open = function() {};\n\tTFramedTransport.prototype.close =  function() {};\n\n\t  // Set the seqid of the message in the client\n\t  // So that callbacks can be found\n\tTFramedTransport.prototype.setCurrSeqId = function(seqid) {\n\t  this._seqid = seqid;\n\t};\n\n\tTFramedTransport.prototype.ensureAvailable = function(len) {\n\t  if (this.readPos + len > this.inBuf.length) {\n\t    throw new InputBufferUnderrunError();\n\t  }\n\t};\n\n\tTFramedTransport.prototype.read = function(len) { // this function will be used for each frames.\n\t  this.ensureAvailable(len);\n\t  var end = this.readPos + len;\n\n\t  if (this.inBuf.length < end) {\n\t    throw new Error('read(' + len + ') failed - not enough data');\n\t  }\n\n\t  var buf = this.inBuf.slice(this.readPos, end);\n\t  this.readPos = end;\n\t  return buf;\n\t};\n\n\tTFramedTransport.prototype.readByte = function() {\n\t  this.ensureAvailable(1);\n\t  return binary.readByte(this.inBuf[this.readPos++]);\n\t};\n\n\tTFramedTransport.prototype.readI16 = function() {\n\t  this.ensureAvailable(2);\n\t  var i16 = binary.readI16(this.inBuf, this.readPos);\n\t  this.readPos += 2;\n\t  return i16;\n\t};\n\n\tTFramedTransport.prototype.readI32 = function() {\n\t  this.ensureAvailable(4);\n\t  var i32 = binary.readI32(this.inBuf, this.readPos);\n\t  this.readPos += 4;\n\t  return i32;\n\t};\n\n\tTFramedTransport.prototype.readDouble = function() {\n\t  this.ensureAvailable(8);\n\t  var d = binary.readDouble(this.inBuf, this.readPos);\n\t  this.readPos += 8;\n\t  return d;\n\t};\n\n\tTFramedTransport.prototype.readString = function(len) {\n\t  this.ensureAvailable(len);\n\t  var str = this.inBuf.toString('utf8', this.readPos, this.readPos + len);\n\t  this.readPos += len;\n\t  return str;\n\t};\n\n\tTFramedTransport.prototype.borrow = function() {\n\t  return {\n\t    buf: this.inBuf,\n\t    readIndex: this.readPos,\n\t    writeIndex: this.inBuf.length\n\t  };\n\t};\n\n\tTFramedTransport.prototype.consume = function(bytesConsumed) {\n\t  this.readPos += bytesConsumed;\n\t};\n\n\tTFramedTransport.prototype.write = function(buf, encoding) {\n\t  if (typeof(buf) === \"string\") {\n\t    buf = new Buffer(buf, encoding || 'utf8');\n\t  }\n\t  this.outBuffers.push(buf);\n\t  this.outCount += buf.length;\n\t};\n\n\tTFramedTransport.prototype.flush = function() {\n\t  // If the seqid of the callback is available pass it to the onFlush\n\t  // Then remove the current seqid\n\t  var seqid = this._seqid;\n\t  this._seqid = null;\n\n\t  var out = new Buffer(this.outCount),\n\t      pos = 0;\n\t  this.outBuffers.forEach(function(buf) {\n\t    buf.copy(out, pos, 0);\n\t    pos += buf.length;\n\t  });\n\n\t  if (this.onFlush) {\n\t    // TODO: optimize this better, allocate one buffer instead of both:\n\t    var msg = new Buffer(out.length + 4);\n\t    binary.writeI32(msg, out.length);\n\t    out.copy(msg, 4, 0, out.length);\n\t    if (this.onFlush) {\n\t      // Passing seqid through this call to get it to the connection\n\t      this.onFlush(msg, seqid);\n\t    }\n\t  }\n\n\t  this.outBuffers = [];\n\t  this.outCount = 0;\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\n\tmodule.exports.TBinaryProtocol = __webpack_require__(30);\n\tmodule.exports.TCompactProtocol = __webpack_require__(71);\n\tmodule.exports.TJSONProtocol = __webpack_require__(72);\n\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\n\tvar log = __webpack_require__(31);\n\tvar Int64 = __webpack_require__(32);\n\tvar Thrift = __webpack_require__(15);\n\tvar Type = Thrift.Type;\n\n\tmodule.exports = TCompactProtocol;\n\n\tvar POW_8 = Math.pow(2, 8);\n\tvar POW_24 = Math.pow(2, 24);\n\tvar POW_32 = Math.pow(2, 32);\n\tvar POW_40 = Math.pow(2, 40);\n\tvar POW_48 = Math.pow(2, 48);\n\tvar POW_52 = Math.pow(2, 52);\n\tvar POW_1022 = Math.pow(2, 1022);\n\n\t/**\n\t * Constructor Function for the Compact Protocol.\n\t * @constructor\n\t * @param {object} [trans] - The underlying transport to read/write.\n\t * @classdesc The Apache Thrift Protocol layer performs serialization\n\t *     of base types, the compact protocol serializes data in binary\n\t *     form with minimal space used for scalar values.\n\t */\n\tfunction TCompactProtocol(trans) {\n\t  this.trans = trans;\n\t  this.lastField_ = [];\n\t  this.lastFieldId_ = 0;\n\t  this.string_limit_ = 0;\n\t  this.string_buf_ = null;\n\t  this.string_buf_size_ = 0;\n\t  this.container_limit_ = 0;\n\t  this.booleanField_ = {\n\t    name: null,\n\t    hasBoolValue: false\n\t  };\n\t  this.boolValue_ = {\n\t    hasBoolValue: false,\n\t    boolValue: false\n\t  };\n\t};\n\n\n\t//\n\t// Compact Protocol Constants\n\t//\n\n\t/**\n\t  * Compact Protocol ID number.\n\t  * @readonly\n\t  * @const {number} PROTOCOL_ID\n\t  */\n\tTCompactProtocol.PROTOCOL_ID = -126;  //1000 0010\n\n\t/**\n\t  * Compact Protocol version number.\n\t  * @readonly\n\t  * @const {number} VERSION_N\n\t  */\n\tTCompactProtocol.VERSION_N = 1;\n\n\t/**\n\t  * Compact Protocol version mask for combining protocol version and message type in one byte.\n\t  * @readonly\n\t  * @const {number} VERSION_MASK\n\t  */\n\tTCompactProtocol.VERSION_MASK = 0x1f; //0001 1111\n\n\t/**\n\t  * Compact Protocol message type mask for combining protocol version and message type in one byte.\n\t  * @readonly\n\t  * @const {number} TYPE_MASK\n\t  */\n\tTCompactProtocol.TYPE_MASK = -32;     //1110 0000\n\n\t/**\n\t  * Compact Protocol message type bits for ensuring message type bit size.\n\t  * @readonly\n\t  * @const {number} TYPE_BITS\n\t  */\n\tTCompactProtocol.TYPE_BITS = 7; //0000 0111\n\n\t/**\n\t  * Compact Protocol message type shift amount for combining protocol version and message type in one byte.\n\t  * @readonly\n\t  * @const {number} TYPE_SHIFT_AMOUNT\n\t  */\n\tTCompactProtocol.TYPE_SHIFT_AMOUNT = 5;\n\n\t/**\n\t * Compact Protocol type IDs used to keep type data within one nibble.\n\t * @readonly\n\t * @property {number}  CT_STOP          - End of a set of fields.\n\t * @property {number}  CT_BOOLEAN_TRUE  - Flag for Boolean field with true value (packed field and value).\n\t * @property {number}  CT_BOOLEAN_FALSE - Flag for Boolean field with false value (packed field and value).\n\t * @property {number}  CT_BYTE          - Signed 8 bit integer.\n\t * @property {number}  CT_I16           - Signed 16 bit integer.\n\t * @property {number}  CT_I32           - Signed 32 bit integer.\n\t * @property {number}  CT_I64           - Signed 64 bit integer (2^53 max in JavaScript).\n\t * @property {number}  CT_DOUBLE        - 64 bit IEEE 854 floating point.\n\t * @property {number}  CT_BINARY        - Array of bytes (used for strings also).\n\t * @property {number}  CT_LIST          - A collection type (unordered).\n\t * @property {number}  CT_SET           - A collection type (unordered and without repeated values).\n\t * @property {number}  CT_MAP           - A collection type (map/associative-array/dictionary).\n\t * @property {number}  CT_STRUCT        - A multifield type.\n\t */\n\tTCompactProtocol.Types = {\n\t  CT_STOP:           0x00,\n\t  CT_BOOLEAN_TRUE:   0x01,\n\t  CT_BOOLEAN_FALSE:  0x02,\n\t  CT_BYTE:           0x03,\n\t  CT_I16:            0x04,\n\t  CT_I32:            0x05,\n\t  CT_I64:            0x06,\n\t  CT_DOUBLE:         0x07,\n\t  CT_BINARY:         0x08,\n\t  CT_LIST:           0x09,\n\t  CT_SET:            0x0A,\n\t  CT_MAP:            0x0B,\n\t  CT_STRUCT:         0x0C\n\t};\n\n\t/**\n\t * Array mapping Compact type IDs to standard Thrift type IDs.\n\t * @readonly\n\t */\n\tTCompactProtocol.TTypeToCType = [\n\t  TCompactProtocol.Types.CT_STOP,         // T_STOP\n\t  0,                                      // unused\n\t  TCompactProtocol.Types.CT_BOOLEAN_TRUE, // T_BOOL\n\t  TCompactProtocol.Types.CT_BYTE,         // T_BYTE\n\t  TCompactProtocol.Types.CT_DOUBLE,       // T_DOUBLE\n\t  0,                                      // unused\n\t  TCompactProtocol.Types.CT_I16,          // T_I16\n\t  0,                                      // unused\n\t  TCompactProtocol.Types.CT_I32,          // T_I32\n\t  0,                                      // unused\n\t  TCompactProtocol.Types.CT_I64,          // T_I64\n\t  TCompactProtocol.Types.CT_BINARY,       // T_STRING\n\t  TCompactProtocol.Types.CT_STRUCT,       // T_STRUCT\n\t  TCompactProtocol.Types.CT_MAP,          // T_MAP\n\t  TCompactProtocol.Types.CT_SET,          // T_SET\n\t  TCompactProtocol.Types.CT_LIST,         // T_LIST\n\t];\n\n\n\t//\n\t// Compact Protocol Utilities\n\t//\n\n\t/**\n\t * Returns the underlying transport layer.\n\t * @return {object} The underlying transport layer.\n\t */TCompactProtocol.prototype.getTransport = function() {\n\t  return this.trans;\n\t};\n\n\t/**\n\t * Lookup a Compact Protocol Type value for a given Thrift Type value.\n\t * N.B. Used only internally.\n\t * @param {number} ttype - Thrift type value\n\t * @returns {number} Compact protocol type value\n\t */\n\tTCompactProtocol.prototype.getCompactType = function(ttype) {\n\t  return TCompactProtocol.TTypeToCType[ttype];\n\t};\n\n\t/**\n\t * Lookup a Thrift Type value for a given Compact Protocol Type value.\n\t * N.B. Used only internally.\n\t * @param {number} type - Compact Protocol type value\n\t * @returns {number} Thrift Type value\n\t */\n\tTCompactProtocol.prototype.getTType = function(type) {\n\t  switch (type) {\n\t    case Type.STOP:\n\t      return Type.STOP;\n\t    case TCompactProtocol.Types.CT_BOOLEAN_FALSE:\n\t    case TCompactProtocol.Types.CT_BOOLEAN_TRUE:\n\t      return Type.BOOL;\n\t    case TCompactProtocol.Types.CT_BYTE:\n\t      return Type.BYTE;\n\t    case TCompactProtocol.Types.CT_I16:\n\t      return Type.I16;\n\t    case TCompactProtocol.Types.CT_I32:\n\t      return Type.I32;\n\t    case TCompactProtocol.Types.CT_I64:\n\t      return Type.I64;\n\t    case TCompactProtocol.Types.CT_DOUBLE:\n\t      return Type.DOUBLE;\n\t    case TCompactProtocol.Types.CT_BINARY:\n\t      return Type.STRING;\n\t    case TCompactProtocol.Types.CT_LIST:\n\t      return Type.LIST;\n\t    case TCompactProtocol.Types.CT_SET:\n\t      return Type.SET;\n\t    case TCompactProtocol.Types.CT_MAP:\n\t      return Type.MAP;\n\t    case TCompactProtocol.Types.CT_STRUCT:\n\t      return Type.STRUCT;\n\t    default:\n\t      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, \"Unknown type: \" + type);\n\t  }\n\t  return Type.STOP;\n\t};\n\n\n\t//\n\t// Compact Protocol write operations\n\t//\n\n\t/**\n\t * Send any buffered bytes to the end point.\n\t */\n\tTCompactProtocol.prototype.flush = function() {\n\t  return this.trans.flush();\n\t};\n\n\t/**\n\t * Writes an RPC message header\n\t * @param {string} name - The method name for the message.\n\t * @param {number} type - The type of message (CALL, REPLY, EXCEPTION, ONEWAY).\n\t * @param {number} seqid - The call sequence number (if any).\n\t */\n\tTCompactProtocol.prototype.writeMessageBegin = function(name, type, seqid) {\n\t  this.writeByte(TCompactProtocol.PROTOCOL_ID);\n\t  this.writeByte((TCompactProtocol.VERSION_N & TCompactProtocol.VERSION_MASK) |\n\t                     ((type << TCompactProtocol.TYPE_SHIFT_AMOUNT) & TCompactProtocol.TYPE_MASK));\n\t  this.writeVarint32(seqid);\n\t  this.writeString(name);\n\n\t  // Record client seqid to find callback again\n\t  if (this._seqid) {\n\t    // TODO better logging log warning\n\t    log.warning('SeqId already set', { 'name': name });\n\t  } else {\n\t    this._seqid = seqid;\n\t    this.trans.setCurrSeqId(seqid);\n\t  }\n\t};\n\n\tTCompactProtocol.prototype.writeMessageEnd = function() {\n\t};\n\n\tTCompactProtocol.prototype.writeStructBegin = function(name) {\n\t  this.lastField_.push(this.lastFieldId_);\n\t  this.lastFieldId_ = 0;\n\t};\n\n\tTCompactProtocol.prototype.writeStructEnd = function() {\n\t  this.lastFieldId_ = this.lastField_.pop();\n\t};\n\n\t/**\n\t * Writes a struct field header\n\t * @param {string} name - The field name (not written with the compact protocol).\n\t * @param {number} type - The field data type (a normal Thrift field Type).\n\t * @param {number} id - The IDL field Id.\n\t */\n\tTCompactProtocol.prototype.writeFieldBegin = function(name, type, id) {\n\t  if (type != Type.BOOL) {\n\t    return this.writeFieldBeginInternal(name, type, id, -1);\n\t  }\n\n\t  this.booleanField_.name = name;\n\t  this.booleanField_.fieldType = type;\n\t  this.booleanField_.fieldId = id;\n\t};\n\n\tTCompactProtocol.prototype.writeFieldEnd = function() {\n\t};\n\n\tTCompactProtocol.prototype.writeFieldStop = function() {\n\t  this.writeByte(TCompactProtocol.Types.CT_STOP);\n\t};\n\n\t/**\n\t * Writes a map collection header\n\t * @param {number} keyType - The Thrift type of the map keys.\n\t * @param {number} valType - The Thrift type of the map values.\n\t * @param {number} size - The number of k/v pairs in the map.\n\t */\n\tTCompactProtocol.prototype.writeMapBegin = function(keyType, valType, size) {\n\t  if (size === 0) {\n\t    this.writeByte(0);\n\t  } else {\n\t    this.writeVarint32(size);\n\t    this.writeByte(this.getCompactType(keyType) << 4 | this.getCompactType(valType));\n\t  }\n\t};\n\n\tTCompactProtocol.prototype.writeMapEnd = function() {\n\t};\n\n\t/**\n\t * Writes a list collection header\n\t * @param {number} elemType - The Thrift type of the list elements.\n\t * @param {number} size - The number of elements in the list.\n\t */\n\tTCompactProtocol.prototype.writeListBegin = function(elemType, size) {\n\t  this.writeCollectionBegin(elemType, size);\n\t};\n\n\tTCompactProtocol.prototype.writeListEnd = function() {\n\t};\n\n\t/**\n\t * Writes a set collection header\n\t * @param {number} elemType - The Thrift type of the set elements.\n\t * @param {number} size - The number of elements in the set.\n\t */\n\tTCompactProtocol.prototype.writeSetBegin = function(elemType, size) {\n\t  this.writeCollectionBegin(elemType, size);\n\t};\n\n\tTCompactProtocol.prototype.writeSetEnd = function() {\n\t};\n\n\tTCompactProtocol.prototype.writeBool = function(value) {\n\t  if (this.booleanField_.name !== null) {\n\t    // we haven't written the field header yet\n\t    this.writeFieldBeginInternal(this.booleanField_.name,\n\t                                 this.booleanField_.fieldType,\n\t                                 this.booleanField_.fieldId,\n\t                                 (value ? TCompactProtocol.Types.CT_BOOLEAN_TRUE\n\t                                          : TCompactProtocol.Types.CT_BOOLEAN_FALSE));\n\t    this.booleanField_.name = null;\n\t  } else {\n\t    // we're not part of a field, so just write the value\n\t    this.writeByte((value ? TCompactProtocol.Types.CT_BOOLEAN_TRUE\n\t                            : TCompactProtocol.Types.CT_BOOLEAN_FALSE));\n\t  }\n\t};\n\n\tTCompactProtocol.prototype.writeByte = function(b) {\n\t  this.trans.write(new Buffer([b]));\n\t};\n\n\tTCompactProtocol.prototype.writeI16 = function(i16) {\n\t  this.writeVarint32(this.i32ToZigzag(i16));\n\t};\n\n\tTCompactProtocol.prototype.writeI32 = function(i32) {\n\t  this.writeVarint32(this.i32ToZigzag(i32));\n\t};\n\n\tTCompactProtocol.prototype.writeI64 = function(i64) {\n\t  this.writeVarint64(this.i64ToZigzag(i64));\n\t};\n\n\t// Little-endian, unlike TBinaryProtocol\n\tTCompactProtocol.prototype.writeDouble = function(v) {\n\t  var buff = new Buffer(8);\n\t  var m, e, c;\n\n\t  buff[7] = (v < 0 ? 0x80 : 0x00);\n\n\t  v = Math.abs(v);\n\t  if (v !== v) {\n\t    // NaN, use QNaN IEEE format\n\t    m = 2251799813685248;\n\t    e = 2047;\n\t  } else if (v === Infinity) {\n\t    m = 0;\n\t    e = 2047;\n\t  } else {\n\t    e = Math.floor(Math.log(v) / Math.LN2);\n\t    c = Math.pow(2, -e);\n\t    if (v * c < 1) {\n\t      e--;\n\t      c *= 2;\n\t    }\n\n\t    if (e + 1023 >= 2047)\n\t    {\n\t      // Overflow\n\t      m = 0;\n\t      e = 2047;\n\t    }\n\t    else if (e + 1023 >= 1)\n\t    {\n\t      // Normalized - term order matters, as Math.pow(2, 52-e) and v*Math.pow(2, 52) can overflow\n\t      m = (v*c-1) * POW_52;\n\t      e += 1023;\n\t    }\n\t    else\n\t    {\n\t      // Denormalized - also catches the '0' case, somewhat by chance\n\t      m = (v * POW_1022) * POW_52;\n\t      e = 0;\n\t    }\n\t  }\n\n\t  buff[6] = (e << 4) & 0xf0;\n\t  buff[7] |= (e >> 4) & 0x7f;\n\n\t  buff[0] = m & 0xff;\n\t  m = Math.floor(m / POW_8);\n\t  buff[1] = m & 0xff;\n\t  m = Math.floor(m / POW_8);\n\t  buff[2] = m & 0xff;\n\t  m = Math.floor(m / POW_8);\n\t  buff[3] = m & 0xff;\n\t  m >>= 8;\n\t  buff[4] = m & 0xff;\n\t  m >>= 8;\n\t  buff[5] = m & 0xff;\n\t  m >>= 8;\n\t  buff[6] |= m & 0x0f;\n\n\t  this.trans.write(buff);\n\t};\n\n\tTCompactProtocol.prototype.writeStringOrBinary = function(name, encoding, arg) {\n\t  if (typeof arg === 'string') {\n\t    this.writeVarint32(Buffer.byteLength(arg, encoding)) ;\n\t    this.trans.write(new Buffer(arg, encoding));\n\t  } else if (arg instanceof Buffer ||\n\t             Object.prototype.toString.call(arg) == '[object Uint8Array]') {\n\t    // Buffers in Node.js under Browserify may extend UInt8Array instead of\n\t    // defining a new object. We detect them here so we can write them\n\t    // correctly\n\t    this.writeVarint32(arg.length);\n\t    this.trans.write(arg);\n\t  } else {\n\t    throw new Error(name + ' called without a string/Buffer argument: ' + arg);\n\t  }\n\t};\n\n\tTCompactProtocol.prototype.writeString = function(arg) {\n\t  this.writeStringOrBinary('writeString', 'utf8', arg);\n\t};\n\n\tTCompactProtocol.prototype.writeBinary = function(arg) {\n\t  this.writeStringOrBinary('writeBinary', 'binary', arg);\n\t};\n\n\n\t//\n\t// Compact Protocol internal write methods\n\t//\n\n\tTCompactProtocol.prototype.writeFieldBeginInternal = function(name,\n\t                                                              fieldType,\n\t                                                              fieldId,\n\t                                                              typeOverride) {\n\t  //If there's a type override, use that.\n\t  var typeToWrite = (typeOverride == -1 ? this.getCompactType(fieldType) : typeOverride);\n\t  //Check if we can delta encode the field id\n\t  if (fieldId > this.lastFieldId_ && fieldId - this.lastFieldId_ <= 15) {\n\t    //Include the type delta with the field ID\n\t    this.writeByte((fieldId - this.lastFieldId_) << 4 | typeToWrite);\n\t  } else {\n\t    //Write separate type and ID values\n\t    this.writeByte(typeToWrite);\n\t    this.writeI16(fieldId);\n\t  }\n\t  this.lastFieldId_ = fieldId;\n\t};\n\n\tTCompactProtocol.prototype.writeCollectionBegin = function(elemType, size) {\n\t  if (size <= 14) {\n\t    //Combine size and type in one byte if possible\n\t    this.writeByte(size << 4 | this.getCompactType(elemType));\n\t  } else {\n\t    this.writeByte(0xf0 | this.getCompactType(elemType));\n\t    this.writeVarint32(size);\n\t  }\n\t};\n\n\t/**\n\t * Write an i32 as a varint. Results in 1-5 bytes on the wire.\n\t */\n\tTCompactProtocol.prototype.writeVarint32 = function(n) {\n\t  var buf = new Buffer(5);\n\t  var wsize = 0;\n\t  while (true) {\n\t    if ((n & ~0x7F) === 0) {\n\t      buf[wsize++] = n;\n\t      break;\n\t    } else {\n\t      buf[wsize++] = ((n & 0x7F) | 0x80);\n\t      n = n >>> 7;\n\t    }\n\t  }\n\t  var wbuf = new Buffer(wsize);\n\t  buf.copy(wbuf,0,0,wsize);\n\t  this.trans.write(wbuf);\n\t};\n\n\t/**\n\t * Write an i64 as a varint. Results in 1-10 bytes on the wire.\n\t * N.B. node-int64 is always big endian\n\t */\n\tTCompactProtocol.prototype.writeVarint64 = function(n) {\n\t  if (typeof n === \"number\"){\n\t    n = new Int64(n);\n\t  }\n\t  if (! (n instanceof Int64)) {\n\t    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, \"Expected Int64 or Number, found: \" + n);\n\t  }\n\n\t  var buf = new Buffer(10);\n\t  var wsize = 0;\n\t  var hi = n.buffer.readUInt32BE(0, true);\n\t  var lo = n.buffer.readUInt32BE(4, true);\n\t  var mask = 0;\n\t  while (true) {\n\t    if (((lo & ~0x7F) === 0) && (hi === 0)) {\n\t      buf[wsize++] = lo;\n\t      break;\n\t    } else {\n\t      buf[wsize++] = ((lo & 0x7F) | 0x80);\n\t      mask = hi << 25;\n\t      lo = lo >>> 7;\n\t      hi = hi >>> 7;\n\t      lo = lo | mask;\n\t    }\n\t  }\n\t  var wbuf = new Buffer(wsize);\n\t  buf.copy(wbuf,0,0,wsize);\n\t  this.trans.write(wbuf);\n\t};\n\n\t/**\n\t * Convert l into a zigzag long. This allows negative numbers to be\n\t * represented compactly as a varint.\n\t */\n\tTCompactProtocol.prototype.i64ToZigzag = function(l) {\n\t  if (typeof l === 'string') {\n\t    l = new Int64(parseInt(l, 10));\n\t  } else if (typeof l === 'number') {\n\t    l = new Int64(l);\n\t  }\n\t  if (! (l instanceof Int64)) {\n\t    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, \"Expected Int64 or Number, found: \" + l);\n\t  }\n\t  var hi = l.buffer.readUInt32BE(0, true);\n\t  var lo = l.buffer.readUInt32BE(4, true);\n\t  var sign = hi >>> 31;\n\t  hi = ((hi << 1) | (lo >>> 31)) ^ ((!!sign) ? 0xFFFFFFFF : 0);\n\t  lo = (lo << 1) ^ ((!!sign) ? 0xFFFFFFFF : 0);\n\t  return new Int64(hi, lo);\n\t};\n\n\t/**\n\t * Convert n into a zigzag int. This allows negative numbers to be\n\t * represented compactly as a varint.\n\t */\n\tTCompactProtocol.prototype.i32ToZigzag = function(n) {\n\t  return (n << 1) ^ ((n & 0x80000000) ? 0xFFFFFFFF : 0);\n\t};\n\n\n\t//\n\t// Compact Protocol read operations\n\t//\n\n\tTCompactProtocol.prototype.readMessageBegin = function() {\n\t  //Read protocol ID\n\t  var protocolId = this.trans.readByte();\n\t  if (protocolId != TCompactProtocol.PROTOCOL_ID) {\n\t    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, \"Bad protocol identifier \" + protocolId);\n\t  }\n\n\t  //Read Version and Type\n\t  var versionAndType = this.trans.readByte();\n\t  var version = (versionAndType & TCompactProtocol.VERSION_MASK);\n\t  if (version != TCompactProtocol.VERSION_N) {\n\t    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.BAD_VERSION, \"Bad protocol version \" + version);\n\t  }\n\t  var type = ((versionAndType >> TCompactProtocol.TYPE_SHIFT_AMOUNT) & TCompactProtocol.TYPE_BITS);\n\n\t  //Read SeqId\n\t  var seqid = this.readVarint32();\n\n\t  //Read name\n\t  var name = this.readString();\n\n\t  return {fname: name, mtype: type, rseqid: seqid};\n\t};\n\n\tTCompactProtocol.prototype.readMessageEnd = function() {\n\t};\n\n\tTCompactProtocol.prototype.readStructBegin = function() {\n\t  this.lastField_.push(this.lastFieldId_);\n\t  this.lastFieldId_ = 0;\n\t  return {fname: ''};\n\t};\n\n\tTCompactProtocol.prototype.readStructEnd = function() {\n\t  this.lastFieldId_ = this.lastField_.pop();\n\t};\n\n\tTCompactProtocol.prototype.readFieldBegin = function() {\n\t  var fieldId = 0;\n\t  var b = this.trans.readByte(b);\n\t  var type = (b & 0x0f);\n\n\t  if (type == TCompactProtocol.Types.CT_STOP) {\n\t    return {fname: null, ftype: Thrift.Type.STOP, fid: 0};\n\t  }\n\n\t  //Mask off the 4 MSB of the type header to check for field id delta.\n\t  var modifier = ((b & 0x000000f0) >>> 4);\n\t  if (modifier === 0) {\n\t    //If not a delta read the field id.\n\t    fieldId = this.readI16();\n\t  } else {\n\t    //Recover the field id from the delta\n\t    fieldId = (this.lastFieldId_ + modifier);\n\t  }\n\t  var fieldType = this.getTType(type);\n\n\t  //Boolean are encoded with the type\n\t  if (type == TCompactProtocol.Types.CT_BOOLEAN_TRUE ||\n\t      type == TCompactProtocol.Types.CT_BOOLEAN_FALSE) {\n\t    this.boolValue_.hasBoolValue = true;\n\t    this.boolValue_.boolValue =\n\t      (type == TCompactProtocol.Types.CT_BOOLEAN_TRUE ? true : false);\n\t  }\n\n\t  //Save the new field for the next delta computation.\n\t  this.lastFieldId_ = fieldId;\n\t  return {fname: null, ftype: fieldType, fid: fieldId};\n\t};\n\n\tTCompactProtocol.prototype.readFieldEnd = function() {\n\t};\n\n\tTCompactProtocol.prototype.readMapBegin = function() {\n\t  var msize = this.readVarint32();\n\t  if (msize < 0) {\n\t    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, \"Negative map size\");\n\t  }\n\n\t  var kvType = 0;\n\t  if (msize !== 0) {\n\t    kvType = this.trans.readByte();\n\t  }\n\n\t  var keyType = this.getTType((kvType & 0xf0) >>> 4);\n\t  var valType = this.getTType(kvType & 0xf);\n\t  return {ktype: keyType, vtype: valType, size: msize};\n\t};\n\n\tTCompactProtocol.prototype.readMapEnd = function() {\n\t};\n\n\tTCompactProtocol.prototype.readListBegin = function() {\n\t  var size_and_type = this.trans.readByte();\n\n\t  var lsize = (size_and_type >>> 4) & 0x0000000f;\n\t  if (lsize == 15) {\n\t    lsize = this.readVarint32();\n\t  }\n\n\t  if (lsize < 0) {\n\t    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, \"Negative list size\");\n\t  }\n\n\t  var elemType = this.getTType(size_and_type & 0x0000000f);\n\n\t  return {etype: elemType, size: lsize};\n\t};\n\n\tTCompactProtocol.prototype.readListEnd = function() {\n\t};\n\n\tTCompactProtocol.prototype.readSetBegin = function() {\n\t  return this.readListBegin();\n\t};\n\n\tTCompactProtocol.prototype.readSetEnd = function() {\n\t};\n\n\tTCompactProtocol.prototype.readBool = function() {\n\t  var value = false;\n\t  var rsize = 0;\n\t  if (this.boolValue_.hasBoolValue === true) {\n\t    value = this.boolValue_.boolValue;\n\t    this.boolValue_.hasBoolValue = false;\n\t  } else {\n\t    var res = this.trans.readByte();\n\t    rsize = res.rsize;\n\t    value = (res.value == TCompactProtocol.Types.CT_BOOLEAN_TRUE);\n\t  }\n\t  return value;\n\t};\n\n\tTCompactProtocol.prototype.readByte = function() {\n\t  return this.trans.readByte();\n\t};\n\n\tTCompactProtocol.prototype.readI16 = function() {\n\t  return this.readI32();\n\t};\n\n\tTCompactProtocol.prototype.readI32 = function() {\n\t  return this.zigzagToI32(this.readVarint32());\n\t};\n\n\tTCompactProtocol.prototype.readI64 = function() {\n\t  return this.zigzagToI64(this.readVarint64());\n\t};\n\n\t// Little-endian, unlike TBinaryProtocol\n\tTCompactProtocol.prototype.readDouble = function() {\n\t  var buff = this.trans.read(8);\n\t  var off = 0;\n\n\t  var signed = buff[off + 7] & 0x80;\n\t  var e = (buff[off+6] & 0xF0) >> 4;\n\t  e += (buff[off+7] & 0x7F) << 4;\n\n\t  var m = buff[off];\n\t  m += buff[off+1] << 8;\n\t  m += buff[off+2] << 16;\n\t  m += buff[off+3] * POW_24;\n\t  m += buff[off+4] * POW_32;\n\t  m += buff[off+5] * POW_40;\n\t  m += (buff[off+6] & 0x0F) * POW_48;\n\n\t  switch (e) {\n\t    case 0:\n\t      e = -1022;\n\t      break;\n\t    case 2047:\n\t      return m ? NaN : (signed ? -Infinity : Infinity);\n\t    default:\n\t      m += POW_52;\n\t      e -= 1023;\n\t  }\n\n\t  if (signed) {\n\t    m *= -1;\n\t  }\n\n\t  return m * Math.pow(2, e - 52);\n\t};\n\n\tTCompactProtocol.prototype.readBinary = function() {\n\t  var size = this.readVarint32();\n\t  if (size === 0) {\n\t    return new Buffer(0);\n\t  }\n\n\t  if (size < 0) {\n\t    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, \"Negative binary size\");\n\t  }\n\t  return this.trans.read(size);\n\t};\n\n\tTCompactProtocol.prototype.readString = function() {\n\t  var size = this.readVarint32();\n\t  // Catch empty string case\n\t  if (size === 0) {\n\t    return \"\";\n\t  }\n\n\t  // Catch error cases\n\t  if (size < 0) {\n\t    throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.NEGATIVE_SIZE, \"Negative string size\");\n\t  }\n\t  return this.trans.readString(size);\n\t};\n\n\n\t//\n\t// Compact Protocol internal read operations\n\t//\n\n\t/**\n\t * Read an i32 from the wire as a varint. The MSB of each byte is set\n\t * if there is another byte to follow. This can read up to 5 bytes.\n\t */\n\tTCompactProtocol.prototype.readVarint32 = function() {\n\t  return this.readVarint64().toNumber();\n\t};\n\n\t/**\n\t * Read an i64 from the wire as a proper varint. The MSB of each byte is set\n\t * if there is another byte to follow. This can read up to 10 bytes.\n\t */\n\tTCompactProtocol.prototype.readVarint64 = function() {\n\t  var rsize = 0;\n\t  var lo = 0;\n\t  var hi = 0;\n\t  var shift = 0;\n\t  while (true) {\n\t    var b = this.trans.readByte();\n\t    rsize ++;\n\t    if (shift <= 25) {\n\t      lo = lo | ((b & 0x7f) << shift);\n\t    } else if (25 < shift && shift < 32) {\n\t      lo = lo | ((b & 0x7f) << shift);\n\t      hi = hi | ((b & 0x7f) >>> (32-shift));\n\t    } else {\n\t      hi = hi | ((b & 0x7f) << (shift-32));\n\t    }\n\t    shift += 7;\n\t    if (!(b & 0x80)) {\n\t      break;\n\t    }\n\t    if (rsize >= 10) {\n\t      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.INVALID_DATA, \"Variable-length int over 10 bytes.\");\n\t    }\n\t  }\n\t  return new Int64(hi, lo);\n\t};\n\n\t/**\n\t * Convert from zigzag int to int.\n\t */\n\tTCompactProtocol.prototype.zigzagToI32 = function(n) {\n\t  return (n >>> 1) ^ (-1 * (n & 1));\n\t};\n\n\t/**\n\t * Convert from zigzag long to long.\n\t */\n\tTCompactProtocol.prototype.zigzagToI64 = function(n) {\n\t  var hi = n.buffer.readUInt32BE(0, true);\n\t  var lo = n.buffer.readUInt32BE(4, true);\n\n\t  var neg = new Int64(hi & 0, lo & 1);\n\t  neg._2scomp();\n\t  var hi_neg = neg.buffer.readUInt32BE(0, true);\n\t  var lo_neg = neg.buffer.readUInt32BE(4, true);\n\n\t  var hi_lo = (hi << 31);\n\t  hi = (hi >>> 1) ^ (hi_neg);\n\t  lo = ((lo >>> 1) | hi_lo) ^ (lo_neg);\n\t  return new Int64(hi, lo);\n\t};\n\n\tTCompactProtocol.prototype.skip = function(type) {\n\t  switch (type) {\n\t    case Type.STOP:\n\t      return;\n\t    case Type.BOOL:\n\t      this.readBool();\n\t      break;\n\t    case Type.BYTE:\n\t      this.readByte();\n\t      break;\n\t    case Type.I16:\n\t      this.readI16();\n\t      break;\n\t    case Type.I32:\n\t      this.readI32();\n\t      break;\n\t    case Type.I64:\n\t      this.readI64();\n\t      break;\n\t    case Type.DOUBLE:\n\t      this.readDouble();\n\t      break;\n\t    case Type.STRING:\n\t      this.readString();\n\t      break;\n\t    case Type.STRUCT:\n\t      this.readStructBegin();\n\t      while (true) {\n\t        var r = this.readFieldBegin();\n\t        if (r.ftype === Type.STOP) {\n\t          break;\n\t        }\n\t        this.skip(r.ftype);\n\t        this.readFieldEnd();\n\t      }\n\t      this.readStructEnd();\n\t      break;\n\t    case Type.MAP:\n\t      var mapBegin = this.readMapBegin();\n\t      for (var i = 0; i < mapBegin.size; ++i) {\n\t        this.skip(mapBegin.ktype);\n\t        this.skip(mapBegin.vtype);\n\t      }\n\t      this.readMapEnd();\n\t      break;\n\t    case Type.SET:\n\t      var setBegin = this.readSetBegin();\n\t      for (var i2 = 0; i2 < setBegin.size; ++i2) {\n\t        this.skip(setBegin.etype);\n\t      }\n\t      this.readSetEnd();\n\t      break;\n\t    case Type.LIST:\n\t      var listBegin = this.readListBegin();\n\t      for (var i3 = 0; i3 < listBegin.size; ++i3) {\n\t        this.skip(listBegin.etype);\n\t      }\n\t      this.readListEnd();\n\t      break;\n\t    default:\n\t      throw new  Error(\"Invalid type: \" + type);\n\t  }\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\n\tvar log = __webpack_require__(31);\n\tvar Int64 = __webpack_require__(32);\n\tvar InputBufferUnderrunError = __webpack_require__(68).InputBufferUnderrunError;\n\tvar Thrift = __webpack_require__(15);\n\tvar Type = Thrift.Type;\n\tvar util = __webpack_require__(16);\n\n\tvar Int64Util = __webpack_require__(73);\n\tvar json_parse = __webpack_require__(74);\n\n\tvar InputBufferUnderrunError = __webpack_require__(29);\n\n\tmodule.exports = TJSONProtocol;\n\n\t/**\n\t * Initializes a Thrift JSON protocol instance.\n\t * @constructor\n\t * @param {Thrift.Transport} trans - The transport to serialize to/from.\n\t * @classdesc Apache Thrift Protocols perform serialization which enables cross\n\t * language RPC. The Protocol type is the JavaScript browser implementation\n\t * of the Apache Thrift TJSONProtocol.\n\t * @example\n\t *     var protocol  = new Thrift.Protocol(transport);\n\t */\n\tfunction TJSONProtocol(trans) {\n\t  this.tstack = [];\n\t  this.tpos = [];\n\t  this.trans = trans;\n\t};\n\n\t/**\n\t * Thrift IDL type Id to string mapping.\n\t * @readonly\n\t * @see {@link Thrift.Type}\n\t */\n\tTJSONProtocol.Type = {};\n\tTJSONProtocol.Type[Type.BOOL] = '\"tf\"';\n\tTJSONProtocol.Type[Type.BYTE] = '\"i8\"';\n\tTJSONProtocol.Type[Type.I16] = '\"i16\"';\n\tTJSONProtocol.Type[Type.I32] = '\"i32\"';\n\tTJSONProtocol.Type[Type.I64] = '\"i64\"';\n\tTJSONProtocol.Type[Type.DOUBLE] = '\"dbl\"';\n\tTJSONProtocol.Type[Type.STRUCT] = '\"rec\"';\n\tTJSONProtocol.Type[Type.STRING] = '\"str\"';\n\tTJSONProtocol.Type[Type.MAP] = '\"map\"';\n\tTJSONProtocol.Type[Type.LIST] = '\"lst\"';\n\tTJSONProtocol.Type[Type.SET] = '\"set\"';\n\n\t/**\n\t * Thrift IDL type string to Id mapping.\n\t * @readonly\n\t * @see {@link Thrift.Type}\n\t */\n\tTJSONProtocol.RType = {};\n\tTJSONProtocol.RType.tf = Type.BOOL;\n\tTJSONProtocol.RType.i8 = Type.BYTE;\n\tTJSONProtocol.RType.i16 = Type.I16;\n\tTJSONProtocol.RType.i32 = Type.I32;\n\tTJSONProtocol.RType.i64 = Type.I64;\n\tTJSONProtocol.RType.dbl = Type.DOUBLE;\n\tTJSONProtocol.RType.rec = Type.STRUCT;\n\tTJSONProtocol.RType.str = Type.STRING;\n\tTJSONProtocol.RType.map = Type.MAP;\n\tTJSONProtocol.RType.lst = Type.LIST;\n\tTJSONProtocol.RType.set = Type.SET;\n\n\t/**\n\t * The TJSONProtocol version number.\n\t * @readonly\n\t * @const {number} Version\n\t * @memberof Thrift.Protocol\n\t */\n\tTJSONProtocol.Version = 1;\n\n\tTJSONProtocol.prototype.flush = function() {\n\t  this.writeToTransportIfStackIsFlushable();\n\t  return this.trans.flush();\n\t};\n\n\tTJSONProtocol.prototype.writeToTransportIfStackIsFlushable = function() {\n\t  if (this.tstack.length === 1) {\n\t    this.trans.write(this.tstack.pop());\n\t  }\n\t};\n\n\t/**\n\t * Serializes the beginning of a Thrift RPC message.\n\t * @param {string} name - The service method to call.\n\t * @param {Thrift.MessageType} messageType - The type of method call.\n\t * @param {number} seqid - The sequence number of this call (always 0 in Apache Thrift).\n\t */\n\tTJSONProtocol.prototype.writeMessageBegin = function(name, messageType, seqid) {\n\t  this.tstack.push([TJSONProtocol.Version, '\"' + name + '\"', messageType, seqid]);\n\t};\n\n\t/**\n\t * Serializes the end of a Thrift RPC message.\n\t */\n\tTJSONProtocol.prototype.writeMessageEnd = function() {\n\t  var obj = this.tstack.pop();\n\n\t  this.wobj = this.tstack.pop();\n\t  this.wobj.push(obj);\n\n\t  this.wbuf = '[' + this.wobj.join(',') + ']';\n\n\t  // we assume there is nothing more to come so we write\n\t  this.trans.write(this.wbuf);\n\t};\n\n\t/**\n\t * Serializes the beginning of a struct.\n\t * @param {string} name - The name of the struct.\n\t */\n\tTJSONProtocol.prototype.writeStructBegin = function(name) {\n\t  this.tpos.push(this.tstack.length);\n\t  this.tstack.push({});\n\t};\n\n\t/**\n\t * Serializes the end of a struct.\n\t */\n\tTJSONProtocol.prototype.writeStructEnd = function() {\n\t  var p = this.tpos.pop();\n\t  var struct = this.tstack[p];\n\t  var str = '{';\n\t  var first = true;\n\t  for (var key in struct) {\n\t    if (first) {\n\t      first = false;\n\t    } else {\n\t      str += ',';\n\t    }\n\n\t    str += key + ':' + struct[key];\n\t  }\n\n\t  str += '}';\n\t  this.tstack[p] = str;\n\n\t  this.writeToTransportIfStackIsFlushable();\n\t};\n\n\t/**\n\t * Serializes the beginning of a struct field.\n\t * @param {string} name - The name of the field.\n\t * @param {Thrift.Protocol.Type} fieldType - The data type of the field.\n\t * @param {number} fieldId - The field's unique identifier.\n\t */\n\tTJSONProtocol.prototype.writeFieldBegin = function(name, fieldType, fieldId) {\n\t  this.tpos.push(this.tstack.length);\n\t  this.tstack.push({ 'fieldId': '\"' +\n\t    fieldId + '\"', 'fieldType': TJSONProtocol.Type[fieldType]\n\t  });\n\t};\n\n\t/**\n\t * Serializes the end of a field.\n\t */\n\tTJSONProtocol.prototype.writeFieldEnd = function() {\n\t  var value = this.tstack.pop();\n\t  var fieldInfo = this.tstack.pop();\n\n\t  if (':' + value === \":[object Object]\") {\n\t    this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' +\n\t      fieldInfo.fieldType + ':' + JSON.stringify(value) + '}';\n\t  } else {\n\t    this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' +\n\t      fieldInfo.fieldType + ':' + value + '}';\n\t  }\n\t  this.tpos.pop();\n\n\t  this.writeToTransportIfStackIsFlushable();\n\t};\n\n\t/**\n\t * Serializes the end of the set of fields for a struct.\n\t */\n\tTJSONProtocol.prototype.writeFieldStop = function() {\n\t};\n\n\t/**\n\t * Serializes the beginning of a map collection.\n\t * @param {Thrift.Type} keyType - The data type of the key.\n\t * @param {Thrift.Type} valType - The data type of the value.\n\t * @param {number} [size] - The number of elements in the map (ignored).\n\t */\n\tTJSONProtocol.prototype.writeMapBegin = function(keyType, valType, size) {\n\t  //size is invalid, we'll set it on end.\n\t  this.tpos.push(this.tstack.length);\n\t  this.tstack.push([TJSONProtocol.Type[keyType], TJSONProtocol.Type[valType], 0]);\n\t};\n\n\t/**\n\t * Serializes the end of a map.\n\t */\n\tTJSONProtocol.prototype.writeMapEnd = function() {\n\t  var p = this.tpos.pop();\n\n\t  if (p == this.tstack.length) {\n\t    return;\n\t  }\n\n\t  if ((this.tstack.length - p - 1) % 2 !== 0) {\n\t    this.tstack.push('');\n\t  }\n\n\t  var size = (this.tstack.length - p - 1) / 2;\n\n\t  this.tstack[p][this.tstack[p].length - 1] = size;\n\n\t  var map = '}';\n\t  var first = true;\n\t  while (this.tstack.length > p + 1) {\n\t    var v = this.tstack.pop();\n\t    var k = this.tstack.pop();\n\t    if (first) {\n\t      first = false;\n\t    } else {\n\t      map = ',' + map;\n\t    }\n\n\t    if (! isNaN(k)) { k = '\"' + k + '\"'; } //json \"keys\" need to be strings\n\t    map = k + ':' + v + map;\n\t  }\n\t  map = '{' + map;\n\n\t  this.tstack[p].push(map);\n\t  this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n\n\t  this.writeToTransportIfStackIsFlushable();\n\t};\n\n\t/**\n\t * Serializes the beginning of a list collection.\n\t * @param {Thrift.Type} elemType - The data type of the elements.\n\t * @param {number} size - The number of elements in the list.\n\t */\n\tTJSONProtocol.prototype.writeListBegin = function(elemType, size) {\n\t  this.tpos.push(this.tstack.length);\n\t  this.tstack.push([TJSONProtocol.Type[elemType], size]);\n\t};\n\n\t/**\n\t * Serializes the end of a list.\n\t */\n\tTJSONProtocol.prototype.writeListEnd = function() {\n\t  var p = this.tpos.pop();\n\n\t  while (this.tstack.length > p + 1) {\n\t    var tmpVal = this.tstack[p + 1];\n\t    this.tstack.splice(p + 1, 1);\n\t    this.tstack[p].push(tmpVal);\n\t  }\n\n\t  this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n\n\t  this.writeToTransportIfStackIsFlushable();\n\t};\n\n\t/**\n\t * Serializes the beginning of a set collection.\n\t * @param {Thrift.Type} elemType - The data type of the elements.\n\t * @param {number} size - The number of elements in the list.\n\t */\n\tTJSONProtocol.prototype.writeSetBegin = function(elemType, size) {\n\t    this.tpos.push(this.tstack.length);\n\t    this.tstack.push([TJSONProtocol.Type[elemType], size]);\n\t};\n\n\t/**\n\t * Serializes the end of a set.\n\t */\n\tTJSONProtocol.prototype.writeSetEnd = function() {\n\t  var p = this.tpos.pop();\n\n\t  while (this.tstack.length > p + 1) {\n\t    var tmpVal = this.tstack[p + 1];\n\t    this.tstack.splice(p + 1, 1);\n\t    this.tstack[p].push(tmpVal);\n\t  }\n\n\t  this.tstack[p] = '[' + this.tstack[p].join(',') + ']';\n\n\t  this.writeToTransportIfStackIsFlushable();\n\t};\n\n\t/** Serializes a boolean */\n\tTJSONProtocol.prototype.writeBool = function(bool) {\n\t  this.tstack.push(bool ? 1 : 0);\n\t};\n\n\t/** Serializes a number */\n\tTJSONProtocol.prototype.writeByte = function(byte) {\n\t  this.tstack.push(byte);\n\t};\n\n\t/** Serializes a number */\n\tTJSONProtocol.prototype.writeI16 = function(i16) {\n\t  this.tstack.push(i16);\n\t};\n\n\t/** Serializes a number */\n\tTJSONProtocol.prototype.writeI32 = function(i32) {\n\t  this.tstack.push(i32);\n\t};\n\n\t/** Serializes a number */\n\tTJSONProtocol.prototype.writeI64 = function(i64) {\n\t  if (i64 instanceof Int64) {\n\t    this.tstack.push(Int64Util.toDecimalString(i64));\n\t  } else {\n\t    this.tstack.push(i64);\n\t  }\n\t};\n\n\t/** Serializes a number */\n\tTJSONProtocol.prototype.writeDouble = function(dub) {\n\t  this.tstack.push(dub);\n\t};\n\n\t/** Serializes a string */\n\tTJSONProtocol.prototype.writeString = function(arg) {\n\t  // We do not encode uri components for wire transfer:\n\t  if (arg === null) {\n\t      this.tstack.push(null);\n\t  } else {\n\t      if (typeof arg === 'string') {\n\t        var str = arg;\n\t      } else if (arg instanceof Buffer) {\n\t        var str = arg.toString('utf8');\n\t      } else {\n\t        throw new Error('writeString called without a string/Buffer argument: ' + arg);\n\t      }\n\n\t      // concat may be slower than building a byte buffer\n\t      var escapedString = '';\n\t      for (var i = 0; i < str.length; i++) {\n\t          var ch = str.charAt(i);      // a single double quote: \"\n\t          if (ch === '\\\"') {\n\t              escapedString += '\\\\\\\"'; // write out as: \\\"\n\t          } else if (ch === '\\\\') {    // a single backslash: \\\n\t              escapedString += '\\\\\\\\'; // write out as: \\\\\n\t          /* Currently escaped forward slashes break TJSONProtocol.\n\t           * As it stands, we can simply pass forward slashes into\n\t           * our strings across the wire without being escaped.\n\t           * I think this is the protocol's bug, not thrift.js\n\t           * } else if(ch === '/') {   // a single forward slash: /\n\t           *  escapedString += '\\\\/';  // write out as \\/\n\t           * }\n\t           */\n\t          } else if (ch === '\\b') {    // a single backspace: invisible\n\t              escapedString += '\\\\b';  // write out as: \\b\"\n\t          } else if (ch === '\\f') {    // a single formfeed: invisible\n\t              escapedString += '\\\\f';  // write out as: \\f\"\n\t          } else if (ch === '\\n') {    // a single newline: invisible\n\t              escapedString += '\\\\n';  // write out as: \\n\"\n\t          } else if (ch === '\\r') {    // a single return: invisible\n\t              escapedString += '\\\\r';  // write out as: \\r\"\n\t          } else if (ch === '\\t') {    // a single tab: invisible\n\t              escapedString += '\\\\t';  // write out as: \\t\"\n\t          } else {\n\t              escapedString += ch;     // Else it need not be escaped\n\t          }\n\t      }\n\t      this.tstack.push('\"' + escapedString + '\"');\n\t  }\n\t};\n\n\t/** Serializes a string */\n\tTJSONProtocol.prototype.writeBinary = function(arg) {\n\t  if (typeof arg === 'string') {\n\t    var buf = new Buffer(arg, 'binary');\n\t  } else if (arg instanceof Buffer ||\n\t             Object.prototype.toString.call(arg) == '[object Uint8Array]')  {\n\t    var buf = arg;\n\t  } else {\n\t    throw new Error('writeBinary called without a string/Buffer argument: ' + arg);\n\t  }\n\t  this.tstack.push('\"' + buf.toString('base64') + '\"');\n\t};\n\n\t/**\n\t * @class\n\t * @name AnonReadMessageBeginReturn\n\t * @property {string} fname - The name of the service method.\n\t * @property {Thrift.MessageType} mtype - The type of message call.\n\t * @property {number} rseqid - The sequence number of the message (0 in Thrift RPC).\n\t */\n\t/**\n\t * Deserializes the beginning of a message.\n\t * @returns {AnonReadMessageBeginReturn}\n\t */\n\tTJSONProtocol.prototype.readMessageBegin = function() {\n\t  this.rstack = [];\n\t  this.rpos = [];\n\n\t  //Borrow the inbound transport buffer and ensure data is present/consistent\n\t  var transBuf = this.trans.borrow();\n\t  if (transBuf.readIndex >= transBuf.writeIndex) {\n\t    throw new InputBufferUnderrunError();\n\t  }\n\t  var cursor = transBuf.readIndex;\n\n\t  if (transBuf.buf[cursor] !== 0x5B) { //[\n\t    throw new Error(\"Malformed JSON input, no opening bracket\");\n\t  }\n\n\t  //Parse a single message (there may be several in the buffer)\n\t  //  TODO: Handle characters using multiple code units\n\t  cursor++;\n\t  var openBracketCount = 1;\n\t  var inString = false;\n\t  for (; cursor < transBuf.writeIndex; cursor++) {\n\t    var chr = transBuf.buf[cursor];\n\t    //we use hexa charcode here because data[i] returns an int and not a char\n\t    if (inString) {\n\t      if (chr === 0x22) { //\"\n\t        inString = false;\n\t      } else if (chr === 0x5C) { //\\\n\t        //escaped character, skip\n\t        cursor += 1;\n\t      }\n\t    } else {\n\t      if (chr === 0x5B) { //[\n\t        openBracketCount += 1;\n\t      } else if (chr === 0x5D) { //]\n\t        openBracketCount -= 1;\n\t        if (openBracketCount === 0) {\n\t          //end of json message detected\n\t          break;\n\t        }\n\t      } else if (chr === 0x22) { //\"\n\t        inString = true;\n\t      }\n\t    }\n\t  }\n\n\t  if (openBracketCount !== 0) {\n\t    // Missing closing bracket. Can be buffer underrun.\n\t    throw new InputBufferUnderrunError();\n\t  }\n\n\t  //Reconstitute the JSON object and conume the necessary bytes\n\t  this.robj = json_parse(transBuf.buf.slice(transBuf.readIndex, cursor+1).toString());\n\t  this.trans.consume(cursor + 1 - transBuf.readIndex);\n\n\t  //Verify the protocol version\n\t  var version = this.robj.shift();\n\t  if (version != TJSONProtocol.Version) {\n\t    throw new Error('Wrong thrift protocol version: ' + version);\n\t  }\n\n\t  //Objectify the thrift message {name/type/sequence-number} for return\n\t  // and then save the JSON object in rstack\n\t  var r = {};\n\t  r.fname = this.robj.shift();\n\t  r.mtype = this.robj.shift();\n\t  r.rseqid = this.robj.shift();\n\t  this.rstack.push(this.robj.shift());\n\t  return r;\n\t};\n\n\t/** Deserializes the end of a message. */\n\tTJSONProtocol.prototype.readMessageEnd = function() {\n\t};\n\n\t/**\n\t * Deserializes the beginning of a struct.\n\t * @param {string} [name] - The name of the struct (ignored)\n\t * @returns {object} - An object with an empty string fname property\n\t */\n\tTJSONProtocol.prototype.readStructBegin = function() {\n\t  var r = {};\n\t  r.fname = '';\n\n\t  //incase this is an array of structs\n\t  if (this.rstack[this.rstack.length - 1] instanceof Array) {\n\t    this.rstack.push(this.rstack[this.rstack.length - 1].shift());\n\t  }\n\n\t  return r;\n\t};\n\n\t/** Deserializes the end of a struct. */\n\tTJSONProtocol.prototype.readStructEnd = function() {\n\t  this.rstack.pop();\n\t};\n\n\t/**\n\t * @class\n\t * @name AnonReadFieldBeginReturn\n\t * @property {string} fname - The name of the field (always '').\n\t * @property {Thrift.Type} ftype - The data type of the field.\n\t * @property {number} fid - The unique identifier of the field.\n\t */\n\t/**\n\t * Deserializes the beginning of a field.\n\t * @returns {AnonReadFieldBeginReturn}\n\t */\n\tTJSONProtocol.prototype.readFieldBegin = function() {\n\t  var r = {};\n\n\t  var fid = -1;\n\t  var ftype = Type.STOP;\n\n\t  //get a fieldId\n\t  for (var f in (this.rstack[this.rstack.length - 1])) {\n\t    if (f === null) {\n\t      continue;\n\t    }\n\n\t    fid = parseInt(f, 10);\n\t    this.rpos.push(this.rstack.length);\n\n\t    var field = this.rstack[this.rstack.length - 1][fid];\n\n\t    //remove so we don't see it again\n\t    delete this.rstack[this.rstack.length - 1][fid];\n\n\t    this.rstack.push(field);\n\n\t    break;\n\t  }\n\n\t  if (fid != -1) {\n\t    //should only be 1 of these but this is the only\n\t    //way to match a key\n\t    for (var i in (this.rstack[this.rstack.length - 1])) {\n\t      if (TJSONProtocol.RType[i] === null) {\n\t        continue;\n\t      }\n\n\t      ftype = TJSONProtocol.RType[i];\n\t      this.rstack[this.rstack.length - 1] = this.rstack[this.rstack.length - 1][i];\n\t    }\n\t  }\n\n\t  r.fname = '';\n\t  r.ftype = ftype;\n\t  r.fid = fid;\n\n\t  return r;\n\t};\n\n\t/** Deserializes the end of a field. */\n\tTJSONProtocol.prototype.readFieldEnd = function() {\n\t  var pos = this.rpos.pop();\n\n\t  //get back to the right place in the stack\n\t  while (this.rstack.length > pos) {\n\t    this.rstack.pop();\n\t  }\n\t};\n\n\t/**\n\t * @class\n\t * @name AnonReadMapBeginReturn\n\t * @property {Thrift.Type} ktype - The data type of the key.\n\t * @property {Thrift.Type} vtype - The data type of the value.\n\t * @property {number} size - The number of elements in the map.\n\t */\n\t/**\n\t * Deserializes the beginning of a map.\n\t * @returns {AnonReadMapBeginReturn}\n\t */\n\tTJSONProtocol.prototype.readMapBegin = function() {\n\t  var map = this.rstack.pop();\n\t  var first = map.shift();\n\t  if (first instanceof Array) {\n\t    this.rstack.push(map);\n\t    map = first;\n\t    first = map.shift();\n\t  }\n\n\t  var r = {};\n\t  r.ktype = TJSONProtocol.RType[first];\n\t  r.vtype = TJSONProtocol.RType[map.shift()];\n\t  r.size = map.shift();\n\n\n\t  this.rpos.push(this.rstack.length);\n\t  this.rstack.push(map.shift());\n\n\t  return r;\n\t};\n\n\t/** Deserializes the end of a map. */\n\tTJSONProtocol.prototype.readMapEnd = function() {\n\t  this.readFieldEnd();\n\t};\n\n\t/**\n\t * @class\n\t * @name AnonReadColBeginReturn\n\t * @property {Thrift.Type} etype - The data type of the element.\n\t * @property {number} size - The number of elements in the collection.\n\t */\n\t/**\n\t * Deserializes the beginning of a list.\n\t * @returns {AnonReadColBeginReturn}\n\t */\n\tTJSONProtocol.prototype.readListBegin = function() {\n\t  var list = this.rstack[this.rstack.length - 1];\n\n\t  var r = {};\n\t  r.etype = TJSONProtocol.RType[list.shift()];\n\t  r.size = list.shift();\n\n\t  this.rpos.push(this.rstack.length);\n\t  this.rstack.push(list.shift());\n\n\t  return r;\n\t};\n\n\t/** Deserializes the end of a list. */\n\tTJSONProtocol.prototype.readListEnd = function() {\n\t  var pos = this.rpos.pop() - 2;\n\t  var st = this.rstack;\n\t  st.pop();\n\t  if (st instanceof Array && st.length > pos && st[pos].length > 0) {\n\t    st.push(st[pos].shift());\n\t  }\n\t};\n\n\t/**\n\t * Deserializes the beginning of a set.\n\t * @returns {AnonReadColBeginReturn}\n\t */\n\tTJSONProtocol.prototype.readSetBegin = function() {\n\t  return this.readListBegin();\n\t};\n\n\t/** Deserializes the end of a set. */\n\tTJSONProtocol.prototype.readSetEnd = function() {\n\t  return this.readListEnd();\n\t};\n\n\tTJSONProtocol.prototype.readBool = function() {\n\t  return this.readValue() == '1';\n\t};\n\n\tTJSONProtocol.prototype.readByte = function() {\n\t  return this.readI32();\n\t};\n\n\tTJSONProtocol.prototype.readI16 = function() {\n\t  return this.readI32();\n\t};\n\n\tTJSONProtocol.prototype.readI32 = function(f) {\n\t  return +this.readValue();\n\t}\n\n\t/** Returns the next value found in the protocol buffer */\n\tTJSONProtocol.prototype.readValue = function(f) {\n\t  if (f === undefined) {\n\t    f = this.rstack[this.rstack.length - 1];\n\t  }\n\n\t  var r = {};\n\n\t  if (f instanceof Array) {\n\t    if (f.length === 0) {\n\t      r.value = undefined;\n\t    } else {\n\t      r.value = f.shift();\n\t    }\n\t  } else if (!(f instanceof Int64) && f instanceof Object) {\n\t    for (var i in f) {\n\t      if (i === null) {\n\t        continue;\n\t      }\n\t      this.rstack.push(f[i]);\n\t      delete f[i];\n\n\t      r.value = i;\n\t      break;\n\t    }\n\t  } else {\n\t    r.value = f;\n\t    this.rstack.pop();\n\t  }\n\n\t  return r.value;\n\t};\n\n\tTJSONProtocol.prototype.readI64 = function() {\n\t  var n = this.readValue()\n\t  if (typeof n === 'string') {\n\t    // Assuming no one is sending in 1.11111e+33 format\n\t    return Int64Util.fromDecimalString(n);\n\t  } else {\n\t    return new Int64(n);\n\t  }\n\t};\n\n\tTJSONProtocol.prototype.readDouble = function() {\n\t  return this.readI32();\n\t};\n\n\tTJSONProtocol.prototype.readBinary = function() {\n\t  return new Buffer(this.readValue(), 'base64');\n\t};\n\n\tTJSONProtocol.prototype.readString = function() {\n\t  return this.readValue();\n\t};\n\n\t/**\n\t * Returns the underlying transport.\n\t * @readonly\n\t * @returns {Thrift.Transport} The underlying transport.\n\t */\n\tTJSONProtocol.prototype.getTransport = function() {\n\t  return this.trans;\n\t};\n\n\t/**\n\t * Method to arbitrarily skip over data\n\t */\n\tTJSONProtocol.prototype.skip = function(type) {\n\t  throw new Error('skip not supported yet');\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\n\tvar Int64 = __webpack_require__(32);\n\n\tvar Int64Util = module.exports = {};\n\n\tvar POW2_24 = Math.pow(2, 24);\n\tvar POW2_31 = Math.pow(2, 31);\n\tvar POW2_32 = Math.pow(2, 32);\n\tvar POW10_11 = Math.pow(10, 11);\n\n\tInt64Util.toDecimalString = function(i64) {\n\t  var b = i64.buffer;\n\t  var o = i64.offset;\n\t  if ((!b[o] && !(b[o + 1] & 0xe0)) ||\n\t      (!~b[o] && !~(b[o + 1] & 0xe0))) {\n\t    // The magnitude is small enough.\n\t    return i64.toString();\n\t  } else {\n\t    var negative = b[o] & 0x80;\n\t    if (negative) {\n\t      // 2's complement\n\t      var incremented = false;\n\t      var buffer = new Buffer(8);\n\t      for (var i = 7; i >= 0; --i) {\n\t        buffer[i] = (~b[o + i] + (incremented ? 0 : 1)) & 0xff;\n\t        incremented |= b[o + i];\n\t      }\n\t      b = buffer;\n\t    }\n\t    var high2 = b[o + 1] + (b[o] << 8);\n\t    // Lesser 11 digits with exceeding values but is under 53 bits capacity.\n\t    var low = b[o + 7] + (b[o + 6] << 8) + (b[o + 5] << 16)\n\t        + b[o + 4] * POW2_24  // Bit shift renders 32th bit as sign, so use multiplication\n\t        + (b[o + 3] + (b[o + 2] << 8)) * POW2_32 + high2 * 74976710656;  // The literal is 2^48 % 10^11\n\t    // 12th digit and greater.\n\t    var high = Math.floor(low / POW10_11) + high2 * 2814;  // The literal is 2^48 / 10^11\n\t    // Make it exactly 11 with leading zeros.\n\t    low = ('00000000000' + String(low % POW10_11)).slice(-11);\n\t    return (negative ? '-' : '') + String(high) + low;\n\t  }\n\t};\n\n\tInt64Util.fromDecimalString = function(text) {\n\t  var negative = text.charAt(0) === '-';\n\t  if (text.length < (negative ? 17 : 16)) {\n\t    // The magnitude is smaller than 2^53.\n\t    return new Int64(+text);\n\t  } else if (text.length > (negative ? 20 : 19)) {\n\t    throw new RangeError('Too many digits for Int64: ' + text);\n\t  } else {\n\t    // Most significant (up to 5) digits\n\t    var high5 = +text.slice(negative ? 1 : 0, -15);\n\t    var low = +text.slice(-15) + high5 * 2764472320;  // The literal is 10^15 % 2^32\n\t    var high = Math.floor(low / POW2_32) + high5 * 232830;  // The literal is 10^15 / 2^&32\n\t    low = low % POW2_32;\n\t    if (high >= POW2_31 &&\n\t        !(negative && high == POW2_31 && low == 0)  // Allow minimum Int64\n\t       ) {\n\t      throw new RangeError('The magnitude is too large for Int64.');\n\t    }\n\t    if (negative) {\n\t      // 2's complement\n\t      high = ~high;\n\t      if (low === 0) {\n\t        high = (high + 1) & 0xffffffff;\n\t      } else {\n\t        low = ~low + 1;\n\t      }\n\t      high = 0x80000000 | high;\n\t    }\n\t    return new Int64(high, low);\n\t  }\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Imported from Douglas Crockford's reference implementation with minimum modification\n\t * to handle Int64.\n\t *\n\t * https://github.com/douglascrockford/JSON-js/blob/c98948ae1944a28e2e8ebc3717894e580aeaaa05/json_parse.js\n\t *\n\t * Original license header:\n\t *\n\t * json_parse.js\n\t * 2015-05-02\n\t * Public Domain.\n\t * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\t */\n\n\n\t/*jslint for */\n\n\t/*property\n\t    at, b, call, charAt, f, fromCharCode, hasOwnProperty, message, n, name,\n\t    prototype, push, r, t, text\n\t*/\n\n\tvar Int64 = __webpack_require__(32);\n\tvar Int64Util = __webpack_require__(73);\n\n\tvar json_parse = module.exports = (function () {\n\t    \"use strict\";\n\n\t// This is a function that can parse a JSON text, producing a JavaScript\n\t// data structure. It is a simple, recursive descent parser. It does not use\n\t// eval or regular expressions, so it can be used as a model for implementing\n\t// a JSON parser in other languages.\n\n\t// We are defining the function inside of another function to avoid creating\n\t// global variables.\n\n\t    var at,     // The index of the current character\n\t        ch,     // The current character\n\t        escapee = {\n\t            '\"': '\"',\n\t            '\\\\': '\\\\',\n\t            '/': '/',\n\t            b: '\\b',\n\t            f: '\\f',\n\t            n: '\\n',\n\t            r: '\\r',\n\t            t: '\\t'\n\t        },\n\t        text,\n\n\t        error = function (m) {\n\n\t// Call error when something is wrong.\n\n\t            throw new SyntaxError(m);\n\t        },\n\n\t        next = function (c) {\n\n\t// If a c parameter is provided, verify that it matches the current character.\n\n\t            if (c && c !== ch) {\n\t                error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n\t            }\n\n\t// Get the next character. When there are no more characters,\n\t// return the empty string.\n\n\t            ch = text.charAt(at);\n\t            at += 1;\n\t            return ch;\n\t        },\n\n\t        number = function () {\n\n\t// Parse a number value.\n\n\t            var number,\n\t                string = '';\n\n\t            if (ch === '-') {\n\t                string = '-';\n\t                next('-');\n\t            }\n\t            while (ch >= '0' && ch <= '9') {\n\t                string += ch;\n\t                next();\n\t            }\n\t            if (ch === '.') {\n\t                string += '.';\n\t                while (next() && ch >= '0' && ch <= '9') {\n\t                    string += ch;\n\t                }\n\t            }\n\t            if (ch === 'e' || ch === 'E') {\n\t                string += ch;\n\t                next();\n\t                if (ch === '-' || ch === '+') {\n\t                    string += ch;\n\t                    next();\n\t                }\n\t                while (ch >= '0' && ch <= '9') {\n\t                    string += ch;\n\t                    next();\n\t                }\n\t            }\n\t            number = +string;\n\t            if (!isFinite(number)) {\n\t                error(\"Bad number\");\n\t            } else if (number >= Int64.MAX_INT || number <= Int64.MIN_INT) {\n\t                // Return raw string for further process in TJSONProtocol\n\t                return string;\n\t            } else {\n\t                return number;\n\t            }\n\t        },\n\n\t        string = function () {\n\n\t// Parse a string value.\n\n\t            var hex,\n\t                i,\n\t                string = '',\n\t                uffff;\n\n\t// When parsing for string values, we must look for \" and \\ characters.\n\n\t            if (ch === '\"') {\n\t                while (next()) {\n\t                    if (ch === '\"') {\n\t                        next();\n\t                        return string;\n\t                    }\n\t                    if (ch === '\\\\') {\n\t                        next();\n\t                        if (ch === 'u') {\n\t                            uffff = 0;\n\t                            for (i = 0; i < 4; i += 1) {\n\t                                hex = parseInt(next(), 16);\n\t                                if (!isFinite(hex)) {\n\t                                    break;\n\t                                }\n\t                                uffff = uffff * 16 + hex;\n\t                            }\n\t                            string += String.fromCharCode(uffff);\n\t                        } else if (typeof escapee[ch] === 'string') {\n\t                            string += escapee[ch];\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    } else {\n\t                        string += ch;\n\t                    }\n\t                }\n\t            }\n\t            error(\"Bad string\");\n\t        },\n\n\t        white = function () {\n\n\t// Skip whitespace.\n\n\t            while (ch && ch <= ' ') {\n\t                next();\n\t            }\n\t        },\n\n\t        word = function () {\n\n\t// true, false, or null.\n\n\t            switch (ch) {\n\t            case 't':\n\t                next('t');\n\t                next('r');\n\t                next('u');\n\t                next('e');\n\t                return true;\n\t            case 'f':\n\t                next('f');\n\t                next('a');\n\t                next('l');\n\t                next('s');\n\t                next('e');\n\t                return false;\n\t            case 'n':\n\t                next('n');\n\t                next('u');\n\t                next('l');\n\t                next('l');\n\t                return null;\n\t            }\n\t            error(\"Unexpected '\" + ch + \"'\");\n\t        },\n\n\t        value,  // Place holder for the value function.\n\n\t        array = function () {\n\n\t// Parse an array value.\n\n\t            var array = [];\n\n\t            if (ch === '[') {\n\t                next('[');\n\t                white();\n\t                if (ch === ']') {\n\t                    next(']');\n\t                    return array;   // empty array\n\t                }\n\t                while (ch) {\n\t                    array.push(value());\n\t                    white();\n\t                    if (ch === ']') {\n\t                        next(']');\n\t                        return array;\n\t                    }\n\t                    next(',');\n\t                    white();\n\t                }\n\t            }\n\t            error(\"Bad array\");\n\t        },\n\n\t        object = function () {\n\n\t// Parse an object value.\n\n\t            var key,\n\t                object = {};\n\n\t            if (ch === '{') {\n\t                next('{');\n\t                white();\n\t                if (ch === '}') {\n\t                    next('}');\n\t                    return object;   // empty object\n\t                }\n\t                while (ch) {\n\t                    key = string();\n\t                    white();\n\t                    next(':');\n\t                    if (Object.hasOwnProperty.call(object, key)) {\n\t                        error('Duplicate key \"' + key + '\"');\n\t                    }\n\t                    object[key] = value();\n\t                    white();\n\t                    if (ch === '}') {\n\t                        next('}');\n\t                        return object;\n\t                    }\n\t                    next(',');\n\t                    white();\n\t                }\n\t            }\n\t            error(\"Bad object\");\n\t        };\n\n\t    value = function () {\n\n\t// Parse a JSON value. It could be an object, an array, a string, a number,\n\t// or a word.\n\n\t        white();\n\t        switch (ch) {\n\t        case '{':\n\t            return object();\n\t        case '[':\n\t            return array();\n\t        case '\"':\n\t            return string();\n\t        case '-':\n\t            return number();\n\t        default:\n\t            return ch >= '0' && ch <= '9'\n\t                ? number()\n\t                : word();\n\t        }\n\t    };\n\n\t// Return the json_parse function. It will have access to all of the above\n\t// functions and variables.\n\n\t    return function (source) {\n\t        var result;\n\n\t        text = source;\n\t        at = 0;\n\t        ch = ' ';\n\t        result = value();\n\t        white();\n\t        if (ch) {\n\t            error(\"Syntax error\");\n\t        }\n\n\t        return result;\n\t    };\n\t}());\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\tvar util = __webpack_require__(16);\n\tvar EventEmitter = __webpack_require__(21).EventEmitter;\n\tvar thrift = __webpack_require__(15);\n\n\tvar TBufferedTransport = __webpack_require__(23);\n\tvar TJSONProtocol = __webpack_require__(72);\n\tvar InputBufferUnderrunError = __webpack_require__(29);\n\n\tvar createClient = __webpack_require__(33);\n\n\texports.XHRConnection = XHRConnection;\n\n\t/**\n\t * Constructor Function for the XHR Connection.\n\t * If you do not specify a host and port then XHRConnection will default to the\n\t * host and port of the page from which this javascript is served.\n\t * @constructor\n\t * @param {string} [url] - The URL to connect to.\n\t * @classdesc TXHRConnection objects provide Thrift end point transport\n\t *     semantics implemented using XHR.\n\t * @example\n\t *     var transport = new Thrift.TXHRConnection('localhost', 9099, {});\n\t */\n\tfunction XHRConnection(host, port, options) {\n\t  this.options = options || {};\n\t  this.wpos = 0;\n\t  this.rpos = 0;\n\t  this.useCORS = (options && options.useCORS);\n\t  this.send_buf = '';\n\t  this.recv_buf = '';\n\t  this.transport = options.transport || TBufferedTransport;\n\t  this.protocol = options.protocol || TJSONProtocol;\n\t  this.headers = options.headers || {};\n\n\t  host = host || window.location.host;\n\t  port = port || window.location.port;\n\t  var prefix = options.https ? 'https://' : 'http://';\n\t  var path = options.path || '/';\n\n\t  if (port === '') {\n\t    port = undefined;\n\t  }\n\n\t  if (!port || port === 80 || port === '80') {\n\t    this.url = prefix + host + path;\n\t  } else {\n\t    this.url = prefix + host + ':' + port + path;\n\t  }\n\n\t  //The sequence map is used to map seqIDs back to the\n\t  //  calling client in multiplexed scenarios\n\t  this.seqId2Service = {};\n\t};\n\n\tutil.inherits(XHRConnection, EventEmitter);\n\n\t/**\n\t* Gets the browser specific XmlHttpRequest Object.\n\t* @returns {object} the browser XHR interface object\n\t*/\n\tXHRConnection.prototype.getXmlHttpRequestObject = function() {\n\t  try { return new XMLHttpRequest(); } catch (e1) { }\n\t  try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch (e2) { }\n\t  try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch (e3) { }\n\n\t  throw \"Your browser doesn't support XHR.\";\n\t};\n\n\t/**\n\t * Sends the current XRH request if the transport was created with a URL\n\t * and the async parameter is false. If the transport was not created with\n\t * a URL, or the async parameter is True and no callback is provided, or\n\t * the URL is an empty string, the current send buffer is returned.\n\t * @param {object} async - If true the current send buffer is returned.\n\t * @param {object} callback - Optional async completion callback\n\t * @returns {undefined|string} Nothing or the current send buffer.\n\t * @throws {string} If XHR fails.\n\t */\n\tXHRConnection.prototype.flush = function() {\n\t  var self = this;\n\t  if (this.url === undefined || this.url === '') {\n\t    return this.send_buf;\n\t  }\n\n\t  var xreq = this.getXmlHttpRequestObject();\n\n\t  if (xreq.overrideMimeType) {\n\t    xreq.overrideMimeType('application/json');\n\t  }\n\n\t  xreq.onreadystatechange = function() {\n\t    if (this.readyState == 4 && this.status == 200) {\n\t      self.setRecvBuffer(this.responseText);\n\t    }\n\t  };\n\n\t  xreq.open('POST', this.url, true);\n\n\t  Object.keys(this.headers).forEach(function(headerKey) {\n\t    xreq.setRequestHeader(headerKey, self.headers[headerKey]);\n\t  });\n\n\t  xreq.send(this.send_buf);\n\t};\n\n\t/**\n\t * Sets the buffer to provide the protocol when deserializing.\n\t * @param {string} buf - The buffer to supply the protocol.\n\t */\n\tXHRConnection.prototype.setRecvBuffer = function(buf) {\n\t  this.recv_buf = buf;\n\t  this.recv_buf_sz = this.recv_buf.length;\n\t  this.wpos = this.recv_buf.length;\n\t  this.rpos = 0;\n\n\t  if (Object.prototype.toString.call(buf) == \"[object ArrayBuffer]\") {\n\t    var data = new Uint8Array(buf);\n\t  }\n\t  var thing = new Buffer(data || buf);\n\n\t  this.transport.receiver(this.__decodeCallback.bind(this))(thing);\n\n\t};\n\n\tXHRConnection.prototype.__decodeCallback = function(transport_with_data) {\n\t  var proto = new this.protocol(transport_with_data);\n\t  try {\n\t    while (true) {\n\t      var header = proto.readMessageBegin();\n\t      var dummy_seqid = header.rseqid * -1;\n\t      var client = this.client;\n\t      //The Multiplexed Protocol stores a hash of seqid to service names\n\t      //  in seqId2Service. If the SeqId is found in the hash we need to\n\t      //  lookup the appropriate client for this call.\n\t      //  The client var is a single client object when not multiplexing,\n\t      //  when using multiplexing it is a service name keyed hash of client\n\t      //  objects.\n\t      //NOTE: The 2 way interdependencies between protocols, transports,\n\t      //  connections and clients in the Node.js implementation are irregular\n\t      //  and make the implementation difficult to extend and maintain. We\n\t      //  should bring this stuff inline with typical thrift I/O stack\n\t      //  operation soon.\n\t      //  --ra\n\t      var service_name = this.seqId2Service[header.rseqid];\n\t      if (service_name) {\n\t        client = this.client[service_name];\n\t        delete this.seqId2Service[header.rseqid];\n\t      }\n\t      /*jshint -W083 */\n\t      client._reqs[dummy_seqid] = function(err, success) {\n\t        transport_with_data.commitPosition();\n\t        var clientCallback = client._reqs[header.rseqid];\n\t        delete client._reqs[header.rseqid];\n\t        if (clientCallback) {\n\t          clientCallback(err, success);\n\t        }\n\t      };\n\t      /*jshint +W083 */\n\t      if (client['recv_' + header.fname]) {\n\t        client['recv_' + header.fname](proto, header.mtype, dummy_seqid);\n\t      } else {\n\t        delete client._reqs[dummy_seqid];\n\t        this.emit(\"error\",\n\t          new thrift.TApplicationException(\n\t            thrift.TApplicationExceptionType.WRONG_METHOD_NAME,\n\t            \"Received a response to an unknown RPC function\"));\n\t      }\n\t    }\n\t  } catch (e) {\n\t    if (e instanceof InputBufferUnderrunError) {\n\t      transport_with_data.rollbackPosition();\n\t    } else {\n\t      throw e;\n\t    }\n\t  }\n\t};\n\n\t/**\n\t * Returns true if the transport is open, XHR always returns true.\n\t * @readonly\n\t * @returns {boolean} Always True.\n\t */\n\tXHRConnection.prototype.isOpen = function() {\n\t  return true;\n\t};\n\n\t/**\n\t * Opens the transport connection, with XHR this is a nop.\n\t */\n\tXHRConnection.prototype.open = function() {};\n\n\t/**\n\t * Closes the transport connection, with XHR this is a nop.\n\t */\n\tXHRConnection.prototype.close = function() {};\n\n\t/**\n\t * Returns the specified number of characters from the response\n\t * buffer.\n\t * @param {number} len - The number of characters to return.\n\t * @returns {string} Characters sent by the server.\n\t */\n\tXHRConnection.prototype.read = function(len) {\n\t  var avail = this.wpos - this.rpos;\n\n\t  if (avail === 0) {\n\t    return '';\n\t  }\n\n\t  var give = len;\n\n\t  if (avail < len) {\n\t    give = avail;\n\t  }\n\n\t  var ret = this.read_buf.substr(this.rpos, give);\n\t  this.rpos += give;\n\n\t  //clear buf when complete?\n\t  return ret;\n\t};\n\n\t/**\n\t * Returns the entire response buffer.\n\t * @returns {string} Characters sent by the server.\n\t */\n\tXHRConnection.prototype.readAll = function() {\n\t  return this.recv_buf;\n\t};\n\n\t/**\n\t * Sets the send buffer to buf.\n\t * @param {string} buf - The buffer to send.\n\t */\n\tXHRConnection.prototype.write = function(buf) {\n\t  this.send_buf = buf;\n\t  this.flush();\n\t};\n\n\t/**\n\t * Returns the send buffer.\n\t * @readonly\n\t * @returns {string} The send buffer.\n\t */\n\tXHRConnection.prototype.getSendBuffer = function() {\n\t  return this.send_buf;\n\t};\n\n\t/**\n\t * Creates a new TXHRTransport object, used by Thrift clients to connect\n\t *    to Thrift HTTP based servers.\n\t * @param {string} host - The host name or IP to connect to.\n\t * @param {number} port - The TCP port to connect to.\n\t * @param {XHRConnectOptions} options - The configuration options to use.\n\t * @returns {XHRConnection} The connection object.\n\t * @see {@link XHRConnectOptions}\n\t */\n\texports.createXHRConnection = function(host, port, options) {\n\t  return new XHRConnection(host, port, options);\n\t};\n\n\texports.createXHRClient = createClient;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\tvar net = __webpack_require__(22);\n\tvar tls = __webpack_require__(22);\n\n\tvar TBufferedTransport = __webpack_require__(23);\n\tvar TBinaryProtocol = __webpack_require__(30);\n\tvar InputBufferUnderrunError = __webpack_require__(29);\n\n\t/**\n\t * Create a Thrift server which can serve one or multiple services.\n\t * @param {object} processor - A normal or multiplexedProcessor (must\n\t *                             be preconstructed with the desired handler).\n\t * @param {ServerOptions} options - Optional additional server configuration.\n\t * @returns {object} - The Apache Thrift Multiplex Server.\n\t */\n\texports.createMultiplexServer = function(processor, options) {\n\t  var transport = (options && options.transport) ? options.transport : TBufferedTransport;\n\t  var protocol = (options && options.protocol) ? options.protocol : TBinaryProtocol;\n\n\t  function serverImpl(stream) {\n\t    var self = this;\n\t    stream.on('error', function(err) {\n\t        self.emit('error', err);\n\t    });\n\t    stream.on('data', transport.receiver(function(transportWithData) {\n\t      var input = new protocol(transportWithData);\n\t      var output = new protocol(new transport(undefined, function(buf) {\n\t        try {\n\t            stream.write(buf);\n\t        } catch (err) {\n\t            self.emit('error', err);\n\t            stream.end();\n\t        }\n\t      }));\n\n\t      try {\n\t        do {\n\t          processor.process(input, output);\n\t          transportWithData.commitPosition();\n\t        } while (true);\n\t      } catch (err) {\n\t        if (err instanceof InputBufferUnderrunError) {\n\t          //The last data in the buffer was not a complete message, wait for the rest\n\t          transportWithData.rollbackPosition();\n\t        }\n\t        else if (err.message === \"Invalid type: undefined\") {\n\t          //No more data in the buffer\n\t          //This trap is a bit hackish\n\t          //The next step to improve the node behavior here is to have\n\t          //  the compiler generated process method throw a more explicit\n\t          //  error when the network buffer is empty (regardles of the\n\t          //  protocol/transport stack in use) and replace this heuristic.\n\t          //  Also transports should probably not force upper layers to\n\t          //  manage their buffer positions (i.e. rollbackPosition() and\n\t          //  commitPosition() should be eliminated in lieu of a transport\n\t          //  encapsulated buffer management strategy.)\n\t          transportWithData.rollbackPosition();\n\t        }\n\t        else {\n\t          //Unexpected error\n\t          self.emit('error', err);\n\t          stream.end();\n\t        }\n\t      }\n\t    }));\n\n\t    stream.on('end', function() {\n\t      stream.end();\n\t    });\n\t  }\n\n\t  if (options && options.tls) {\n\t    return tls.createServer(options.tls, serverImpl);\n\t  } else {\n\t    return net.createServer(serverImpl);\n\t  }\n\t};\n\n\t/**\n\t * Create a single service Apache Thrift server.\n\t * @param {object} processor - A service class or processor function.\n\t * @param {ServerOptions} options - Optional additional server configuration.\n\t * @returns {object} - The Apache Thrift Multiplex Server.\n\t */\n\texports.createServer = function(processor, handler, options) {\n\t  if (processor.Processor) {\n\t    processor = processor.Processor;\n\t  }\n\t  return exports.createMultiplexServer(new processor(handler), options);\n\t};\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\tvar http = __webpack_require__(35);\n\tvar https = __webpack_require__(65);\n\tvar url = __webpack_require__(59);\n\tvar path = __webpack_require__(78);\n\tvar fs = __webpack_require__(22);\n\tvar crypto = __webpack_require__(79);\n\n\tvar MultiplexedProcessor = __webpack_require__(113).MultiplexedProcessor;\n\n\tvar TBufferedTransport = __webpack_require__(23);\n\tvar TBinaryProtocol = __webpack_require__(30);\n\tvar InputBufferUnderrunError = __webpack_require__(29);\n\n\t// WSFrame constructor and prototype\n\t/////////////////////////////////////////////////////////////////////\n\n\t/** Apache Thrift RPC Web Socket Transport\n\t *  Frame layout conforming to RFC 6455 circa 12/2011\n\t *\n\t * Theoretical frame size limit is 4GB*4GB, however the Node Buffer\n\t * limit is 1GB as of v0.10. The frame length encoding is also\n\t * configured for a max of 4GB presently and needs to be adjusted\n\t * if Node/Browsers become capabile of > 4GB frames.\n\t *\n\t *  - FIN is 1 if the message is complete\n\t *  - RSV1/2/3 are always 0\n\t *  - Opcode is 1(TEXT) for TJSONProtocol and 2(BIN) for TBinaryProtocol\n\t *  - Mask Present bit is 1 sending to-server and 0 sending to-client\n\t *  - Payload Len:\n\t *        + If < 126: then represented directly\n\t *        + If >=126: but within range of an unsigned 16 bit integer\n\t *             then Payload Len is 126 and the two following bytes store\n\t *             the length\n\t *        + Else: Payload Len is 127 and the following 8 bytes store the\n\t *             length as an unsigned 64 bit integer\n\t *  - Masking key is a 32 bit key only present when sending to the server\n\t *  - Payload follows the masking key or length\n\t *\n\t *     0                   1                   2                   3\n\t *     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\t *    +-+-+-+-+-------+-+-------------+-------------------------------+\n\t *    |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n\t *    |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n\t *    |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n\t *    | |1|2|3|       |K|             |                               |\n\t *    +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n\t *    |     Extended payload length continued, if payload len == 127  |\n\t *    + - - - - - - - - - - - - - - - +-------------------------------+\n\t *    |                               |Masking-key, if MASK set to 1  |\n\t *    +-------------------------------+-------------------------------+\n\t *    | Masking-key (continued)       |          Payload Data         |\n\t *    +-------------------------------- - - - - - - - - - - - - - - - +\n\t *    :                     Payload Data continued ...                :\n\t *    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n\t *    |                     Payload Data continued ...                |\n\t *    +---------------------------------------------------------------+\n\t */\n\tvar wsFrame = {\n\t  /** Encodes a WebSocket frame\n\t   *\n\t   * @param {Buffer} data - The raw data to encode\n\t   * @param {Buffer} mask - The mask to apply when sending to server, null for no mask\n\t   * @param {Boolean} binEncoding - True for binary encoding, false for text encoding\n\t   * @returns {Buffer} - The WebSocket frame, ready to send\n\t   */\n\t  encode: function(data, mask, binEncoding) {\n\t      var frame = new Buffer(wsFrame.frameSizeFromData(data, mask));\n\t      //Byte 0 - FIN & OPCODE\n\t      frame[0] = wsFrame.fin.FIN +\n\t          (binEncoding ? wsFrame.frameOpCodes.BIN : wsFrame.frameOpCodes.TEXT);\n\t      //Byte 1 or 1-3 or 1-9 - MASK FLAG & SIZE\n\t      var payloadOffset = 2;\n\t      if (data.length < 0x7E) {\n\t        frame[1] = data.length + (mask ? wsFrame.mask.TO_SERVER : wsFrame.mask.TO_CLIENT);\n\t      } else if (data.length < 0xFFFF) {\n\t        frame[1] = 0x7E + (mask ? wsFrame.mask.TO_SERVER : wsFrame.mask.TO_CLIENT);\n\t        frame.writeUInt16BE(data.length, 2, true);\n\t        payloadOffset = 4;\n\t      } else {\n\t        frame[1] = 0x7F + (mask ? wsFrame.mask.TO_SERVER : wsFrame.mask.TO_CLIENT);\n\t        frame.writeUInt32BE(0, 2, true);\n\t        frame.writeUInt32BE(data.length, 6, true);\n\t        payloadOffset = 10;\n\t      }\n\t      //MASK\n\t      if (mask) {\n\t        mask.copy(frame, payloadOffset, 0, 4);\n\t        payloadOffset += 4;\n\t      }\n\t      //Payload\n\t      data.copy(frame, payloadOffset);\n\t      if (mask) {\n\t        wsFrame.applyMask(frame.slice(payloadOffset), frame.slice(payloadOffset-4,payloadOffset));\n\t      }\n\t      return frame;\n\t  },\n\n\t  /**\n\t   * @class\n\t   * @name WSDecodeResult\n\t   * @property {Buffer} data - The decoded data for the first ATRPC message\n\t   * @property {Buffer} mask - The frame mask\n\t   * @property {Boolean} binEncoding - True if binary (TBinaryProtocol),\n\t   *                                   False if text (TJSONProtocol)\n\t   * @property {Buffer} nextFrame - Multiple ATRPC messages may be sent in a\n\t   *                                single WebSocket frame, this Buffer contains\n\t   *                                any bytes remaining to be decoded\n\t   * @property {Boolean} FIN - True is the message is complete\n\t   */\n\n\t   /** Decodes a WebSocket frame\n\t   *\n\t   * @param {Buffer} frame - The raw inbound frame, if this is a continuation\n\t   *                         frame it must have a mask property with the mask.\n\t   * @returns {WSDecodeResult} - The decoded payload\n\t   *\n\t   * @see {@link WSDecodeResult}\n\t   */\n\t  decode: function(frame) {\n\t      var result = {\n\t        data: null,\n\t        mask: null,\n\t        binEncoding: false,\n\t        nextFrame: null,\n\t        FIN: true\n\t      };\n\n\t      //Byte 0 - FIN & OPCODE\n\t      if (wsFrame.fin.FIN != (frame[0] & wsFrame.fin.FIN)) {\n\t        result.FIN = false;\n\t      }\n\t      result.binEncoding = (wsFrame.frameOpCodes.BIN == (frame[0] & wsFrame.frameOpCodes.BIN));\n\t      //Byte 1 or 1-3 or 1-9 - SIZE\n\t      var lenByte = (frame[1] & 0x0000007F);\n\t      var len = lenByte;\n\t      var dataOffset = 2;\n\t      if (lenByte == 0x7E) {\n\t        len = frame.readUInt16BE(2);\n\t        dataOffset = 4;\n\t      } else if (lenByte == 0x7F) {\n\t        len = frame.readUInt32BE(6);\n\t        dataOffset = 10;\n\t      }\n\t      //MASK\n\t      if (wsFrame.mask.TO_SERVER == (frame[1] & wsFrame.mask.TO_SERVER)) {\n\t        result.mask = new Buffer(4);\n\t        frame.copy(result.mask, 0, dataOffset, dataOffset + 4);\n\t        dataOffset += 4;\n\t      }\n\t      //Payload\n\t      result.data = new Buffer(len);\n\t      frame.copy(result.data, 0, dataOffset, dataOffset+len);\n\t      if (result.mask) {\n\t        wsFrame.applyMask(result.data, result.mask);\n\t      }\n\t      //Next Frame\n\t      if (frame.length > dataOffset+len) {\n\t        result.nextFrame = new Buffer(frame.length - (dataOffset+len));\n\t        frame.copy(result.nextFrame, 0, dataOffset+len, frame.length);\n\t      }\n\t      //Don't forward control frames\n\t      if (frame[0] & wsFrame.frameOpCodes.FINCTRL) {\n\t        result.data = null;\n\t      }\n\n\t      return result;\n\t  },\n\n\t  /** Masks/Unmasks data\n\t   *\n\t   * @param {Buffer} data - data to mask/unmask in place\n\t   * @param {Buffer} mask - the mask\n\t   */\n\t  applyMask: function(data, mask){\n\t    //TODO: look into xoring words at a time\n\t    var dataLen = data.length;\n\t    var maskLen = mask.length;\n\t    for (var i = 0; i < dataLen; i++) {\n\t      data[i] = data[i] ^ mask[i%maskLen];\n\t    }\n\t  },\n\n\t  /** Computes frame size on the wire from data to be sent\n\t   *\n\t   * @param {Buffer} data - data.length is the assumed payload size\n\t   * @param {Boolean} mask - true if a mask will be sent (TO_SERVER)\n\t   */\n\t  frameSizeFromData: function(data, mask) {\n\t    var headerSize = 10;\n\t    if (data.length < 0x7E) {\n\t      headerSize = 2;\n\t    } else if (data.length < 0xFFFF) {\n\t      headerSize = 4;\n\t    }\n\t    return headerSize + data.length + (mask ? 4 : 0);\n\t  },\n\n\t  frameOpCodes: {\n\t    CONT:     0x00,\n\t    TEXT:     0x01,\n\t    BIN:      0x02,\n\t    CTRL:     0x80\n\t  },\n\n\t  mask: {\n\t    TO_SERVER: 0x80,\n\t    TO_CLIENT: 0x00\n\t  },\n\n\t  fin: {\n\t    CONT: 0x00,\n\t    FIN: 0x80\n\t  }\n\t};\n\n\n\t// createWebServer constructor and options\n\t/////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * @class\n\t * @name ServerOptions\n\t * @property {array} cors - Array of CORS origin strings to permit requests from.\n\t * @property {string} files - Path to serve static files from, if absent or \"\"\n\t *                               static file service is disabled.\n\t * @property {object} headers - An object hash mapping header strings to header value\n\t *                              strings, these headers are transmitted in response to\n\t *                              static file GET operations.\n\t * @property {object} services - An object hash mapping service URI strings\n\t *                               to ServiceOptions objects\n\t * @property {object} tls - Node.js TLS options (see: nodejs.org/api/tls.html),\n\t *                          if not present or null regular http is used,\n\t *                          at least a key and a cert must be defined to use SSL/TLS\n\t * @see {@link ServiceOptions}\n\t */\n\n\t/**\n\t * @class\n\t * @name ServiceOptions\n\t * @property {object} transport - The layered transport to use (defaults\n\t *                                to TBufferedTransport).\n\t * @property {object} protocol - The serialization Protocol to use (defaults to\n\t *                               TBinaryProtocol).\n\t * @property {object} processor - The Thrift Service class/processor generated\n\t *                                by the IDL Compiler for the service (the \"cls\"\n\t *                                key can also be used for this attribute).\n\t * @property {object} handler - The handler methods for the Thrift Service.\n\t */\n\n\t/**\n\t * Create a Thrift server which can serve static files and/or one or\n\t * more Thrift Services.\n\t * @param {ServerOptions} options - The server configuration.\n\t * @returns {object} - The Apache Thrift Web Server.\n\t */\n\texports.createWebServer = function(options) {\n\t  var baseDir = options.files;\n\t  var contentTypesByExtension = {\n\t    '.txt': 'text/plain',\n\t    '.html': 'text/html',\n\t    '.css': 'text/css',\n\t    '.xml': 'application/xml',\n\t    '.json': 'application/json',\n\t    '.js': 'application/javascript',\n\t    '.jpg': 'image/jpeg',\n\t    '.jpeg': 'image/jpeg',\n\t    '.gif': 'image/gif',\n\t    '.png': 'image/png',\n\t    '.svg': 'image/svg+xml'\n\t  };\n\n\t  //Setup all of the services\n\t  var services = options.services;\n\t  for (var uri in services) {\n\t    var svcObj = services[uri];\n\n\t    //Setup the processor\n\t    if (svcObj.processor instanceof MultiplexedProcessor) {\n\t      //Multiplex processors have pre embedded processor/handler pairs, save as is\n\t      svcObj.processor = svcObj.processor;\n\t    } else {\n\t      //For historical reasons Node.js supports processors passed in directly or via the\n\t      //  IDL Compiler generated class housing the processor. Also, the options property\n\t      //  for a Processor has been called both cls and processor at different times. We\n\t      //  support any of the four possibilities here.\n\t      var processor = (svcObj.processor) ? (svcObj.processor.Processor || svcObj.processor) :\n\t                                           (svcObj.cls.Processor || svcObj.cls);\n\t      //Processors can be supplied as constructed objects with handlers already embedded,\n\t      //  if a handler is provided we construct a new processor, if not we use the processor\n\t      //  object directly\n\t      if (svcObj.handler) {\n\t        svcObj.processor = new processor(svcObj.handler);\n\t      } else {\n\t        svcObj.processor = processor;\n\t      }\n\t    }\n\t    svcObj.transport = svcObj.transport ? svcObj.transport : TBufferedTransport;\n\t    svcObj.protocol = svcObj.protocol ? svcObj.protocol : TBinaryProtocol;\n\t  }\n\n\t  //Verify CORS requirements\n\t  function VerifyCORSAndSetHeaders(request, response) {\n\t    if (request.headers.origin && options.cors) {\n\t      if (options.cors[\"*\"] || options.cors[request.headers.origin]) {\n\t        //Allow, origin allowed\n\t        response.setHeader(\"access-control-allow-origin\", request.headers.origin);\n\t        response.setHeader(\"access-control-allow-methods\", \"GET, POST, OPTIONS\");\n\t        response.setHeader(\"access-control-allow-headers\", \"content-type, accept\");\n\t        response.setHeader(\"access-control-max-age\", \"60\");\n\t        return true;\n\t      } else {\n\t        //Disallow, origin denied\n\t        return false;\n\t      }\n\t    }\n\t    //Allow, CORS is not in use\n\t    return true;\n\t  }\n\n\n\t  //Handle OPTIONS method (CORS)\n\t  ///////////////////////////////////////////////////\n\t  function processOptions(request, response) {\n\t    if (VerifyCORSAndSetHeaders(request, response)) {\n\t      response.writeHead(\"204\", \"No Content\", {\"content-length\": 0});\n\t    } else {\n\t      response.writeHead(\"403\", \"Origin \" + request.headers.origin + \" not allowed\", {});\n\t    }\n\t    response.end();\n\t  }\n\n\n\t  //Handle POST methods (TXHRTransport)\n\t  ///////////////////////////////////////////////////\n\t  function processPost(request, response) {\n\t    //Lookup service\n\t    var uri = url.parse(request.url).pathname;\n\t    var svc = services[uri];\n\t    if (!svc) {\n\t      response.writeHead(\"403\", \"No Apache Thrift Service at \" + uri, {});\n\t      response.end();\n\t      return;\n\t    }\n\n\t    //Verify CORS requirements\n\t    if (!VerifyCORSAndSetHeaders(request, response)) {\n\t      response.writeHead(\"403\", \"Origin \" + request.headers.origin + \" not allowed\", {});\n\t      response.end();\n\t      return;\n\t    }\n\n\t    //Process XHR payload\n\t    request.on('data', svc.transport.receiver(function(transportWithData) {\n\t      var input = new svc.protocol(transportWithData);\n\t      var output = new svc.protocol(new svc.transport(undefined, function(buf) {\n\t        try {\n\t          response.writeHead(200);\n\t          response.end(buf);\n\t        } catch (err) {\n\t          response.writeHead(500);\n\t          response.end();\n\t        }\n\t      }));\n\n\t      try {\n\t        svc.processor.process(input, output);\n\t        transportWithData.commitPosition();\n\t      } catch (err) {\n\t        if (err instanceof InputBufferUnderrunError) {\n\t          transportWithData.rollbackPosition();\n\t        } else {\n\t          response.writeHead(500);\n\t          response.end();\n\t        }\n\t      }\n\t    }));\n\t  }\n\n\n\t  //Handle GET methods (Static Page Server)\n\t  ///////////////////////////////////////////////////\n\t  function processGet(request, response) {\n\t    //Undefined or empty base directory means do not serve static files\n\t    if (!baseDir || \"\" === baseDir) {\n\t      response.writeHead(404);\n\t      response.end();\n\t      return;\n\t    }\n\n\t    //Verify CORS requirements\n\t    if (!VerifyCORSAndSetHeaders(request, response)) {\n\t      response.writeHead(\"403\", \"Origin \" + request.headers.origin + \" not allowed\", {});\n\t      response.end();\n\t      return;\n\t    }\n\n\t    //Locate the file requested and send it\n\t    var uri = url.parse(request.url).pathname;\n\t    var filename = path.join(baseDir, uri);\n\t    fs.exists(filename, function(exists) {\n\t      if(!exists) {\n\t        response.writeHead(404);\n\t        response.end();\n\t        return;\n\t      }\n\n\t      if (fs.statSync(filename).isDirectory()) {\n\t        filename += '/index.html';\n\t      }\n\n\t      fs.readFile(filename, \"binary\", function(err, file) {\n\t        if (err) {\n\t          response.writeHead(500);\n\t          response.end(err + \"\\n\");\n\t          return;\n\t        }\n\t        var headers = {};\n\t        var contentType = contentTypesByExtension[path.extname(filename)];\n\t        if (contentType) {\n\t          headers[\"Content-Type\"] = contentType;\n\t        }\n\t        for (var k in options.headers) {\n\t          headers[k] = options.headers[k];\n\t        }\n\t        response.writeHead(200, headers);\n\t        response.write(file, \"binary\");\n\t        response.end();\n\t      });\n\t    });\n\t  }\n\n\n\t  //Handle WebSocket calls (TWebSocketTransport)\n\t  ///////////////////////////////////////////////////\n\t  function processWS(data, socket, svc, binEncoding) {\n\t    svc.transport.receiver(function(transportWithData) {\n\t      var input = new svc.protocol(transportWithData);\n\t      var output = new svc.protocol(new svc.transport(undefined, function(buf) {\n\t        try {\n\t          var frame = wsFrame.encode(buf, null, binEncoding);\n\t          socket.write(frame);\n\t        } catch (err) {\n\t          //TODO: Add better error processing\n\t        }\n\t      }));\n\n\t      try {\n\t        svc.processor.process(input, output);\n\t        transportWithData.commitPosition();\n\t      }\n\t      catch (err) {\n\t        if (err instanceof InputBufferUnderrunError) {\n\t          transportWithData.rollbackPosition();\n\t        }\n\t        else {\n\t          //TODO: Add better error processing\n\t        }\n\t      }\n\t    })(data);\n\t  }\n\n\t  //Create the server (HTTP or HTTPS)\n\t  var server = null;\n\t  if (options.tls) {\n\t    server = https.createServer(options.tls);\n\t  } else {\n\t    server = http.createServer();\n\t  }\n\n\t  //Wire up listeners for upgrade(to WebSocket) & request methods for:\n\t  //   - GET static files,\n\t  //   - POST XHR Thrift services\n\t  //   - OPTIONS CORS requests\n\t  server.on('request', function(request, response) {\n\t    if (request.method === 'POST') {\n\t      processPost(request, response);\n\t    } else if (request.method === 'GET') {\n\t      processGet(request, response);\n\t    } else if (request.method === 'OPTIONS') {\n\t      processOptions(request, response);\n\t    } else {\n\t      response.writeHead(500);\n\t      response.end();\n\t    }\n\t  }).on('upgrade', function(request, socket, head) {\n\t    //Lookup service\n\t    var svc;\n\t    try {\n\t      svc = services[Object.keys(services)[0]];\n\t    } catch(e) {\n\t      socket.write(\"HTTP/1.1 403 No Apache Thrift Service available\\r\\n\\r\\n\");\n\t      return;\n\t    }\n\t    //Perform upgrade\n\t    var hash = crypto.createHash(\"sha1\");\n\t    hash.update(request.headers['sec-websocket-key'] + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\");\n\t    socket.write(\"HTTP/1.1 101 Switching Protocols\\r\\n\" +\n\t                   \"Upgrade: websocket\\r\\n\" +\n\t                   \"Connection: Upgrade\\r\\n\" +\n\t                   \"Sec-WebSocket-Accept: \" + hash.digest(\"base64\") + \"\\r\\n\" +\n\t                   \"Sec-WebSocket-Origin: \" + request.headers.origin + \"\\r\\n\" +\n\t                   \"Sec-WebSocket-Location: ws://\" + request.headers.host + request.url + \"\\r\\n\" +\n\t                   \"\\r\\n\");\n\t    //Handle WebSocket traffic\n\t    var data = null;\n\t    socket.on('data', function(frame) {\n\t      try {\n\t        while (frame) {\n\t          var result = wsFrame.decode(frame);\n\t          //Prepend any existing decoded data\n\t          if (data) {\n\t            if (result.data) {\n\t              var newData = new Buffer(data.length + result.data.length);\n\t              data.copy(newData);\n\t              result.data.copy(newData, data.length);\n\t              result.data = newData;\n\t            } else {\n\t              result.data = data;\n\t            }\n\t            data = null;\n\t          }\n\t          //If this completes a message process it\n\t          if (result.FIN) {\n\t            processWS(result.data, socket, svc, result.binEncoding);\n\t          } else {\n\t            data = result.data;\n\t          }\n\t          //Prepare next frame for decoding (if any)\n\t          frame = result.nextFrame;\n\t        }\n\t      } catch(e) {\n\t        console.log(\"TWebSocketTransport Exception: \" + e);\n\t        socket.destroy();\n\t      }\n\t    });\n\t  });\n\n\t  //Return the server\n\t  return server;\n\t};\n\n\n\n\n\n\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t// resolves . and .. elements in a path array with directory names there\n\t// must be no slashes, empty elements, or device names (c:\\) in the array\n\t// (so also no leading and trailing slashes - it does not distinguish\n\t// relative and absolute paths)\n\tfunction normalizeArray(parts, allowAboveRoot) {\n\t  // if the path tries to go above the root, `up` ends up > 0\n\t  var up = 0;\n\t  for (var i = parts.length - 1; i >= 0; i--) {\n\t    var last = parts[i];\n\t    if (last === '.') {\n\t      parts.splice(i, 1);\n\t    } else if (last === '..') {\n\t      parts.splice(i, 1);\n\t      up++;\n\t    } else if (up) {\n\t      parts.splice(i, 1);\n\t      up--;\n\t    }\n\t  }\n\n\t  // if the path is allowed to go above the root, restore leading ..s\n\t  if (allowAboveRoot) {\n\t    for (; up--; up) {\n\t      parts.unshift('..');\n\t    }\n\t  }\n\n\t  return parts;\n\t}\n\n\t// Split a filename into [root, dir, basename, ext], unix version\n\t// 'root' is just a slash, or nothing.\n\tvar splitPathRe =\n\t    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n\tvar splitPath = function(filename) {\n\t  return splitPathRe.exec(filename).slice(1);\n\t};\n\n\t// path.resolve([from ...], to)\n\t// posix version\n\texports.resolve = function() {\n\t  var resolvedPath = '',\n\t      resolvedAbsolute = false;\n\n\t  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n\t    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n\t    // Skip empty and invalid entries\n\t    if (typeof path !== 'string') {\n\t      throw new TypeError('Arguments to path.resolve must be strings');\n\t    } else if (!path) {\n\t      continue;\n\t    }\n\n\t    resolvedPath = path + '/' + resolvedPath;\n\t    resolvedAbsolute = path.charAt(0) === '/';\n\t  }\n\n\t  // At this point the path should be resolved to a full absolute path, but\n\t  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n\t  // Normalize the path\n\t  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n\t    return !!p;\n\t  }), !resolvedAbsolute).join('/');\n\n\t  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n\t};\n\n\t// path.normalize(path)\n\t// posix version\n\texports.normalize = function(path) {\n\t  var isAbsolute = exports.isAbsolute(path),\n\t      trailingSlash = substr(path, -1) === '/';\n\n\t  // Normalize the path\n\t  path = normalizeArray(filter(path.split('/'), function(p) {\n\t    return !!p;\n\t  }), !isAbsolute).join('/');\n\n\t  if (!path && !isAbsolute) {\n\t    path = '.';\n\t  }\n\t  if (path && trailingSlash) {\n\t    path += '/';\n\t  }\n\n\t  return (isAbsolute ? '/' : '') + path;\n\t};\n\n\t// posix version\n\texports.isAbsolute = function(path) {\n\t  return path.charAt(0) === '/';\n\t};\n\n\t// posix version\n\texports.join = function() {\n\t  var paths = Array.prototype.slice.call(arguments, 0);\n\t  return exports.normalize(filter(paths, function(p, index) {\n\t    if (typeof p !== 'string') {\n\t      throw new TypeError('Arguments to path.join must be strings');\n\t    }\n\t    return p;\n\t  }).join('/'));\n\t};\n\n\n\t// path.relative(from, to)\n\t// posix version\n\texports.relative = function(from, to) {\n\t  from = exports.resolve(from).substr(1);\n\t  to = exports.resolve(to).substr(1);\n\n\t  function trim(arr) {\n\t    var start = 0;\n\t    for (; start < arr.length; start++) {\n\t      if (arr[start] !== '') break;\n\t    }\n\n\t    var end = arr.length - 1;\n\t    for (; end >= 0; end--) {\n\t      if (arr[end] !== '') break;\n\t    }\n\n\t    if (start > end) return [];\n\t    return arr.slice(start, end - start + 1);\n\t  }\n\n\t  var fromParts = trim(from.split('/'));\n\t  var toParts = trim(to.split('/'));\n\n\t  var length = Math.min(fromParts.length, toParts.length);\n\t  var samePartsLength = length;\n\t  for (var i = 0; i < length; i++) {\n\t    if (fromParts[i] !== toParts[i]) {\n\t      samePartsLength = i;\n\t      break;\n\t    }\n\t  }\n\n\t  var outputParts = [];\n\t  for (var i = samePartsLength; i < fromParts.length; i++) {\n\t    outputParts.push('..');\n\t  }\n\n\t  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n\t  return outputParts.join('/');\n\t};\n\n\texports.sep = '/';\n\texports.delimiter = ':';\n\n\texports.dirname = function(path) {\n\t  var result = splitPath(path),\n\t      root = result[0],\n\t      dir = result[1];\n\n\t  if (!root && !dir) {\n\t    // No dirname whatsoever\n\t    return '.';\n\t  }\n\n\t  if (dir) {\n\t    // It has a dirname, strip trailing slash\n\t    dir = dir.substr(0, dir.length - 1);\n\t  }\n\n\t  return root + dir;\n\t};\n\n\n\texports.basename = function(path, ext) {\n\t  var f = splitPath(path)[2];\n\t  // TODO: make this comparison case-insensitive on windows?\n\t  if (ext && f.substr(-1 * ext.length) === ext) {\n\t    f = f.substr(0, f.length - ext.length);\n\t  }\n\t  return f;\n\t};\n\n\n\texports.extname = function(path) {\n\t  return splitPath(path)[3];\n\t};\n\n\tfunction filter (xs, f) {\n\t    if (xs.filter) return xs.filter(f);\n\t    var res = [];\n\t    for (var i = 0; i < xs.length; i++) {\n\t        if (f(xs[i], i, xs)) res.push(xs[i]);\n\t    }\n\t    return res;\n\t}\n\n\t// String.prototype.substr - negative index don't work in IE8\n\tvar substr = 'ab'.substr(-1) === 'b'\n\t    ? function (str, start, len) { return str.substr(start, len) }\n\t    : function (str, start, len) {\n\t        if (start < 0) start = str.length + start;\n\t        return str.substr(start, len);\n\t    }\n\t;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(80)\n\n\tfunction error () {\n\t  var m = [].slice.call(arguments).join(' ')\n\t  throw new Error([\n\t    m,\n\t    'we accept pull requests',\n\t    'http://github.com/dominictarr/crypto-browserify'\n\t    ].join('\\n'))\n\t}\n\n\texports.createHash = __webpack_require__(82)\n\n\texports.createHmac = __webpack_require__(91)\n\n\texports.randomBytes = function(size, callback) {\n\t  if (callback && callback.call) {\n\t    try {\n\t      callback.call(this, undefined, new Buffer(rng(size)))\n\t    } catch (err) { callback(err) }\n\t  } else {\n\t    return new Buffer(rng(size))\n\t  }\n\t}\n\n\tfunction each(a, f) {\n\t  for(var i in a)\n\t    f(a[i], i)\n\t}\n\n\texports.getHashes = function () {\n\t  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']\n\t}\n\n\tvar p = __webpack_require__(92)(exports)\n\texports.pbkdf2 = p.pbkdf2\n\texports.pbkdf2Sync = p.pbkdf2Sync\n\t__webpack_require__(94)(exports, module.exports);\n\n\t// the least I can do is make error messages for the rest of the node.js/crypto api.\n\teach(['createCredentials'\n\t, 'createSign'\n\t, 'createVerify'\n\t, 'createDiffieHellman'\n\t], function (name) {\n\t  exports[name] = function () {\n\t    error('sorry,', name, 'is not implemented yet')\n\t  }\n\t})\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {\n\t  var g = ('undefined' === typeof window ? global : window) || {}\n\t  _crypto = (\n\t    g.crypto || g.msCrypto || __webpack_require__(81)\n\t  )\n\t  module.exports = function(size) {\n\t    // Modern Browsers\n\t    if(_crypto.getRandomValues) {\n\t      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array\n\t      /* This will not work in older browsers.\n\t       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n\t       */\n\t    \n\t      _crypto.getRandomValues(bytes);\n\t      return bytes;\n\t    }\n\t    else if (_crypto.randomBytes) {\n\t      return _crypto.randomBytes(size)\n\t    }\n\t    else\n\t      throw new Error(\n\t        'secure random number generation not supported by this browser\\n'+\n\t        'use chrome, FireFox or Internet Explorer 11'\n\t      )\n\t  }\n\t}())\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports) {\n\n\t/* (ignored) */\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(83)\n\n\tvar md5 = toConstructor(__webpack_require__(88))\n\tvar rmd160 = toConstructor(__webpack_require__(90))\n\n\tfunction toConstructor (fn) {\n\t  return function () {\n\t    var buffers = []\n\t    var m= {\n\t      update: function (data, enc) {\n\t        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)\n\t        buffers.push(data)\n\t        return this\n\t      },\n\t      digest: function (enc) {\n\t        var buf = Buffer.concat(buffers)\n\t        var r = fn(buf)\n\t        buffers = null\n\t        return enc ? r.toString(enc) : r\n\t      }\n\t    }\n\t    return m\n\t  }\n\t}\n\n\tmodule.exports = function (alg) {\n\t  if('md5' === alg) return new md5()\n\t  if('rmd160' === alg) return new rmd160()\n\t  return createHash(alg)\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar exports = module.exports = function (alg) {\n\t  var Alg = exports[alg]\n\t  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')\n\t  return new Alg()\n\t}\n\n\tvar Buffer = __webpack_require__(24).Buffer\n\tvar Hash   = __webpack_require__(84)(Buffer)\n\n\texports.sha1 = __webpack_require__(85)(Buffer, Hash)\n\texports.sha256 = __webpack_require__(86)(Buffer, Hash)\n\texports.sha512 = __webpack_require__(87)(Buffer, Hash)\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function (Buffer) {\n\n\t  //prototype class for hash functions\n\t  function Hash (blockSize, finalSize) {\n\t    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)\n\t    this._finalSize = finalSize\n\t    this._blockSize = blockSize\n\t    this._len = 0\n\t    this._s = 0\n\t  }\n\n\t  Hash.prototype.init = function () {\n\t    this._s = 0\n\t    this._len = 0\n\t  }\n\n\t  Hash.prototype.update = function (data, enc) {\n\t    if (\"string\" === typeof data) {\n\t      enc = enc || \"utf8\"\n\t      data = new Buffer(data, enc)\n\t    }\n\n\t    var l = this._len += data.length\n\t    var s = this._s = (this._s || 0)\n\t    var f = 0\n\t    var buffer = this._block\n\n\t    while (s < l) {\n\t      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))\n\t      var ch = (t - f)\n\n\t      for (var i = 0; i < ch; i++) {\n\t        buffer[(s % this._blockSize) + i] = data[i + f]\n\t      }\n\n\t      s += ch\n\t      f += ch\n\n\t      if ((s % this._blockSize) === 0) {\n\t        this._update(buffer)\n\t      }\n\t    }\n\t    this._s = s\n\n\t    return this\n\t  }\n\n\t  Hash.prototype.digest = function (enc) {\n\t    // Suppose the length of the message M, in bits, is l\n\t    var l = this._len * 8\n\n\t    // Append the bit 1 to the end of the message\n\t    this._block[this._len % this._blockSize] = 0x80\n\n\t    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize\n\t    this._block.fill(0, this._len % this._blockSize + 1)\n\n\t    if (l % (this._blockSize * 8) >= this._finalSize * 8) {\n\t      this._update(this._block)\n\t      this._block.fill(0)\n\t    }\n\n\t    // to this append the block which is equal to the number l written in binary\n\t    // TODO: handle case where l is > Math.pow(2, 29)\n\t    this._block.writeInt32BE(l, this._blockSize - 4)\n\n\t    var hash = this._update(this._block) || this._hash()\n\n\t    return enc ? hash.toString(enc) : hash\n\t  }\n\n\t  Hash.prototype._update = function () {\n\t    throw new Error('_update must be implemented by subclass')\n\t  }\n\n\t  return Hash\n\t}\n\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n\t * in FIPS PUB 180-1\n\t * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n\t * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n\t * Distributed under the BSD License\n\t * See http://pajhome.org.uk/crypt/md5 for details.\n\t */\n\n\tvar inherits = __webpack_require__(16).inherits\n\n\tmodule.exports = function (Buffer, Hash) {\n\n\t  var A = 0|0\n\t  var B = 4|0\n\t  var C = 8|0\n\t  var D = 12|0\n\t  var E = 16|0\n\n\t  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)\n\n\t  var POOL = []\n\n\t  function Sha1 () {\n\t    if(POOL.length)\n\t      return POOL.pop().init()\n\n\t    if(!(this instanceof Sha1)) return new Sha1()\n\t    this._w = W\n\t    Hash.call(this, 16*4, 14*4)\n\n\t    this._h = null\n\t    this.init()\n\t  }\n\n\t  inherits(Sha1, Hash)\n\n\t  Sha1.prototype.init = function () {\n\t    this._a = 0x67452301\n\t    this._b = 0xefcdab89\n\t    this._c = 0x98badcfe\n\t    this._d = 0x10325476\n\t    this._e = 0xc3d2e1f0\n\n\t    Hash.prototype.init.call(this)\n\t    return this\n\t  }\n\n\t  Sha1.prototype._POOL = POOL\n\t  Sha1.prototype._update = function (X) {\n\n\t    var a, b, c, d, e, _a, _b, _c, _d, _e\n\n\t    a = _a = this._a\n\t    b = _b = this._b\n\t    c = _c = this._c\n\t    d = _d = this._d\n\t    e = _e = this._e\n\n\t    var w = this._w\n\n\t    for(var j = 0; j < 80; j++) {\n\t      var W = w[j] = j < 16 ? X.readInt32BE(j*4)\n\t        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)\n\n\t      var t = add(\n\t        add(rol(a, 5), sha1_ft(j, b, c, d)),\n\t        add(add(e, W), sha1_kt(j))\n\t      )\n\n\t      e = d\n\t      d = c\n\t      c = rol(b, 30)\n\t      b = a\n\t      a = t\n\t    }\n\n\t    this._a = add(a, _a)\n\t    this._b = add(b, _b)\n\t    this._c = add(c, _c)\n\t    this._d = add(d, _d)\n\t    this._e = add(e, _e)\n\t  }\n\n\t  Sha1.prototype._hash = function () {\n\t    if(POOL.length < 100) POOL.push(this)\n\t    var H = new Buffer(20)\n\t    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)\n\t    H.writeInt32BE(this._a|0, A)\n\t    H.writeInt32BE(this._b|0, B)\n\t    H.writeInt32BE(this._c|0, C)\n\t    H.writeInt32BE(this._d|0, D)\n\t    H.writeInt32BE(this._e|0, E)\n\t    return H\n\t  }\n\n\t  /*\n\t   * Perform the appropriate triplet combination function for the current\n\t   * iteration\n\t   */\n\t  function sha1_ft(t, b, c, d) {\n\t    if(t < 20) return (b & c) | ((~b) & d);\n\t    if(t < 40) return b ^ c ^ d;\n\t    if(t < 60) return (b & c) | (b & d) | (c & d);\n\t    return b ^ c ^ d;\n\t  }\n\n\t  /*\n\t   * Determine the appropriate additive constant for the current iteration\n\t   */\n\t  function sha1_kt(t) {\n\t    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n\t           (t < 60) ? -1894007588 : -899497514;\n\t  }\n\n\t  /*\n\t   * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n\t   * to work around bugs in some JS interpreters.\n\t   * //dominictarr: this is 10 years old, so maybe this can be dropped?)\n\t   *\n\t   */\n\t  function add(x, y) {\n\t    return (x + y ) | 0\n\t  //lets see how this goes on testling.\n\t  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n\t  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n\t  //  return (msw << 16) | (lsw & 0xFFFF);\n\t  }\n\n\t  /*\n\t   * Bitwise rotate a 32-bit number to the left.\n\t   */\n\t  function rol(num, cnt) {\n\t    return (num << cnt) | (num >>> (32 - cnt));\n\t  }\n\n\t  return Sha1\n\t}\n\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/**\n\t * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n\t * in FIPS 180-2\n\t * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n\t * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n\t *\n\t */\n\n\tvar inherits = __webpack_require__(16).inherits\n\n\tmodule.exports = function (Buffer, Hash) {\n\n\t  var K = [\n\t      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n\t      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n\t      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n\t      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n\t      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n\t      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n\t      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n\t      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n\t      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n\t      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n\t      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n\t      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n\t      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n\t      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n\t      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n\t      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n\t    ]\n\n\t  var W = new Array(64)\n\n\t  function Sha256() {\n\t    this.init()\n\n\t    this._w = W //new Array(64)\n\n\t    Hash.call(this, 16*4, 14*4)\n\t  }\n\n\t  inherits(Sha256, Hash)\n\n\t  Sha256.prototype.init = function () {\n\n\t    this._a = 0x6a09e667|0\n\t    this._b = 0xbb67ae85|0\n\t    this._c = 0x3c6ef372|0\n\t    this._d = 0xa54ff53a|0\n\t    this._e = 0x510e527f|0\n\t    this._f = 0x9b05688c|0\n\t    this._g = 0x1f83d9ab|0\n\t    this._h = 0x5be0cd19|0\n\n\t    this._len = this._s = 0\n\n\t    return this\n\t  }\n\n\t  function S (X, n) {\n\t    return (X >>> n) | (X << (32 - n));\n\t  }\n\n\t  function R (X, n) {\n\t    return (X >>> n);\n\t  }\n\n\t  function Ch (x, y, z) {\n\t    return ((x & y) ^ ((~x) & z));\n\t  }\n\n\t  function Maj (x, y, z) {\n\t    return ((x & y) ^ (x & z) ^ (y & z));\n\t  }\n\n\t  function Sigma0256 (x) {\n\t    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));\n\t  }\n\n\t  function Sigma1256 (x) {\n\t    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));\n\t  }\n\n\t  function Gamma0256 (x) {\n\t    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));\n\t  }\n\n\t  function Gamma1256 (x) {\n\t    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));\n\t  }\n\n\t  Sha256.prototype._update = function(M) {\n\n\t    var W = this._w\n\t    var a, b, c, d, e, f, g, h\n\t    var T1, T2\n\n\t    a = this._a | 0\n\t    b = this._b | 0\n\t    c = this._c | 0\n\t    d = this._d | 0\n\t    e = this._e | 0\n\t    f = this._f | 0\n\t    g = this._g | 0\n\t    h = this._h | 0\n\n\t    for (var j = 0; j < 64; j++) {\n\t      var w = W[j] = j < 16\n\t        ? M.readInt32BE(j * 4)\n\t        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]\n\n\t      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w\n\n\t      T2 = Sigma0256(a) + Maj(a, b, c);\n\t      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;\n\t    }\n\n\t    this._a = (a + this._a) | 0\n\t    this._b = (b + this._b) | 0\n\t    this._c = (c + this._c) | 0\n\t    this._d = (d + this._d) | 0\n\t    this._e = (e + this._e) | 0\n\t    this._f = (f + this._f) | 0\n\t    this._g = (g + this._g) | 0\n\t    this._h = (h + this._h) | 0\n\n\t  };\n\n\t  Sha256.prototype._hash = function () {\n\t    var H = new Buffer(32)\n\n\t    H.writeInt32BE(this._a,  0)\n\t    H.writeInt32BE(this._b,  4)\n\t    H.writeInt32BE(this._c,  8)\n\t    H.writeInt32BE(this._d, 12)\n\t    H.writeInt32BE(this._e, 16)\n\t    H.writeInt32BE(this._f, 20)\n\t    H.writeInt32BE(this._g, 24)\n\t    H.writeInt32BE(this._h, 28)\n\n\t    return H\n\t  }\n\n\t  return Sha256\n\n\t}\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar inherits = __webpack_require__(16).inherits\n\n\tmodule.exports = function (Buffer, Hash) {\n\t  var K = [\n\t    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n\t    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n\t    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n\t    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n\t    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n\t    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n\t    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n\t    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n\t    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n\t    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n\t    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n\t    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n\t    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n\t    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n\t    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n\t    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n\t    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n\t    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n\t    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n\t    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n\t    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n\t    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n\t    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n\t    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n\t    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n\t    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n\t    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n\t    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n\t    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n\t    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n\t    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n\t    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n\t    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n\t    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n\t    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n\t    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n\t    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n\t    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n\t    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n\t    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n\t  ]\n\n\t  var W = new Array(160)\n\n\t  function Sha512() {\n\t    this.init()\n\t    this._w = W\n\n\t    Hash.call(this, 128, 112)\n\t  }\n\n\t  inherits(Sha512, Hash)\n\n\t  Sha512.prototype.init = function () {\n\n\t    this._a = 0x6a09e667|0\n\t    this._b = 0xbb67ae85|0\n\t    this._c = 0x3c6ef372|0\n\t    this._d = 0xa54ff53a|0\n\t    this._e = 0x510e527f|0\n\t    this._f = 0x9b05688c|0\n\t    this._g = 0x1f83d9ab|0\n\t    this._h = 0x5be0cd19|0\n\n\t    this._al = 0xf3bcc908|0\n\t    this._bl = 0x84caa73b|0\n\t    this._cl = 0xfe94f82b|0\n\t    this._dl = 0x5f1d36f1|0\n\t    this._el = 0xade682d1|0\n\t    this._fl = 0x2b3e6c1f|0\n\t    this._gl = 0xfb41bd6b|0\n\t    this._hl = 0x137e2179|0\n\n\t    this._len = this._s = 0\n\n\t    return this\n\t  }\n\n\t  function S (X, Xl, n) {\n\t    return (X >>> n) | (Xl << (32 - n))\n\t  }\n\n\t  function Ch (x, y, z) {\n\t    return ((x & y) ^ ((~x) & z));\n\t  }\n\n\t  function Maj (x, y, z) {\n\t    return ((x & y) ^ (x & z) ^ (y & z));\n\t  }\n\n\t  Sha512.prototype._update = function(M) {\n\n\t    var W = this._w\n\t    var a, b, c, d, e, f, g, h\n\t    var al, bl, cl, dl, el, fl, gl, hl\n\n\t    a = this._a | 0\n\t    b = this._b | 0\n\t    c = this._c | 0\n\t    d = this._d | 0\n\t    e = this._e | 0\n\t    f = this._f | 0\n\t    g = this._g | 0\n\t    h = this._h | 0\n\n\t    al = this._al | 0\n\t    bl = this._bl | 0\n\t    cl = this._cl | 0\n\t    dl = this._dl | 0\n\t    el = this._el | 0\n\t    fl = this._fl | 0\n\t    gl = this._gl | 0\n\t    hl = this._hl | 0\n\n\t    for (var i = 0; i < 80; i++) {\n\t      var j = i * 2\n\n\t      var Wi, Wil\n\n\t      if (i < 16) {\n\t        Wi = W[j] = M.readInt32BE(j * 4)\n\t        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)\n\n\t      } else {\n\t        var x  = W[j - 15*2]\n\t        var xl = W[j - 15*2 + 1]\n\t        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)\n\t        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)\n\n\t        x  = W[j - 2*2]\n\t        xl = W[j - 2*2 + 1]\n\t        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)\n\t        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)\n\n\t        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\t        var Wi7  = W[j - 7*2]\n\t        var Wi7l = W[j - 7*2 + 1]\n\n\t        var Wi16  = W[j - 16*2]\n\t        var Wi16l = W[j - 16*2 + 1]\n\n\t        Wil = gamma0l + Wi7l\n\t        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)\n\t        Wil = Wil + gamma1l\n\t        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)\n\t        Wil = Wil + Wi16l\n\t        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)\n\n\t        W[j] = Wi\n\t        W[j + 1] = Wil\n\t      }\n\n\t      var maj = Maj(a, b, c)\n\t      var majl = Maj(al, bl, cl)\n\n\t      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)\n\t      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)\n\t      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)\n\t      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)\n\n\t      // t1 = h + sigma1 + ch + K[i] + W[i]\n\t      var Ki = K[j]\n\t      var Kil = K[j + 1]\n\n\t      var ch = Ch(e, f, g)\n\t      var chl = Ch(el, fl, gl)\n\n\t      var t1l = hl + sigma1l\n\t      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)\n\t      t1l = t1l + chl\n\t      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)\n\t      t1l = t1l + Kil\n\t      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)\n\t      t1l = t1l + Wil\n\t      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)\n\n\t      // t2 = sigma0 + maj\n\t      var t2l = sigma0l + majl\n\t      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)\n\n\t      h  = g\n\t      hl = gl\n\t      g  = f\n\t      gl = fl\n\t      f  = e\n\t      fl = el\n\t      el = (dl + t1l) | 0\n\t      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0\n\t      d  = c\n\t      dl = cl\n\t      c  = b\n\t      cl = bl\n\t      b  = a\n\t      bl = al\n\t      al = (t1l + t2l) | 0\n\t      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0\n\t    }\n\n\t    this._al = (this._al + al) | 0\n\t    this._bl = (this._bl + bl) | 0\n\t    this._cl = (this._cl + cl) | 0\n\t    this._dl = (this._dl + dl) | 0\n\t    this._el = (this._el + el) | 0\n\t    this._fl = (this._fl + fl) | 0\n\t    this._gl = (this._gl + gl) | 0\n\t    this._hl = (this._hl + hl) | 0\n\n\t    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0\n\t    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0\n\t    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0\n\t    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0\n\t    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0\n\t    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0\n\t    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0\n\t    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0\n\t  }\n\n\t  Sha512.prototype._hash = function () {\n\t    var H = new Buffer(64)\n\n\t    function writeInt64BE(h, l, offset) {\n\t      H.writeInt32BE(h, offset)\n\t      H.writeInt32BE(l, offset + 4)\n\t    }\n\n\t    writeInt64BE(this._a, this._al, 0)\n\t    writeInt64BE(this._b, this._bl, 8)\n\t    writeInt64BE(this._c, this._cl, 16)\n\t    writeInt64BE(this._d, this._dl, 24)\n\t    writeInt64BE(this._e, this._el, 32)\n\t    writeInt64BE(this._f, this._fl, 40)\n\t    writeInt64BE(this._g, this._gl, 48)\n\t    writeInt64BE(this._h, this._hl, 56)\n\n\t    return H\n\t  }\n\n\t  return Sha512\n\n\t}\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n\t * Digest Algorithm, as defined in RFC 1321.\n\t * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n\t * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n\t * Distributed under the BSD License\n\t * See http://pajhome.org.uk/crypt/md5 for more info.\n\t */\n\n\tvar helpers = __webpack_require__(89);\n\n\t/*\n\t * Calculate the MD5 of an array of little-endian words, and a bit length\n\t */\n\tfunction core_md5(x, len)\n\t{\n\t  /* append padding */\n\t  x[len >> 5] |= 0x80 << ((len) % 32);\n\t  x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n\t  var a =  1732584193;\n\t  var b = -271733879;\n\t  var c = -1732584194;\n\t  var d =  271733878;\n\n\t  for(var i = 0; i < x.length; i += 16)\n\t  {\n\t    var olda = a;\n\t    var oldb = b;\n\t    var oldc = c;\n\t    var oldd = d;\n\n\t    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n\t    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);\n\t    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);\n\t    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n\t    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n\t    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n\t    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n\t    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);\n\t    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n\t    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n\t    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);\n\t    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);\n\t    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n\t    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);\n\t    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);\n\t    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);\n\n\t    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n\t    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n\t    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);\n\t    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);\n\t    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n\t    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);\n\t    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);\n\t    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);\n\t    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n\t    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);\n\t    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);\n\t    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n\t    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);\n\t    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n\t    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n\t    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);\n\n\t    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);\n\t    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n\t    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);\n\t    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);\n\t    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n\t    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n\t    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);\n\t    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);\n\t    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);\n\t    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);\n\t    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);\n\t    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);\n\t    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n\t    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);\n\t    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);\n\t    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\n\t    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n\t    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n\t    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);\n\t    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);\n\t    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n\t    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n\t    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);\n\t    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n\t    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n\t    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);\n\t    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n\t    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);\n\t    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n\t    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);\n\t    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);\n\t    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\n\t    a = safe_add(a, olda);\n\t    b = safe_add(b, oldb);\n\t    c = safe_add(c, oldc);\n\t    d = safe_add(d, oldd);\n\t  }\n\t  return Array(a, b, c, d);\n\n\t}\n\n\t/*\n\t * These functions implement the four basic operations the algorithm uses.\n\t */\n\tfunction md5_cmn(q, a, b, x, s, t)\n\t{\n\t  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);\n\t}\n\tfunction md5_ff(a, b, c, d, x, s, t)\n\t{\n\t  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n\t}\n\tfunction md5_gg(a, b, c, d, x, s, t)\n\t{\n\t  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n\t}\n\tfunction md5_hh(a, b, c, d, x, s, t)\n\t{\n\t  return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n\t}\n\tfunction md5_ii(a, b, c, d, x, s, t)\n\t{\n\t  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n\t}\n\n\t/*\n\t * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n\t * to work around bugs in some JS interpreters.\n\t */\n\tfunction safe_add(x, y)\n\t{\n\t  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n\t  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n\t  return (msw << 16) | (lsw & 0xFFFF);\n\t}\n\n\t/*\n\t * Bitwise rotate a 32-bit number to the left.\n\t */\n\tfunction bit_rol(num, cnt)\n\t{\n\t  return (num << cnt) | (num >>> (32 - cnt));\n\t}\n\n\tmodule.exports = function md5(buf) {\n\t  return helpers.hash(buf, core_md5, 16);\n\t};\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;\n\tvar zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);\n\tvar chrsz = 8;\n\n\tfunction toArray(buf, bigEndian) {\n\t  if ((buf.length % intSize) !== 0) {\n\t    var len = buf.length + (intSize - (buf.length % intSize));\n\t    buf = Buffer.concat([buf, zeroBuffer], len);\n\t  }\n\n\t  var arr = [];\n\t  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;\n\t  for (var i = 0; i < buf.length; i += intSize) {\n\t    arr.push(fn.call(buf, i));\n\t  }\n\t  return arr;\n\t}\n\n\tfunction toBuffer(arr, size, bigEndian) {\n\t  var buf = new Buffer(size);\n\t  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;\n\t  for (var i = 0; i < arr.length; i++) {\n\t    fn.call(buf, arr[i], i * 4, true);\n\t  }\n\t  return buf;\n\t}\n\n\tfunction hash(buf, fn, hashSize, bigEndian) {\n\t  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);\n\t  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);\n\t  return toBuffer(arr, hashSize, bigEndian);\n\t}\n\n\tmodule.exports = { hash: hash };\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {\n\tmodule.exports = ripemd160\n\n\n\n\t/*\n\tCryptoJS v3.1.2\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t/** @preserve\n\t(c) 2012 by Cédric Mesnil. All rights reserved.\n\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\n\t// Constants table\n\tvar zl = [\n\t    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n\t    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n\t    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n\t    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n\t    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];\n\tvar zr = [\n\t    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n\t    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n\t    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n\t    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n\t    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];\n\tvar sl = [\n\t     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n\t    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n\t    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n\t      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n\t    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];\n\tvar sr = [\n\t    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n\t    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n\t    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n\t    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n\t    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];\n\n\tvar hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];\n\tvar hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];\n\n\tvar bytesToWords = function (bytes) {\n\t  var words = [];\n\t  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n\t    words[b >>> 5] |= bytes[i] << (24 - b % 32);\n\t  }\n\t  return words;\n\t};\n\n\tvar wordsToBytes = function (words) {\n\t  var bytes = [];\n\t  for (var b = 0; b < words.length * 32; b += 8) {\n\t    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n\t  }\n\t  return bytes;\n\t};\n\n\tvar processBlock = function (H, M, offset) {\n\n\t  // Swap endian\n\t  for (var i = 0; i < 16; i++) {\n\t    var offset_i = offset + i;\n\t    var M_offset_i = M[offset_i];\n\n\t    // Swap\n\t    M[offset_i] = (\n\t        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t    );\n\t  }\n\n\t  // Working variables\n\t  var al, bl, cl, dl, el;\n\t  var ar, br, cr, dr, er;\n\n\t  ar = al = H[0];\n\t  br = bl = H[1];\n\t  cr = cl = H[2];\n\t  dr = dl = H[3];\n\t  er = el = H[4];\n\t  // Computation\n\t  var t;\n\t  for (var i = 0; i < 80; i += 1) {\n\t    t = (al +  M[offset+zl[i]])|0;\n\t    if (i<16){\n\t        t +=  f1(bl,cl,dl) + hl[0];\n\t    } else if (i<32) {\n\t        t +=  f2(bl,cl,dl) + hl[1];\n\t    } else if (i<48) {\n\t        t +=  f3(bl,cl,dl) + hl[2];\n\t    } else if (i<64) {\n\t        t +=  f4(bl,cl,dl) + hl[3];\n\t    } else {// if (i<80) {\n\t        t +=  f5(bl,cl,dl) + hl[4];\n\t    }\n\t    t = t|0;\n\t    t =  rotl(t,sl[i]);\n\t    t = (t+el)|0;\n\t    al = el;\n\t    el = dl;\n\t    dl = rotl(cl, 10);\n\t    cl = bl;\n\t    bl = t;\n\n\t    t = (ar + M[offset+zr[i]])|0;\n\t    if (i<16){\n\t        t +=  f5(br,cr,dr) + hr[0];\n\t    } else if (i<32) {\n\t        t +=  f4(br,cr,dr) + hr[1];\n\t    } else if (i<48) {\n\t        t +=  f3(br,cr,dr) + hr[2];\n\t    } else if (i<64) {\n\t        t +=  f2(br,cr,dr) + hr[3];\n\t    } else {// if (i<80) {\n\t        t +=  f1(br,cr,dr) + hr[4];\n\t    }\n\t    t = t|0;\n\t    t =  rotl(t,sr[i]) ;\n\t    t = (t+er)|0;\n\t    ar = er;\n\t    er = dr;\n\t    dr = rotl(cr, 10);\n\t    cr = br;\n\t    br = t;\n\t  }\n\t  // Intermediate hash value\n\t  t    = (H[1] + cl + dr)|0;\n\t  H[1] = (H[2] + dl + er)|0;\n\t  H[2] = (H[3] + el + ar)|0;\n\t  H[3] = (H[4] + al + br)|0;\n\t  H[4] = (H[0] + bl + cr)|0;\n\t  H[0] =  t;\n\t};\n\n\tfunction f1(x, y, z) {\n\t  return ((x) ^ (y) ^ (z));\n\t}\n\n\tfunction f2(x, y, z) {\n\t  return (((x)&(y)) | ((~x)&(z)));\n\t}\n\n\tfunction f3(x, y, z) {\n\t  return (((x) | (~(y))) ^ (z));\n\t}\n\n\tfunction f4(x, y, z) {\n\t  return (((x) & (z)) | ((y)&(~(z))));\n\t}\n\n\tfunction f5(x, y, z) {\n\t  return ((x) ^ ((y) |(~(z))));\n\t}\n\n\tfunction rotl(x,n) {\n\t  return (x<<n) | (x>>>(32-n));\n\t}\n\n\tfunction ripemd160(message) {\n\t  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];\n\n\t  if (typeof message == 'string')\n\t    message = new Buffer(message, 'utf8');\n\n\t  var m = bytesToWords(message);\n\n\t  var nBitsLeft = message.length * 8;\n\t  var nBitsTotal = message.length * 8;\n\n\t  // Add padding\n\t  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n\t      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)\n\t  );\n\n\t  for (var i=0 ; i<m.length; i += 16) {\n\t    processBlock(H, m, i);\n\t  }\n\n\t  // Swap endian\n\t  for (var i = 0; i < 5; i++) {\n\t      // Shortcut\n\t    var H_i = H[i];\n\n\t    // Swap\n\t    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t  }\n\n\t  var digestbytes = wordsToBytes(H);\n\t  return new Buffer(digestbytes);\n\t}\n\n\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(82)\n\n\tvar zeroBuffer = new Buffer(128)\n\tzeroBuffer.fill(0)\n\n\tmodule.exports = Hmac\n\n\tfunction Hmac (alg, key) {\n\t  if(!(this instanceof Hmac)) return new Hmac(alg, key)\n\t  this._opad = opad\n\t  this._alg = alg\n\n\t  var blocksize = (alg === 'sha512') ? 128 : 64\n\n\t  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key\n\n\t  if(key.length > blocksize) {\n\t    key = createHash(alg).update(key).digest()\n\t  } else if(key.length < blocksize) {\n\t    key = Buffer.concat([key, zeroBuffer], blocksize)\n\t  }\n\n\t  var ipad = this._ipad = new Buffer(blocksize)\n\t  var opad = this._opad = new Buffer(blocksize)\n\n\t  for(var i = 0; i < blocksize; i++) {\n\t    ipad[i] = key[i] ^ 0x36\n\t    opad[i] = key[i] ^ 0x5C\n\t  }\n\n\t  this._hash = createHash(alg).update(ipad)\n\t}\n\n\tHmac.prototype.update = function (data, enc) {\n\t  this._hash.update(data, enc)\n\t  return this\n\t}\n\n\tHmac.prototype.digest = function (enc) {\n\t  var h = this._hash.digest()\n\t  return createHash(this._alg).update(this._opad).update(h).digest(enc)\n\t}\n\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar pbkdf2Export = __webpack_require__(93)\n\n\tmodule.exports = function (crypto, exports) {\n\t  exports = exports || {}\n\n\t  var exported = pbkdf2Export(crypto)\n\n\t  exports.pbkdf2 = exported.pbkdf2\n\t  exports.pbkdf2Sync = exported.pbkdf2Sync\n\n\t  return exports\n\t}\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {\n\t  function pbkdf2(password, salt, iterations, keylen, digest, callback) {\n\t    if ('function' === typeof digest) {\n\t      callback = digest\n\t      digest = undefined\n\t    }\n\n\t    if ('function' !== typeof callback)\n\t      throw new Error('No callback provided to pbkdf2')\n\n\t    setTimeout(function() {\n\t      var result\n\n\t      try {\n\t        result = pbkdf2Sync(password, salt, iterations, keylen, digest)\n\t      } catch (e) {\n\t        return callback(e)\n\t      }\n\n\t      callback(undefined, result)\n\t    })\n\t  }\n\n\t  function pbkdf2Sync(password, salt, iterations, keylen, digest) {\n\t    if ('number' !== typeof iterations)\n\t      throw new TypeError('Iterations not a number')\n\n\t    if (iterations < 0)\n\t      throw new TypeError('Bad iterations')\n\n\t    if ('number' !== typeof keylen)\n\t      throw new TypeError('Key length not a number')\n\n\t    if (keylen < 0)\n\t      throw new TypeError('Bad key length')\n\n\t    digest = digest || 'sha1'\n\n\t    if (!Buffer.isBuffer(password)) password = new Buffer(password)\n\t    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)\n\n\t    var hLen, l = 1, r, T\n\t    var DK = new Buffer(keylen)\n\t    var block1 = new Buffer(salt.length + 4)\n\t    salt.copy(block1, 0, 0, salt.length)\n\n\t    for (var i = 1; i <= l; i++) {\n\t      block1.writeUInt32BE(i, salt.length)\n\n\t      var U = crypto.createHmac(digest, password).update(block1).digest()\n\n\t      if (!hLen) {\n\t        hLen = U.length\n\t        T = new Buffer(hLen)\n\t        l = Math.ceil(keylen / hLen)\n\t        r = keylen - (l - 1) * hLen\n\n\t        if (keylen > (Math.pow(2, 32) - 1) * hLen)\n\t          throw new TypeError('keylen exceeds maximum length')\n\t      }\n\n\t      U.copy(T, 0, 0, hLen)\n\n\t      for (var j = 1; j < iterations; j++) {\n\t        U = crypto.createHmac(digest, password).update(U).digest()\n\n\t        for (var k = 0; k < hLen; k++) {\n\t          T[k] ^= U[k]\n\t        }\n\t      }\n\n\t      var destPos = (i - 1) * hLen\n\t      var len = (i == l ? r : hLen)\n\t      T.copy(DK, destPos, 0, len)\n\t    }\n\n\t    return DK\n\t  }\n\n\t  return {\n\t    pbkdf2: pbkdf2,\n\t    pbkdf2Sync: pbkdf2Sync\n\t  }\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function (crypto, exports) {\n\t  exports = exports || {};\n\t  var ciphers = __webpack_require__(95)(crypto);\n\t  exports.createCipher = ciphers.createCipher;\n\t  exports.createCipheriv = ciphers.createCipheriv;\n\t  var deciphers = __webpack_require__(112)(crypto);\n\t  exports.createDecipher = deciphers.createDecipher;\n\t  exports.createDecipheriv = deciphers.createDecipheriv;\n\t  var modes = __webpack_require__(103);\n\t  function listCiphers () {\n\t    return Object.keys(modes);\n\t  }\n\t  exports.listCiphers = listCiphers;\n\t};\n\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(96);\n\tvar Transform = __webpack_require__(97);\n\tvar inherits = __webpack_require__(38);\n\tvar modes = __webpack_require__(103);\n\tvar ebtk = __webpack_require__(104);\n\tvar StreamCipher = __webpack_require__(105);\n\tinherits(Cipher, Transform);\n\tfunction Cipher(mode, key, iv) {\n\t  if (!(this instanceof Cipher)) {\n\t    return new Cipher(mode, key, iv);\n\t  }\n\t  Transform.call(this);\n\t  this._cache = new Splitter();\n\t  this._cipher = new aes.AES(key);\n\t  this._prev = new Buffer(iv.length);\n\t  iv.copy(this._prev);\n\t  this._mode = mode;\n\t}\n\tCipher.prototype._transform = function (data, _, next) {\n\t  this._cache.add(data);\n\t  var chunk;\n\t  var thing;\n\t  while ((chunk = this._cache.get())) {\n\t    thing = this._mode.encrypt(this, chunk);\n\t    this.push(thing);\n\t  }\n\t  next();\n\t};\n\tCipher.prototype._flush = function (next) {\n\t  var chunk = this._cache.flush();\n\t  this.push(this._mode.encrypt(this, chunk));\n\t  this._cipher.scrub();\n\t  next();\n\t};\n\n\n\tfunction Splitter() {\n\t   if (!(this instanceof Splitter)) {\n\t    return new Splitter();\n\t  }\n\t  this.cache = new Buffer('');\n\t}\n\tSplitter.prototype.add = function (data) {\n\t  this.cache = Buffer.concat([this.cache, data]);\n\t};\n\n\tSplitter.prototype.get = function () {\n\t  if (this.cache.length > 15) {\n\t    var out = this.cache.slice(0, 16);\n\t    this.cache = this.cache.slice(16);\n\t    return out;\n\t  }\n\t  return null;\n\t};\n\tSplitter.prototype.flush = function () {\n\t  var len = 16 - this.cache.length;\n\t  var padBuff = new Buffer(len);\n\n\t  var i = -1;\n\t  while (++i < len) {\n\t    padBuff.writeUInt8(len, i);\n\t  }\n\t  var out = Buffer.concat([this.cache, padBuff]);\n\t  return out;\n\t};\n\tvar modelist = {\n\t  ECB: __webpack_require__(106),\n\t  CBC: __webpack_require__(107),\n\t  CFB: __webpack_require__(109),\n\t  OFB: __webpack_require__(110),\n\t  CTR: __webpack_require__(111)\n\t};\n\tmodule.exports = function (crypto) {\n\t  function createCipheriv(suite, password, iv) {\n\t    var config = modes[suite];\n\t    if (!config) {\n\t      throw new TypeError('invalid suite type');\n\t    }\n\t    if (typeof iv === 'string') {\n\t      iv = new Buffer(iv);\n\t    }\n\t    if (typeof password === 'string') {\n\t      password = new Buffer(password);\n\t    }\n\t    if (password.length !== config.key/8) {\n\t      throw new TypeError('invalid key length ' + password.length);\n\t    }\n\t    if (iv.length !== config.iv) {\n\t      throw new TypeError('invalid iv length ' + iv.length);\n\t    }\n\t    if (config.type === 'stream') {\n\t      return new StreamCipher(modelist[config.mode], password, iv);\n\t    }\n\t    return new Cipher(modelist[config.mode], password, iv);\n\t  }\n\t  function createCipher (suite, password) {\n\t    var config = modes[suite];\n\t    if (!config) {\n\t      throw new TypeError('invalid suite type');\n\t    }\n\t    var keys = ebtk(crypto, password, config.key, config.iv);\n\t    return createCipheriv(suite, keys.key, keys.iv);\n\t  }\n\t  return {\n\t    createCipher: createCipher,\n\t    createCipheriv: createCipheriv\n\t  };\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var uint_max = Math.pow(2, 32);\n\tfunction fixup_uint32(x) {\n\t    var ret, x_pos;\n\t    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;\n\t    return ret;\n\t}\n\tfunction scrub_vec(v) {\n\t  var i, _i, _ref;\n\t  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n\t    v[i] = 0;\n\t  }\n\t  return false;\n\t}\n\n\tfunction Global() {\n\t  var i;\n\t  this.SBOX = [];\n\t  this.INV_SBOX = [];\n\t  this.SUB_MIX = (function() {\n\t    var _i, _results;\n\t    _results = [];\n\t    for (i = _i = 0; _i < 4; i = ++_i) {\n\t      _results.push([]);\n\t    }\n\t    return _results;\n\t  })();\n\t  this.INV_SUB_MIX = (function() {\n\t    var _i, _results;\n\t    _results = [];\n\t    for (i = _i = 0; _i < 4; i = ++_i) {\n\t      _results.push([]);\n\t    }\n\t    return _results;\n\t  })();\n\t  this.init();\n\t  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\t}\n\n\tGlobal.prototype.init = function() {\n\t  var d, i, sx, t, x, x2, x4, x8, xi, _i;\n\t  d = (function() {\n\t    var _i, _results;\n\t    _results = [];\n\t    for (i = _i = 0; _i < 256; i = ++_i) {\n\t      if (i < 128) {\n\t        _results.push(i << 1);\n\t      } else {\n\t        _results.push((i << 1) ^ 0x11b);\n\t      }\n\t    }\n\t    return _results;\n\t  })();\n\t  x = 0;\n\t  xi = 0;\n\t  for (i = _i = 0; _i < 256; i = ++_i) {\n\t    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t    this.SBOX[x] = sx;\n\t    this.INV_SBOX[sx] = x;\n\t    x2 = d[x];\n\t    x4 = d[x2];\n\t    x8 = d[x4];\n\t    t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);\n\t    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);\n\t    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);\n\t    this.SUB_MIX[3][x] = t;\n\t    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);\n\t    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);\n\t    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);\n\t    this.INV_SUB_MIX[3][sx] = t;\n\t    if (x === 0) {\n\t      x = xi = 1;\n\t    } else {\n\t      x = x2 ^ d[d[d[x8 ^ x2]]];\n\t      xi ^= d[d[xi]];\n\t    }\n\t  }\n\t  return true;\n\t};\n\n\tvar G = new Global();\n\n\n\tAES.blockSize = 4 * 4;\n\n\tAES.prototype.blockSize = AES.blockSize;\n\n\tAES.keySize = 256 / 8;\n\n\tAES.prototype.keySize = AES.keySize;\n\n\tAES.ivSize = AES.blockSize;\n\n\tAES.prototype.ivSize = AES.ivSize;\n\n\t function bufferToArray(buf) {\n\t  var len = buf.length/4;\n\t  var out = new Array(len);\n\t  var i = -1;\n\t  while (++i < len) {\n\t    out[i] = buf.readUInt32BE(i * 4);\n\t  }\n\t  return out;\n\t }\n\tfunction AES(key) {\n\t  this._key = bufferToArray(key);\n\t  this._doReset();\n\t}\n\n\tAES.prototype._doReset = function() {\n\t  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;\n\t  keyWords = this._key;\n\t  keySize = keyWords.length;\n\t  this._nRounds = keySize + 6;\n\t  ksRows = (this._nRounds + 1) * 4;\n\t  this._keySchedule = [];\n\t  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {\n\t    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);\n\t  }\n\t  this._invKeySchedule = [];\n\t  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {\n\t    ksRow = ksRows - invKsRow;\n\t    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];\n\t    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];\n\t  }\n\t  return true;\n\t};\n\n\tAES.prototype.encryptBlock = function(M) {\n\t  M = bufferToArray(new Buffer(M));\n\t  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);\n\t  var buf = new Buffer(16);\n\t  buf.writeUInt32BE(out[0], 0);\n\t  buf.writeUInt32BE(out[1], 4);\n\t  buf.writeUInt32BE(out[2], 8);\n\t  buf.writeUInt32BE(out[3], 12);\n\t  return buf;\n\t};\n\n\tAES.prototype.decryptBlock = function(M) {\n\t  M = bufferToArray(new Buffer(M));\n\t  var temp = [M[3], M[1]];\n\t  M[1] = temp[0];\n\t  M[3] = temp[1];\n\t  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);\n\t  var buf = new Buffer(16);\n\t  buf.writeUInt32BE(out[0], 0);\n\t  buf.writeUInt32BE(out[3], 4);\n\t  buf.writeUInt32BE(out[2], 8);\n\t  buf.writeUInt32BE(out[1], 12);\n\t  return buf;\n\t};\n\n\tAES.prototype.scrub = function() {\n\t  scrub_vec(this._keySchedule);\n\t  scrub_vec(this._invKeySchedule);\n\t  scrub_vec(this._key);\n\t};\n\n\tAES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {\n\t  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;\n\n\t  s0 = M[0] ^ keySchedule[0];\n\t  s1 = M[1] ^ keySchedule[1];\n\t  s2 = M[2] ^ keySchedule[2];\n\t  s3 = M[3] ^ keySchedule[3];\n\t  ksRow = 4;\n\t  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {\n\t    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];\n\t    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];\n\t    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];\n\t    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];\n\t    s0 = t0;\n\t    s1 = t1;\n\t    s2 = t2;\n\t    s3 = t3;\n\t  }\n\t  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\t  return [\n\t    fixup_uint32(t0),\n\t    fixup_uint32(t1),\n\t    fixup_uint32(t2),\n\t    fixup_uint32(t3)\n\t  ];\n\n\t};\n\n\n\n\n\t  exports.AES = AES;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(98).Transform;\n\tvar inherits = __webpack_require__(38);\n\n\tmodule.exports = CipherBase;\n\tinherits(CipherBase, Transform);\n\tfunction CipherBase() {\n\t  Transform.call(this);\n\t}\n\tCipherBase.prototype.update = function (data, inputEnd, outputEnc) {\n\t  this.write(data, inputEnd);\n\t  var outData = new Buffer('');\n\t  var chunk;\n\t  while ((chunk = this.read())) {\n\t    outData = Buffer.concat([outData, chunk]);\n\t  }\n\t  if (outputEnc) {\n\t    outData = outData.toString(outputEnc);\n\t  }\n\t  return outData;\n\t};\n\tCipherBase.prototype.final = function (outputEnc) {\n\t  this.end();\n\t  var outData = new Buffer('');\n\t  var chunk;\n\t  while ((chunk = this.read())) {\n\t    outData = Buffer.concat([outData, chunk]);\n\t  }\n\t  if (outputEnc) {\n\t    outData = outData.toString(outputEnc);\n\t  }\n\t  return outData;\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\tmodule.exports = Stream;\n\n\tvar EE = __webpack_require__(21).EventEmitter;\n\tvar inherits = __webpack_require__(38);\n\n\tinherits(Stream, EE);\n\tStream.Readable = __webpack_require__(40);\n\tStream.Writable = __webpack_require__(99);\n\tStream.Duplex = __webpack_require__(100);\n\tStream.Transform = __webpack_require__(101);\n\tStream.PassThrough = __webpack_require__(102);\n\n\t// Backwards-compat with node 0.4.x\n\tStream.Stream = Stream;\n\n\n\n\t// old-style streams.  Note that the pipe method (the only relevant\n\t// part of this class) is overridden in the Readable class.\n\n\tfunction Stream() {\n\t  EE.call(this);\n\t}\n\n\tStream.prototype.pipe = function(dest, options) {\n\t  var source = this;\n\n\t  function ondata(chunk) {\n\t    if (dest.writable) {\n\t      if (false === dest.write(chunk) && source.pause) {\n\t        source.pause();\n\t      }\n\t    }\n\t  }\n\n\t  source.on('data', ondata);\n\n\t  function ondrain() {\n\t    if (source.readable && source.resume) {\n\t      source.resume();\n\t    }\n\t  }\n\n\t  dest.on('drain', ondrain);\n\n\t  // If the 'end' option is not supplied, dest.end() will be called when\n\t  // source gets the 'end' or 'close' events.  Only dest.end() once.\n\t  if (!dest._isStdio && (!options || options.end !== false)) {\n\t    source.on('end', onend);\n\t    source.on('close', onclose);\n\t  }\n\n\t  var didOnEnd = false;\n\t  function onend() {\n\t    if (didOnEnd) return;\n\t    didOnEnd = true;\n\n\t    dest.end();\n\t  }\n\n\n\t  function onclose() {\n\t    if (didOnEnd) return;\n\t    didOnEnd = true;\n\n\t    if (typeof dest.destroy === 'function') dest.destroy();\n\t  }\n\n\t  // don't leave dangling pipes when there are errors.\n\t  function onerror(er) {\n\t    cleanup();\n\t    if (EE.listenerCount(this, 'error') === 0) {\n\t      throw er; // Unhandled stream error in pipe.\n\t    }\n\t  }\n\n\t  source.on('error', onerror);\n\t  dest.on('error', onerror);\n\n\t  // remove all the event listeners that were added.\n\t  function cleanup() {\n\t    source.removeListener('data', ondata);\n\t    dest.removeListener('drain', ondrain);\n\n\t    source.removeListener('end', onend);\n\t    source.removeListener('close', onclose);\n\n\t    source.removeListener('error', onerror);\n\t    dest.removeListener('error', onerror);\n\n\t    source.removeListener('end', cleanup);\n\t    source.removeListener('close', cleanup);\n\n\t    dest.removeListener('close', cleanup);\n\t  }\n\n\t  source.on('end', cleanup);\n\t  source.on('close', cleanup);\n\n\t  dest.on('close', cleanup);\n\n\t  dest.emit('pipe', source);\n\n\t  // Allow for unix-like usage: A.pipe(B).pipe(C)\n\t  return dest;\n\t};\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(49);\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(48);\n\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(40).Transform\n\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(40).PassThrough\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports) {\n\n\texports['aes-128-ecb'] = {\n\t  cipher: 'AES',\n\t  key: 128,\n\t  iv: 0,\n\t  mode: 'ECB',\n\t  type: 'block'\n\t};\n\texports['aes-192-ecb'] = {\n\t  cipher: 'AES',\n\t  key: 192,\n\t  iv: 0,\n\t  mode: 'ECB',\n\t  type: 'block'\n\t};\n\texports['aes-256-ecb'] = {\n\t  cipher: 'AES',\n\t  key: 256,\n\t  iv: 0,\n\t  mode: 'ECB',\n\t  type: 'block'\n\t};\n\texports['aes-128-cbc'] = {\n\t  cipher: 'AES',\n\t  key: 128,\n\t  iv: 16,\n\t  mode: 'CBC',\n\t  type: 'block'\n\t};\n\texports['aes-192-cbc'] = {\n\t  cipher: 'AES',\n\t  key: 192,\n\t  iv: 16,\n\t  mode: 'CBC',\n\t  type: 'block'\n\t};\n\texports['aes-256-cbc'] = {\n\t  cipher: 'AES',\n\t  key: 256,\n\t  iv: 16,\n\t  mode: 'CBC',\n\t  type: 'block'\n\t};\n\texports['aes128'] = exports['aes-128-cbc'];\n\texports['aes192'] = exports['aes-192-cbc'];\n\texports['aes256'] = exports['aes-256-cbc'];\n\texports['aes-128-cfb'] = {\n\t  cipher: 'AES',\n\t  key: 128,\n\t  iv: 16,\n\t  mode: 'CFB',\n\t  type: 'stream'\n\t};\n\texports['aes-192-cfb'] = {\n\t  cipher: 'AES',\n\t  key: 192,\n\t  iv: 16,\n\t  mode: 'CFB',\n\t  type: 'stream'\n\t};\n\texports['aes-256-cfb'] = {\n\t  cipher: 'AES',\n\t  key: 256,\n\t  iv: 16,\n\t  mode: 'CFB',\n\t  type: 'stream'\n\t};\n\texports['aes-128-ofb'] = {\n\t  cipher: 'AES',\n\t  key: 128,\n\t  iv: 16,\n\t  mode: 'OFB',\n\t  type: 'stream'\n\t};\n\texports['aes-192-ofb'] = {\n\t  cipher: 'AES',\n\t  key: 192,\n\t  iv: 16,\n\t  mode: 'OFB',\n\t  type: 'stream'\n\t};\n\texports['aes-256-ofb'] = {\n\t  cipher: 'AES',\n\t  key: 256,\n\t  iv: 16,\n\t  mode: 'OFB',\n\t  type: 'stream'\n\t};\n\texports['aes-128-ctr'] = {\n\t  cipher: 'AES',\n\t  key: 128,\n\t  iv: 16,\n\t  mode: 'CTR',\n\t  type: 'stream'\n\t};\n\texports['aes-192-ctr'] = {\n\t  cipher: 'AES',\n\t  key: 192,\n\t  iv: 16,\n\t  mode: 'CTR',\n\t  type: 'stream'\n\t};\n\texports['aes-256-ctr'] = {\n\t  cipher: 'AES',\n\t  key: 256,\n\t  iv: 16,\n\t  mode: 'CTR',\n\t  type: 'stream'\n\t};\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {\n\tmodule.exports = function (crypto, password, keyLen, ivLen) {\n\t  keyLen = keyLen/8;\n\t  ivLen = ivLen || 0;\n\t  var ki = 0;\n\t  var ii = 0;\n\t  var key = new Buffer(keyLen);\n\t  var iv = new Buffer(ivLen);\n\t  var addmd = 0;\n\t  var md, md_buf;\n\t  var i;\n\t  while (true) {\n\t    md = crypto.createHash('md5');\n\t    if(addmd++ > 0) {\n\t       md.update(md_buf);\n\t    }\n\t    md.update(password);\n\t    md_buf = md.digest();\n\t    i = 0;\n\t    if(keyLen > 0) {\n\t      while(true) {\n\t        if(keyLen === 0) {\n\t          break;\n\t        }\n\t        if(i === md_buf.length) {\n\t          break;\n\t        }\n\t        key[ki++] = md_buf[i];\n\t        keyLen--;\n\t        i++;\n\t       }\n\t    }\n\t    if(ivLen > 0 && i !== md_buf.length) {\n\t      while(true) {\n\t        if(ivLen === 0) {\n\t          break;\n\t        }\n\t        if(i === md_buf.length) {\n\t          break;\n\t        }\n\t       iv[ii++] = md_buf[i];\n\t       ivLen--;\n\t       i++;\n\t     }\n\t   }\n\t   if(keyLen === 0 && ivLen === 0) {\n\t      break;\n\t    }\n\t  }\n\t  for(i=0;i<md_buf.length;i++) {\n\t    md_buf[i] = 0;\n\t  }\n\t  return {\n\t    key: key,\n\t    iv: iv\n\t  };\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(96);\n\tvar Transform = __webpack_require__(97);\n\tvar inherits = __webpack_require__(38);\n\n\tinherits(StreamCipher, Transform);\n\tmodule.exports = StreamCipher;\n\tfunction StreamCipher(mode, key, iv, decrypt) {\n\t  if (!(this instanceof StreamCipher)) {\n\t    return new StreamCipher(mode, key, iv);\n\t  }\n\t  Transform.call(this);\n\t  this._cipher = new aes.AES(key);\n\t  this._prev = new Buffer(iv.length);\n\t  this._cache = new Buffer('');\n\t  this._secCache = new Buffer('');\n\t  this._decrypt = decrypt;\n\t  iv.copy(this._prev);\n\t  this._mode = mode;\n\t}\n\tStreamCipher.prototype._transform = function (chunk, _, next) {\n\t  next(null, this._mode.encrypt(this, chunk, this._decrypt));\n\t};\n\tStreamCipher.prototype._flush = function (next) {\n\t  this._cipher.scrub();\n\t  next();\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports) {\n\n\texports.encrypt = function (self, block) {\n\t  return self._cipher.encryptBlock(block);\n\t};\n\texports.decrypt = function (self, block) {\n\t  return self._cipher.decryptBlock(block);\n\t};\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar xor = __webpack_require__(108);\n\texports.encrypt = function (self, block) {\n\t  var data = xor(block, self._prev);\n\t  self._prev = self._cipher.encryptBlock(data);\n\t  return self._prev;\n\t};\n\texports.decrypt = function (self, block) {\n\t  var pad = self._prev;\n\t  self._prev = block;\n\t  var out = self._cipher.decryptBlock(block);\n\t  return xor(out, pad);\n\t};\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = xor;\n\tfunction xor(a, b) {\n\t  var len = Math.min(a.length, b.length);\n\t  var out = new Buffer(len);\n\t  var i = -1;\n\t  while (++i < len) {\n\t    out.writeUInt8(a[i] ^ b[i], i);\n\t  }\n\t  return out;\n\t}\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(108);\n\texports.encrypt = function (self, data, decrypt) {\n\t  var out = new Buffer('');\n\t  var len;\n\t  while (data.length) {\n\t    if (self._cache.length === 0) {\n\t      self._cache = self._cipher.encryptBlock(self._prev);\n\t      self._prev = new Buffer('');\n\t    }\n\t    if (self._cache.length <= data.length) {\n\t      len = self._cache.length;\n\t      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);\n\t      data = data.slice(len);\n\t    } else {\n\t      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);\n\t      break;\n\t    }\n\t  }\n\t  return out;\n\t};\n\tfunction encryptStart(self, data, decrypt) {\n\t  var len = data.length;\n\t  var out = xor(data, self._cache);\n\t  self._cache = self._cache.slice(len);\n\t  self._prev = Buffer.concat([self._prev, decrypt?data:out]);\n\t  return out;\n\t}\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(108);\n\tfunction getBlock(self) {\n\t  self._prev = self._cipher.encryptBlock(self._prev);\n\t  return self._prev;\n\t}\n\texports.encrypt = function (self, chunk) {\n\t  while (self._cache.length < chunk.length) {\n\t    self._cache = Buffer.concat([self._cache, getBlock(self)]);\n\t  }\n\t  var pad = self._cache.slice(0, chunk.length);\n\t  self._cache = self._cache.slice(chunk.length);\n\t  return xor(chunk, pad);\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(108);\n\tfunction getBlock(self) {\n\t  var out = self._cipher.encryptBlock(self._prev);\n\t  incr32(self._prev);\n\t  return out;\n\t}\n\texports.encrypt = function (self, chunk) {\n\t  while (self._cache.length < chunk.length) {\n\t    self._cache = Buffer.concat([self._cache, getBlock(self)]);\n\t  }\n\t  var pad = self._cache.slice(0, chunk.length);\n\t  self._cache = self._cache.slice(chunk.length);\n\t  return xor(chunk, pad);\n\t};\n\tfunction incr32(iv) {\n\t  var len = iv.length;\n\t  var item;\n\t  while (len--) {\n\t    item = iv.readUInt8(len);\n\t    if (item === 255) {\n\t      iv.writeUInt8(0, len);\n\t    } else {\n\t      item++;\n\t      iv.writeUInt8(item, len);\n\t      break;\n\t    }\n\t  }\n\t}\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(96);\n\tvar Transform = __webpack_require__(97);\n\tvar inherits = __webpack_require__(38);\n\tvar modes = __webpack_require__(103);\n\tvar StreamCipher = __webpack_require__(105);\n\tvar ebtk = __webpack_require__(104);\n\n\tinherits(Decipher, Transform);\n\tfunction Decipher(mode, key, iv) {\n\t  if (!(this instanceof Decipher)) {\n\t    return new Decipher(mode, key, iv);\n\t  }\n\t  Transform.call(this);\n\t  this._cache = new Splitter();\n\t  this._last = void 0;\n\t  this._cipher = new aes.AES(key);\n\t  this._prev = new Buffer(iv.length);\n\t  iv.copy(this._prev);\n\t  this._mode = mode;\n\t}\n\tDecipher.prototype._transform = function (data, _, next) {\n\t  this._cache.add(data);\n\t  var chunk;\n\t  var thing;\n\t  while ((chunk = this._cache.get())) {\n\t    thing = this._mode.decrypt(this, chunk);\n\t    this.push(thing);\n\t  }\n\t  next();\n\t};\n\tDecipher.prototype._flush = function (next) {\n\t  var chunk = this._cache.flush();\n\t  if (!chunk) {\n\t    return next;\n\t  }\n\n\t  this.push(unpad(this._mode.decrypt(this, chunk)));\n\n\t  next();\n\t};\n\n\tfunction Splitter() {\n\t   if (!(this instanceof Splitter)) {\n\t    return new Splitter();\n\t  }\n\t  this.cache = new Buffer('');\n\t}\n\tSplitter.prototype.add = function (data) {\n\t  this.cache = Buffer.concat([this.cache, data]);\n\t};\n\n\tSplitter.prototype.get = function () {\n\t  if (this.cache.length > 16) {\n\t    var out = this.cache.slice(0, 16);\n\t    this.cache = this.cache.slice(16);\n\t    return out;\n\t  }\n\t  return null;\n\t};\n\tSplitter.prototype.flush = function () {\n\t  if (this.cache.length) {\n\t    return this.cache;\n\t  }\n\t};\n\tfunction unpad(last) {\n\t  var padded = last[15];\n\t  if (padded === 16) {\n\t    return;\n\t  }\n\t  return last.slice(0, 16 - padded);\n\t}\n\n\tvar modelist = {\n\t  ECB: __webpack_require__(106),\n\t  CBC: __webpack_require__(107),\n\t  CFB: __webpack_require__(109),\n\t  OFB: __webpack_require__(110),\n\t  CTR: __webpack_require__(111)\n\t};\n\n\tmodule.exports = function (crypto) {\n\t  function createDecipheriv(suite, password, iv) {\n\t    var config = modes[suite];\n\t    if (!config) {\n\t      throw new TypeError('invalid suite type');\n\t    }\n\t    if (typeof iv === 'string') {\n\t      iv = new Buffer(iv);\n\t    }\n\t    if (typeof password === 'string') {\n\t      password = new Buffer(password);\n\t    }\n\t    if (password.length !== config.key/8) {\n\t      throw new TypeError('invalid key length ' + password.length);\n\t    }\n\t    if (iv.length !== config.iv) {\n\t      throw new TypeError('invalid iv length ' + iv.length);\n\t    }\n\t    if (config.type === 'stream') {\n\t      return new StreamCipher(modelist[config.mode], password, iv, true);\n\t    }\n\t    return new Decipher(modelist[config.mode], password, iv);\n\t  }\n\n\t  function createDecipher (suite, password) {\n\t    var config = modes[suite];\n\t    if (!config) {\n\t      throw new TypeError('invalid suite type');\n\t    }\n\t    var keys = ebtk(crypto, password, config.key, config.iv);\n\t    return createDecipheriv(suite, keys.key, keys.iv);\n\t  }\n\t  return {\n\t    createDecipher: createDecipher,\n\t    createDecipheriv: createDecipheriv\n\t  };\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))\n\n/***/ }),\n/* 113 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\tvar Thrift = __webpack_require__(15);\n\n\texports.MultiplexedProcessor = MultiplexedProcessor;\n\n\tfunction MultiplexedProcessor(stream, options) {\n\t  this.services = {};\n\t};\n\n\tMultiplexedProcessor.prototype.registerProcessor = function(name, handler) {\n\t  this.services[name] = handler;\n\t};\n\n\tMultiplexedProcessor.prototype.process = function(inp, out) {\n\t  var begin = inp.readMessageBegin();\n\n\t  if (begin.mtype != Thrift.MessageType.CALL && begin.mtype != Thrift.MessageType.ONEWAY) {\n\t    throw new Thrift.TException('TMultiplexedProcessor: Unexpected message type');\n\t  }\n\n\t  var p = begin.fname.split(':');\n\t  var sname = p[0];\n\t  var fname = p[1];\n\n\t  if (! (sname in this.services)) {\n\t    throw new Thrift.TException('TMultiplexedProcessor: Unknown service: ' + sname);\n\t  }\n\n\t  //construct a proxy object which stubs the readMessageBegin\n\t  //for the service\n\t  var inpProxy = {};\n\n\t  for (var attr in inp) {\n\t    inpProxy[attr] = inp[attr];\n\t  }\n\n\t  inpProxy.readMessageBegin = function() {\n\t    return {\n\t      fname: fname,\n\t      mtype: begin.mtype,\n\t      rseqid: begin.rseqid\n\t    };\n\t  };\n\n\t  this.services[sname].process(inpProxy, out);\n\t};\n\n\n/***/ }),\n/* 114 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// vim:ts=4:sts=4:sw=4:\n\t/*!\n\t *\n\t * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n\t * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n\t *\n\t * With parts by Tyler Close\n\t * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n\t * at http://www.opensource.org/licenses/mit-license.html\n\t * Forked at ref_send.js version: 2009-05-11\n\t *\n\t * With parts by Mark Miller\n\t * Copyright (C) 2011 Google Inc.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t *\n\t */\n\n\t(function (definition) {\n\t    // Turn off strict mode for this function so we can assign to global.Q\n\t    /* jshint strict: false */\n\n\t    // This file will function properly as a <script> tag, or a module\n\t    // using CommonJS and NodeJS or RequireJS module formats.  In\n\t    // Common/Node/RequireJS, the module exports the Q API and when\n\t    // executed as a simple <script>, it creates a Q global instead.\n\n\t    // Montage Require\n\t    if (typeof bootstrap === \"function\") {\n\t        bootstrap(\"promise\", definition);\n\n\t    // CommonJS\n\t    } else if (true) {\n\t        module.exports = definition();\n\n\t    // RequireJS\n\t    } else if (typeof define === \"function\" && define.amd) {\n\t        define(definition);\n\n\t    // SES (Secure EcmaScript)\n\t    } else if (typeof ses !== \"undefined\") {\n\t        if (!ses.ok()) {\n\t            return;\n\t        } else {\n\t            ses.makeQ = definition;\n\t        }\n\n\t    // <script>\n\t    } else {\n\t        Q = definition();\n\t    }\n\n\t})(function () {\n\t\"use strict\";\n\n\tvar hasStacks = false;\n\ttry {\n\t    throw new Error();\n\t} catch (e) {\n\t    hasStacks = !!e.stack;\n\t}\n\n\t// All code after this point will be filtered from stack traces reported\n\t// by Q.\n\tvar qStartingLine = captureLine();\n\tvar qFileName;\n\n\t// shims\n\n\t// used for fallback in \"allResolved\"\n\tvar noop = function () {};\n\n\t// Use the fastest possible means to execute a task in a future turn\n\t// of the event loop.\n\tvar nextTick =(function () {\n\t    // linked list of tasks (single, with head node)\n\t    var head = {task: void 0, next: null};\n\t    var tail = head;\n\t    var flushing = false;\n\t    var requestTick = void 0;\n\t    var isNodeJS = false;\n\n\t    function flush() {\n\t        /* jshint loopfunc: true */\n\n\t        while (head.next) {\n\t            head = head.next;\n\t            var task = head.task;\n\t            head.task = void 0;\n\t            var domain = head.domain;\n\n\t            if (domain) {\n\t                head.domain = void 0;\n\t                domain.enter();\n\t            }\n\n\t            try {\n\t                task();\n\n\t            } catch (e) {\n\t                if (isNodeJS) {\n\t                    // In node, uncaught exceptions are considered fatal errors.\n\t                    // Re-throw them synchronously to interrupt flushing!\n\n\t                    // Ensure continuation if the uncaught exception is suppressed\n\t                    // listening \"uncaughtException\" events (as domains does).\n\t                    // Continue in next event to avoid tick recursion.\n\t                    if (domain) {\n\t                        domain.exit();\n\t                    }\n\t                    setTimeout(flush, 0);\n\t                    if (domain) {\n\t                        domain.enter();\n\t                    }\n\n\t                    throw e;\n\n\t                } else {\n\t                    // In browsers, uncaught exceptions are not fatal.\n\t                    // Re-throw them asynchronously to avoid slow-downs.\n\t                    setTimeout(function() {\n\t                       throw e;\n\t                    }, 0);\n\t                }\n\t            }\n\n\t            if (domain) {\n\t                domain.exit();\n\t            }\n\t        }\n\n\t        flushing = false;\n\t    }\n\n\t    nextTick = function (task) {\n\t        tail = tail.next = {\n\t            task: task,\n\t            domain: isNodeJS && process.domain,\n\t            next: null\n\t        };\n\n\t        if (!flushing) {\n\t            flushing = true;\n\t            requestTick();\n\t        }\n\t    };\n\n\t    if (typeof process !== \"undefined\" && process.nextTick) {\n\t        // Node.js before 0.9. Note that some fake-Node environments, like the\n\t        // Mocha test runner, introduce a `process` global without a `nextTick`.\n\t        isNodeJS = true;\n\n\t        requestTick = function () {\n\t            process.nextTick(flush);\n\t        };\n\n\t    } else if (typeof setImmediate === \"function\") {\n\t        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n\t        if (typeof window !== \"undefined\") {\n\t            requestTick = setImmediate.bind(window, flush);\n\t        } else {\n\t            requestTick = function () {\n\t                setImmediate(flush);\n\t            };\n\t        }\n\n\t    } else if (typeof MessageChannel !== \"undefined\") {\n\t        // modern browsers\n\t        // http://www.nonblocking.io/2011/06/windownexttick.html\n\t        var channel = new MessageChannel();\n\t        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n\t        // working message ports the first time a page loads.\n\t        channel.port1.onmessage = function () {\n\t            requestTick = requestPortTick;\n\t            channel.port1.onmessage = flush;\n\t            flush();\n\t        };\n\t        var requestPortTick = function () {\n\t            // Opera requires us to provide a message payload, regardless of\n\t            // whether we use it.\n\t            channel.port2.postMessage(0);\n\t        };\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t            requestPortTick();\n\t        };\n\n\t    } else {\n\t        // old browsers\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t        };\n\t    }\n\n\t    return nextTick;\n\t})();\n\n\t// Attempt to make generics safe in the face of downstream\n\t// modifications.\n\t// There is no situation where this is necessary.\n\t// If you need a security guarantee, these primordials need to be\n\t// deeply frozen anyway, and if you don’t need a security guarantee,\n\t// this is just plain paranoid.\n\t// However, this **might** have the nice side-effect of reducing the size of\n\t// the minified code by reducing x.call() to merely x()\n\t// See Mark Miller’s explanation of what this does.\n\t// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n\tvar call = Function.call;\n\tfunction uncurryThis(f) {\n\t    return function () {\n\t        return call.apply(f, arguments);\n\t    };\n\t}\n\t// This is equivalent, but slower:\n\t// uncurryThis = Function_bind.bind(Function_bind.call);\n\t// http://jsperf.com/uncurrythis\n\n\tvar array_slice = uncurryThis(Array.prototype.slice);\n\n\tvar array_reduce = uncurryThis(\n\t    Array.prototype.reduce || function (callback, basis) {\n\t        var index = 0,\n\t            length = this.length;\n\t        // concerning the initial value, if one is not provided\n\t        if (arguments.length === 1) {\n\t            // seek to the first value in the array, accounting\n\t            // for the possibility that is is a sparse array\n\t            do {\n\t                if (index in this) {\n\t                    basis = this[index++];\n\t                    break;\n\t                }\n\t                if (++index >= length) {\n\t                    throw new TypeError();\n\t                }\n\t            } while (1);\n\t        }\n\t        // reduce\n\t        for (; index < length; index++) {\n\t            // account for the possibility that the array is sparse\n\t            if (index in this) {\n\t                basis = callback(basis, this[index], index);\n\t            }\n\t        }\n\t        return basis;\n\t    }\n\t);\n\n\tvar array_indexOf = uncurryThis(\n\t    Array.prototype.indexOf || function (value) {\n\t        // not a very good shim, but good enough for our one use of it\n\t        for (var i = 0; i < this.length; i++) {\n\t            if (this[i] === value) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t);\n\n\tvar array_map = uncurryThis(\n\t    Array.prototype.map || function (callback, thisp) {\n\t        var self = this;\n\t        var collect = [];\n\t        array_reduce(self, function (undefined, value, index) {\n\t            collect.push(callback.call(thisp, value, index, self));\n\t        }, void 0);\n\t        return collect;\n\t    }\n\t);\n\n\tvar object_create = Object.create || function (prototype) {\n\t    function Type() { }\n\t    Type.prototype = prototype;\n\t    return new Type();\n\t};\n\n\tvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\n\tvar object_keys = Object.keys || function (object) {\n\t    var keys = [];\n\t    for (var key in object) {\n\t        if (object_hasOwnProperty(object, key)) {\n\t            keys.push(key);\n\t        }\n\t    }\n\t    return keys;\n\t};\n\n\tvar object_toString = uncurryThis(Object.prototype.toString);\n\n\tfunction isObject(value) {\n\t    return value === Object(value);\n\t}\n\n\t// generator related shims\n\n\t// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n\tfunction isStopIteration(exception) {\n\t    return (\n\t        object_toString(exception) === \"[object StopIteration]\" ||\n\t        exception instanceof QReturnValue\n\t    );\n\t}\n\n\t// FIXME: Remove this helper and Q.return once ES6 generators are in\n\t// SpiderMonkey.\n\tvar QReturnValue;\n\tif (typeof ReturnValue !== \"undefined\") {\n\t    QReturnValue = ReturnValue;\n\t} else {\n\t    QReturnValue = function (value) {\n\t        this.value = value;\n\t    };\n\t}\n\n\t// long stack traces\n\n\tvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\n\tfunction makeStackTraceLong(error, promise) {\n\t    // If possible, transform the error stack trace by removing Node and Q\n\t    // cruft, then concatenating with the stack trace of `promise`. See #57.\n\t    if (hasStacks &&\n\t        promise.stack &&\n\t        typeof error === \"object\" &&\n\t        error !== null &&\n\t        error.stack &&\n\t        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n\t    ) {\n\t        var stacks = [];\n\t        for (var p = promise; !!p; p = p.source) {\n\t            if (p.stack) {\n\t                stacks.unshift(p.stack);\n\t            }\n\t        }\n\t        stacks.unshift(error.stack);\n\n\t        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n\t        error.stack = filterStackString(concatedStacks);\n\t    }\n\t}\n\n\tfunction filterStackString(stackString) {\n\t    var lines = stackString.split(\"\\n\");\n\t    var desiredLines = [];\n\t    for (var i = 0; i < lines.length; ++i) {\n\t        var line = lines[i];\n\n\t        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n\t            desiredLines.push(line);\n\t        }\n\t    }\n\t    return desiredLines.join(\"\\n\");\n\t}\n\n\tfunction isNodeFrame(stackLine) {\n\t    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n\t           stackLine.indexOf(\"(node.js:\") !== -1;\n\t}\n\n\tfunction getFileNameAndLineNumber(stackLine) {\n\t    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n\t    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n\t    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n\t    if (attempt1) {\n\t        return [attempt1[1], Number(attempt1[2])];\n\t    }\n\n\t    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n\t    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n\t    if (attempt2) {\n\t        return [attempt2[1], Number(attempt2[2])];\n\t    }\n\n\t    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n\t    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n\t    if (attempt3) {\n\t        return [attempt3[1], Number(attempt3[2])];\n\t    }\n\t}\n\n\tfunction isInternalFrame(stackLine) {\n\t    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n\t    if (!fileNameAndLineNumber) {\n\t        return false;\n\t    }\n\n\t    var fileName = fileNameAndLineNumber[0];\n\t    var lineNumber = fileNameAndLineNumber[1];\n\n\t    return fileName === qFileName &&\n\t        lineNumber >= qStartingLine &&\n\t        lineNumber <= qEndingLine;\n\t}\n\n\t// discover own file name and line number range for filtering stack\n\t// traces\n\tfunction captureLine() {\n\t    if (!hasStacks) {\n\t        return;\n\t    }\n\n\t    try {\n\t        throw new Error();\n\t    } catch (e) {\n\t        var lines = e.stack.split(\"\\n\");\n\t        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n\t        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n\t        if (!fileNameAndLineNumber) {\n\t            return;\n\t        }\n\n\t        qFileName = fileNameAndLineNumber[0];\n\t        return fileNameAndLineNumber[1];\n\t    }\n\t}\n\n\tfunction deprecate(callback, name, alternative) {\n\t    return function () {\n\t        if (typeof console !== \"undefined\" &&\n\t            typeof console.warn === \"function\") {\n\t            console.warn(name + \" is deprecated, use \" + alternative +\n\t                         \" instead.\", new Error(\"\").stack);\n\t        }\n\t        return callback.apply(callback, arguments);\n\t    };\n\t}\n\n\t// end of shims\n\t// beginning of real work\n\n\t/**\n\t * Constructs a promise for an immediate reference, passes promises through, or\n\t * coerces promises from different systems.\n\t * @param value immediate reference or promise\n\t */\n\tfunction Q(value) {\n\t    // If the object is already a Promise, return it directly.  This enables\n\t    // the resolve function to both be used to created references from objects,\n\t    // but to tolerably coerce non-promises to promises.\n\t    if (isPromise(value)) {\n\t        return value;\n\t    }\n\n\t    // assimilate thenables\n\t    if (isPromiseAlike(value)) {\n\t        return coerce(value);\n\t    } else {\n\t        return fulfill(value);\n\t    }\n\t}\n\tQ.resolve = Q;\n\n\t/**\n\t * Performs a task in a future turn of the event loop.\n\t * @param {Function} task\n\t */\n\tQ.nextTick = nextTick;\n\n\t/**\n\t * Controls whether or not long stack traces will be on\n\t */\n\tQ.longStackSupport = false;\n\n\t/**\n\t * Constructs a {promise, resolve, reject} object.\n\t *\n\t * `resolve` is a callback to invoke with a more resolved value for the\n\t * promise. To fulfill the promise, invoke `resolve` with any value that is\n\t * not a thenable. To reject the promise, invoke `resolve` with a rejected\n\t * thenable, or invoke `reject` with the reason directly. To resolve the\n\t * promise to another thenable, thus putting it in the same state, invoke\n\t * `resolve` with that other thenable.\n\t */\n\tQ.defer = defer;\n\tfunction defer() {\n\t    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n\t    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n\t    // element of the messages array is itself an array of complete arguments to\n\t    // forward to the resolved promise.  We coerce the resolution value to a\n\t    // promise using the `resolve` function because it handles both fully\n\t    // non-thenable values and other thenables gracefully.\n\t    var messages = [], progressListeners = [], resolvedPromise;\n\n\t    var deferred = object_create(defer.prototype);\n\t    var promise = object_create(Promise.prototype);\n\n\t    promise.promiseDispatch = function (resolve, op, operands) {\n\t        var args = array_slice(arguments);\n\t        if (messages) {\n\t            messages.push(args);\n\t            if (op === \"when\" && operands[1]) { // progress operand\n\t                progressListeners.push(operands[1]);\n\t            }\n\t        } else {\n\t            nextTick(function () {\n\t                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n\t            });\n\t        }\n\t    };\n\n\t    // XXX deprecated\n\t    promise.valueOf = function () {\n\t        if (messages) {\n\t            return promise;\n\t        }\n\t        var nearerValue = nearer(resolvedPromise);\n\t        if (isPromise(nearerValue)) {\n\t            resolvedPromise = nearerValue; // shorten chain\n\t        }\n\t        return nearerValue;\n\t    };\n\n\t    promise.inspect = function () {\n\t        if (!resolvedPromise) {\n\t            return { state: \"pending\" };\n\t        }\n\t        return resolvedPromise.inspect();\n\t    };\n\n\t    if (Q.longStackSupport && hasStacks) {\n\t        try {\n\t            throw new Error();\n\t        } catch (e) {\n\t            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n\t            // accessor around; that causes memory leaks as per GH-111. Just\n\t            // reify the stack trace as a string ASAP.\n\t            //\n\t            // At the same time, cut off the first line; it's always just\n\t            // \"[object Promise]\\n\", as per the `toString`.\n\t            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n\t        }\n\t    }\n\n\t    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n\t    // consolidating them into `become`, since otherwise we'd create new\n\t    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n\t    function become(newPromise) {\n\t        resolvedPromise = newPromise;\n\t        promise.source = newPromise;\n\n\t        array_reduce(messages, function (undefined, message) {\n\t            nextTick(function () {\n\t                newPromise.promiseDispatch.apply(newPromise, message);\n\t            });\n\t        }, void 0);\n\n\t        messages = void 0;\n\t        progressListeners = void 0;\n\t    }\n\n\t    deferred.promise = promise;\n\t    deferred.resolve = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\n\t        become(Q(value));\n\t    };\n\n\t    deferred.fulfill = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\n\t        become(fulfill(value));\n\t    };\n\t    deferred.reject = function (reason) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\n\t        become(reject(reason));\n\t    };\n\t    deferred.notify = function (progress) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\n\t        array_reduce(progressListeners, function (undefined, progressListener) {\n\t            nextTick(function () {\n\t                progressListener(progress);\n\t            });\n\t        }, void 0);\n\t    };\n\n\t    return deferred;\n\t}\n\n\t/**\n\t * Creates a Node-style callback that will resolve or reject the deferred\n\t * promise.\n\t * @returns a nodeback\n\t */\n\tdefer.prototype.makeNodeResolver = function () {\n\t    var self = this;\n\t    return function (error, value) {\n\t        if (error) {\n\t            self.reject(error);\n\t        } else if (arguments.length > 2) {\n\t            self.resolve(array_slice(arguments, 1));\n\t        } else {\n\t            self.resolve(value);\n\t        }\n\t    };\n\t};\n\n\t/**\n\t * @param resolver {Function} a function that returns nothing and accepts\n\t * the resolve, reject, and notify functions for a deferred.\n\t * @returns a promise that may be resolved with the given resolve and reject\n\t * functions, or rejected by a thrown exception in resolver\n\t */\n\tQ.Promise = promise; // ES6\n\tQ.promise = promise;\n\tfunction promise(resolver) {\n\t    if (typeof resolver !== \"function\") {\n\t        throw new TypeError(\"resolver must be a function.\");\n\t    }\n\t    var deferred = defer();\n\t    try {\n\t        resolver(deferred.resolve, deferred.reject, deferred.notify);\n\t    } catch (reason) {\n\t        deferred.reject(reason);\n\t    }\n\t    return deferred.promise;\n\t}\n\n\tpromise.race = race; // ES6\n\tpromise.all = all; // ES6\n\tpromise.reject = reject; // ES6\n\tpromise.resolve = Q; // ES6\n\n\t// XXX experimental.  This method is a way to denote that a local value is\n\t// serializable and should be immediately dispatched to a remote upon request,\n\t// instead of passing a reference.\n\tQ.passByCopy = function (object) {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return object;\n\t};\n\n\tPromise.prototype.passByCopy = function () {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return this;\n\t};\n\n\t/**\n\t * If two promises eventually fulfill to the same value, promises that value,\n\t * but otherwise rejects.\n\t * @param x {Any*}\n\t * @param y {Any*}\n\t * @returns {Any*} a promise for x and y if they are the same, but a rejection\n\t * otherwise.\n\t *\n\t */\n\tQ.join = function (x, y) {\n\t    return Q(x).join(y);\n\t};\n\n\tPromise.prototype.join = function (that) {\n\t    return Q([this, that]).spread(function (x, y) {\n\t        if (x === y) {\n\t            // TODO: \"===\" should be Object.is or equiv\n\t            return x;\n\t        } else {\n\t            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n\t        }\n\t    });\n\t};\n\n\t/**\n\t * Returns a promise for the first of an array of promises to become fulfilled.\n\t * @param answers {Array[Any*]} promises to race\n\t * @returns {Any*} the first promise to be fulfilled\n\t */\n\tQ.race = race;\n\tfunction race(answerPs) {\n\t    return promise(function(resolve, reject) {\n\t        // Switch to this once we can assume at least ES5\n\t        // answerPs.forEach(function(answerP) {\n\t        //     Q(answerP).then(resolve, reject);\n\t        // });\n\t        // Use this in the meantime\n\t        for (var i = 0, len = answerPs.length; i < len; i++) {\n\t            Q(answerPs[i]).then(resolve, reject);\n\t        }\n\t    });\n\t}\n\n\tPromise.prototype.race = function () {\n\t    return this.then(Q.race);\n\t};\n\n\t/**\n\t * Constructs a Promise with a promise descriptor object and optional fallback\n\t * function.  The descriptor contains methods like when(rejected), get(name),\n\t * set(name, value), post(name, args), and delete(name), which all\n\t * return either a value, a promise for a value, or a rejection.  The fallback\n\t * accepts the operation name, a resolver, and any further arguments that would\n\t * have been forwarded to the appropriate method above had a method been\n\t * provided with the proper name.  The API makes no guarantees about the nature\n\t * of the returned object, apart from that it is usable whereever promises are\n\t * bought and sold.\n\t */\n\tQ.makePromise = Promise;\n\tfunction Promise(descriptor, fallback, inspect) {\n\t    if (fallback === void 0) {\n\t        fallback = function (op) {\n\t            return reject(new Error(\n\t                \"Promise does not support operation: \" + op\n\t            ));\n\t        };\n\t    }\n\t    if (inspect === void 0) {\n\t        inspect = function () {\n\t            return {state: \"unknown\"};\n\t        };\n\t    }\n\n\t    var promise = object_create(Promise.prototype);\n\n\t    promise.promiseDispatch = function (resolve, op, args) {\n\t        var result;\n\t        try {\n\t            if (descriptor[op]) {\n\t                result = descriptor[op].apply(promise, args);\n\t            } else {\n\t                result = fallback.call(promise, op, args);\n\t            }\n\t        } catch (exception) {\n\t            result = reject(exception);\n\t        }\n\t        if (resolve) {\n\t            resolve(result);\n\t        }\n\t    };\n\n\t    promise.inspect = inspect;\n\n\t    // XXX deprecated `valueOf` and `exception` support\n\t    if (inspect) {\n\t        var inspected = inspect();\n\t        if (inspected.state === \"rejected\") {\n\t            promise.exception = inspected.reason;\n\t        }\n\n\t        promise.valueOf = function () {\n\t            var inspected = inspect();\n\t            if (inspected.state === \"pending\" ||\n\t                inspected.state === \"rejected\") {\n\t                return promise;\n\t            }\n\t            return inspected.value;\n\t        };\n\t    }\n\n\t    return promise;\n\t}\n\n\tPromise.prototype.toString = function () {\n\t    return \"[object Promise]\";\n\t};\n\n\tPromise.prototype.then = function (fulfilled, rejected, progressed) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    var done = false;   // ensure the untrusted promise makes at most a\n\t                        // single call to one of the callbacks\n\n\t    function _fulfilled(value) {\n\t        try {\n\t            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n\t        } catch (exception) {\n\t            return reject(exception);\n\t        }\n\t    }\n\n\t    function _rejected(exception) {\n\t        if (typeof rejected === \"function\") {\n\t            makeStackTraceLong(exception, self);\n\t            try {\n\t                return rejected(exception);\n\t            } catch (newException) {\n\t                return reject(newException);\n\t            }\n\t        }\n\t        return reject(exception);\n\t    }\n\n\t    function _progressed(value) {\n\t        return typeof progressed === \"function\" ? progressed(value) : value;\n\t    }\n\n\t    nextTick(function () {\n\t        self.promiseDispatch(function (value) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\n\t            deferred.resolve(_fulfilled(value));\n\t        }, \"when\", [function (exception) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\n\t            deferred.resolve(_rejected(exception));\n\t        }]);\n\t    });\n\n\t    // Progress propagator need to be attached in the current tick.\n\t    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n\t        var newValue;\n\t        var threw = false;\n\t        try {\n\t            newValue = _progressed(value);\n\t        } catch (e) {\n\t            threw = true;\n\t            if (Q.onerror) {\n\t                Q.onerror(e);\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\n\t        if (!threw) {\n\t            deferred.notify(newValue);\n\t        }\n\t    }]);\n\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * Registers an observer on a promise.\n\t *\n\t * Guarantees:\n\t *\n\t * 1. that fulfilled and rejected will be called only once.\n\t * 2. that either the fulfilled callback or the rejected callback will be\n\t *    called, but not both.\n\t * 3. that fulfilled and rejected will not be called in this turn.\n\t *\n\t * @param value      promise or immediate reference to observe\n\t * @param fulfilled  function to be called with the fulfilled value\n\t * @param rejected   function to be called with the rejection exception\n\t * @param progressed function to be called on any progress notifications\n\t * @return promise for the return value from the invoked callback\n\t */\n\tQ.when = when;\n\tfunction when(value, fulfilled, rejected, progressed) {\n\t    return Q(value).then(fulfilled, rejected, progressed);\n\t}\n\n\tPromise.prototype.thenResolve = function (value) {\n\t    return this.then(function () { return value; });\n\t};\n\n\tQ.thenResolve = function (promise, value) {\n\t    return Q(promise).thenResolve(value);\n\t};\n\n\tPromise.prototype.thenReject = function (reason) {\n\t    return this.then(function () { throw reason; });\n\t};\n\n\tQ.thenReject = function (promise, reason) {\n\t    return Q(promise).thenReject(reason);\n\t};\n\n\t/**\n\t * If an object is not a promise, it is as \"near\" as possible.\n\t * If a promise is rejected, it is as \"near\" as possible too.\n\t * If it’s a fulfilled promise, the fulfillment value is nearer.\n\t * If it’s a deferred promise and the deferred has been resolved, the\n\t * resolution is \"nearer\".\n\t * @param object\n\t * @returns most resolved (nearest) form of the object\n\t */\n\n\t// XXX should we re-do this?\n\tQ.nearer = nearer;\n\tfunction nearer(value) {\n\t    if (isPromise(value)) {\n\t        var inspected = value.inspect();\n\t        if (inspected.state === \"fulfilled\") {\n\t            return inspected.value;\n\t        }\n\t    }\n\t    return value;\n\t}\n\n\t/**\n\t * @returns whether the given object is a promise.\n\t * Otherwise it is a fulfilled value.\n\t */\n\tQ.isPromise = isPromise;\n\tfunction isPromise(object) {\n\t    return isObject(object) &&\n\t        typeof object.promiseDispatch === \"function\" &&\n\t        typeof object.inspect === \"function\";\n\t}\n\n\tQ.isPromiseAlike = isPromiseAlike;\n\tfunction isPromiseAlike(object) {\n\t    return isObject(object) && typeof object.then === \"function\";\n\t}\n\n\t/**\n\t * @returns whether the given object is a pending promise, meaning not\n\t * fulfilled or rejected.\n\t */\n\tQ.isPending = isPending;\n\tfunction isPending(object) {\n\t    return isPromise(object) && object.inspect().state === \"pending\";\n\t}\n\n\tPromise.prototype.isPending = function () {\n\t    return this.inspect().state === \"pending\";\n\t};\n\n\t/**\n\t * @returns whether the given object is a value or fulfilled\n\t * promise.\n\t */\n\tQ.isFulfilled = isFulfilled;\n\tfunction isFulfilled(object) {\n\t    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n\t}\n\n\tPromise.prototype.isFulfilled = function () {\n\t    return this.inspect().state === \"fulfilled\";\n\t};\n\n\t/**\n\t * @returns whether the given object is a rejected promise.\n\t */\n\tQ.isRejected = isRejected;\n\tfunction isRejected(object) {\n\t    return isPromise(object) && object.inspect().state === \"rejected\";\n\t}\n\n\tPromise.prototype.isRejected = function () {\n\t    return this.inspect().state === \"rejected\";\n\t};\n\n\t//// BEGIN UNHANDLED REJECTION TRACKING\n\n\t// This promise library consumes exceptions thrown in handlers so they can be\n\t// handled by a subsequent promise.  The exceptions get added to this array when\n\t// they are created, and removed when they are handled.  Note that in ES6 or\n\t// shimmed environments, this would naturally be a `Set`.\n\tvar unhandledReasons = [];\n\tvar unhandledRejections = [];\n\tvar trackUnhandledRejections = true;\n\n\tfunction resetUnhandledRejections() {\n\t    unhandledReasons.length = 0;\n\t    unhandledRejections.length = 0;\n\n\t    if (!trackUnhandledRejections) {\n\t        trackUnhandledRejections = true;\n\t    }\n\t}\n\n\tfunction trackRejection(promise, reason) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\n\t    unhandledRejections.push(promise);\n\t    if (reason && typeof reason.stack !== \"undefined\") {\n\t        unhandledReasons.push(reason.stack);\n\t    } else {\n\t        unhandledReasons.push(\"(no stack) \" + reason);\n\t    }\n\t}\n\n\tfunction untrackRejection(promise) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\n\t    var at = array_indexOf(unhandledRejections, promise);\n\t    if (at !== -1) {\n\t        unhandledRejections.splice(at, 1);\n\t        unhandledReasons.splice(at, 1);\n\t    }\n\t}\n\n\tQ.resetUnhandledRejections = resetUnhandledRejections;\n\n\tQ.getUnhandledReasons = function () {\n\t    // Make a copy so that consumers can't interfere with our internal state.\n\t    return unhandledReasons.slice();\n\t};\n\n\tQ.stopUnhandledRejectionTracking = function () {\n\t    resetUnhandledRejections();\n\t    trackUnhandledRejections = false;\n\t};\n\n\tresetUnhandledRejections();\n\n\t//// END UNHANDLED REJECTION TRACKING\n\n\t/**\n\t * Constructs a rejected promise.\n\t * @param reason value describing the failure\n\t */\n\tQ.reject = reject;\n\tfunction reject(reason) {\n\t    var rejection = Promise({\n\t        \"when\": function (rejected) {\n\t            // note that the error has been handled\n\t            if (rejected) {\n\t                untrackRejection(this);\n\t            }\n\t            return rejected ? rejected(reason) : this;\n\t        }\n\t    }, function fallback() {\n\t        return this;\n\t    }, function inspect() {\n\t        return { state: \"rejected\", reason: reason };\n\t    });\n\n\t    // Note that the reason has not been handled.\n\t    trackRejection(rejection, reason);\n\n\t    return rejection;\n\t}\n\n\t/**\n\t * Constructs a fulfilled promise for an immediate reference.\n\t * @param value immediate reference\n\t */\n\tQ.fulfill = fulfill;\n\tfunction fulfill(value) {\n\t    return Promise({\n\t        \"when\": function () {\n\t            return value;\n\t        },\n\t        \"get\": function (name) {\n\t            return value[name];\n\t        },\n\t        \"set\": function (name, rhs) {\n\t            value[name] = rhs;\n\t        },\n\t        \"delete\": function (name) {\n\t            delete value[name];\n\t        },\n\t        \"post\": function (name, args) {\n\t            // Mark Miller proposes that post with no name should apply a\n\t            // promised function.\n\t            if (name === null || name === void 0) {\n\t                return value.apply(void 0, args);\n\t            } else {\n\t                return value[name].apply(value, args);\n\t            }\n\t        },\n\t        \"apply\": function (thisp, args) {\n\t            return value.apply(thisp, args);\n\t        },\n\t        \"keys\": function () {\n\t            return object_keys(value);\n\t        }\n\t    }, void 0, function inspect() {\n\t        return { state: \"fulfilled\", value: value };\n\t    });\n\t}\n\n\t/**\n\t * Converts thenables to Q promises.\n\t * @param promise thenable promise\n\t * @returns a Q promise\n\t */\n\tfunction coerce(promise) {\n\t    var deferred = defer();\n\t    nextTick(function () {\n\t        try {\n\t            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n\t        } catch (exception) {\n\t            deferred.reject(exception);\n\t        }\n\t    });\n\t    return deferred.promise;\n\t}\n\n\t/**\n\t * Annotates an object such that it will never be\n\t * transferred away from this process over any promise\n\t * communication channel.\n\t * @param object\n\t * @returns promise a wrapping of that object that\n\t * additionally responds to the \"isDef\" message\n\t * without a rejection.\n\t */\n\tQ.master = master;\n\tfunction master(object) {\n\t    return Promise({\n\t        \"isDef\": function () {}\n\t    }, function fallback(op, args) {\n\t        return dispatch(object, op, args);\n\t    }, function () {\n\t        return Q(object).inspect();\n\t    });\n\t}\n\n\t/**\n\t * Spreads the values of a promised array of arguments into the\n\t * fulfillment callback.\n\t * @param fulfilled callback that receives variadic arguments from the\n\t * promised array\n\t * @param rejected callback that receives the exception if the promise\n\t * is rejected.\n\t * @returns a promise for the return value or thrown exception of\n\t * either callback.\n\t */\n\tQ.spread = spread;\n\tfunction spread(value, fulfilled, rejected) {\n\t    return Q(value).spread(fulfilled, rejected);\n\t}\n\n\tPromise.prototype.spread = function (fulfilled, rejected) {\n\t    return this.all().then(function (array) {\n\t        return fulfilled.apply(void 0, array);\n\t    }, rejected);\n\t};\n\n\t/**\n\t * The async function is a decorator for generator functions, turning\n\t * them into asynchronous generators.  Although generators are only part\n\t * of the newest ECMAScript 6 drafts, this code does not cause syntax\n\t * errors in older engines.  This code should continue to work and will\n\t * in fact improve over time as the language improves.\n\t *\n\t * ES6 generators are currently part of V8 version 3.19 with the\n\t * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n\t * for longer, but under an older Python-inspired form.  This function\n\t * works on both kinds of generators.\n\t *\n\t * Decorates a generator function such that:\n\t *  - it may yield promises\n\t *  - execution will continue when that promise is fulfilled\n\t *  - the value of the yield expression will be the fulfilled value\n\t *  - it returns a promise for the return value (when the generator\n\t *    stops iterating)\n\t *  - the decorated function returns a promise for the return value\n\t *    of the generator or the first rejected promise among those\n\t *    yielded.\n\t *  - if an error is thrown in the generator, it propagates through\n\t *    every following yield until it is caught, or until it escapes\n\t *    the generator function altogether, and is translated into a\n\t *    rejection for the promise returned by the decorated generator.\n\t */\n\tQ.async = async;\n\tfunction async(makeGenerator) {\n\t    return function () {\n\t        // when verb is \"send\", arg is a value\n\t        // when verb is \"throw\", arg is an exception\n\t        function continuer(verb, arg) {\n\t            var result;\n\n\t            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n\t            // engine that has a deployed base of browsers that support generators.\n\t            // However, SM's generators use the Python-inspired semantics of\n\t            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n\t            // like to make it possible to use generators in deployed browsers, so\n\t            // we also support Python-style generators.  At some point we can remove\n\t            // this block.\n\n\t            if (typeof StopIteration === \"undefined\") {\n\t                // ES6 Generators\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    return reject(exception);\n\t                }\n\t                if (result.done) {\n\t                    return result.value;\n\t                } else {\n\t                    return when(result.value, callback, errback);\n\t                }\n\t            } else {\n\t                // SpiderMonkey Generators\n\t                // FIXME: Remove this case when SM does ES6 generators.\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    if (isStopIteration(exception)) {\n\t                        return exception.value;\n\t                    } else {\n\t                        return reject(exception);\n\t                    }\n\t                }\n\t                return when(result, callback, errback);\n\t            }\n\t        }\n\t        var generator = makeGenerator.apply(this, arguments);\n\t        var callback = continuer.bind(continuer, \"next\");\n\t        var errback = continuer.bind(continuer, \"throw\");\n\t        return callback();\n\t    };\n\t}\n\n\t/**\n\t * The spawn function is a small wrapper around async that immediately\n\t * calls the generator and also ends the promise chain, so that any\n\t * unhandled errors are thrown instead of forwarded to the error\n\t * handler. This is useful because it's extremely common to run\n\t * generators at the top-level to work with libraries.\n\t */\n\tQ.spawn = spawn;\n\tfunction spawn(makeGenerator) {\n\t    Q.done(Q.async(makeGenerator)());\n\t}\n\n\t// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n\t/**\n\t * Throws a ReturnValue exception to stop an asynchronous generator.\n\t *\n\t * This interface is a stop-gap measure to support generator return\n\t * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n\t * generators like Chromium 29, just use \"return\" in your generator\n\t * functions.\n\t *\n\t * @param value the return value for the surrounding generator\n\t * @throws ReturnValue exception with the value.\n\t * @example\n\t * // ES6 style\n\t * Q.async(function* () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      return foo + bar;\n\t * })\n\t * // Older SpiderMonkey style\n\t * Q.async(function () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      Q.return(foo + bar);\n\t * })\n\t */\n\tQ[\"return\"] = _return;\n\tfunction _return(value) {\n\t    throw new QReturnValue(value);\n\t}\n\n\t/**\n\t * The promised function decorator ensures that any promise arguments\n\t * are settled and passed as values (`this` is also settled and passed\n\t * as a value).  It will also ensure that the result of a function is\n\t * always a promise.\n\t *\n\t * @example\n\t * var add = Q.promised(function (a, b) {\n\t *     return a + b;\n\t * });\n\t * add(Q(a), Q(B));\n\t *\n\t * @param {function} callback The function to decorate\n\t * @returns {function} a function that has been decorated.\n\t */\n\tQ.promised = promised;\n\tfunction promised(callback) {\n\t    return function () {\n\t        return spread([this, all(arguments)], function (self, args) {\n\t            return callback.apply(self, args);\n\t        });\n\t    };\n\t}\n\n\t/**\n\t * sends a message to a value in a future turn\n\t * @param object* the recipient\n\t * @param op the name of the message operation, e.g., \"when\",\n\t * @param args further arguments to be forwarded to the operation\n\t * @returns result {Promise} a promise for the result of the operation\n\t */\n\tQ.dispatch = dispatch;\n\tfunction dispatch(object, op, args) {\n\t    return Q(object).dispatch(op, args);\n\t}\n\n\tPromise.prototype.dispatch = function (op, args) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    nextTick(function () {\n\t        self.promiseDispatch(deferred.resolve, op, args);\n\t    });\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * Gets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to get\n\t * @return promise for the property value\n\t */\n\tQ.get = function (object, key) {\n\t    return Q(object).dispatch(\"get\", [key]);\n\t};\n\n\tPromise.prototype.get = function (key) {\n\t    return this.dispatch(\"get\", [key]);\n\t};\n\n\t/**\n\t * Sets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for object object\n\t * @param name      name of property to set\n\t * @param value     new value of property\n\t * @return promise for the return value\n\t */\n\tQ.set = function (object, key, value) {\n\t    return Q(object).dispatch(\"set\", [key, value]);\n\t};\n\n\tPromise.prototype.set = function (key, value) {\n\t    return this.dispatch(\"set\", [key, value]);\n\t};\n\n\t/**\n\t * Deletes a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to delete\n\t * @return promise for the return value\n\t */\n\tQ.del = // XXX legacy\n\tQ[\"delete\"] = function (object, key) {\n\t    return Q(object).dispatch(\"delete\", [key]);\n\t};\n\n\tPromise.prototype.del = // XXX legacy\n\tPromise.prototype[\"delete\"] = function (key) {\n\t    return this.dispatch(\"delete\", [key]);\n\t};\n\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param value     a value to post, typically an array of\n\t *                  invocation arguments for promises that\n\t *                  are ultimately backed with `resolve` values,\n\t *                  as opposed to those backed with URLs\n\t *                  wherein the posted value can be any\n\t *                  JSON serializable object.\n\t * @return promise for the return value\n\t */\n\t// bound locally because it is used by other methods\n\tQ.mapply = // XXX As proposed by \"Redsandro\"\n\tQ.post = function (object, name, args) {\n\t    return Q(object).dispatch(\"post\", [name, args]);\n\t};\n\n\tPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.post = function (name, args) {\n\t    return this.dispatch(\"post\", [name, args]);\n\t};\n\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param ...args   array of invocation arguments\n\t * @return promise for the return value\n\t */\n\tQ.send = // XXX Mark Miller's proposed parlance\n\tQ.mcall = // XXX As proposed by \"Redsandro\"\n\tQ.invoke = function (object, name /*...args*/) {\n\t    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n\t};\n\n\tPromise.prototype.send = // XXX Mark Miller's proposed parlance\n\tPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.invoke = function (name /*...args*/) {\n\t    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n\t};\n\n\t/**\n\t * Applies the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param args      array of application arguments\n\t */\n\tQ.fapply = function (object, args) {\n\t    return Q(object).dispatch(\"apply\", [void 0, args]);\n\t};\n\n\tPromise.prototype.fapply = function (args) {\n\t    return this.dispatch(\"apply\", [void 0, args]);\n\t};\n\n\t/**\n\t * Calls the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ[\"try\"] =\n\tQ.fcall = function (object /* ...args*/) {\n\t    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n\t};\n\n\tPromise.prototype.fcall = function (/*...args*/) {\n\t    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n\t};\n\n\t/**\n\t * Binds the promised function, transforming return values into a fulfilled\n\t * promise and thrown errors into a rejected one.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ.fbind = function (object /*...args*/) {\n\t    var promise = Q(object);\n\t    var args = array_slice(arguments, 1);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\tPromise.prototype.fbind = function (/*...args*/) {\n\t    var promise = this;\n\t    var args = array_slice(arguments);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\n\t/**\n\t * Requests the names of the owned properties of a promised\n\t * object in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @return promise for the keys of the eventually settled object\n\t */\n\tQ.keys = function (object) {\n\t    return Q(object).dispatch(\"keys\", []);\n\t};\n\n\tPromise.prototype.keys = function () {\n\t    return this.dispatch(\"keys\", []);\n\t};\n\n\t/**\n\t * Turns an array of promises into a promise for an array.  If any of\n\t * the promises gets rejected, the whole array is rejected immediately.\n\t * @param {Array*} an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns a promise for an array of the corresponding values\n\t */\n\t// By Mark Miller\n\t// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n\tQ.all = all;\n\tfunction all(promises) {\n\t    return when(promises, function (promises) {\n\t        var countDown = 0;\n\t        var deferred = defer();\n\t        array_reduce(promises, function (undefined, promise, index) {\n\t            var snapshot;\n\t            if (\n\t                isPromise(promise) &&\n\t                (snapshot = promise.inspect()).state === \"fulfilled\"\n\t            ) {\n\t                promises[index] = snapshot.value;\n\t            } else {\n\t                ++countDown;\n\t                when(\n\t                    promise,\n\t                    function (value) {\n\t                        promises[index] = value;\n\t                        if (--countDown === 0) {\n\t                            deferred.resolve(promises);\n\t                        }\n\t                    },\n\t                    deferred.reject,\n\t                    function (progress) {\n\t                        deferred.notify({ index: index, value: progress });\n\t                    }\n\t                );\n\t            }\n\t        }, void 0);\n\t        if (countDown === 0) {\n\t            deferred.resolve(promises);\n\t        }\n\t        return deferred.promise;\n\t    });\n\t}\n\n\tPromise.prototype.all = function () {\n\t    return all(this);\n\t};\n\n\t/**\n\t * Waits for all promises to be settled, either fulfilled or\n\t * rejected.  This is distinct from `all` since that would stop\n\t * waiting at the first rejection.  The promise returned by\n\t * `allResolved` will never be rejected.\n\t * @param promises a promise for an array (or an array) of promises\n\t * (or values)\n\t * @return a promise for an array of promises\n\t */\n\tQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n\tfunction allResolved(promises) {\n\t    return when(promises, function (promises) {\n\t        promises = array_map(promises, Q);\n\t        return when(all(array_map(promises, function (promise) {\n\t            return when(promise, noop, noop);\n\t        })), function () {\n\t            return promises;\n\t        });\n\t    });\n\t}\n\n\tPromise.prototype.allResolved = function () {\n\t    return allResolved(this);\n\t};\n\n\t/**\n\t * @see Promise#allSettled\n\t */\n\tQ.allSettled = allSettled;\n\tfunction allSettled(promises) {\n\t    return Q(promises).allSettled();\n\t}\n\n\t/**\n\t * Turns an array of promises into a promise for an array of their states (as\n\t * returned by `inspect`) when they have all settled.\n\t * @param {Array[Any*]} values an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns {Array[State]} an array of states for the respective values.\n\t */\n\tPromise.prototype.allSettled = function () {\n\t    return this.then(function (promises) {\n\t        return all(array_map(promises, function (promise) {\n\t            promise = Q(promise);\n\t            function regardless() {\n\t                return promise.inspect();\n\t            }\n\t            return promise.then(regardless, regardless);\n\t        }));\n\t    });\n\t};\n\n\t/**\n\t * Captures the failure of a promise, giving an oportunity to recover\n\t * with a callback.  If the given promise is fulfilled, the returned\n\t * promise is fulfilled.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to fulfill the returned promise if the\n\t * given promise is rejected\n\t * @returns a promise for the return value of the callback\n\t */\n\tQ.fail = // XXX legacy\n\tQ[\"catch\"] = function (object, rejected) {\n\t    return Q(object).then(void 0, rejected);\n\t};\n\n\tPromise.prototype.fail = // XXX legacy\n\tPromise.prototype[\"catch\"] = function (rejected) {\n\t    return this.then(void 0, rejected);\n\t};\n\n\t/**\n\t * Attaches a listener that can respond to progress notifications from a\n\t * promise's originating deferred. This listener receives the exact arguments\n\t * passed to ``deferred.notify``.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to receive any progress notifications\n\t * @returns the given promise, unchanged\n\t */\n\tQ.progress = progress;\n\tfunction progress(object, progressed) {\n\t    return Q(object).then(void 0, void 0, progressed);\n\t}\n\n\tPromise.prototype.progress = function (progressed) {\n\t    return this.then(void 0, void 0, progressed);\n\t};\n\n\t/**\n\t * Provides an opportunity to observe the settling of a promise,\n\t * regardless of whether the promise is fulfilled or rejected.  Forwards\n\t * the resolution to the returned promise when the callback is done.\n\t * The callback can return a promise to defer completion.\n\t * @param {Any*} promise\n\t * @param {Function} callback to observe the resolution of the given\n\t * promise, takes no arguments.\n\t * @returns a promise for the resolution of the given promise when\n\t * ``fin`` is done.\n\t */\n\tQ.fin = // XXX legacy\n\tQ[\"finally\"] = function (object, callback) {\n\t    return Q(object)[\"finally\"](callback);\n\t};\n\n\tPromise.prototype.fin = // XXX legacy\n\tPromise.prototype[\"finally\"] = function (callback) {\n\t    callback = Q(callback);\n\t    return this.then(function (value) {\n\t        return callback.fcall().then(function () {\n\t            return value;\n\t        });\n\t    }, function (reason) {\n\t        // TODO attempt to recycle the rejection with \"this\".\n\t        return callback.fcall().then(function () {\n\t            throw reason;\n\t        });\n\t    });\n\t};\n\n\t/**\n\t * Terminates a chain of promises, forcing rejections to be\n\t * thrown as exceptions.\n\t * @param {Any*} promise at the end of a chain of promises\n\t * @returns nothing\n\t */\n\tQ.done = function (object, fulfilled, rejected, progress) {\n\t    return Q(object).done(fulfilled, rejected, progress);\n\t};\n\n\tPromise.prototype.done = function (fulfilled, rejected, progress) {\n\t    var onUnhandledError = function (error) {\n\t        // forward to a future turn so that ``when``\n\t        // does not catch it and turn it into a rejection.\n\t        nextTick(function () {\n\t            makeStackTraceLong(error, promise);\n\t            if (Q.onerror) {\n\t                Q.onerror(error);\n\t            } else {\n\t                throw error;\n\t            }\n\t        });\n\t    };\n\n\t    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n\t    var promise = fulfilled || rejected || progress ?\n\t        this.then(fulfilled, rejected, progress) :\n\t        this;\n\n\t    if (typeof process === \"object\" && process && process.domain) {\n\t        onUnhandledError = process.domain.bind(onUnhandledError);\n\t    }\n\n\t    promise.then(void 0, onUnhandledError);\n\t};\n\n\t/**\n\t * Causes a promise to be rejected if it does not get fulfilled before\n\t * some milliseconds time out.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds timeout\n\t * @param {String} custom error message (optional)\n\t * @returns a promise for the resolution of the given promise if it is\n\t * fulfilled before the timeout, otherwise rejected.\n\t */\n\tQ.timeout = function (object, ms, message) {\n\t    return Q(object).timeout(ms, message);\n\t};\n\n\tPromise.prototype.timeout = function (ms, message) {\n\t    var deferred = defer();\n\t    var timeoutId = setTimeout(function () {\n\t        deferred.reject(new Error(message || \"Timed out after \" + ms + \" ms\"));\n\t    }, ms);\n\n\t    this.then(function (value) {\n\t        clearTimeout(timeoutId);\n\t        deferred.resolve(value);\n\t    }, function (exception) {\n\t        clearTimeout(timeoutId);\n\t        deferred.reject(exception);\n\t    }, deferred.notify);\n\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * Returns a promise for the given value (or promised value), some\n\t * milliseconds after it resolved. Passes rejections immediately.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds\n\t * @returns a promise for the resolution of the given promise after milliseconds\n\t * time has elapsed since the resolution of the given promise.\n\t * If the given promise rejects, that is passed immediately.\n\t */\n\tQ.delay = function (object, timeout) {\n\t    if (timeout === void 0) {\n\t        timeout = object;\n\t        object = void 0;\n\t    }\n\t    return Q(object).delay(timeout);\n\t};\n\n\tPromise.prototype.delay = function (timeout) {\n\t    return this.then(function (value) {\n\t        var deferred = defer();\n\t        setTimeout(function () {\n\t            deferred.resolve(value);\n\t        }, timeout);\n\t        return deferred.promise;\n\t    });\n\t};\n\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided as an array, and returns a promise.\n\t *\n\t *      Q.nfapply(FS.readFile, [__filename])\n\t *      .then(function (content) {\n\t *      })\n\t *\n\t */\n\tQ.nfapply = function (callback, args) {\n\t    return Q(callback).nfapply(args);\n\t};\n\n\tPromise.prototype.nfapply = function (args) {\n\t    var deferred = defer();\n\t    var nodeArgs = array_slice(args);\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided individually, and returns a promise.\n\t * @example\n\t * Q.nfcall(FS.readFile, __filename)\n\t * .then(function (content) {\n\t * })\n\t *\n\t */\n\tQ.nfcall = function (callback /*...args*/) {\n\t    var args = array_slice(arguments, 1);\n\t    return Q(callback).nfapply(args);\n\t};\n\n\tPromise.prototype.nfcall = function (/*...args*/) {\n\t    var nodeArgs = array_slice(arguments);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * Wraps a NodeJS continuation passing function and returns an equivalent\n\t * version that returns a promise.\n\t * @example\n\t * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n\t * .then(console.log)\n\t * .done()\n\t */\n\tQ.nfbind =\n\tQ.denodeify = function (callback /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 1);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\n\tPromise.prototype.nfbind =\n\tPromise.prototype.denodeify = function (/*...args*/) {\n\t    var args = array_slice(arguments);\n\t    args.unshift(this);\n\t    return Q.denodeify.apply(void 0, args);\n\t};\n\n\tQ.nbind = function (callback, thisp /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 2);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        function bound() {\n\t            return callback.apply(thisp, arguments);\n\t        }\n\t        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\n\tPromise.prototype.nbind = function (/*thisp, ...args*/) {\n\t    var args = array_slice(arguments, 0);\n\t    args.unshift(this);\n\t    return Q.nbind.apply(void 0, args);\n\t};\n\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback with a given array of arguments, plus a provided callback.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param {Array} args arguments to pass to the method; the callback\n\t * will be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nmapply = // XXX As proposed by \"Redsandro\"\n\tQ.npost = function (object, name, args) {\n\t    return Q(object).npost(name, args);\n\t};\n\n\tPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.npost = function (name, args) {\n\t    var nodeArgs = array_slice(args || []);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback, forwarding the given variadic arguments, plus a provided\n\t * callback argument.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param ...args arguments to pass to the method; the callback will\n\t * be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tQ.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tQ.ninvoke = function (object, name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 2);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\n\tPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tPromise.prototype.ninvoke = function (name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 1);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * If a function would like to support both Node continuation-passing-style and\n\t * promise-returning-style, it can end its internal promise chain with\n\t * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n\t * elects to use a nodeback, the result will be sent there.  If they do not\n\t * pass a nodeback, they will receive the result promise.\n\t * @param object a result (or a promise for a result)\n\t * @param {Function} nodeback a Node.js-style callback\n\t * @returns either the promise or nothing\n\t */\n\tQ.nodeify = nodeify;\n\tfunction nodeify(object, nodeback) {\n\t    return Q(object).nodeify(nodeback);\n\t}\n\n\tPromise.prototype.nodeify = function (nodeback) {\n\t    if (nodeback) {\n\t        this.then(function (value) {\n\t            nextTick(function () {\n\t                nodeback(null, value);\n\t            });\n\t        }, function (error) {\n\t            nextTick(function () {\n\t                nodeback(error);\n\t            });\n\t        });\n\t    } else {\n\t        return this;\n\t    }\n\t};\n\n\t// All code before this point will be filtered from stack traces.\n\tvar qEndingLine = captureLine();\n\n\treturn Q;\n\n\t});\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17), __webpack_require__(50).setImmediate))\n\n/***/ }),\n/* 115 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements. See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership. The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License. You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\t * KIND, either express or implied. See the License for the\n\t * specific language governing permissions and limitations\n\t * under the License.\n\t */\n\tvar util = __webpack_require__(16);\n\tvar Thrift = __webpack_require__(15);\n\n\texports.Multiplexer = Multiplexer;\n\n\tfunction Wrapper(serviceName, protocol, connection) {\n\n\t  function MultiplexProtocol(trans, strictRead, strictWrite) {\n\t    protocol.call(this, trans, strictRead, strictWrite);\n\t  };\n\n\t  util.inherits(MultiplexProtocol, protocol);\n\n\t  MultiplexProtocol.prototype.writeMessageBegin = function(name, type, seqid) {\n\t    if (type == Thrift.MessageType.CALL || type == Thrift.MessageType.ONEWAY) {\n\t      connection.seqId2Service[seqid] = serviceName;\n\t      MultiplexProtocol.super_.prototype.writeMessageBegin.call(this,\n\t                                                                serviceName + \":\" + name,\n\t                                                                type,\n\t                                                                seqid);\n\t    } else {\n\t      MultiplexProtocol.super_.prototype.writeMessageBegin.call(this, name, type, seqid);\n\t    }\n\t  };\n\n\t  return MultiplexProtocol;\n\t};\n\n\tfunction Multiplexer() {\n\t  this.seqid = 0;\n\t};\n\n\tMultiplexer.prototype.createClient = function(serviceName, ServiceClient, connection) {\n\t  if (ServiceClient.Client) {\n\t    ServiceClient = ServiceClient.Client;\n\t  }\n\t  var self = this;\n\t  ServiceClient.prototype.new_seqid = function() {\n\t    self.seqid += 1;\n\t    return self.seqid;\n\t  };\n\t  var writeCb = function(buf, seqid) {\n\t    connection.write(buf,seqid);\n\t  };\n\t  var transport = new connection.transport(undefined, writeCb);\n\t  var protocolWrapper = new Wrapper(serviceName, connection.protocol, connection);\n\t  var client = new ServiceClient(transport, protocolWrapper);\n\n\t  if (typeof connection.client !== 'object') {\n\t    connection.client = {};\n\t  }\n\t  connection.client[serviceName] = client;\n\n\t  return client;\n\t};\n\n\n/***/ }),\n/* 116 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t//\n\t// Autogenerated by Thrift Compiler (0.10.0)\n\t//\n\t// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n\t//\n\t\"use strict\";\n\n\tvar thrift = __webpack_require__(14);\n\tvar Thrift = thrift.Thrift;\n\tvar Q = thrift.Q;\n\n\tvar ttypes = module.exports = {};\n\tttypes.TDatumType = {\n\t  'SMALLINT': 0,\n\t  'INT': 1,\n\t  'BIGINT': 2,\n\t  'FLOAT': 3,\n\t  'DECIMAL': 4,\n\t  'DOUBLE': 5,\n\t  'STR': 6,\n\t  'TIME': 7,\n\t  'TIMESTAMP': 8,\n\t  'DATE': 9,\n\t  'BOOL': 10,\n\t  'INTERVAL_DAY_TIME': 11,\n\t  'INTERVAL_YEAR_MONTH': 12\n\t};\n\tttypes.TEncodingType = {\n\t  'NONE': 0,\n\t  'FIXED': 1,\n\t  'RL': 2,\n\t  'DIFF': 3,\n\t  'DICT': 4,\n\t  'SPARSE': 5\n\t};\n\tttypes.TExecuteMode = {\n\t  'HYBRID': 0,\n\t  'GPU': 1,\n\t  'CPU': 2\n\t};\n\tttypes.TTableType = {\n\t  'DELIMITED': 0,\n\t  'POLYGON': 1\n\t};\n\tttypes.TMergeType = {\n\t  'UNION': 0,\n\t  'REDUCE': 1\n\t};\n\tttypes.TExpressionRangeType = {\n\t  'INVALID': 0,\n\t  'INTEGER': 1,\n\t  'FLOAT': 2,\n\t  'DOUBLE': 3\n\t};\n\tvar TDatumVal = module.exports.TDatumVal = function (args) {\n\t  this.int_val = null;\n\t  this.real_val = null;\n\t  this.str_val = null;\n\t  this.arr_val = null;\n\t  if (args) {\n\t    if (args.int_val !== undefined && args.int_val !== null) {\n\t      this.int_val = args.int_val;\n\t    }\n\t    if (args.real_val !== undefined && args.real_val !== null) {\n\t      this.real_val = args.real_val;\n\t    }\n\t    if (args.str_val !== undefined && args.str_val !== null) {\n\t      this.str_val = args.str_val;\n\t    }\n\t    if (args.arr_val !== undefined && args.arr_val !== null) {\n\t      this.arr_val = Thrift.copyList(args.arr_val, [null]);\n\t    }\n\t  }\n\t};\n\tTDatumVal.prototype = {};\n\tTDatumVal.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.int_val = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.DOUBLE) {\n\t          this.real_val = input.readDouble();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.str_val = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size0 = 0;\n\t          var _rtmp34;\n\t          this.arr_val = [];\n\t          var _etype3 = 0;\n\t          _rtmp34 = input.readListBegin();\n\t          _etype3 = _rtmp34.etype;\n\t          _size0 = _rtmp34.size;\n\t          for (var _i5 = 0; _i5 < _size0; ++_i5) {\n\t            var elem6 = null;\n\t            elem6 = new ttypes.TDatum();\n\t            elem6.read(input);\n\t            this.arr_val.push(elem6);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTDatumVal.prototype.write = function (output) {\n\t  output.writeStructBegin('TDatumVal');\n\t  if (this.int_val !== null && this.int_val !== undefined) {\n\t    output.writeFieldBegin('int_val', Thrift.Type.I64, 1);\n\t    output.writeI64(this.int_val);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.real_val !== null && this.real_val !== undefined) {\n\t    output.writeFieldBegin('real_val', Thrift.Type.DOUBLE, 2);\n\t    output.writeDouble(this.real_val);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.str_val !== null && this.str_val !== undefined) {\n\t    output.writeFieldBegin('str_val', Thrift.Type.STRING, 3);\n\t    output.writeString(this.str_val);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.arr_val !== null && this.arr_val !== undefined) {\n\t    output.writeFieldBegin('arr_val', Thrift.Type.LIST, 4);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.arr_val.length);\n\t    for (var iter7 in this.arr_val) {\n\t      if (this.arr_val.hasOwnProperty(iter7)) {\n\t        iter7 = this.arr_val[iter7];\n\t        iter7.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TDatum = module.exports.TDatum = function (args) {\n\t  this.val = null;\n\t  this.is_null = null;\n\t  if (args) {\n\t    if (args.val !== undefined && args.val !== null) {\n\t      this.val = new ttypes.TDatumVal(args.val);\n\t    }\n\t    if (args.is_null !== undefined && args.is_null !== null) {\n\t      this.is_null = args.is_null;\n\t    }\n\t  }\n\t};\n\tTDatum.prototype = {};\n\tTDatum.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.val = new ttypes.TDatumVal();\n\t          this.val.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.is_null = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTDatum.prototype.write = function (output) {\n\t  output.writeStructBegin('TDatum');\n\t  if (this.val !== null && this.val !== undefined) {\n\t    output.writeFieldBegin('val', Thrift.Type.STRUCT, 1);\n\t    this.val.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.is_null !== null && this.is_null !== undefined) {\n\t    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n\t    output.writeBool(this.is_null);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TStringValue = module.exports.TStringValue = function (args) {\n\t  this.str_val = null;\n\t  this.is_null = null;\n\t  if (args) {\n\t    if (args.str_val !== undefined && args.str_val !== null) {\n\t      this.str_val = args.str_val;\n\t    }\n\t    if (args.is_null !== undefined && args.is_null !== null) {\n\t      this.is_null = args.is_null;\n\t    }\n\t  }\n\t};\n\tTStringValue.prototype = {};\n\tTStringValue.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.str_val = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.is_null = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTStringValue.prototype.write = function (output) {\n\t  output.writeStructBegin('TStringValue');\n\t  if (this.str_val !== null && this.str_val !== undefined) {\n\t    output.writeFieldBegin('str_val', Thrift.Type.STRING, 1);\n\t    output.writeString(this.str_val);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.is_null !== null && this.is_null !== undefined) {\n\t    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n\t    output.writeBool(this.is_null);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TTypeInfo = module.exports.TTypeInfo = function (args) {\n\t  this.type = null;\n\t  this.encoding = null;\n\t  this.nullable = null;\n\t  this.is_array = null;\n\t  this.precision = null;\n\t  this.scale = null;\n\t  this.comp_param = null;\n\t  if (args) {\n\t    if (args.type !== undefined && args.type !== null) {\n\t      this.type = args.type;\n\t    }\n\t    if (args.encoding !== undefined && args.encoding !== null) {\n\t      this.encoding = args.encoding;\n\t    }\n\t    if (args.nullable !== undefined && args.nullable !== null) {\n\t      this.nullable = args.nullable;\n\t    }\n\t    if (args.is_array !== undefined && args.is_array !== null) {\n\t      this.is_array = args.is_array;\n\t    }\n\t    if (args.precision !== undefined && args.precision !== null) {\n\t      this.precision = args.precision;\n\t    }\n\t    if (args.scale !== undefined && args.scale !== null) {\n\t      this.scale = args.scale;\n\t    }\n\t    if (args.comp_param !== undefined && args.comp_param !== null) {\n\t      this.comp_param = args.comp_param;\n\t    }\n\t  }\n\t};\n\tTTypeInfo.prototype = {};\n\tTTypeInfo.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.type = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.encoding = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.nullable = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.is_array = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.precision = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 6:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.scale = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 7:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.comp_param = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTTypeInfo.prototype.write = function (output) {\n\t  output.writeStructBegin('TTypeInfo');\n\t  if (this.type !== null && this.type !== undefined) {\n\t    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n\t    output.writeI32(this.type);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.encoding !== null && this.encoding !== undefined) {\n\t    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);\n\t    output.writeI32(this.encoding);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nullable !== null && this.nullable !== undefined) {\n\t    output.writeFieldBegin('nullable', Thrift.Type.BOOL, 2);\n\t    output.writeBool(this.nullable);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.is_array !== null && this.is_array !== undefined) {\n\t    output.writeFieldBegin('is_array', Thrift.Type.BOOL, 3);\n\t    output.writeBool(this.is_array);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.precision !== null && this.precision !== undefined) {\n\t    output.writeFieldBegin('precision', Thrift.Type.I32, 5);\n\t    output.writeI32(this.precision);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.scale !== null && this.scale !== undefined) {\n\t    output.writeFieldBegin('scale', Thrift.Type.I32, 6);\n\t    output.writeI32(this.scale);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.comp_param !== null && this.comp_param !== undefined) {\n\t    output.writeFieldBegin('comp_param', Thrift.Type.I32, 7);\n\t    output.writeI32(this.comp_param);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TColumnType = module.exports.TColumnType = function (args) {\n\t  this.col_name = null;\n\t  this.col_type = null;\n\t  this.is_reserved_keyword = null;\n\t  this.src_name = null;\n\t  if (args) {\n\t    if (args.col_name !== undefined && args.col_name !== null) {\n\t      this.col_name = args.col_name;\n\t    }\n\t    if (args.col_type !== undefined && args.col_type !== null) {\n\t      this.col_type = new ttypes.TTypeInfo(args.col_type);\n\t    }\n\t    if (args.is_reserved_keyword !== undefined && args.is_reserved_keyword !== null) {\n\t      this.is_reserved_keyword = args.is_reserved_keyword;\n\t    }\n\t    if (args.src_name !== undefined && args.src_name !== null) {\n\t      this.src_name = args.src_name;\n\t    }\n\t  }\n\t};\n\tTColumnType.prototype = {};\n\tTColumnType.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.col_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.col_type = new ttypes.TTypeInfo();\n\t          this.col_type.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.is_reserved_keyword = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.src_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTColumnType.prototype.write = function (output) {\n\t  output.writeStructBegin('TColumnType');\n\t  if (this.col_name !== null && this.col_name !== undefined) {\n\t    output.writeFieldBegin('col_name', Thrift.Type.STRING, 1);\n\t    output.writeString(this.col_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.col_type !== null && this.col_type !== undefined) {\n\t    output.writeFieldBegin('col_type', Thrift.Type.STRUCT, 2);\n\t    this.col_type.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.is_reserved_keyword !== null && this.is_reserved_keyword !== undefined) {\n\t    output.writeFieldBegin('is_reserved_keyword', Thrift.Type.BOOL, 3);\n\t    output.writeBool(this.is_reserved_keyword);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.src_name !== null && this.src_name !== undefined) {\n\t    output.writeFieldBegin('src_name', Thrift.Type.STRING, 4);\n\t    output.writeString(this.src_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TRow = module.exports.TRow = function (args) {\n\t  this.cols = null;\n\t  if (args) {\n\t    if (args.cols !== undefined && args.cols !== null) {\n\t      this.cols = Thrift.copyList(args.cols, [ttypes.TDatum]);\n\t    }\n\t  }\n\t};\n\tTRow.prototype = {};\n\tTRow.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size8 = 0;\n\t          var _rtmp312;\n\t          this.cols = [];\n\t          var _etype11 = 0;\n\t          _rtmp312 = input.readListBegin();\n\t          _etype11 = _rtmp312.etype;\n\t          _size8 = _rtmp312.size;\n\t          for (var _i13 = 0; _i13 < _size8; ++_i13) {\n\t            var elem14 = null;\n\t            elem14 = new ttypes.TDatum();\n\t            elem14.read(input);\n\t            this.cols.push(elem14);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTRow.prototype.write = function (output) {\n\t  output.writeStructBegin('TRow');\n\t  if (this.cols !== null && this.cols !== undefined) {\n\t    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\n\t    for (var iter15 in this.cols) {\n\t      if (this.cols.hasOwnProperty(iter15)) {\n\t        iter15 = this.cols[iter15];\n\t        iter15.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TColumnData = module.exports.TColumnData = function (args) {\n\t  this.int_col = null;\n\t  this.real_col = null;\n\t  this.str_col = null;\n\t  this.arr_col = null;\n\t  if (args) {\n\t    if (args.int_col !== undefined && args.int_col !== null) {\n\t      this.int_col = Thrift.copyList(args.int_col, [null]);\n\t    }\n\t    if (args.real_col !== undefined && args.real_col !== null) {\n\t      this.real_col = Thrift.copyList(args.real_col, [null]);\n\t    }\n\t    if (args.str_col !== undefined && args.str_col !== null) {\n\t      this.str_col = Thrift.copyList(args.str_col, [null]);\n\t    }\n\t    if (args.arr_col !== undefined && args.arr_col !== null) {\n\t      this.arr_col = Thrift.copyList(args.arr_col, [null]);\n\t    }\n\t  }\n\t};\n\tTColumnData.prototype = {};\n\tTColumnData.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size16 = 0;\n\t          var _rtmp320;\n\t          this.int_col = [];\n\t          var _etype19 = 0;\n\t          _rtmp320 = input.readListBegin();\n\t          _etype19 = _rtmp320.etype;\n\t          _size16 = _rtmp320.size;\n\t          for (var _i21 = 0; _i21 < _size16; ++_i21) {\n\t            var elem22 = null;\n\t            elem22 = input.readI64();\n\t            this.int_col.push(elem22);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size23 = 0;\n\t          var _rtmp327;\n\t          this.real_col = [];\n\t          var _etype26 = 0;\n\t          _rtmp327 = input.readListBegin();\n\t          _etype26 = _rtmp327.etype;\n\t          _size23 = _rtmp327.size;\n\t          for (var _i28 = 0; _i28 < _size23; ++_i28) {\n\t            var elem29 = null;\n\t            elem29 = input.readDouble();\n\t            this.real_col.push(elem29);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size30 = 0;\n\t          var _rtmp334;\n\t          this.str_col = [];\n\t          var _etype33 = 0;\n\t          _rtmp334 = input.readListBegin();\n\t          _etype33 = _rtmp334.etype;\n\t          _size30 = _rtmp334.size;\n\t          for (var _i35 = 0; _i35 < _size30; ++_i35) {\n\t            var elem36 = null;\n\t            elem36 = input.readString();\n\t            this.str_col.push(elem36);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size37 = 0;\n\t          var _rtmp341;\n\t          this.arr_col = [];\n\t          var _etype40 = 0;\n\t          _rtmp341 = input.readListBegin();\n\t          _etype40 = _rtmp341.etype;\n\t          _size37 = _rtmp341.size;\n\t          for (var _i42 = 0; _i42 < _size37; ++_i42) {\n\t            var elem43 = null;\n\t            elem43 = new ttypes.TColumn();\n\t            elem43.read(input);\n\t            this.arr_col.push(elem43);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTColumnData.prototype.write = function (output) {\n\t  output.writeStructBegin('TColumnData');\n\t  if (this.int_col !== null && this.int_col !== undefined) {\n\t    output.writeFieldBegin('int_col', Thrift.Type.LIST, 1);\n\t    output.writeListBegin(Thrift.Type.I64, this.int_col.length);\n\t    for (var iter44 in this.int_col) {\n\t      if (this.int_col.hasOwnProperty(iter44)) {\n\t        iter44 = this.int_col[iter44];\n\t        output.writeI64(iter44);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.real_col !== null && this.real_col !== undefined) {\n\t    output.writeFieldBegin('real_col', Thrift.Type.LIST, 2);\n\t    output.writeListBegin(Thrift.Type.DOUBLE, this.real_col.length);\n\t    for (var iter45 in this.real_col) {\n\t      if (this.real_col.hasOwnProperty(iter45)) {\n\t        iter45 = this.real_col[iter45];\n\t        output.writeDouble(iter45);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.str_col !== null && this.str_col !== undefined) {\n\t    output.writeFieldBegin('str_col', Thrift.Type.LIST, 3);\n\t    output.writeListBegin(Thrift.Type.STRING, this.str_col.length);\n\t    for (var iter46 in this.str_col) {\n\t      if (this.str_col.hasOwnProperty(iter46)) {\n\t        iter46 = this.str_col[iter46];\n\t        output.writeString(iter46);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.arr_col !== null && this.arr_col !== undefined) {\n\t    output.writeFieldBegin('arr_col', Thrift.Type.LIST, 4);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.arr_col.length);\n\t    for (var iter47 in this.arr_col) {\n\t      if (this.arr_col.hasOwnProperty(iter47)) {\n\t        iter47 = this.arr_col[iter47];\n\t        iter47.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TColumn = module.exports.TColumn = function (args) {\n\t  this.data = null;\n\t  this.nulls = null;\n\t  if (args) {\n\t    if (args.data !== undefined && args.data !== null) {\n\t      this.data = new ttypes.TColumnData(args.data);\n\t    }\n\t    if (args.nulls !== undefined && args.nulls !== null) {\n\t      this.nulls = Thrift.copyList(args.nulls, [null]);\n\t    }\n\t  }\n\t};\n\tTColumn.prototype = {};\n\tTColumn.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.data = new ttypes.TColumnData();\n\t          this.data.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size48 = 0;\n\t          var _rtmp352;\n\t          this.nulls = [];\n\t          var _etype51 = 0;\n\t          _rtmp352 = input.readListBegin();\n\t          _etype51 = _rtmp352.etype;\n\t          _size48 = _rtmp352.size;\n\t          for (var _i53 = 0; _i53 < _size48; ++_i53) {\n\t            var elem54 = null;\n\t            elem54 = input.readBool();\n\t            this.nulls.push(elem54);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTColumn.prototype.write = function (output) {\n\t  output.writeStructBegin('TColumn');\n\t  if (this.data !== null && this.data !== undefined) {\n\t    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);\n\t    this.data.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nulls !== null && this.nulls !== undefined) {\n\t    output.writeFieldBegin('nulls', Thrift.Type.LIST, 2);\n\t    output.writeListBegin(Thrift.Type.BOOL, this.nulls.length);\n\t    for (var iter55 in this.nulls) {\n\t      if (this.nulls.hasOwnProperty(iter55)) {\n\t        iter55 = this.nulls[iter55];\n\t        output.writeBool(iter55);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TStringRow = module.exports.TStringRow = function (args) {\n\t  this.cols = null;\n\t  if (args) {\n\t    if (args.cols !== undefined && args.cols !== null) {\n\t      this.cols = Thrift.copyList(args.cols, [ttypes.TStringValue]);\n\t    }\n\t  }\n\t};\n\tTStringRow.prototype = {};\n\tTStringRow.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size56 = 0;\n\t          var _rtmp360;\n\t          this.cols = [];\n\t          var _etype59 = 0;\n\t          _rtmp360 = input.readListBegin();\n\t          _etype59 = _rtmp360.etype;\n\t          _size56 = _rtmp360.size;\n\t          for (var _i61 = 0; _i61 < _size56; ++_i61) {\n\t            var elem62 = null;\n\t            elem62 = new ttypes.TStringValue();\n\t            elem62.read(input);\n\t            this.cols.push(elem62);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTStringRow.prototype.write = function (output) {\n\t  output.writeStructBegin('TStringRow');\n\t  if (this.cols !== null && this.cols !== undefined) {\n\t    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);\n\t    for (var iter63 in this.cols) {\n\t      if (this.cols.hasOwnProperty(iter63)) {\n\t        iter63 = this.cols[iter63];\n\t        iter63.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TStepResult = module.exports.TStepResult = function (args) {\n\t  this.serialized_rows = null;\n\t  this.execution_finished = null;\n\t  this.merge_type = null;\n\t  this.sharded = null;\n\t  this.row_desc = null;\n\t  this.node_id = null;\n\t  if (args) {\n\t    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {\n\t      this.serialized_rows = args.serialized_rows;\n\t    }\n\t    if (args.execution_finished !== undefined && args.execution_finished !== null) {\n\t      this.execution_finished = args.execution_finished;\n\t    }\n\t    if (args.merge_type !== undefined && args.merge_type !== null) {\n\t      this.merge_type = args.merge_type;\n\t    }\n\t    if (args.sharded !== undefined && args.sharded !== null) {\n\t      this.sharded = args.sharded;\n\t    }\n\t    if (args.row_desc !== undefined && args.row_desc !== null) {\n\t      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);\n\t    }\n\t    if (args.node_id !== undefined && args.node_id !== null) {\n\t      this.node_id = args.node_id;\n\t    }\n\t  }\n\t};\n\tTStepResult.prototype = {};\n\tTStepResult.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.serialized_rows = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.execution_finished = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.merge_type = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.sharded = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size64 = 0;\n\t          var _rtmp368;\n\t          this.row_desc = [];\n\t          var _etype67 = 0;\n\t          _rtmp368 = input.readListBegin();\n\t          _etype67 = _rtmp368.etype;\n\t          _size64 = _rtmp368.size;\n\t          for (var _i69 = 0; _i69 < _size64; ++_i69) {\n\t            var elem70 = null;\n\t            elem70 = new ttypes.TColumnType();\n\t            elem70.read(input);\n\t            this.row_desc.push(elem70);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 6:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.node_id = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTStepResult.prototype.write = function (output) {\n\t  output.writeStructBegin('TStepResult');\n\t  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {\n\t    output.writeFieldBegin('serialized_rows', Thrift.Type.STRING, 1);\n\t    output.writeString(this.serialized_rows);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.execution_finished !== null && this.execution_finished !== undefined) {\n\t    output.writeFieldBegin('execution_finished', Thrift.Type.BOOL, 2);\n\t    output.writeBool(this.execution_finished);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.merge_type !== null && this.merge_type !== undefined) {\n\t    output.writeFieldBegin('merge_type', Thrift.Type.I32, 3);\n\t    output.writeI32(this.merge_type);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.sharded !== null && this.sharded !== undefined) {\n\t    output.writeFieldBegin('sharded', Thrift.Type.BOOL, 4);\n\t    output.writeBool(this.sharded);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.row_desc !== null && this.row_desc !== undefined) {\n\t    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 5);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n\t    for (var iter71 in this.row_desc) {\n\t      if (this.row_desc.hasOwnProperty(iter71)) {\n\t        iter71 = this.row_desc[iter71];\n\t        iter71.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.node_id !== null && this.node_id !== undefined) {\n\t    output.writeFieldBegin('node_id', Thrift.Type.I32, 6);\n\t    output.writeI32(this.node_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TRowSet = module.exports.TRowSet = function (args) {\n\t  this.row_desc = null;\n\t  this.rows = null;\n\t  this.columns = null;\n\t  this.is_columnar = null;\n\t  if (args) {\n\t    if (args.row_desc !== undefined && args.row_desc !== null) {\n\t      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);\n\t    }\n\t    if (args.rows !== undefined && args.rows !== null) {\n\t      this.rows = Thrift.copyList(args.rows, [ttypes.TRow]);\n\t    }\n\t    if (args.columns !== undefined && args.columns !== null) {\n\t      this.columns = Thrift.copyList(args.columns, [ttypes.TColumn]);\n\t    }\n\t    if (args.is_columnar !== undefined && args.is_columnar !== null) {\n\t      this.is_columnar = args.is_columnar;\n\t    }\n\t  }\n\t};\n\tTRowSet.prototype = {};\n\tTRowSet.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size72 = 0;\n\t          var _rtmp376;\n\t          this.row_desc = [];\n\t          var _etype75 = 0;\n\t          _rtmp376 = input.readListBegin();\n\t          _etype75 = _rtmp376.etype;\n\t          _size72 = _rtmp376.size;\n\t          for (var _i77 = 0; _i77 < _size72; ++_i77) {\n\t            var elem78 = null;\n\t            elem78 = new ttypes.TColumnType();\n\t            elem78.read(input);\n\t            this.row_desc.push(elem78);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size79 = 0;\n\t          var _rtmp383;\n\t          this.rows = [];\n\t          var _etype82 = 0;\n\t          _rtmp383 = input.readListBegin();\n\t          _etype82 = _rtmp383.etype;\n\t          _size79 = _rtmp383.size;\n\t          for (var _i84 = 0; _i84 < _size79; ++_i84) {\n\t            var elem85 = null;\n\t            elem85 = new ttypes.TRow();\n\t            elem85.read(input);\n\t            this.rows.push(elem85);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size86 = 0;\n\t          var _rtmp390;\n\t          this.columns = [];\n\t          var _etype89 = 0;\n\t          _rtmp390 = input.readListBegin();\n\t          _etype89 = _rtmp390.etype;\n\t          _size86 = _rtmp390.size;\n\t          for (var _i91 = 0; _i91 < _size86; ++_i91) {\n\t            var elem92 = null;\n\t            elem92 = new ttypes.TColumn();\n\t            elem92.read(input);\n\t            this.columns.push(elem92);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.is_columnar = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTRowSet.prototype.write = function (output) {\n\t  output.writeStructBegin('TRowSet');\n\t  if (this.row_desc !== null && this.row_desc !== undefined) {\n\t    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n\t    for (var iter93 in this.row_desc) {\n\t      if (this.row_desc.hasOwnProperty(iter93)) {\n\t        iter93 = this.row_desc[iter93];\n\t        iter93.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.rows !== null && this.rows !== undefined) {\n\t    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);\n\t    for (var iter94 in this.rows) {\n\t      if (this.rows.hasOwnProperty(iter94)) {\n\t        iter94 = this.rows[iter94];\n\t        iter94.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.columns !== null && this.columns !== undefined) {\n\t    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);\n\t    for (var iter95 in this.columns) {\n\t      if (this.columns.hasOwnProperty(iter95)) {\n\t        iter95 = this.columns[iter95];\n\t        iter95.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.is_columnar !== null && this.is_columnar !== undefined) {\n\t    output.writeFieldBegin('is_columnar', Thrift.Type.BOOL, 4);\n\t    output.writeBool(this.is_columnar);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TQueryResult = module.exports.TQueryResult = function (args) {\n\t  this.row_set = null;\n\t  this.execution_time_ms = null;\n\t  this.total_time_ms = null;\n\t  this.nonce = null;\n\t  if (args) {\n\t    if (args.row_set !== undefined && args.row_set !== null) {\n\t      this.row_set = new ttypes.TRowSet(args.row_set);\n\t    }\n\t    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n\t      this.execution_time_ms = args.execution_time_ms;\n\t    }\n\t    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n\t      this.total_time_ms = args.total_time_ms;\n\t    }\n\t    if (args.nonce !== undefined && args.nonce !== null) {\n\t      this.nonce = args.nonce;\n\t    }\n\t  }\n\t};\n\tTQueryResult.prototype = {};\n\tTQueryResult.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.row_set = new ttypes.TRowSet();\n\t          this.row_set.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.execution_time_ms = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.total_time_ms = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.nonce = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTQueryResult.prototype.write = function (output) {\n\t  output.writeStructBegin('TQueryResult');\n\t  if (this.row_set !== null && this.row_set !== undefined) {\n\t    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);\n\t    this.row_set.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n\t    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 2);\n\t    output.writeI64(this.execution_time_ms);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n\t    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 3);\n\t    output.writeI64(this.total_time_ms);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nonce !== null && this.nonce !== undefined) {\n\t    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\n\t    output.writeString(this.nonce);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TGpuDataFrame = module.exports.TGpuDataFrame = function (args) {\n\t  this.schema = null;\n\t  this.df_handle = null;\n\t  this.df_size = null;\n\t  if (args) {\n\t    if (args.schema !== undefined && args.schema !== null) {\n\t      this.schema = args.schema;\n\t    }\n\t    if (args.df_handle !== undefined && args.df_handle !== null) {\n\t      this.df_handle = args.df_handle;\n\t    }\n\t    if (args.df_size !== undefined && args.df_size !== null) {\n\t      this.df_size = args.df_size;\n\t    }\n\t  }\n\t};\n\tTGpuDataFrame.prototype = {};\n\tTGpuDataFrame.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.schema = input.readBinary();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.df_handle = input.readBinary();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.df_size = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTGpuDataFrame.prototype.write = function (output) {\n\t  output.writeStructBegin('TGpuDataFrame');\n\t  if (this.schema !== null && this.schema !== undefined) {\n\t    output.writeFieldBegin('schema', Thrift.Type.STRING, 1);\n\t    output.writeBinary(this.schema);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.df_handle !== null && this.df_handle !== undefined) {\n\t    output.writeFieldBegin('df_handle', Thrift.Type.STRING, 2);\n\t    output.writeBinary(this.df_handle);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.df_size !== null && this.df_size !== undefined) {\n\t    output.writeFieldBegin('df_size', Thrift.Type.I64, 3);\n\t    output.writeI64(this.df_size);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TDBInfo = module.exports.TDBInfo = function (args) {\n\t  this.db_name = null;\n\t  this.db_owner = null;\n\t  if (args) {\n\t    if (args.db_name !== undefined && args.db_name !== null) {\n\t      this.db_name = args.db_name;\n\t    }\n\t    if (args.db_owner !== undefined && args.db_owner !== null) {\n\t      this.db_owner = args.db_owner;\n\t    }\n\t  }\n\t};\n\tTDBInfo.prototype = {};\n\tTDBInfo.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.db_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.db_owner = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTDBInfo.prototype.write = function (output) {\n\t  output.writeStructBegin('TDBInfo');\n\t  if (this.db_name !== null && this.db_name !== undefined) {\n\t    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);\n\t    output.writeString(this.db_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.db_owner !== null && this.db_owner !== undefined) {\n\t    output.writeFieldBegin('db_owner', Thrift.Type.STRING, 2);\n\t    output.writeString(this.db_owner);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TMapDException = module.exports.TMapDException = function (args) {\n\t  Thrift.TException.call(this, \"TMapDException\");\n\t  this.name = \"TMapDException\";\n\t  this.error_msg = null;\n\t  if (args) {\n\t    if (args.error_msg !== undefined && args.error_msg !== null) {\n\t      this.error_msg = args.error_msg;\n\t    }\n\t  }\n\t};\n\tThrift.inherits(TMapDException, Thrift.TException);\n\tTMapDException.prototype.name = 'TMapDException';\n\tTMapDException.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.error_msg = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 0:\n\t        input.skip(ftype);\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTMapDException.prototype.write = function (output) {\n\t  output.writeStructBegin('TMapDException');\n\t  if (this.error_msg !== null && this.error_msg !== undefined) {\n\t    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 1);\n\t    output.writeString(this.error_msg);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TRenderProperty = module.exports.TRenderProperty = function (args) {\n\t  this.property_type = null;\n\t  this.property_value = null;\n\t  if (args) {\n\t    if (args.property_type !== undefined && args.property_type !== null) {\n\t      this.property_type = args.property_type;\n\t    }\n\t    if (args.property_value !== undefined && args.property_value !== null) {\n\t      this.property_value = new ttypes.TDatumVal(args.property_value);\n\t    }\n\t  }\n\t};\n\tTRenderProperty.prototype = {};\n\tTRenderProperty.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.property_type = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.property_value = new ttypes.TDatumVal();\n\t          this.property_value.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTRenderProperty.prototype.write = function (output) {\n\t  output.writeStructBegin('TRenderProperty');\n\t  if (this.property_type !== null && this.property_type !== undefined) {\n\t    output.writeFieldBegin('property_type', Thrift.Type.I32, 1);\n\t    output.writeI32(this.property_type);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.property_value !== null && this.property_value !== undefined) {\n\t    output.writeFieldBegin('property_value', Thrift.Type.STRUCT, 2);\n\t    this.property_value.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TCopyParams = module.exports.TCopyParams = function (args) {\n\t  this.delimiter = null;\n\t  this.null_str = null;\n\t  this.has_header = null;\n\t  this.quoted = null;\n\t  this.quote = null;\n\t  this.escape = null;\n\t  this.line_delim = null;\n\t  this.array_delim = null;\n\t  this.array_begin = null;\n\t  this.array_end = null;\n\t  this.threads = null;\n\t  this.table_type = 0;\n\t  if (args) {\n\t    if (args.delimiter !== undefined && args.delimiter !== null) {\n\t      this.delimiter = args.delimiter;\n\t    }\n\t    if (args.null_str !== undefined && args.null_str !== null) {\n\t      this.null_str = args.null_str;\n\t    }\n\t    if (args.has_header !== undefined && args.has_header !== null) {\n\t      this.has_header = args.has_header;\n\t    }\n\t    if (args.quoted !== undefined && args.quoted !== null) {\n\t      this.quoted = args.quoted;\n\t    }\n\t    if (args.quote !== undefined && args.quote !== null) {\n\t      this.quote = args.quote;\n\t    }\n\t    if (args.escape !== undefined && args.escape !== null) {\n\t      this.escape = args.escape;\n\t    }\n\t    if (args.line_delim !== undefined && args.line_delim !== null) {\n\t      this.line_delim = args.line_delim;\n\t    }\n\t    if (args.array_delim !== undefined && args.array_delim !== null) {\n\t      this.array_delim = args.array_delim;\n\t    }\n\t    if (args.array_begin !== undefined && args.array_begin !== null) {\n\t      this.array_begin = args.array_begin;\n\t    }\n\t    if (args.array_end !== undefined && args.array_end !== null) {\n\t      this.array_end = args.array_end;\n\t    }\n\t    if (args.threads !== undefined && args.threads !== null) {\n\t      this.threads = args.threads;\n\t    }\n\t    if (args.table_type !== undefined && args.table_type !== null) {\n\t      this.table_type = args.table_type;\n\t    }\n\t  }\n\t};\n\tTCopyParams.prototype = {};\n\tTCopyParams.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.delimiter = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.null_str = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.has_header = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.quoted = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.quote = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 6:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.escape = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 7:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.line_delim = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 8:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.array_delim = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 9:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.array_begin = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 10:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.array_end = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 11:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.threads = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 12:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.table_type = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTCopyParams.prototype.write = function (output) {\n\t  output.writeStructBegin('TCopyParams');\n\t  if (this.delimiter !== null && this.delimiter !== undefined) {\n\t    output.writeFieldBegin('delimiter', Thrift.Type.STRING, 1);\n\t    output.writeString(this.delimiter);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.null_str !== null && this.null_str !== undefined) {\n\t    output.writeFieldBegin('null_str', Thrift.Type.STRING, 2);\n\t    output.writeString(this.null_str);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.has_header !== null && this.has_header !== undefined) {\n\t    output.writeFieldBegin('has_header', Thrift.Type.BOOL, 3);\n\t    output.writeBool(this.has_header);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.quoted !== null && this.quoted !== undefined) {\n\t    output.writeFieldBegin('quoted', Thrift.Type.BOOL, 4);\n\t    output.writeBool(this.quoted);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.quote !== null && this.quote !== undefined) {\n\t    output.writeFieldBegin('quote', Thrift.Type.STRING, 5);\n\t    output.writeString(this.quote);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.escape !== null && this.escape !== undefined) {\n\t    output.writeFieldBegin('escape', Thrift.Type.STRING, 6);\n\t    output.writeString(this.escape);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.line_delim !== null && this.line_delim !== undefined) {\n\t    output.writeFieldBegin('line_delim', Thrift.Type.STRING, 7);\n\t    output.writeString(this.line_delim);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.array_delim !== null && this.array_delim !== undefined) {\n\t    output.writeFieldBegin('array_delim', Thrift.Type.STRING, 8);\n\t    output.writeString(this.array_delim);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.array_begin !== null && this.array_begin !== undefined) {\n\t    output.writeFieldBegin('array_begin', Thrift.Type.STRING, 9);\n\t    output.writeString(this.array_begin);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.array_end !== null && this.array_end !== undefined) {\n\t    output.writeFieldBegin('array_end', Thrift.Type.STRING, 10);\n\t    output.writeString(this.array_end);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.threads !== null && this.threads !== undefined) {\n\t    output.writeFieldBegin('threads', Thrift.Type.I32, 11);\n\t    output.writeI32(this.threads);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_type !== null && this.table_type !== undefined) {\n\t    output.writeFieldBegin('table_type', Thrift.Type.I32, 12);\n\t    output.writeI32(this.table_type);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TDetectResult = module.exports.TDetectResult = function (args) {\n\t  this.row_set = null;\n\t  this.copy_params = null;\n\t  if (args) {\n\t    if (args.row_set !== undefined && args.row_set !== null) {\n\t      this.row_set = new ttypes.TRowSet(args.row_set);\n\t    }\n\t    if (args.copy_params !== undefined && args.copy_params !== null) {\n\t      this.copy_params = new ttypes.TCopyParams(args.copy_params);\n\t    }\n\t  }\n\t};\n\tTDetectResult.prototype = {};\n\tTDetectResult.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.row_set = new ttypes.TRowSet();\n\t          this.row_set.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.copy_params = new ttypes.TCopyParams();\n\t          this.copy_params.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTDetectResult.prototype.write = function (output) {\n\t  output.writeStructBegin('TDetectResult');\n\t  if (this.row_set !== null && this.row_set !== undefined) {\n\t    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);\n\t    this.row_set.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.copy_params !== null && this.copy_params !== undefined) {\n\t    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 2);\n\t    this.copy_params.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TImportStatus = module.exports.TImportStatus = function (args) {\n\t  this.elapsed = null;\n\t  this.rows_completed = null;\n\t  this.rows_estimated = null;\n\t  this.rows_rejected = null;\n\t  if (args) {\n\t    if (args.elapsed !== undefined && args.elapsed !== null) {\n\t      this.elapsed = args.elapsed;\n\t    }\n\t    if (args.rows_completed !== undefined && args.rows_completed !== null) {\n\t      this.rows_completed = args.rows_completed;\n\t    }\n\t    if (args.rows_estimated !== undefined && args.rows_estimated !== null) {\n\t      this.rows_estimated = args.rows_estimated;\n\t    }\n\t    if (args.rows_rejected !== undefined && args.rows_rejected !== null) {\n\t      this.rows_rejected = args.rows_rejected;\n\t    }\n\t  }\n\t};\n\tTImportStatus.prototype = {};\n\tTImportStatus.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.elapsed = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.rows_completed = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.rows_estimated = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.rows_rejected = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTImportStatus.prototype.write = function (output) {\n\t  output.writeStructBegin('TImportStatus');\n\t  if (this.elapsed !== null && this.elapsed !== undefined) {\n\t    output.writeFieldBegin('elapsed', Thrift.Type.I64, 1);\n\t    output.writeI64(this.elapsed);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.rows_completed !== null && this.rows_completed !== undefined) {\n\t    output.writeFieldBegin('rows_completed', Thrift.Type.I64, 2);\n\t    output.writeI64(this.rows_completed);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.rows_estimated !== null && this.rows_estimated !== undefined) {\n\t    output.writeFieldBegin('rows_estimated', Thrift.Type.I64, 3);\n\t    output.writeI64(this.rows_estimated);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.rows_rejected !== null && this.rows_rejected !== undefined) {\n\t    output.writeFieldBegin('rows_rejected', Thrift.Type.I64, 4);\n\t    output.writeI64(this.rows_rejected);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TFrontendView = module.exports.TFrontendView = function (args) {\n\t  this.view_name = null;\n\t  this.view_state = null;\n\t  this.image_hash = null;\n\t  this.update_time = null;\n\t  this.view_metadata = null;\n\t  if (args) {\n\t    if (args.view_name !== undefined && args.view_name !== null) {\n\t      this.view_name = args.view_name;\n\t    }\n\t    if (args.view_state !== undefined && args.view_state !== null) {\n\t      this.view_state = args.view_state;\n\t    }\n\t    if (args.image_hash !== undefined && args.image_hash !== null) {\n\t      this.image_hash = args.image_hash;\n\t    }\n\t    if (args.update_time !== undefined && args.update_time !== null) {\n\t      this.update_time = args.update_time;\n\t    }\n\t    if (args.view_metadata !== undefined && args.view_metadata !== null) {\n\t      this.view_metadata = args.view_metadata;\n\t    }\n\t  }\n\t};\n\tTFrontendView.prototype = {};\n\tTFrontendView.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.view_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.view_state = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.image_hash = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.update_time = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.view_metadata = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTFrontendView.prototype.write = function (output) {\n\t  output.writeStructBegin('TFrontendView');\n\t  if (this.view_name !== null && this.view_name !== undefined) {\n\t    output.writeFieldBegin('view_name', Thrift.Type.STRING, 1);\n\t    output.writeString(this.view_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.view_state !== null && this.view_state !== undefined) {\n\t    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);\n\t    output.writeString(this.view_state);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.image_hash !== null && this.image_hash !== undefined) {\n\t    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);\n\t    output.writeString(this.image_hash);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.update_time !== null && this.update_time !== undefined) {\n\t    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);\n\t    output.writeString(this.update_time);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.view_metadata !== null && this.view_metadata !== undefined) {\n\t    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);\n\t    output.writeString(this.view_metadata);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TServerStatus = module.exports.TServerStatus = function (args) {\n\t  this.read_only = null;\n\t  this.version = null;\n\t  this.rendering_enabled = null;\n\t  this.start_time = null;\n\t  this.edition = null;\n\t  if (args) {\n\t    if (args.read_only !== undefined && args.read_only !== null) {\n\t      this.read_only = args.read_only;\n\t    }\n\t    if (args.version !== undefined && args.version !== null) {\n\t      this.version = args.version;\n\t    }\n\t    if (args.rendering_enabled !== undefined && args.rendering_enabled !== null) {\n\t      this.rendering_enabled = args.rendering_enabled;\n\t    }\n\t    if (args.start_time !== undefined && args.start_time !== null) {\n\t      this.start_time = args.start_time;\n\t    }\n\t    if (args.edition !== undefined && args.edition !== null) {\n\t      this.edition = args.edition;\n\t    }\n\t  }\n\t};\n\tTServerStatus.prototype = {};\n\tTServerStatus.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.read_only = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.version = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.rendering_enabled = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.start_time = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.edition = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTServerStatus.prototype.write = function (output) {\n\t  output.writeStructBegin('TServerStatus');\n\t  if (this.read_only !== null && this.read_only !== undefined) {\n\t    output.writeFieldBegin('read_only', Thrift.Type.BOOL, 1);\n\t    output.writeBool(this.read_only);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.version !== null && this.version !== undefined) {\n\t    output.writeFieldBegin('version', Thrift.Type.STRING, 2);\n\t    output.writeString(this.version);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.rendering_enabled !== null && this.rendering_enabled !== undefined) {\n\t    output.writeFieldBegin('rendering_enabled', Thrift.Type.BOOL, 3);\n\t    output.writeBool(this.rendering_enabled);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.start_time !== null && this.start_time !== undefined) {\n\t    output.writeFieldBegin('start_time', Thrift.Type.I64, 4);\n\t    output.writeI64(this.start_time);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.edition !== null && this.edition !== undefined) {\n\t    output.writeFieldBegin('edition', Thrift.Type.STRING, 5);\n\t    output.writeString(this.edition);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TPixel = module.exports.TPixel = function (args) {\n\t  this.x = null;\n\t  this.y = null;\n\t  if (args) {\n\t    if (args.x !== undefined && args.x !== null) {\n\t      this.x = args.x;\n\t    }\n\t    if (args.y !== undefined && args.y !== null) {\n\t      this.y = args.y;\n\t    }\n\t  }\n\t};\n\tTPixel.prototype = {};\n\tTPixel.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.x = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.y = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTPixel.prototype.write = function (output) {\n\t  output.writeStructBegin('TPixel');\n\t  if (this.x !== null && this.x !== undefined) {\n\t    output.writeFieldBegin('x', Thrift.Type.I64, 1);\n\t    output.writeI64(this.x);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.y !== null && this.y !== undefined) {\n\t    output.writeFieldBegin('y', Thrift.Type.I64, 2);\n\t    output.writeI64(this.y);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TPixelRowResult = module.exports.TPixelRowResult = function (args) {\n\t  this.pixel = null;\n\t  this.row_id = null;\n\t  this.row_set = null;\n\t  this.nonce = null;\n\t  if (args) {\n\t    if (args.pixel !== undefined && args.pixel !== null) {\n\t      this.pixel = new ttypes.TPixel(args.pixel);\n\t    }\n\t    if (args.row_id !== undefined && args.row_id !== null) {\n\t      this.row_id = args.row_id;\n\t    }\n\t    if (args.row_set !== undefined && args.row_set !== null) {\n\t      this.row_set = new ttypes.TRowSet(args.row_set);\n\t    }\n\t    if (args.nonce !== undefined && args.nonce !== null) {\n\t      this.nonce = args.nonce;\n\t    }\n\t  }\n\t};\n\tTPixelRowResult.prototype = {};\n\tTPixelRowResult.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.pixel = new ttypes.TPixel();\n\t          this.pixel.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.row_id = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.row_set = new ttypes.TRowSet();\n\t          this.row_set.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.nonce = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTPixelRowResult.prototype.write = function (output) {\n\t  output.writeStructBegin('TPixelRowResult');\n\t  if (this.pixel !== null && this.pixel !== undefined) {\n\t    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);\n\t    this.pixel.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.row_id !== null && this.row_id !== undefined) {\n\t    output.writeFieldBegin('row_id', Thrift.Type.I64, 2);\n\t    output.writeI64(this.row_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.row_set !== null && this.row_set !== undefined) {\n\t    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 3);\n\t    this.row_set.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nonce !== null && this.nonce !== undefined) {\n\t    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);\n\t    output.writeString(this.nonce);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TPixelTableRowResult = module.exports.TPixelTableRowResult = function (args) {\n\t  this.pixel = null;\n\t  this.vega_table_name = null;\n\t  this.table_id = null;\n\t  this.row_id = null;\n\t  this.row_set = null;\n\t  this.nonce = null;\n\t  if (args) {\n\t    if (args.pixel !== undefined && args.pixel !== null) {\n\t      this.pixel = new ttypes.TPixel(args.pixel);\n\t    }\n\t    if (args.vega_table_name !== undefined && args.vega_table_name !== null) {\n\t      this.vega_table_name = args.vega_table_name;\n\t    }\n\t    if (args.table_id !== undefined && args.table_id !== null) {\n\t      this.table_id = args.table_id;\n\t    }\n\t    if (args.row_id !== undefined && args.row_id !== null) {\n\t      this.row_id = args.row_id;\n\t    }\n\t    if (args.row_set !== undefined && args.row_set !== null) {\n\t      this.row_set = new ttypes.TRowSet(args.row_set);\n\t    }\n\t    if (args.nonce !== undefined && args.nonce !== null) {\n\t      this.nonce = args.nonce;\n\t    }\n\t  }\n\t};\n\tTPixelTableRowResult.prototype = {};\n\tTPixelTableRowResult.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.pixel = new ttypes.TPixel();\n\t          this.pixel.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.vega_table_name = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.table_id = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.row_id = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.row_set = new ttypes.TRowSet();\n\t          this.row_set.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 6:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.nonce = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTPixelTableRowResult.prototype.write = function (output) {\n\t  output.writeStructBegin('TPixelTableRowResult');\n\t  if (this.pixel !== null && this.pixel !== undefined) {\n\t    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);\n\t    this.pixel.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.vega_table_name !== null && this.vega_table_name !== undefined) {\n\t    output.writeFieldBegin('vega_table_name', Thrift.Type.STRING, 2);\n\t    output.writeString(this.vega_table_name);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_id !== null && this.table_id !== undefined) {\n\t    output.writeFieldBegin('table_id', Thrift.Type.I64, 3);\n\t    output.writeI64(this.table_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.row_id !== null && this.row_id !== undefined) {\n\t    output.writeFieldBegin('row_id', Thrift.Type.I64, 4);\n\t    output.writeI64(this.row_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.row_set !== null && this.row_set !== undefined) {\n\t    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 5);\n\t    this.row_set.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nonce !== null && this.nonce !== undefined) {\n\t    output.writeFieldBegin('nonce', Thrift.Type.STRING, 6);\n\t    output.writeString(this.nonce);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TPixelRows = module.exports.TPixelRows = function (args) {\n\t  this.pixel = null;\n\t  this.row_set = null;\n\t  if (args) {\n\t    if (args.pixel !== undefined && args.pixel !== null) {\n\t      this.pixel = new ttypes.TPixel(args.pixel);\n\t    }\n\t    if (args.row_set !== undefined && args.row_set !== null) {\n\t      this.row_set = new ttypes.TRowSet(args.row_set);\n\t    }\n\t  }\n\t};\n\tTPixelRows.prototype = {};\n\tTPixelRows.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.pixel = new ttypes.TPixel();\n\t          this.pixel.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRUCT) {\n\t          this.row_set = new ttypes.TRowSet();\n\t          this.row_set.read(input);\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTPixelRows.prototype.write = function (output) {\n\t  output.writeStructBegin('TPixelRows');\n\t  if (this.pixel !== null && this.pixel !== undefined) {\n\t    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);\n\t    this.pixel.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.row_set !== null && this.row_set !== undefined) {\n\t    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 2);\n\t    this.row_set.write(output);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TPixelResult = module.exports.TPixelResult = function (args) {\n\t  this.pixel_rows = null;\n\t  this.nonce = null;\n\t  if (args) {\n\t    if (args.pixel_rows !== undefined && args.pixel_rows !== null) {\n\t      this.pixel_rows = Thrift.copyList(args.pixel_rows, [ttypes.TPixelRows]);\n\t    }\n\t    if (args.nonce !== undefined && args.nonce !== null) {\n\t      this.nonce = args.nonce;\n\t    }\n\t  }\n\t};\n\tTPixelResult.prototype = {};\n\tTPixelResult.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size96 = 0;\n\t          var _rtmp3100;\n\t          this.pixel_rows = [];\n\t          var _etype99 = 0;\n\t          _rtmp3100 = input.readListBegin();\n\t          _etype99 = _rtmp3100.etype;\n\t          _size96 = _rtmp3100.size;\n\t          for (var _i101 = 0; _i101 < _size96; ++_i101) {\n\t            var elem102 = null;\n\t            elem102 = new ttypes.TPixelRows();\n\t            elem102.read(input);\n\t            this.pixel_rows.push(elem102);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.nonce = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTPixelResult.prototype.write = function (output) {\n\t  output.writeStructBegin('TPixelResult');\n\t  if (this.pixel_rows !== null && this.pixel_rows !== undefined) {\n\t    output.writeFieldBegin('pixel_rows', Thrift.Type.LIST, 1);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.pixel_rows.length);\n\t    for (var iter103 in this.pixel_rows) {\n\t      if (this.pixel_rows.hasOwnProperty(iter103)) {\n\t        iter103 = this.pixel_rows[iter103];\n\t        iter103.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nonce !== null && this.nonce !== undefined) {\n\t    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);\n\t    output.writeString(this.nonce);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TRenderResult = module.exports.TRenderResult = function (args) {\n\t  this.image = null;\n\t  this.nonce = null;\n\t  this.execution_time_ms = null;\n\t  this.render_time_ms = null;\n\t  this.total_time_ms = null;\n\t  if (args) {\n\t    if (args.image !== undefined && args.image !== null) {\n\t      this.image = args.image;\n\t    }\n\t    if (args.nonce !== undefined && args.nonce !== null) {\n\t      this.nonce = args.nonce;\n\t    }\n\t    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n\t      this.execution_time_ms = args.execution_time_ms;\n\t    }\n\t    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\n\t      this.render_time_ms = args.render_time_ms;\n\t    }\n\t    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n\t      this.total_time_ms = args.total_time_ms;\n\t    }\n\t  }\n\t};\n\tTRenderResult.prototype = {};\n\tTRenderResult.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.image = input.readBinary();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.nonce = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.execution_time_ms = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.render_time_ms = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.total_time_ms = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTRenderResult.prototype.write = function (output) {\n\t  output.writeStructBegin('TRenderResult');\n\t  if (this.image !== null && this.image !== undefined) {\n\t    output.writeFieldBegin('image', Thrift.Type.STRING, 1);\n\t    output.writeBinary(this.image);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.nonce !== null && this.nonce !== undefined) {\n\t    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);\n\t    output.writeString(this.nonce);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n\t    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 3);\n\t    output.writeI64(this.execution_time_ms);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\n\t    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 4);\n\t    output.writeI64(this.render_time_ms);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n\t    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 5);\n\t    output.writeI64(this.total_time_ms);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TGpuMemorySummary = module.exports.TGpuMemorySummary = function (args) {\n\t  this.max = null;\n\t  this.in_use = null;\n\t  this.allocated = null;\n\t  this.is_allocation_capped = null;\n\t  if (args) {\n\t    if (args.max !== undefined && args.max !== null) {\n\t      this.max = args.max;\n\t    }\n\t    if (args.in_use !== undefined && args.in_use !== null) {\n\t      this.in_use = args.in_use;\n\t    }\n\t    if (args.allocated !== undefined && args.allocated !== null) {\n\t      this.allocated = args.allocated;\n\t    }\n\t    if (args.is_allocation_capped !== undefined && args.is_allocation_capped !== null) {\n\t      this.is_allocation_capped = args.is_allocation_capped;\n\t    }\n\t  }\n\t};\n\tTGpuMemorySummary.prototype = {};\n\tTGpuMemorySummary.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.max = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.in_use = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.allocated = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.is_allocation_capped = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTGpuMemorySummary.prototype.write = function (output) {\n\t  output.writeStructBegin('TGpuMemorySummary');\n\t  if (this.max !== null && this.max !== undefined) {\n\t    output.writeFieldBegin('max', Thrift.Type.I64, 1);\n\t    output.writeI64(this.max);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.in_use !== null && this.in_use !== undefined) {\n\t    output.writeFieldBegin('in_use', Thrift.Type.I64, 2);\n\t    output.writeI64(this.in_use);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.allocated !== null && this.allocated !== undefined) {\n\t    output.writeFieldBegin('allocated', Thrift.Type.I64, 3);\n\t    output.writeI64(this.allocated);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.is_allocation_capped !== null && this.is_allocation_capped !== undefined) {\n\t    output.writeFieldBegin('is_allocation_capped', Thrift.Type.BOOL, 4);\n\t    output.writeBool(this.is_allocation_capped);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TMemorySummary = module.exports.TMemorySummary = function (args) {\n\t  this.cpu_memory_in_use = null;\n\t  this.gpu_summary = null;\n\t  if (args) {\n\t    if (args.cpu_memory_in_use !== undefined && args.cpu_memory_in_use !== null) {\n\t      this.cpu_memory_in_use = args.cpu_memory_in_use;\n\t    }\n\t    if (args.gpu_summary !== undefined && args.gpu_summary !== null) {\n\t      this.gpu_summary = Thrift.copyList(args.gpu_summary, [ttypes.TGpuMemorySummary]);\n\t    }\n\t  }\n\t};\n\tTMemorySummary.prototype = {};\n\tTMemorySummary.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.cpu_memory_in_use = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size104 = 0;\n\t          var _rtmp3108;\n\t          this.gpu_summary = [];\n\t          var _etype107 = 0;\n\t          _rtmp3108 = input.readListBegin();\n\t          _etype107 = _rtmp3108.etype;\n\t          _size104 = _rtmp3108.size;\n\t          for (var _i109 = 0; _i109 < _size104; ++_i109) {\n\t            var elem110 = null;\n\t            elem110 = new ttypes.TGpuMemorySummary();\n\t            elem110.read(input);\n\t            this.gpu_summary.push(elem110);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTMemorySummary.prototype.write = function (output) {\n\t  output.writeStructBegin('TMemorySummary');\n\t  if (this.cpu_memory_in_use !== null && this.cpu_memory_in_use !== undefined) {\n\t    output.writeFieldBegin('cpu_memory_in_use', Thrift.Type.I64, 1);\n\t    output.writeI64(this.cpu_memory_in_use);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.gpu_summary !== null && this.gpu_summary !== undefined) {\n\t    output.writeFieldBegin('gpu_summary', Thrift.Type.LIST, 2);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.gpu_summary.length);\n\t    for (var iter111 in this.gpu_summary) {\n\t      if (this.gpu_summary.hasOwnProperty(iter111)) {\n\t        iter111 = this.gpu_summary[iter111];\n\t        iter111.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TTableDetails = module.exports.TTableDetails = function (args) {\n\t  this.row_desc = null;\n\t  this.fragment_size = null;\n\t  this.page_size = null;\n\t  this.max_rows = null;\n\t  this.view_sql = null;\n\t  if (args) {\n\t    if (args.row_desc !== undefined && args.row_desc !== null) {\n\t      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);\n\t    }\n\t    if (args.fragment_size !== undefined && args.fragment_size !== null) {\n\t      this.fragment_size = args.fragment_size;\n\t    }\n\t    if (args.page_size !== undefined && args.page_size !== null) {\n\t      this.page_size = args.page_size;\n\t    }\n\t    if (args.max_rows !== undefined && args.max_rows !== null) {\n\t      this.max_rows = args.max_rows;\n\t    }\n\t    if (args.view_sql !== undefined && args.view_sql !== null) {\n\t      this.view_sql = args.view_sql;\n\t    }\n\t  }\n\t};\n\tTTableDetails.prototype = {};\n\tTTableDetails.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size112 = 0;\n\t          var _rtmp3116;\n\t          this.row_desc = [];\n\t          var _etype115 = 0;\n\t          _rtmp3116 = input.readListBegin();\n\t          _etype115 = _rtmp3116.etype;\n\t          _size112 = _rtmp3116.size;\n\t          for (var _i117 = 0; _i117 < _size112; ++_i117) {\n\t            var elem118 = null;\n\t            elem118 = new ttypes.TColumnType();\n\t            elem118.read(input);\n\t            this.row_desc.push(elem118);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.fragment_size = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.page_size = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.max_rows = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.view_sql = input.readString();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTTableDetails.prototype.write = function (output) {\n\t  output.writeStructBegin('TTableDetails');\n\t  if (this.row_desc !== null && this.row_desc !== undefined) {\n\t    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);\n\t    for (var iter119 in this.row_desc) {\n\t      if (this.row_desc.hasOwnProperty(iter119)) {\n\t        iter119 = this.row_desc[iter119];\n\t        iter119.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.fragment_size !== null && this.fragment_size !== undefined) {\n\t    output.writeFieldBegin('fragment_size', Thrift.Type.I64, 2);\n\t    output.writeI64(this.fragment_size);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.page_size !== null && this.page_size !== undefined) {\n\t    output.writeFieldBegin('page_size', Thrift.Type.I64, 3);\n\t    output.writeI64(this.page_size);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.max_rows !== null && this.max_rows !== undefined) {\n\t    output.writeFieldBegin('max_rows', Thrift.Type.I64, 4);\n\t    output.writeI64(this.max_rows);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.view_sql !== null && this.view_sql !== undefined) {\n\t    output.writeFieldBegin('view_sql', Thrift.Type.STRING, 5);\n\t    output.writeString(this.view_sql);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TColumnRange = module.exports.TColumnRange = function (args) {\n\t  this.type = null;\n\t  this.col_id = null;\n\t  this.table_id = null;\n\t  this.has_nulls = null;\n\t  this.int_min = null;\n\t  this.int_max = null;\n\t  this.bucket = null;\n\t  this.fp_min = null;\n\t  this.fp_max = null;\n\t  if (args) {\n\t    if (args.type !== undefined && args.type !== null) {\n\t      this.type = args.type;\n\t    }\n\t    if (args.col_id !== undefined && args.col_id !== null) {\n\t      this.col_id = args.col_id;\n\t    }\n\t    if (args.table_id !== undefined && args.table_id !== null) {\n\t      this.table_id = args.table_id;\n\t    }\n\t    if (args.has_nulls !== undefined && args.has_nulls !== null) {\n\t      this.has_nulls = args.has_nulls;\n\t    }\n\t    if (args.int_min !== undefined && args.int_min !== null) {\n\t      this.int_min = args.int_min;\n\t    }\n\t    if (args.int_max !== undefined && args.int_max !== null) {\n\t      this.int_max = args.int_max;\n\t    }\n\t    if (args.bucket !== undefined && args.bucket !== null) {\n\t      this.bucket = args.bucket;\n\t    }\n\t    if (args.fp_min !== undefined && args.fp_min !== null) {\n\t      this.fp_min = args.fp_min;\n\t    }\n\t    if (args.fp_max !== undefined && args.fp_max !== null) {\n\t      this.fp_max = args.fp_max;\n\t    }\n\t  }\n\t};\n\tTColumnRange.prototype = {};\n\tTColumnRange.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.type = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.col_id = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.table_id = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.has_nulls = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.int_min = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 6:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.int_max = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 7:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.bucket = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 8:\n\t        if (ftype == Thrift.Type.DOUBLE) {\n\t          this.fp_min = input.readDouble();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 9:\n\t        if (ftype == Thrift.Type.DOUBLE) {\n\t          this.fp_max = input.readDouble();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTColumnRange.prototype.write = function (output) {\n\t  output.writeStructBegin('TColumnRange');\n\t  if (this.type !== null && this.type !== undefined) {\n\t    output.writeFieldBegin('type', Thrift.Type.I32, 1);\n\t    output.writeI32(this.type);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.col_id !== null && this.col_id !== undefined) {\n\t    output.writeFieldBegin('col_id', Thrift.Type.I32, 2);\n\t    output.writeI32(this.col_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_id !== null && this.table_id !== undefined) {\n\t    output.writeFieldBegin('table_id', Thrift.Type.I32, 3);\n\t    output.writeI32(this.table_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.has_nulls !== null && this.has_nulls !== undefined) {\n\t    output.writeFieldBegin('has_nulls', Thrift.Type.BOOL, 4);\n\t    output.writeBool(this.has_nulls);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.int_min !== null && this.int_min !== undefined) {\n\t    output.writeFieldBegin('int_min', Thrift.Type.I64, 5);\n\t    output.writeI64(this.int_min);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.int_max !== null && this.int_max !== undefined) {\n\t    output.writeFieldBegin('int_max', Thrift.Type.I64, 6);\n\t    output.writeI64(this.int_max);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.bucket !== null && this.bucket !== undefined) {\n\t    output.writeFieldBegin('bucket', Thrift.Type.I64, 7);\n\t    output.writeI64(this.bucket);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.fp_min !== null && this.fp_min !== undefined) {\n\t    output.writeFieldBegin('fp_min', Thrift.Type.DOUBLE, 8);\n\t    output.writeDouble(this.fp_min);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.fp_max !== null && this.fp_max !== undefined) {\n\t    output.writeFieldBegin('fp_max', Thrift.Type.DOUBLE, 9);\n\t    output.writeDouble(this.fp_max);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TDictionaryGeneration = module.exports.TDictionaryGeneration = function (args) {\n\t  this.dict_id = null;\n\t  this.entry_count = null;\n\t  if (args) {\n\t    if (args.dict_id !== undefined && args.dict_id !== null) {\n\t      this.dict_id = args.dict_id;\n\t    }\n\t    if (args.entry_count !== undefined && args.entry_count !== null) {\n\t      this.entry_count = args.entry_count;\n\t    }\n\t  }\n\t};\n\tTDictionaryGeneration.prototype = {};\n\tTDictionaryGeneration.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.dict_id = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.entry_count = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTDictionaryGeneration.prototype.write = function (output) {\n\t  output.writeStructBegin('TDictionaryGeneration');\n\t  if (this.dict_id !== null && this.dict_id !== undefined) {\n\t    output.writeFieldBegin('dict_id', Thrift.Type.I32, 1);\n\t    output.writeI32(this.dict_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.entry_count !== null && this.entry_count !== undefined) {\n\t    output.writeFieldBegin('entry_count', Thrift.Type.I64, 2);\n\t    output.writeI64(this.entry_count);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TTableGeneration = module.exports.TTableGeneration = function (args) {\n\t  this.table_id = null;\n\t  this.tuple_count = null;\n\t  this.start_rowid = null;\n\t  if (args) {\n\t    if (args.table_id !== undefined && args.table_id !== null) {\n\t      this.table_id = args.table_id;\n\t    }\n\t    if (args.tuple_count !== undefined && args.tuple_count !== null) {\n\t      this.tuple_count = args.tuple_count;\n\t    }\n\t    if (args.start_rowid !== undefined && args.start_rowid !== null) {\n\t      this.start_rowid = args.start_rowid;\n\t    }\n\t  }\n\t};\n\tTTableGeneration.prototype = {};\n\tTTableGeneration.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.table_id = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.tuple_count = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.start_rowid = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTTableGeneration.prototype.write = function (output) {\n\t  output.writeStructBegin('TTableGeneration');\n\t  if (this.table_id !== null && this.table_id !== undefined) {\n\t    output.writeFieldBegin('table_id', Thrift.Type.I32, 1);\n\t    output.writeI32(this.table_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.tuple_count !== null && this.tuple_count !== undefined) {\n\t    output.writeFieldBegin('tuple_count', Thrift.Type.I64, 2);\n\t    output.writeI64(this.tuple_count);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.start_rowid !== null && this.start_rowid !== undefined) {\n\t    output.writeFieldBegin('start_rowid', Thrift.Type.I64, 3);\n\t    output.writeI64(this.start_rowid);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TPendingQuery = module.exports.TPendingQuery = function (args) {\n\t  this.id = null;\n\t  this.column_ranges = null;\n\t  this.dictionary_generations = null;\n\t  this.table_generations = null;\n\t  if (args) {\n\t    if (args.id !== undefined && args.id !== null) {\n\t      this.id = args.id;\n\t    }\n\t    if (args.column_ranges !== undefined && args.column_ranges !== null) {\n\t      this.column_ranges = Thrift.copyList(args.column_ranges, [ttypes.TColumnRange]);\n\t    }\n\t    if (args.dictionary_generations !== undefined && args.dictionary_generations !== null) {\n\t      this.dictionary_generations = Thrift.copyList(args.dictionary_generations, [ttypes.TDictionaryGeneration]);\n\t    }\n\t    if (args.table_generations !== undefined && args.table_generations !== null) {\n\t      this.table_generations = Thrift.copyList(args.table_generations, [ttypes.TTableGeneration]);\n\t    }\n\t  }\n\t};\n\tTPendingQuery.prototype = {};\n\tTPendingQuery.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.id = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size120 = 0;\n\t          var _rtmp3124;\n\t          this.column_ranges = [];\n\t          var _etype123 = 0;\n\t          _rtmp3124 = input.readListBegin();\n\t          _etype123 = _rtmp3124.etype;\n\t          _size120 = _rtmp3124.size;\n\t          for (var _i125 = 0; _i125 < _size120; ++_i125) {\n\t            var elem126 = null;\n\t            elem126 = new ttypes.TColumnRange();\n\t            elem126.read(input);\n\t            this.column_ranges.push(elem126);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size127 = 0;\n\t          var _rtmp3131;\n\t          this.dictionary_generations = [];\n\t          var _etype130 = 0;\n\t          _rtmp3131 = input.readListBegin();\n\t          _etype130 = _rtmp3131.etype;\n\t          _size127 = _rtmp3131.size;\n\t          for (var _i132 = 0; _i132 < _size127; ++_i132) {\n\t            var elem133 = null;\n\t            elem133 = new ttypes.TDictionaryGeneration();\n\t            elem133.read(input);\n\t            this.dictionary_generations.push(elem133);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size134 = 0;\n\t          var _rtmp3138;\n\t          this.table_generations = [];\n\t          var _etype137 = 0;\n\t          _rtmp3138 = input.readListBegin();\n\t          _etype137 = _rtmp3138.etype;\n\t          _size134 = _rtmp3138.size;\n\t          for (var _i139 = 0; _i139 < _size134; ++_i139) {\n\t            var elem140 = null;\n\t            elem140 = new ttypes.TTableGeneration();\n\t            elem140.read(input);\n\t            this.table_generations.push(elem140);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTPendingQuery.prototype.write = function (output) {\n\t  output.writeStructBegin('TPendingQuery');\n\t  if (this.id !== null && this.id !== undefined) {\n\t    output.writeFieldBegin('id', Thrift.Type.I64, 1);\n\t    output.writeI64(this.id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.column_ranges !== null && this.column_ranges !== undefined) {\n\t    output.writeFieldBegin('column_ranges', Thrift.Type.LIST, 2);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.column_ranges.length);\n\t    for (var iter141 in this.column_ranges) {\n\t      if (this.column_ranges.hasOwnProperty(iter141)) {\n\t        iter141 = this.column_ranges[iter141];\n\t        iter141.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.dictionary_generations !== null && this.dictionary_generations !== undefined) {\n\t    output.writeFieldBegin('dictionary_generations', Thrift.Type.LIST, 3);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.dictionary_generations.length);\n\t    for (var iter142 in this.dictionary_generations) {\n\t      if (this.dictionary_generations.hasOwnProperty(iter142)) {\n\t        iter142 = this.dictionary_generations[iter142];\n\t        iter142.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_generations !== null && this.table_generations !== undefined) {\n\t    output.writeFieldBegin('table_generations', Thrift.Type.LIST, 4);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.table_generations.length);\n\t    for (var iter143 in this.table_generations) {\n\t      if (this.table_generations.hasOwnProperty(iter143)) {\n\t        iter143 = this.table_generations[iter143];\n\t        iter143.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TVarLen = module.exports.TVarLen = function (args) {\n\t  this.payload = null;\n\t  this.is_null = null;\n\t  if (args) {\n\t    if (args.payload !== undefined && args.payload !== null) {\n\t      this.payload = args.payload;\n\t    }\n\t    if (args.is_null !== undefined && args.is_null !== null) {\n\t      this.is_null = args.is_null;\n\t    }\n\t  }\n\t};\n\tTVarLen.prototype = {};\n\tTVarLen.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.payload = input.readBinary();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.BOOL) {\n\t          this.is_null = input.readBool();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTVarLen.prototype.write = function (output) {\n\t  output.writeStructBegin('TVarLen');\n\t  if (this.payload !== null && this.payload !== undefined) {\n\t    output.writeFieldBegin('payload', Thrift.Type.STRING, 1);\n\t    output.writeBinary(this.payload);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.is_null !== null && this.is_null !== undefined) {\n\t    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);\n\t    output.writeBool(this.is_null);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TDataBlockPtr = module.exports.TDataBlockPtr = function (args) {\n\t  this.fixed_len_data = null;\n\t  this.var_len_data = null;\n\t  if (args) {\n\t    if (args.fixed_len_data !== undefined && args.fixed_len_data !== null) {\n\t      this.fixed_len_data = args.fixed_len_data;\n\t    }\n\t    if (args.var_len_data !== undefined && args.var_len_data !== null) {\n\t      this.var_len_data = Thrift.copyList(args.var_len_data, [ttypes.TVarLen]);\n\t    }\n\t  }\n\t};\n\tTDataBlockPtr.prototype = {};\n\tTDataBlockPtr.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.fixed_len_data = input.readBinary();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size144 = 0;\n\t          var _rtmp3148;\n\t          this.var_len_data = [];\n\t          var _etype147 = 0;\n\t          _rtmp3148 = input.readListBegin();\n\t          _etype147 = _rtmp3148.etype;\n\t          _size144 = _rtmp3148.size;\n\t          for (var _i149 = 0; _i149 < _size144; ++_i149) {\n\t            var elem150 = null;\n\t            elem150 = new ttypes.TVarLen();\n\t            elem150.read(input);\n\t            this.var_len_data.push(elem150);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTDataBlockPtr.prototype.write = function (output) {\n\t  output.writeStructBegin('TDataBlockPtr');\n\t  if (this.fixed_len_data !== null && this.fixed_len_data !== undefined) {\n\t    output.writeFieldBegin('fixed_len_data', Thrift.Type.STRING, 1);\n\t    output.writeBinary(this.fixed_len_data);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.var_len_data !== null && this.var_len_data !== undefined) {\n\t    output.writeFieldBegin('var_len_data', Thrift.Type.LIST, 2);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.var_len_data.length);\n\t    for (var iter151 in this.var_len_data) {\n\t      if (this.var_len_data.hasOwnProperty(iter151)) {\n\t        iter151 = this.var_len_data[iter151];\n\t        iter151.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TInsertData = module.exports.TInsertData = function (args) {\n\t  this.db_id = null;\n\t  this.table_id = null;\n\t  this.column_ids = null;\n\t  this.data = null;\n\t  this.num_rows = null;\n\t  if (args) {\n\t    if (args.db_id !== undefined && args.db_id !== null) {\n\t      this.db_id = args.db_id;\n\t    }\n\t    if (args.table_id !== undefined && args.table_id !== null) {\n\t      this.table_id = args.table_id;\n\t    }\n\t    if (args.column_ids !== undefined && args.column_ids !== null) {\n\t      this.column_ids = Thrift.copyList(args.column_ids, [null]);\n\t    }\n\t    if (args.data !== undefined && args.data !== null) {\n\t      this.data = Thrift.copyList(args.data, [ttypes.TDataBlockPtr]);\n\t    }\n\t    if (args.num_rows !== undefined && args.num_rows !== null) {\n\t      this.num_rows = args.num_rows;\n\t    }\n\t  }\n\t};\n\tTInsertData.prototype = {};\n\tTInsertData.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.db_id = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.table_id = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size152 = 0;\n\t          var _rtmp3156;\n\t          this.column_ids = [];\n\t          var _etype155 = 0;\n\t          _rtmp3156 = input.readListBegin();\n\t          _etype155 = _rtmp3156.etype;\n\t          _size152 = _rtmp3156.size;\n\t          for (var _i157 = 0; _i157 < _size152; ++_i157) {\n\t            var elem158 = null;\n\t            elem158 = input.readI32();\n\t            this.column_ids.push(elem158);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.LIST) {\n\t          var _size159 = 0;\n\t          var _rtmp3163;\n\t          this.data = [];\n\t          var _etype162 = 0;\n\t          _rtmp3163 = input.readListBegin();\n\t          _etype162 = _rtmp3163.etype;\n\t          _size159 = _rtmp3163.size;\n\t          for (var _i164 = 0; _i164 < _size159; ++_i164) {\n\t            var elem165 = null;\n\t            elem165 = new ttypes.TDataBlockPtr();\n\t            elem165.read(input);\n\t            this.data.push(elem165);\n\t          }\n\t          input.readListEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.num_rows = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTInsertData.prototype.write = function (output) {\n\t  output.writeStructBegin('TInsertData');\n\t  if (this.db_id !== null && this.db_id !== undefined) {\n\t    output.writeFieldBegin('db_id', Thrift.Type.I32, 1);\n\t    output.writeI32(this.db_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_id !== null && this.table_id !== undefined) {\n\t    output.writeFieldBegin('table_id', Thrift.Type.I32, 2);\n\t    output.writeI32(this.table_id);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.column_ids !== null && this.column_ids !== undefined) {\n\t    output.writeFieldBegin('column_ids', Thrift.Type.LIST, 3);\n\t    output.writeListBegin(Thrift.Type.I32, this.column_ids.length);\n\t    for (var iter166 in this.column_ids) {\n\t      if (this.column_ids.hasOwnProperty(iter166)) {\n\t        iter166 = this.column_ids[iter166];\n\t        output.writeI32(iter166);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.data !== null && this.data !== undefined) {\n\t    output.writeFieldBegin('data', Thrift.Type.LIST, 4);\n\t    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);\n\t    for (var iter167 in this.data) {\n\t      if (this.data.hasOwnProperty(iter167)) {\n\t        iter167 = this.data[iter167];\n\t        iter167.write(output);\n\t      }\n\t    }\n\t    output.writeListEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.num_rows !== null && this.num_rows !== undefined) {\n\t    output.writeFieldBegin('num_rows', Thrift.Type.I64, 5);\n\t    output.writeI64(this.num_rows);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TRawRenderPassDataResult = module.exports.TRawRenderPassDataResult = function (args) {\n\t  this.num_channels = null;\n\t  this.pixels = null;\n\t  this.row_ids_A = null;\n\t  this.row_ids_B = null;\n\t  this.table_ids = null;\n\t  if (args) {\n\t    if (args.num_channels !== undefined && args.num_channels !== null) {\n\t      this.num_channels = args.num_channels;\n\t    }\n\t    if (args.pixels !== undefined && args.pixels !== null) {\n\t      this.pixels = args.pixels;\n\t    }\n\t    if (args.row_ids_A !== undefined && args.row_ids_A !== null) {\n\t      this.row_ids_A = args.row_ids_A;\n\t    }\n\t    if (args.row_ids_B !== undefined && args.row_ids_B !== null) {\n\t      this.row_ids_B = args.row_ids_B;\n\t    }\n\t    if (args.table_ids !== undefined && args.table_ids !== null) {\n\t      this.table_ids = args.table_ids;\n\t    }\n\t  }\n\t};\n\tTRawRenderPassDataResult.prototype = {};\n\tTRawRenderPassDataResult.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.num_channels = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.pixels = input.readBinary();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.row_ids_A = input.readBinary();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 4:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.row_ids_B = input.readBinary();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 5:\n\t        if (ftype == Thrift.Type.STRING) {\n\t          this.table_ids = input.readBinary();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTRawRenderPassDataResult.prototype.write = function (output) {\n\t  output.writeStructBegin('TRawRenderPassDataResult');\n\t  if (this.num_channels !== null && this.num_channels !== undefined) {\n\t    output.writeFieldBegin('num_channels', Thrift.Type.I32, 1);\n\t    output.writeI32(this.num_channels);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.pixels !== null && this.pixels !== undefined) {\n\t    output.writeFieldBegin('pixels', Thrift.Type.STRING, 2);\n\t    output.writeBinary(this.pixels);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.row_ids_A !== null && this.row_ids_A !== undefined) {\n\t    output.writeFieldBegin('row_ids_A', Thrift.Type.STRING, 3);\n\t    output.writeBinary(this.row_ids_A);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.row_ids_B !== null && this.row_ids_B !== undefined) {\n\t    output.writeFieldBegin('row_ids_B', Thrift.Type.STRING, 4);\n\t    output.writeBinary(this.row_ids_B);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.table_ids !== null && this.table_ids !== undefined) {\n\t    output.writeFieldBegin('table_ids', Thrift.Type.STRING, 5);\n\t    output.writeBinary(this.table_ids);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n\tvar TRawPixelDataResult = module.exports.TRawPixelDataResult = function (args) {\n\t  this.width = null;\n\t  this.height = null;\n\t  this.render_pass_map = null;\n\t  this.execution_time_ms = null;\n\t  this.render_time_ms = null;\n\t  this.total_time_ms = null;\n\t  if (args) {\n\t    if (args.width !== undefined && args.width !== null) {\n\t      this.width = args.width;\n\t    }\n\t    if (args.height !== undefined && args.height !== null) {\n\t      this.height = args.height;\n\t    }\n\t    if (args.render_pass_map !== undefined && args.render_pass_map !== null) {\n\t      this.render_pass_map = Thrift.copyMap(args.render_pass_map, [ttypes.TRawRenderPassDataResult]);\n\t    }\n\t    if (args.execution_time_ms !== undefined && args.execution_time_ms !== null) {\n\t      this.execution_time_ms = args.execution_time_ms;\n\t    }\n\t    if (args.render_time_ms !== undefined && args.render_time_ms !== null) {\n\t      this.render_time_ms = args.render_time_ms;\n\t    }\n\t    if (args.total_time_ms !== undefined && args.total_time_ms !== null) {\n\t      this.total_time_ms = args.total_time_ms;\n\t    }\n\t  }\n\t};\n\tTRawPixelDataResult.prototype = {};\n\tTRawPixelDataResult.prototype.read = function (input) {\n\t  input.readStructBegin();\n\t  while (true) {\n\t    var ret = input.readFieldBegin();\n\t    var fname = ret.fname;\n\t    var ftype = ret.ftype;\n\t    var fid = ret.fid;\n\t    if (ftype == Thrift.Type.STOP) {\n\t      break;\n\t    }\n\t    switch (fid) {\n\t      case 1:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.width = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 2:\n\t        if (ftype == Thrift.Type.I32) {\n\t          this.height = input.readI32();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 3:\n\t        if (ftype == Thrift.Type.MAP) {\n\t          var _size168 = 0;\n\t          var _rtmp3172;\n\t          this.render_pass_map = {};\n\t          var _ktype169 = 0;\n\t          var _vtype170 = 0;\n\t          _rtmp3172 = input.readMapBegin();\n\t          _ktype169 = _rtmp3172.ktype;\n\t          _vtype170 = _rtmp3172.vtype;\n\t          _size168 = _rtmp3172.size;\n\t          for (var _i173 = 0; _i173 < _size168; ++_i173) {\n\t            var key174 = null;\n\t            var val175 = null;\n\t            key174 = input.readI32();\n\t            val175 = new ttypes.TRawRenderPassDataResult();\n\t            val175.read(input);\n\t            this.render_pass_map[key174] = val175;\n\t          }\n\t          input.readMapEnd();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 8:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.execution_time_ms = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 9:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.render_time_ms = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      case 10:\n\t        if (ftype == Thrift.Type.I64) {\n\t          this.total_time_ms = input.readI64();\n\t        } else {\n\t          input.skip(ftype);\n\t        }\n\t        break;\n\t      default:\n\t        input.skip(ftype);\n\t    }\n\t    input.readFieldEnd();\n\t  }\n\t  input.readStructEnd();\n\t  return;\n\t};\n\n\tTRawPixelDataResult.prototype.write = function (output) {\n\t  output.writeStructBegin('TRawPixelDataResult');\n\t  if (this.width !== null && this.width !== undefined) {\n\t    output.writeFieldBegin('width', Thrift.Type.I32, 1);\n\t    output.writeI32(this.width);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.height !== null && this.height !== undefined) {\n\t    output.writeFieldBegin('height', Thrift.Type.I32, 2);\n\t    output.writeI32(this.height);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.render_pass_map !== null && this.render_pass_map !== undefined) {\n\t    output.writeFieldBegin('render_pass_map', Thrift.Type.MAP, 3);\n\t    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.render_pass_map));\n\t    for (var kiter176 in this.render_pass_map) {\n\t      if (this.render_pass_map.hasOwnProperty(kiter176)) {\n\t        var viter177 = this.render_pass_map[kiter176];\n\t        output.writeI32(kiter176);\n\t        viter177.write(output);\n\t      }\n\t    }\n\t    output.writeMapEnd();\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {\n\t    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 8);\n\t    output.writeI64(this.execution_time_ms);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.render_time_ms !== null && this.render_time_ms !== undefined) {\n\t    output.writeFieldBegin('render_time_ms', Thrift.Type.I64, 9);\n\t    output.writeI64(this.render_time_ms);\n\t    output.writeFieldEnd();\n\t  }\n\t  if (this.total_time_ms !== null && this.total_time_ms !== undefined) {\n\t    output.writeFieldBegin('total_time_ms', Thrift.Type.I64, 10);\n\t    output.writeI64(this.total_time_ms);\n\t    output.writeFieldEnd();\n\t  }\n\t  output.writeFieldStop();\n\t  output.writeStructEnd();\n\t  return;\n\t};\n\n/***/ }),\n/* 117 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = processQueryResults;\n\n\tvar _processColumnarResults = __webpack_require__(118);\n\n\tvar _processColumnarResults2 = _interopRequireDefault(_processColumnarResults);\n\n\tvar _processRowResults = __webpack_require__(119);\n\n\tvar _processRowResults2 = _interopRequireDefault(_processRowResults);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/**\n\t   * Decides how to process raw results once they come back from the server.\n\t   *\n\t   * @param {Boolean} logging if enabled, will show how long the query took to execute in console\n\t   * @param {Function} updateQueryTimes A function that updates internal query times on connector\n\t   * @param {Object} options A list of options for processing the results\n\t   * @param {Boolean} options.isImage Set to true when querying for backend rendered images\n\t   * @param {Boolean} options.eliminateNullRows Removes null rows\n\t   * @param {String} options.query The SQL query string used only for logging\n\t   * @param {Number} options.queryId The ID of the query\n\t   * @param {Number} options.conId The unique connector identification\n\t   * @param {String} options.estimatedQueryTime The estimate of the query time\n\t   * @param {Array<Function>} the same callback coming from {@link #query}\n\t   * @param {Object} result - The query result used to decide whether to process\n\t   *                          as column or row results.\n\t   * @return {Object} null if image with callbacks, result if image with callbacks,\n\t   *                  otherwise formatted results\n\t   */\n\tfunction processQueryResults(logging, updateQueryTimes) {\n\t  return function (options, _datumEnum, result, callback) {\n\t    var isImage = false;\n\t    var eliminateNullRows = false;\n\t    var query = null;\n\t    var queryId = null;\n\t    var conId = null;\n\t    var estimatedQueryTime = null;\n\t    var hasCallback = Boolean(callback);\n\n\t    if (typeof options !== \"undefined\") {\n\t      isImage = options.isImage ? options.isImage : false;\n\t      eliminateNullRows = options.eliminateNullRows ? options.eliminateNullRows : false;\n\t      query = options.query ? options.query : null;\n\t      queryId = options.queryId ? options.queryId : null;\n\t      conId = typeof options.conId === \"undefined\" ? null : options.conId;\n\t      estimatedQueryTime = typeof options.estimatedQueryTime === \"undefined\" ? null : options.estimatedQueryTime;\n\t    }\n\t    if (result.execution_time_ms && conId !== null && estimatedQueryTime !== null) {\n\t      updateQueryTimes(conId, queryId, estimatedQueryTime, result.execution_time_ms);\n\t    }\n\n\t    // should use node_env\n\t    if (logging && result.execution_time_ms) {\n\t      console.log(query, \"on Server\", conId, \"- Execution Time:\", result.execution_time_ms, \" ms, Total Time:\", result.total_time_ms + \"ms\");\n\t    }\n\n\t    if (isImage && hasCallback) {\n\t      callback(null, result);\n\t    } else if (isImage && !hasCallback) {\n\t      return result;\n\t    } else {\n\t      var formattedResult = null;\n\n\t      if (!result.row_set) {\n\t        if (hasCallback) {\n\t          callback(new Error(\"No result to process\"));\n\t        } else {\n\t          throw new Error(\"No result to process\");\n\t        }\n\t        return;\n\t      }\n\n\t      if (result.row_set.is_columnar) {\n\t        formattedResult = (0, _processColumnarResults2.default)(result.row_set, eliminateNullRows, _datumEnum);\n\t      } else {\n\t        formattedResult = (0, _processRowResults2.default)(result.row_set, eliminateNullRows, _datumEnum);\n\t      }\n\n\t      formattedResult.timing = {\n\t        execution_time_ms: result.execution_time_ms,\n\t        total_time_ms: result.total_time_ms\n\t      };\n\n\t      if (hasCallback) {\n\t        callback(null, options.returnTiming ? formattedResult : formattedResult.results);\n\t      } else {\n\t        return options.returnTiming ? formattedResult : formattedResult.results;\n\t      }\n\t    }\n\t  };\n\t}\n\n/***/ }),\n/* 118 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = processColumnarResults;\n\t/**\n\t   * Because it is inefficient for the server to return a row-based\n\t   * data structure, it is better to process the column-based results into a row-based\n\t   * format after the fact.\n\t   *\n\t   * @param {TRowSet} data The column-based data returned from a query\n\t   * @param {Boolean} eliminateNullRows A flag that allows removal of null rows from results\n\t   * @param {Object} dataEnum A list of types created from when executing {@link #invertDatumTypes}\n\t   * @returns {Object} processedResults The formatted results of the query\n\t   */\n\tfunction processColumnarResults(data, eliminateNullRows, dataEnum) {\n\t  var formattedResult = { fields: [], results: [] };\n\t  var numCols = data.row_desc.length;\n\t  var numRows = typeof data.columns[0] === \"undefined\" ? 0 : data.columns[0].nulls.length;\n\n\t  formattedResult.fields = data.row_desc.map(function (field) {\n\t    return {\n\t      name: field.col_name,\n\t      type: dataEnum[field.col_type.type],\n\t      is_array: field.col_type.is_array\n\t    };\n\t  });\n\n\t  for (var r = 0; r < numRows; r++) {\n\t    if (eliminateNullRows) {\n\t      var rowHasNull = false;\n\t      for (var c = 0; c < numCols; c++) {\n\t        if (data.columns[c].nulls[r]) {\n\t          rowHasNull = true;\n\t          break;\n\t        }\n\t      }\n\t      if (rowHasNull) {\n\t        continue; // eslint-disable-line no-continue\n\t      }\n\t    }\n\t    var row = {};\n\t    for (var _c = 0; _c < numCols; _c++) {\n\t      var fieldName = formattedResult.fields[_c].name;\n\t      var fieldType = formattedResult.fields[_c].type;\n\t      var fieldIsArray = formattedResult.fields[_c].is_array;\n\t      var isNull = data.columns[_c].nulls[r];\n\t      if (isNull) {\n\t        // row[fieldName] = \"NULL\";\n\t        row[fieldName] = null;\n\t        continue; // eslint-disable-line no-continue\n\t      }\n\t      if (fieldIsArray) {\n\t        row[fieldName] = [];\n\t        var arrayNumElems = data.columns[_c].data.arr_col[r].nulls.length;\n\t        for (var e = 0; e < arrayNumElems; e++) {\n\t          if (data.columns[_c].data.arr_col[r].nulls[e]) {\n\t            row[fieldName].push(\"NULL\");\n\t            continue; // eslint-disable-line no-continue\n\t          }\n\t          switch (fieldType) {\n\t            case \"BOOL\":\n\t              row[fieldName].push(Boolean(data.columns[_c].data.arr_col[r].data.int_col[e]));\n\t              break;\n\t            case \"SMALLINT\":\n\t            case \"INT\":\n\t            case \"BIGINT\":\n\t              row[fieldName].push(data.columns[_c].data.arr_col[r].data.int_col[e]);\n\t              break;\n\t            case \"FLOAT\":\n\t            case \"DOUBLE\":\n\t            case \"DECIMAL\":\n\t              row[fieldName].push(data.columns[_c].data.arr_col[r].data.real_col[e]);\n\t              break;\n\t            case \"STR\":\n\t              row[fieldName].push(data.columns[_c].data.arr_col[r].data.str_col[e]);\n\t              break;\n\t            case \"TIME\":\n\t            case \"TIMESTAMP\":\n\t            case \"DATE\":\n\t              row[fieldName].push(data.columns[_c].data.arr_col[r].data.int_col[e] * 1000); // eslint-disable-line no-magic-numbers\n\t              break;\n\t            default:\n\t              break;\n\t          }\n\t        }\n\t      } else {\n\t        switch (fieldType) {\n\t          case \"BOOL\":\n\t            row[fieldName] = Boolean(data.columns[_c].data.int_col[r]);\n\t            break;\n\t          case \"SMALLINT\":\n\t          case \"INT\":\n\t          case \"BIGINT\":\n\t            row[fieldName] = data.columns[_c].data.int_col[r];\n\t            break;\n\t          case \"FLOAT\":\n\t          case \"DOUBLE\":\n\t          case \"DECIMAL\":\n\t            row[fieldName] = data.columns[_c].data.real_col[r];\n\t            break;\n\t          case \"STR\":\n\t            row[fieldName] = data.columns[_c].data.str_col[r];\n\t            break;\n\t          case \"TIME\":\n\t          case \"TIMESTAMP\":\n\t          case \"DATE\":\n\t            row[fieldName] = new Date(data.columns[_c].data.int_col[r] * 1000); // eslint-disable-line no-magic-numbers\n\t            break;\n\t          default:\n\t            break;\n\t        }\n\t      }\n\t    }\n\t    formattedResult.results.push(row);\n\t  }\n\t  return formattedResult;\n\t}\n\n/***/ }),\n/* 119 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = processRowResults;\n\t/**\n\t   * It should be avoided to query for row-based results from the server, howerver\n\t   * it can still be done. In this case, still process them into the same format as\n\t   * (@link processColumnarResults} to keep the output consistent.\n\t   * @param {TRowSet} data - The row-based data returned from a query\n\t   * @param {Boolean} eliminateNullRows A flag that allows removal of null rows from results\n\t   * @param {Object} datumEnum A list of types created from when executing {@link #invertDatumTypes}\n\t   * @returns {Object} processedResults\n\t   */\n\tfunction processRowResults(data, eliminateNullRows, datumEnum) {\n\t  var numCols = data.row_desc.length;\n\t  var formattedResult = { fields: [], results: [] };\n\n\t  formattedResult.fields = data.row_desc.map(function (field) {\n\t    return {\n\t      name: field.col_name,\n\t      type: datumEnum[field.col_type.type],\n\t      is_array: field.col_type.is_array\n\t    };\n\t  });\n\n\t  formattedResult.results = [];\n\t  var numRows = 0;\n\t  if (typeof data.rows !== \"undefined\" && data.rows !== null) {\n\t    numRows = data.rows.length; // so won't throw if data.rows is missing\n\t  }\n\n\t  for (var r = 0; r < numRows; r++) {\n\t    if (eliminateNullRows) {\n\t      var rowHasNull = false;\n\t      for (var c = 0; c < numCols; c++) {\n\t        if (data.rows[r].columns[c].is_null) {\n\t          rowHasNull = true;\n\t          break;\n\t        }\n\t      }\n\t      if (rowHasNull) {\n\t        continue; // eslint-disable-line no-continue\n\t      }\n\t    }\n\n\t    var row = {};\n\t    for (var _c = 0; _c < numCols; _c++) {\n\t      var fieldName = formattedResult.fields[_c].name;\n\t      var fieldType = formattedResult.fields[_c].type;\n\t      var fieldIsArray = formattedResult.fields[_c].is_array;\n\t      if (fieldIsArray) {\n\t        if (data.rows[r].cols[_c].is_null) {\n\t          row[fieldName] = \"NULL\";\n\t          continue; // eslint-disable-line no-continue\n\t        }\n\t        row[fieldName] = [];\n\t        var arrayNumElems = data.rows[r].cols[_c].val.arr_val.length;\n\t        for (var e = 0; e < arrayNumElems; e++) {\n\t          var elemDatum = data.rows[r].cols[_c].val.arr_val[e];\n\t          if (elemDatum.is_null) {\n\t            row[fieldName].push(\"NULL\");\n\t            continue; // eslint-disable-line no-continue\n\t          }\n\t          switch (fieldType) {\n\t            case \"BOOL\":\n\t              row[fieldName].push(Boolean(elemDatum.val.int_val));\n\t              break;\n\t            case \"SMALLINT\":\n\t            case \"INT\":\n\t            case \"BIGINT\":\n\t              row[fieldName].push(elemDatum.val.int_val);\n\t              break;\n\t            case \"FLOAT\":\n\t            case \"DOUBLE\":\n\t            case \"DECIMAL\":\n\t              row[fieldName].push(elemDatum.val.real_val);\n\t              break;\n\t            case \"STR\":\n\t              row[fieldName].push(elemDatum.val.str_val);\n\t              break;\n\t            case \"TIME\":\n\t            case \"TIMESTAMP\":\n\t            case \"DATE\":\n\t              row[fieldName].push(elemDatum.val.int_val * 1000); // eslint-disable-line no-magic-numbers\n\t              break;\n\t            default:\n\t              break;\n\t          }\n\t        }\n\t      } else {\n\t        var scalarDatum = data.rows[r].cols[_c];\n\t        if (scalarDatum.is_null) {\n\t          row[fieldName] = \"NULL\";\n\t          continue; // eslint-disable-line no-continue\n\t        }\n\t        switch (fieldType) {\n\t          case \"BOOL\":\n\t            row[fieldName] = Boolean(scalarDatum.val.int_val);\n\t            break;\n\t          case \"SMALLINT\":\n\t          case \"INT\":\n\t          case \"BIGINT\":\n\t            row[fieldName] = scalarDatum.val.int_val;\n\t            break;\n\t          case \"FLOAT\":\n\t          case \"DOUBLE\":\n\t          case \"DECIMAL\":\n\t            row[fieldName] = scalarDatum.val.real_val;\n\t            break;\n\t          case \"STR\":\n\t            row[fieldName] = scalarDatum.val.str_val;\n\t            break;\n\t          case \"TIME\":\n\t          case \"TIMESTAMP\":\n\t          case \"DATE\":\n\t            row[fieldName] = new Date(scalarDatum.val.int_val * 1000); // eslint-disable-line no-magic-numbers\n\t            break;\n\t          default:\n\t            break;\n\t        }\n\t      }\n\t    }\n\t    formattedResult.results.push(row);\n\t  }\n\t  return formattedResult;\n\t}\n\n/***/ })\n/******/ ]);"

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = "(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-request'), require('d3-dsv'), require('topojson'), require('d3-time-format'), require('d3-shape'), require('d3-path'), require('d3-scale'), require('d3-scale-chromatic'), require('d3-interpolate'), require('d3-geo'), require('d3-format'), require('d3-force'), require('d3-collection'), require('d3-hierarchy'), require('d3-voronoi'), require('d3-color')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-request', 'd3-dsv', 'topojson', 'd3-time-format', 'd3-shape', 'd3-path', 'd3-scale', 'd3-scale-chromatic', 'd3-interpolate', 'd3-geo', 'd3-format', 'd3-force', 'd3-collection', 'd3-hierarchy', 'd3-voronoi', 'd3-color'], factory) :\n  (factory((global.vega = global.vega || {}),global.d3,global.d3,global.d3,global.topojson,global.d3,global.d3,global.d3,global.d3,global.d3,global.d3,global.d3,global.d3,global.d3,global.d3,global.d3,global.d3,global.d3));\n}(this, (function (exports,d3Array,d3Request,d3Dsv,topojson,d3TimeFormat,d3Shape,d3Path,$,_,$$1,d3Geo,d3Format,d3Force,d3Collection,d3Hierarchy,d3Voronoi,d3Color) { 'use strict';\n\nvar version = \"3.0.0-beta.32\";\n\nfunction bin$1(_) {\n  // determine range\n  var maxb = _.maxbins || 20,\n      base = _.base || 10,\n      logb = Math.log(base),\n      div  = _.divide || [5, 2],\n      min  = _.extent[0],\n      max  = _.extent[1],\n      span = max - min,\n      step, level, minstep, precision, v, i, n, eps;\n\n  if (_.step) {\n    // if step size is explicitly given, use that\n    step = _.step;\n  } else if (_.steps) {\n    // if provided, limit choice to acceptable step sizes\n    v = span / maxb;\n    for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);\n    step = _.steps[Math.max(0, i-1)];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = _.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n\n    // increase step size if too many bins\n    while (Math.ceil(span/step) > maxb) { step *= base; }\n\n    // decrease step size if allowed\n    for (i=0, n=div.length; i<n; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = Math.pow(base, -precision - 1);\n  if (_.nice || _.nice === undefined) {\n    min = Math.min(min, Math.floor(min / step + eps) * step);\n    max = Math.ceil(max / step) * step;\n  }\n\n  return {\n    start: min,\n    stop:  max,\n    step:  step\n  };\n}\n\nfunction numbers(array, f) {\n  var numbers = [],\n      n = array.length,\n      i = -1, a;\n\n  if (f == null) {\n    while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);\n  } else {\n    while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);\n  }\n  return numbers;\n}\n\nfunction number(x) {\n  return x === null ? NaN : +x;\n}\n\nfunction bootstrapCI(array, samples, alpha, f) {\n  var values = numbers(array, f),\n      n = values.length,\n      m = samples,\n      a, i, j, mu;\n\n  for (j=0, mu=Array(m); j<m; ++j) {\n    for (a=0, i=0; i<n; ++i) {\n      a += values[~~(Math.random() * n)];\n    }\n    mu[j] = a / n;\n  }\n\n  return [\n    d3Array.quantile(mu.sort(d3Array.ascending), alpha/2),\n    d3Array.quantile(mu, 1-(alpha/2))\n  ];\n}\n\nfunction integer(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n\n  var dist = {},\n      a, b, d;\n\n  dist.min = function(_) {\n    return arguments.length\n      ? (a = _ || 0, d = b - a, dist)\n      : a;\n  };\n\n  dist.max = function(_) {\n    return arguments.length\n      ? (b = _ || 0, d = b - a, dist)\n      : b;\n  };\n\n  dist.sample = function() {\n    return a + Math.floor(d * Math.random());\n  };\n\n  dist.pdf = function(x) {\n    return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;\n  };\n\n  dist.cdf = function(x) {\n    var v = Math.floor(x);\n    return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n  };\n\n  dist.icdf = function(p) {\n    return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;\n  };\n\n  return dist.min(min).max(max);\n}\n\nfunction randomNormal(mean, stdev) {\n  var mu,\n      sigma,\n      next = NaN,\n      dist = {};\n\n  dist.mean = function(_) {\n    return arguments.length\n      ? (mu = _ || 0, next = NaN, dist)\n      : mu;\n  };\n\n  dist.stdev = function(_) {\n    return arguments.length\n      ? (sigma = (_==null ? 1 : _), next = NaN, dist)\n      : sigma;\n  };\n\n  dist.sample = function() {\n    var x = 0, y = 0, rds, c;\n    if (next === next) {\n      return x = next, next = NaN, x;\n    }\n    do {\n      x = Math.random() * 2 - 1;\n      y = Math.random() * 2 - 1;\n      rds = x * x + y * y;\n    } while (rds === 0 || rds > 1);\n    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n    next = mu + y * c * sigma;\n    return mu + x * c * sigma;\n  };\n\n  dist.pdf = function(x) {\n    var exp = Math.exp(Math.pow(x-mu, 2) / (-2 * Math.pow(sigma, 2)));\n    return (1 / (sigma * Math.sqrt(2*Math.PI))) * exp;\n  };\n\n  // Approximation from West (2009)\n  // Better Approximations to Cumulative Normal Functions\n  dist.cdf = function(x) {\n    var cd,\n        z = (x - mu) / sigma,\n        Z = Math.abs(z);\n    if (Z > 37) {\n      cd = 0;\n    } else {\n      var sum, exp = Math.exp(-Z*Z/2);\n      if (Z < 7.07106781186547) {\n        sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n        sum = sum * Z + 6.37396220353165;\n        sum = sum * Z + 33.912866078383;\n        sum = sum * Z + 112.079291497871;\n        sum = sum * Z + 221.213596169931;\n        sum = sum * Z + 220.206867912376;\n        cd = exp * sum;\n        sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n        sum = sum * Z + 16.064177579207;\n        sum = sum * Z + 86.7807322029461;\n        sum = sum * Z + 296.564248779674;\n        sum = sum * Z + 637.333633378831;\n        sum = sum * Z + 793.826512519948;\n        sum = sum * Z + 440.413735824752;\n        cd = cd / sum;\n      } else {\n        sum = Z + 0.65;\n        sum = Z + 4 / sum;\n        sum = Z + 3 / sum;\n        sum = Z + 2 / sum;\n        sum = Z + 1 / sum;\n        cd = exp / sum / 2.506628274631;\n      }\n    }\n    return z > 0 ? 1 - cd : cd;\n  };\n\n  // Approximation of Probit function using inverse error function.\n  dist.icdf = function(p) {\n    if (p <= 0 || p >= 1) return NaN;\n    var x = 2*p - 1,\n        v = (8 * (Math.PI - 3)) / (3 * Math.PI * (4-Math.PI)),\n        a = (2 / (Math.PI*v)) + (Math.log(1 - Math.pow(x,2)) / 2),\n        b = Math.log(1 - (x*x)) / v,\n        s = (x > 0 ? 1 : -1) * Math.sqrt(Math.sqrt((a*a) - b) - a);\n    return mu + sigma * Math.SQRT2 * s;\n  };\n\n  return dist.mean(mean).stdev(stdev);\n}\n\nfunction quartiles(array, f) {\n  var values = numbers(array, f);\n\n  return [\n    d3Array.quantile(values.sort(d3Array.ascending), 0.25),\n    d3Array.quantile(values, 0.50),\n    d3Array.quantile(values, 0.75)\n  ];\n}\n\n// TODO: support for additional kernels?\nfunction randomKDE(support, bandwidth) {\n  var kernel = randomNormal(),\n      dist = {},\n      n = 0;\n\n  dist.data = function(_) {\n    return arguments.length\n      ? (support = _, (n = _?_.length:0), dist.bandwidth(bandwidth))\n      : support;\n  };\n\n  dist.bandwidth = function(_) {\n    if (!arguments.length) return bandwidth;\n    bandwidth = _;\n    if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n    return dist;\n  };\n\n  dist.sample = function() {\n    return support[~~(Math.random() * n)] + bandwidth * kernel.sample();\n  };\n\n  dist.pdf = function(x) {\n    for (var y=0, i=0; i<n; ++i) {\n      y += kernel.pdf((x - support[i]) / bandwidth);\n    }\n    return y / bandwidth / n;\n  };\n\n  dist.cdf = function(x) {\n    for (var y=0, i=0; i<n; ++i) {\n      y += kernel.cdf((x - support[i]) / bandwidth);\n    }\n    return y / n;\n  };\n\n  dist.icdf = function() {\n    throw Error('KDE icdf not supported.');\n  };\n\n  return dist.data(support);\n}\n\n// Scott, D. W. (1992) Multivariate Density Estimation:\n// Theory, Practice, and Visualization. Wiley.\nfunction estimateBandwidth(array) {\n  var n = array.length,\n      q = quartiles(array),\n      h = (q[2] - q[0]) / 1.34;\n  return 1.06 * Math.min(Math.sqrt(d3Array.variance(array)), h) * Math.pow(n, -0.2);\n}\n\nfunction randomMixture(dists, weights) {\n  var dist = {}, m = 0, w;\n\n  function normalize(x) {\n    var w = [], sum = 0, i;\n    for (i=0; i<m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }\n    for (i=0; i<m; ++i) { w[i] /= sum; }\n    return w;\n  }\n\n  dist.weights = function(_) {\n    if (arguments.length) {\n      w = normalize(weights = (_ || []));\n      return dist;\n    }\n    return weights;\n  };\n\n  dist.distributions = function(_) {\n    if (arguments.length) {\n      if (_) {\n        m = _.length;\n        dists = _;\n      } else {\n        m = 0;\n        dists = [];\n      }\n      return dist.weights(weights);\n    }\n    return dists;\n  };\n\n  dist.sample = function() {\n    var r = Math.random(),\n        d = dists[m-1],\n        v = w[0],\n        i = 0;\n\n    // first select distribution\n    for (; i<m-1; v += w[++i]) {\n      if (r < v) { d = dists[i]; break; }\n    }\n    // then sample from it\n    return d.sample();\n  };\n\n  dist.pdf = function(x) {\n    for (var p=0, i=0; i<m; ++i) {\n      p += w[i] * dists[i].pdf(x);\n    }\n    return p;\n  };\n\n  dist.cdf = function(x) {\n    for (var p=0, i=0; i<m; ++i) {\n      p += w[i] * dists[i].cdf(x);\n    }\n    return p;\n  };\n\n  dist.icdf = function() {\n    throw Error('Mixture icdf not supported.');\n  };\n\n  return dist.distributions(dists).weights(weights);\n}\n\nfunction randomUniform(min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n\n  var dist = {},\n      a, b, d;\n\n  dist.min = function(_) {\n    return arguments.length\n      ? (a = _ || 0, d = b - a, dist)\n      : a;\n  };\n\n  dist.max = function(_) {\n    return arguments.length\n      ? (b = _ || 0, d = b - a, dist)\n      : b;\n  };\n\n  dist.sample = function() {\n    return a + d * Math.random();\n  };\n\n  dist.pdf = function(x) {\n    return (x >= a && x <= b) ? 1 / d : 0;\n  };\n\n  dist.cdf = function(x) {\n    return x < a ? 0 : x > b ? 1 : (x - a) / d;\n  };\n\n  dist.icdf = function(p) {\n    return (p >= 0 && p <= 1) ? a + p * d : NaN;\n  };\n\n  return dist.min(min).max(max);\n}\n\nfunction accessor(fn, fields, name) {\n  return (\n    fn.fields = fields || [],\n    fn.fname = name,\n    fn\n  );\n}\n\nfunction accessorName(fn) {\n  return fn == null ? null : fn.fname;\n}\n\nfunction accessorFields(fn) {\n  return fn == null ? null : fn.fields;\n}\n\nfunction error(message) {\n  throw Error(message);\n}\n\nfunction splitAccessPath(p) {\n  var path = [],\n      q = null,\n      b = 0,\n      n = p.length,\n      s = '',\n      i, j, c;\n\n  p = p + '';\n\n  function push() {\n    path.push(s + p.substring(i, j));\n    s = '';\n    i = j + 1;\n  }\n\n  for (i=j=0; j<n; ++j) {\n    c = p[j];\n    if (c === '\\\\') s += p.substring(i, j), i = ++j;\n    else if (c === q) push(), q = null, b = -1;\n    else if (q) continue;\n    else if (i === b && c === '\"') i = j + 1, q = c;\n    else if (i === b && c === \"'\") i = j + 1, q = c;\n    else if (c === '.' && !b) (j > i) ? push() : (i = j + 1);\n    else if (c === '[') {\n      if (j > i) push();\n      b = i = j + 1;\n    }\n    else if (c === ']') {\n      if (!b) error('Access path missing open bracket: ' + p);\n      if (b > 0) push();\n      b = 0;\n      i = j + 1;\n    }\n  }\n\n  if (b) error('Access path missing closing bracket: ' + p);\n  if (q) error('Access path missing closing quote: ' + p);\n  if (j > i) ++j, push();\n  return path;\n}\n\nvar isArray = Array.isArray;\n\nfunction isObject(_) {\n  return _ === Object(_);\n}\n\nfunction isString(_) {\n  return typeof _ === 'string';\n}\n\nfunction $$2(x) {\n  return isArray(x) ? '[' + x.map($$2) + ']'\n    : isObject(x) || isString(x) ?\n      // Output valid JSON and JS source strings.\n      // See http://timelessrepo.com/json-isnt-a-javascript-subset\n      JSON.stringify(x).replace('\\u2028','\\\\u2028').replace('\\u2029', '\\\\u2029')\n    : x;\n}\n\nfunction field(field, name) {\n  var path = splitAccessPath(field),\n      code = 'return _[' + path.map($$2).join('][') + '];';\n\n  return accessor(\n    Function('_', code),\n    [(field = path.length===1 ? path[0] : field)],\n    name || field\n  );\n}\n\nvar empty = [];\n\nvar id = field('id');\n\nvar identity = accessor(function(_) { return _; }, empty, 'identity');\n\nvar zero = accessor(function() { return 0; }, empty, 'zero');\n\nvar one = accessor(function() { return 1; }, empty, 'one');\n\nvar truthy = accessor(function() { return true; }, empty, 'true');\n\nvar falsy = accessor(function() { return false; }, empty, 'false');\n\nfunction log(method, level, input) {\n  var args = [level].concat([].slice.call(input));\n  console[method].apply(console, args); // eslint-disable-line no-console\n}\n\nvar None  = 0;\nvar Warn  = 1;\nvar Info  = 2;\nvar Debug = 3;\n\nfunction logger(_) {\n  var level = _ || None;\n  return {\n    level: function(_) {\n      return arguments.length ? (level = +_, this) : level;\n    },\n    warn: function() {\n      if (level >= Warn) log('warn', 'WARN', arguments);\n      return this;\n    },\n    info: function() {\n      if (level >= Info) log('log', 'INFO', arguments);\n      return this;\n    },\n    debug: function() {\n      if (level >= Debug) log('log', 'DEBUG', arguments);\n      return this;\n    }\n  }\n}\n\nfunction array(_) {\n  return _ != null ? (isArray(_) ? _ : [_]) : [];\n}\n\nfunction compare(fields, orders) {\n  var idx = [],\n      cmp = (fields = array(fields)).map(function(f, i) {\n        return f == null ? null\n          : (idx.push(i), splitAccessPath(f).map($$2).join(']['));\n      }),\n      n = idx.length - 1,\n      ord = array(orders),\n      code = 'var u,v;return ',\n      i, j, f, u, v, d, lt, gt;\n\n  if (n < 0) return null;\n\n  for (j=0; j<=n; ++j) {\n    i = idx[j];\n    f = cmp[i];\n    u = '(u=a['+f+'])';\n    v = '(v=b['+f+'])';\n    d = '((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))';\n    lt = ord[i] !== 'descending' ? (gt=1, -1) : (gt=-1, 1);\n    code += '(' + u+'<'+v+'||u==null)&&v!=null?' + lt\n      + ':(u>v||v==null)&&u!=null?' + gt\n      + ':'+d+'!==u&&v===v?' + lt\n      + ':v!==v&&u===u?' + gt\n      + (i < n ? ':' : ':0');\n  }\n\n  return accessor(\n    Function('a', 'b', code + ';'),\n    fields.filter(function(_) { return _ != null; })\n  );\n}\n\nfunction isFunction(_) {\n  return typeof _ === 'function';\n}\n\nfunction constant(_) {\n  return isFunction(_) ? _ : function() { return _; };\n}\n\nfunction extend(_) {\n  for (var x, k, i=1, len=arguments.length; i<len; ++i) {\n    x = arguments[i];\n    for (k in x) { _[k] = x[k]; }\n  }\n  return _;\n}\n\nfunction extentIndex(array, f) {\n  var i = -1,\n      n = array.length,\n      a, b, c, u, v;\n\n  if (f == null) {\n    while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }\n    u = v = i;\n    while (++i < n) if ((b = array[i]) != null) {\n      if (a > b) a = b, u = i;\n      if (c < b) c = b, v = i;\n    }\n  } else {\n    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }\n    u = v = i;\n    while (++i < n) if ((b = f(array[i], i, array)) != null) {\n      if (a > b) a = b, u = i;\n      if (c < b) c = b, v = i;\n    }\n  }\n\n  return [u, v];\n}\n\nvar NULL = {};\n\nfunction fastmap(input) {\n  var obj = {},\n      map,\n      test;\n\n  function has(key) {\n    return obj.hasOwnProperty(key) && obj[key] !== NULL;\n  }\n\n  map = {\n    size: 0,\n    empty: 0,\n    object: obj,\n    has: has,\n    get: function(key) {\n      return has(key) ? obj[key] : undefined;\n    },\n    set: function(key, value) {\n      if (!has(key)) {\n        ++map.size;\n        if (obj[key] === NULL) --map.empty;\n      }\n      obj[key] = value;\n      return this;\n    },\n    delete: function(key) {\n      if (has(key)) {\n        --map.size;\n        ++map.empty;\n        obj[key] = NULL;\n      }\n      return this;\n    },\n    clear: function() {\n      map.size = map.empty = 0;\n      map.object = obj = {};\n    },\n    test: function(_) {\n      return arguments.length ? (test = _, map) : test;\n    },\n    clean: function() {\n      var next = {},\n          size = 0,\n          key, value;\n      for (key in obj) {\n        value = obj[key];\n        if (value !== NULL && (!test || !test(value))) {\n          next[key] = value;\n          ++size;\n        }\n      }\n      map.size = size;\n      map.empty = 0;\n      map.object = (obj = next);\n    }\n  };\n\n  if (input) Object.keys(input).forEach(function(key) {\n    map.set(key, input[key]);\n  });\n\n  return map;\n}\n\nfunction inherits(child, parent) {\n  var proto = (child.prototype = Object.create(parent.prototype));\n  proto.constructor = child;\n  return proto;\n}\n\nfunction isBoolean(_) {\n  return typeof _ === 'boolean';\n}\n\nfunction isDate(_) {\n  return Object.prototype.toString.call(_) === '[object Date]';\n}\n\nfunction isNumber(_) {\n  return typeof _ === 'number';\n}\n\nfunction isRegExp(_) {\n  return Object.prototype.toString.call(_) === '[object RegExp]';\n}\n\nfunction key(fields) {\n  fields = fields ? array(fields) : fields;\n  var fn = !(fields && fields.length)\n    ? function() { return ''; }\n    : Function('_', 'return \\'\\'+' +\n        fields.map(function(f) {\n          return '_[' + splitAccessPath(f).map($$2).join('][') + ']';\n        }).join('+\\'|\\'+') + ';');\n  return accessor(fn, fields, 'key');\n}\n\nfunction merge(compare, array0, array1, output) {\n  var n0 = array0.length,\n      n1 = array1.length;\n\n  if (!n1) return array0;\n  if (!n0) return array1;\n\n  var merged = output || new array0.constructor(n0 + n1),\n      i0 = 0, i1 = 0, i = 0;\n\n  for (; i0<n0 && i1<n1; ++i) {\n    merged[i] = compare(array0[i0], array1[i1]) > 0\n       ? array1[i1++]\n       : array0[i0++];\n  }\n\n  for (; i0<n0; ++i0, ++i) {\n    merged[i] = array0[i0];\n  }\n\n  for (; i1<n1; ++i1, ++i) {\n    merged[i] = array1[i1];\n  }\n\n  return merged;\n}\n\nfunction repeat(str, reps) {\n  var s = '';\n  while (--reps >= 0) s += str;\n  return s;\n}\n\nfunction pad(str, length, padchar, align) {\n  var c = padchar || ' ',\n      s = str + '',\n      n = length - s.length;\n\n  return n <= 0 ? s\n    : align === 'left' ? repeat(c, n) + s\n    : align === 'center' ? repeat(c, ~~(n/2)) + s + repeat(c, Math.ceil(n/2))\n    : s + repeat(c, n);\n}\n\nfunction peek(array) {\n  return array[array.length - 1];\n}\n\nfunction toBoolean(_) {\n  return _ == null || _ === '' ? null : !_ || _ === 'false' ? false : !!_;\n}\n\nfunction toDate(_, parser) {\n  return _ == null || _ === '' ? null : (parser ? parser(_) : Date.parse(_));\n}\n\nfunction toNumber(_) {\n  return _ == null || _ === '' ? null : +_;\n}\n\nfunction toString(_) {\n  return _ == null || _ === '' ? null : _ + '';\n}\n\nfunction toSet(_) {\n  for (var s={}, i=0, n=_.length; i<n; ++i) s[_[i]] = 1;\n  return s;\n}\n\nfunction truncate(str, length, align, ellipsis) {\n  var e = ellipsis != null ? ellipsis : '\\u2026',\n      s = str + '',\n      n = s.length,\n      l = Math.max(0, length - e.length);\n\n  return n <= length ? s\n    : align === 'left' ? e + s.slice(n - l)\n    : align === 'center' ? s.slice(0, Math.ceil(l/2)) + e + s.slice(n - ~~(l/2))\n    : s.slice(0, l) + e;\n}\n\nfunction visitArray(array, filter, visitor) {\n  if (array) {\n    var i = 0, n = array.length, t;\n    if (filter) {\n      for (; i<n; ++i) {\n        if (t = filter(array[i])) visitor(t, i, array);\n      }\n    } else {\n      array.forEach(visitor);\n    }\n  }\n}\n\n// Matches absolute URLs with optional protocol\n//   https://...    file://...    //...\nvar protocol_re = /^([A-Za-z]+:)?\\/\\//;\n\n// Special treatment in node.js for the file: protocol\nvar fileProtocol = 'file://';\n\n// Request options to check for d3-request\nvar requestOptions = [\n  'mimeType',\n  'responseType',\n  'user',\n  'password'\n];\n\n/**\n * Creates a new loader instance that provides methods for requesting files\n * from either the network or disk, and for sanitizing request URIs.\n * @param {object} [options] - Optional default loading options to use.\n * @return {object} - A new loader instance.\n */\nfunction loader(options) {\n  return {\n    options: options || {},\n    sanitize: sanitize,\n    load: load,\n    file: file,\n    http: http\n  };\n}\n\nfunction marshall(loader, options) {\n  return extend({}, loader.options, options);\n}\n\n/**\n * Load an external resource, typically either from the web or from the local\n * filesystem. This function uses {@link sanitize} to first sanitize the uri,\n * then calls either {@link http} (for web requests) or {@link file} (for\n * filesystem loading).\n * @param {string} uri - The resource indicator (e.g., URL or filename).\n * @param {object} [options] - Optional loading options. These options will\n *   override any existing default options.\n * @return {Promise} - A promise that resolves to the loaded content.\n */\nfunction load(uri, options) {\n  var loader = this;\n  return loader.sanitize(uri, options)\n    .then(function(opt) {\n      var url = opt.href;\n      return (startsWith(url, fileProtocol))\n        ? loader.file(url.slice(fileProtocol.length))\n        : loader.http(url, options);\n    });\n}\n\n/**\n * URI sanitizer function.\n * @param {string} uri - The uri (url or filename) to sanity check.\n * @param {object} options - An options hash.\n * @return {Promise} - A promise that resolves to an object containing\n *  sanitized uri data, or rejects it the input uri is deemed invalid.\n *  The properties of the resolved object are assumed to be\n *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be\n *  provided by the 'href' property of the returned object.\n */\nfunction sanitize(uri, options) {\n  options = marshall(this, options);\n  return new Promise(function(accept, reject) {\n    var isFile, hasProtocol, loadFile, base;\n\n    if (uri == null || typeof uri !== 'string') {\n      reject('Sanitize failure, invalid URI: ' + $$2(uri));\n      return;\n    }\n\n    hasProtocol = protocol_re.test(uri);\n\n    // if relative url (no protocol/host), prepend baseURL\n    if ((base = options.baseURL) && !hasProtocol) {\n      // Ensure that there is a slash between the baseURL (e.g. hostname) and url\n      if (!startsWith(uri, '/') && base[base.length-1] !== '/') {\n        uri = '/' + uri;\n      }\n      uri = base + uri;\n    }\n\n    // should we load from file system?\n    loadFile = (isFile = startsWith(uri, fileProtocol))\n      || options.mode === 'file'\n      || options.mode !== 'http' && !hasProtocol && fs();\n\n    if (loadFile) {\n      // prepend file protocol, if not already present\n      uri = (isFile ? '' : fileProtocol) + uri;\n    } else if (startsWith(uri, '//')) {\n      // if relative protocol (starts with '//'), prepend default protocol\n      uri = (options.defaultProtocol || 'http') + ':' + uri;\n    }\n\n    accept({href: uri});\n  });\n}\n\n/**\n * HTTP request loader.\n * @param {string} url - The url to request.\n * @param {object} options - An options hash.\n * @return {Promise} - A promise that resolves to the file contents.\n */\nfunction http(url, options) {\n  options = marshall(this, options);\n  return new Promise(function(accept, reject) {\n    var req = d3Request.request(url),\n        name;\n\n    for (name in options.headers) {\n      req.header(name, options.headers[name]);\n    }\n\n    requestOptions.forEach(function(name) {\n      if (options[name]) req[name](options[name]);\n    });\n\n    req.on('error', function(error) {\n        reject(error || 'Error loading URL: ' + url);\n      })\n      .on('load', function(result) {\n        var text = result && result.responseText;\n        (!result || result.status === 0)\n          ? reject(text || 'Error')\n          : accept(text);\n      })\n      .get();\n  });\n}\n\n/**\n * File system loader.\n * @param {string} filename - The file system path to load.\n * @return {Promise} - A promise that resolves to the file contents.\n */\nfunction file(filename) {\n  return new Promise(function(accept, reject) {\n    var f = fs();\n    f ? f.readFile(filename, function(error, data) {\n          if (error) reject(error);\n          else accept(data);\n        })\n      : reject('No file system access for ' + filename);\n  });\n}\n\nfunction fs() {\n  var fs = typeof require === 'function' && require('fs');\n  return fs && isFunction(fs.readFile) ? fs : null;\n}\n\nfunction startsWith(string, query) {\n  return string == null ? false : string.lastIndexOf(query, 0) === 0;\n}\n\nvar typeParsers = {\n  boolean: toBoolean,\n  integer: toNumber,\n  number:  toNumber,\n  date:    toDate,\n  string:  toString\n};\n\nvar typeTests = [\n  isBoolean$1,\n  isInteger,\n  isNumber$1,\n  isDate$1\n];\n\nvar typeList = [\n  'boolean',\n  'integer',\n  'number',\n  'date'\n];\n\nfunction inferType(values, field) {\n  var tests = typeTests.slice(),\n      value, i, n, j;\n\n  for (i=0, n=values.length; i<n; ++i) {\n    value = field ? values[i][field] : values[i];\n    for (j=0; j<tests.length; ++j) {\n      if (isValid(value) && !tests[j](value)) {\n        tests.splice(j, 1); --j;\n      }\n    }\n    if (tests.length === 0) return 'string';\n  }\n  return typeList[typeTests.indexOf(tests[0])];\n}\n\nfunction inferTypes(data, fields) {\n  return fields.reduce(function(types, field) {\n    return types[field] = inferType(data, field), types;\n  }, {});\n}\n\n// -- Type Checks ----\n\nfunction isValid(_) {\n  return _ != null && _ === _;\n}\n\nfunction isBoolean$1(_) {\n  return _ === 'true' || _ === 'false' || _ === true || _ === false;\n}\n\nfunction isDate$1(_) {\n  return !isNaN(Date.parse(_));\n}\n\nfunction isNumber$1(_) {\n  return !isNaN(+_) && !(_ instanceof Date);\n}\n\nfunction isInteger(_) {\n  return isNumber$1(_) && (_=+_) === ~~_;\n}\n\nfunction delimitedFormat(delimiter) {\n  return function(data, format) {\n    var delim = {delimiter: delimiter};\n    return dsv(data, format ? extend(format, delim) : delim);\n  };\n}\n\nfunction dsv(data, format) {\n  if (format.header) {\n    data = format.header\n      .map($$2)\n      .join(format.delimiter) + '\\n' + data;\n  }\n  return d3Dsv.dsvFormat(format.delimiter).parse(data+'');\n}\n\nfunction isBuffer(_) {\n  return (typeof Buffer === 'function' && isFunction(Buffer.isBuffer))\n    ? Buffer.isBuffer(_) : false;\n}\n\nfunction json(data, format) {\n  var prop = (format && format.property) ? field(format.property) : identity;\n  return isObject(data) && !isBuffer(data)\n    ? parseJSON(prop(data))\n    : prop(JSON.parse(data));\n}\n\nfunction parseJSON(data, format) {\n  return (format && format.copy)\n    ? JSON.parse(JSON.stringify(data))\n    : data;\n}\n\nfunction topojson$1(data, format) {\n  var object, property;\n  data = json(data, format);\n\n  if (format && (property = format.feature)) {\n    return (object = data.objects[property])\n      ? topojson.feature(data, object).features\n      : error('Invalid TopoJSON object: ' + property);\n  }\n\n  else if (format && (property = format.mesh)) {\n    return (object = data.objects[property])\n      ? [topojson.mesh(data, object)]\n      : error('Invalid TopoJSON object: ' + property);\n  }\n\n  error('Missing TopoJSON feature or mesh parameter.');\n}\n\nvar formats = {\n  dsv: dsv,\n  csv: delimitedFormat(','),\n  tsv: delimitedFormat('\\t'),\n  json: json,\n  topojson: topojson$1\n};\n\nfunction formats$1(name, format) {\n  return arguments.length > 1 ? (formats[name] = format, this)\n    : formats.hasOwnProperty(name) ? formats[name] : null;\n}\n\nfunction read(data, schema, dateParse) {\n  schema = schema || {};\n\n  var reader = formats$1(schema.type || 'json');\n  if (!reader) error('Unknown data format type: ' + schema.type);\n\n  data = reader(data, schema);\n  if (schema.parse) parse(data, schema.parse, dateParse);\n\n  if (data.hasOwnProperty('columns')) delete data.columns;\n  return data;\n}\n\nfunction parse(data, types, dateParse) {\n  dateParse = dateParse || d3TimeFormat.timeParse;\n\n  var fields = data.columns || Object.keys(data[0]),\n      parsers, datum, field, i, j, n, m;\n\n  if (types === 'auto') types = inferTypes(data, fields);\n\n  fields = Object.keys(types);\n  parsers = fields.map(function(field) {\n    var type = types[field],\n        parts, pattern;\n\n    if (type && (type.indexOf('date:') === 0 || type.indexOf('utc:') === 0)) {\n      parts = type.split(/:(.+)?/, 2);  // split on first :\n      pattern = parts[1];\n\n      if ((pattern[0] === '\\'' && pattern[pattern.length-1] === '\\'') ||\n          (pattern[0] === '\"'  && pattern[pattern.length-1] === '\"')) {\n        pattern = pattern.slice(1, -1);\n      }\n\n      return parts[0] === 'utc' ? d3TimeFormat.utcParse(pattern) : dateParse(pattern);\n    }\n\n    if (!typeParsers[type]) {\n      throw Error('Illegal format pattern: ' + field + ':' + type);\n    }\n\n    return typeParsers[type];\n  });\n\n  for (i=0, n=data.length, m=fields.length; i<n; ++i) {\n    datum = data[i];\n    for (j=0; j<m; ++j) {\n      field = fields[j];\n      datum[field] = parsers[j](datum[field]);\n    }\n  }\n}\n\nfunction Bounds(b) {\n  this.clear();\n  if (b) this.union(b);\n}\n\nvar prototype = Bounds.prototype;\n\nprototype.clone = function() {\n  return new Bounds(this);\n};\n\nprototype.clear = function() {\n  this.x1 = +Number.MAX_VALUE;\n  this.y1 = +Number.MAX_VALUE;\n  this.x2 = -Number.MAX_VALUE;\n  this.y2 = -Number.MAX_VALUE;\n  return this;\n};\n\nprototype.empty = function() {\n  return (\n    this.x1 === +Number.MAX_VALUE &&\n    this.y1 === +Number.MAX_VALUE &&\n    this.x2 === -Number.MAX_VALUE &&\n    this.y2 === -Number.MAX_VALUE\n  );\n}\n\nprototype.set = function(x1, y1, x2, y2) {\n  if (x2 < x1) {\n    this.x2 = x1;\n    this.x1 = x2;\n  } else {\n    this.x1 = x1;\n    this.x2 = x2;\n  }\n  if (y2 < y1) {\n    this.y2 = y1;\n    this.y1 = y2;\n  } else {\n    this.y1 = y1;\n    this.y2 = y2;\n  }\n  return this;\n};\n\nprototype.add = function(x, y) {\n  if (x < this.x1) this.x1 = x;\n  if (y < this.y1) this.y1 = y;\n  if (x > this.x2) this.x2 = x;\n  if (y > this.y2) this.y2 = y;\n  return this;\n};\n\nprototype.expand = function(d) {\n  this.x1 -= d;\n  this.y1 -= d;\n  this.x2 += d;\n  this.y2 += d;\n  return this;\n};\n\nprototype.round = function() {\n  this.x1 = Math.floor(this.x1);\n  this.y1 = Math.floor(this.y1);\n  this.x2 = Math.ceil(this.x2);\n  this.y2 = Math.ceil(this.y2);\n  return this;\n};\n\nprototype.translate = function(dx, dy) {\n  this.x1 += dx;\n  this.x2 += dx;\n  this.y1 += dy;\n  this.y2 += dy;\n  return this;\n};\n\nprototype.rotate = function(angle, x, y) {\n  var cos = Math.cos(angle),\n      sin = Math.sin(angle),\n      cx = x - x*cos + y*sin,\n      cy = y - x*sin - y*cos,\n      x1 = this.x1, x2 = this.x2,\n      y1 = this.y1, y2 = this.y2;\n\n  return this.clear()\n    .add(cos*x1 - sin*y1 + cx,  sin*x1 + cos*y1 + cy)\n    .add(cos*x1 - sin*y2 + cx,  sin*x1 + cos*y2 + cy)\n    .add(cos*x2 - sin*y1 + cx,  sin*x2 + cos*y1 + cy)\n    .add(cos*x2 - sin*y2 + cx,  sin*x2 + cos*y2 + cy);\n};\n\nprototype.union = function(b) {\n  if (b.x1 < this.x1) this.x1 = b.x1;\n  if (b.y1 < this.y1) this.y1 = b.y1;\n  if (b.x2 > this.x2) this.x2 = b.x2;\n  if (b.y2 > this.y2) this.y2 = b.y2;\n  return this;\n};\n\nprototype.intersect = function(b) {\n  if (b.x1 > this.x1) this.x1 = b.x1;\n  if (b.y1 > this.y1) this.y1 = b.y1;\n  if (b.x2 < this.x2) this.x2 = b.x2;\n  if (b.y2 < this.y2) this.y2 = b.y2;\n  return this;\n};\n\nprototype.encloses = function(b) {\n  return b && (\n    this.x1 <= b.x1 &&\n    this.x2 >= b.x2 &&\n    this.y1 <= b.y1 &&\n    this.y2 >= b.y2\n  );\n};\n\nprototype.alignsWith = function(b) {\n  return b && (\n    this.x1 == b.x1 ||\n    this.x2 == b.x2 ||\n    this.y1 == b.y1 ||\n    this.y2 == b.y2\n  );\n};\n\nprototype.intersects = function(b) {\n  return b && !(\n    this.x2 < b.x1 ||\n    this.x1 > b.x2 ||\n    this.y2 < b.y1 ||\n    this.y1 > b.y2\n  );\n};\n\nprototype.contains = function(x, y) {\n  return !(\n    x < this.x1 ||\n    x > this.x2 ||\n    y < this.y1 ||\n    y > this.y2\n  );\n};\n\nprototype.width = function() {\n  return this.x2 - this.x1;\n};\n\nprototype.height = function() {\n  return this.y2 - this.y1;\n};\n\nvar gradient_id = 0;\n\nfunction Gradient(p0, p1) {\n  var stops = [], gradient;\n  return gradient = {\n    id: 'gradient_' + (gradient_id++),\n    x1: p0 ? p0[0] : 0,\n    y1: p0 ? p0[1] : 0,\n    x2: p1 ? p1[0] : 1,\n    y2: p1 ? p1[1] : 0,\n    stops: stops,\n    stop: function(offset, color) {\n      stops.push({offset: offset, color: color});\n      return gradient;\n    }\n  };\n}\n\nfunction Item(mark) {\n  this.mark = mark;\n  this.bounds = (this.bounds || new Bounds());\n}\n\nfunction GroupItem(mark) {\n  Item.call(this, mark);\n  this.items = (this.items || []);\n}\n\ninherits(GroupItem, Item);\n\n// create a new DOM element\nfunction domCreate(doc, tag, ns) {\n  if (!doc && typeof document !== 'undefined' && document.createElement) {\n    doc = document;\n  }\n  return doc\n    ? (ns ? doc.createElementNS(ns, tag) : doc.createElement(tag))\n    : null;\n}\n\n// find first child element with matching tag\nfunction domFind(el, tag) {\n  tag = tag.toLowerCase();\n  var nodes = el.childNodes, i = 0, n = nodes.length;\n  for (; i<n; ++i) if (nodes[i].tagName.toLowerCase() === tag) {\n    return nodes[i];\n  }\n}\n\n// retrieve child element at given index\n// create & insert if doesn't exist or if tags do not match\nfunction domChild(el, index, tag, ns) {\n  var a = el.childNodes[index], b;\n  if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {\n    b = a || null;\n    a = domCreate(el.ownerDocument, tag, ns);\n    el.insertBefore(a, b);\n  }\n  return a;\n}\n\n// remove all child elements at or above the given index\nfunction domClear(el, index) {\n  var nodes = el.childNodes,\n      curr = nodes.length;\n  while (curr > index) el.removeChild(nodes[--curr]);\n  return el;\n}\n\n// generate css class name for mark\nfunction cssClass(mark) {\n  return 'mark-' + mark.marktype\n    + (mark.role ? ' role-' + mark.role : '')\n    + (mark.name ? ' ' + mark.name : '');\n}\n\nvar Canvas;\n\ntry { Canvas = require('canvas'); } catch (e) { Canvas = null; }\n\nfunction Canvas$1(w, h) {\n  var canvas = domCreate(null, 'canvas');\n  if (canvas) {\n    canvas.width = w;\n    canvas.height = h;\n  } else if (Canvas) {\n    canvas = new Canvas(w, h);\n  }\n  return canvas;\n}\n\nvar Image$1 = typeof Image !== 'undefined' ? Image\n  : (Canvas && Canvas.Image || null);\n\nfunction ResourceLoader(customLoader) {\n  this._pending = 0;\n  this._loader = customLoader || loader();\n}\n\nvar prototype$1 = ResourceLoader.prototype;\n\nprototype$1.pending = function() {\n  return this._pending;\n};\n\nfunction increment(loader) {\n  loader._pending += 1;\n}\n\nfunction decrement(loader) {\n  loader._pending -= 1;\n}\n\nprototype$1.sanitizeURL = function(uri) {\n  var loader = this;\n  increment(loader);\n\n  return loader._loader.sanitize(uri, {context:'href'})\n    .then(function(opt) {\n      decrement(loader);\n      return opt;\n    })\n    .catch(function() {\n      decrement(loader);\n      return null;\n    });\n};\n\nprototype$1.loadImage = function(uri) {\n  var loader = this;\n  increment(loader);\n\n  return loader._loader.sanitize(uri, {context:'image'})\n    .then(function(opt) {\n      var url = opt.href;\n      if (!url || !Image$1) throw 'Image unsupported.';\n\n      var image = new Image$1();\n\n      image.onload = function() {\n        decrement(loader);\n        image.loaded = true;\n      };\n\n      image.onerror = function() {\n        decrement(loader);\n        image.loaded = false;\n      }\n\n      image.src = url;\n      return image;\n    })\n    .catch(function() {\n      decrement(loader);\n      return {loaded: false, width: 0, height: 0};\n    });\n};\n\nprototype$1.ready = function() {\n  var loader = this;\n  return new Promise(function(accept) {\n    function poll(value) {\n      if (!loader.pending()) accept(value);\n      else setTimeout(function() { poll(true); }, 10);\n    }\n    poll(false);\n  });\n};\n\nvar lookup = {\n  'basis': {\n    curve: d3Shape.curveBasis\n  },\n  'basis-closed': {\n    curve: d3Shape.curveBasisClosed\n  },\n  'basis-open': {\n    curve: d3Shape.curveBasisOpen\n  },\n  'bundle': {\n    curve: d3Shape.curveBundle,\n    tension: 'beta',\n    value: 0.85\n  },\n  'cardinal': {\n    curve: d3Shape.curveCardinal,\n    tension: 'tension',\n    value: 0\n  },\n  'cardinal-open': {\n    curve: d3Shape.curveCardinalOpen,\n    tension: 'tension',\n    value: 0\n  },\n  'cardinal-closed': {\n    curve: d3Shape.curveCardinalClosed,\n    tension: 'tension',\n    value: 0\n  },\n  'catmull-rom': {\n    curve: d3Shape.curveCatmullRom,\n    tension: 'alpha',\n    value: 0.5\n  },\n  'catmull-rom-closed': {\n    curve: d3Shape.curveCatmullRomClosed,\n    tension: 'alpha',\n    value: 0.5\n  },\n  'catmull-rom-open': {\n    curve: d3Shape.curveCatmullRomOpen,\n    tension: 'alpha',\n    value: 0.5\n  },\n  'linear': {\n    curve: d3Shape.curveLinear\n  },\n  'linear-closed': {\n    curve: d3Shape.curveLinearClosed\n  },\n  'monotone': {\n    horizontal: d3Shape.curveMonotoneY,\n    vertical:   d3Shape.curveMonotoneX\n  },\n  'natural': {\n    curve: d3Shape.curveNatural\n  },\n  'step': {\n    curve: d3Shape.curveStep\n  },\n  'step-after': {\n    curve: d3Shape.curveStepAfter\n  },\n  'step-before': {\n    curve: d3Shape.curveStepBefore\n  }\n};\n\nfunction curves(type, orientation, tension) {\n  var entry = lookup.hasOwnProperty(type) && lookup[type],\n      curve = null;\n\n  if (entry) {\n    curve = entry.curve || entry[orientation || 'vertical'];\n    if (entry.tension && tension != null) {\n      curve = curve[entry.tension](tension);\n    }\n  }\n\n  return curve;\n}\n\n// Path parsing and rendering code adapted from fabric.js -- Thanks!\nvar cmdlen = { m:2, l:2, h:1, v:1, c:6, s:4, q:4, t:2, a:7 };\nvar regexp = [/([MLHVCSQTAZmlhvcsqtaz])/g, /###/, /(\\d)([-+])/g, /\\s|,|###/];\nfunction pathParse(pathstr) {\n  var result = [],\n      path,\n      curr,\n      chunks,\n      parsed, param,\n      cmd, len, i, j, n, m;\n\n  // First, break path into command sequence\n  path = pathstr\n    .slice()\n    .replace(regexp[0], '###$1')\n    .split(regexp[1])\n    .slice(1);\n\n  // Next, parse each command in turn\n  for (i=0, n=path.length; i<n; ++i) {\n    curr = path[i];\n    chunks = curr\n      .slice(1)\n      .trim()\n      .replace(regexp[2],'$1###$2')\n      .split(regexp[3]);\n    cmd = curr.charAt(0);\n\n    parsed = [cmd];\n    for (j=0, m=chunks.length; j<m; ++j) {\n      if ((param = +chunks[j]) === param) { // not NaN\n        parsed.push(param);\n      }\n    }\n\n    len = cmdlen[cmd.toLowerCase()];\n    if (parsed.length-1 > len) {\n      for (j=1, m=parsed.length; j<m; j+=len) {\n        result.push([cmd].concat(parsed.slice(j, j+len)));\n      }\n    }\n    else {\n      result.push(parsed);\n    }\n  }\n\n  return result;\n}\n\nvar segmentCache = {};\nvar bezierCache = {};\n\nvar join = [].join;\n\n// Copied from Inkscape svgtopdf, thanks!\nfunction segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {\n  var key = join.call(arguments);\n  if (segmentCache[key]) {\n    return segmentCache[key];\n  }\n\n  var th = rotateX * (Math.PI/180);\n  var sin_th = Math.sin(th);\n  var cos_th = Math.cos(th);\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n  var px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;\n  var py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;\n  var pl = (px*px) / (rx*rx) + (py*py) / (ry*ry);\n  if (pl > 1) {\n    pl = Math.sqrt(pl);\n    rx *= pl;\n    ry *= pl;\n  }\n\n  var a00 = cos_th / rx;\n  var a01 = sin_th / rx;\n  var a10 = (-sin_th) / ry;\n  var a11 = (cos_th) / ry;\n  var x0 = a00 * ox + a01 * oy;\n  var y0 = a10 * ox + a11 * oy;\n  var x1 = a00 * x + a01 * y;\n  var y1 = a10 * x + a11 * y;\n\n  var d = (x1-x0) * (x1-x0) + (y1-y0) * (y1-y0);\n  var sfactor_sq = 1 / d - 0.25;\n  if (sfactor_sq < 0) sfactor_sq = 0;\n  var sfactor = Math.sqrt(sfactor_sq);\n  if (sweep == large) sfactor = -sfactor;\n  var xc = 0.5 * (x0 + x1) - sfactor * (y1-y0);\n  var yc = 0.5 * (y0 + y1) + sfactor * (x1-x0);\n\n  var th0 = Math.atan2(y0-yc, x0-xc);\n  var th1 = Math.atan2(y1-yc, x1-xc);\n\n  var th_arc = th1-th0;\n  if (th_arc < 0 && sweep === 1){\n    th_arc += 2 * Math.PI;\n  } else if (th_arc > 0 && sweep === 0) {\n    th_arc -= 2 * Math.PI;\n  }\n\n  var segs = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));\n  var result = [];\n  for (var i=0; i<segs; ++i) {\n    var th2 = th0 + i * th_arc / segs;\n    var th3 = th0 + (i+1) * th_arc / segs;\n    result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];\n  }\n\n  return (segmentCache[key] = result);\n}\n\nfunction bezier(params) {\n  var key = join.call(params);\n  if (bezierCache[key]) {\n    return bezierCache[key];\n  }\n\n  var cx = params[0],\n      cy = params[1],\n      th0 = params[2],\n      th1 = params[3],\n      rx = params[4],\n      ry = params[5],\n      sin_th = params[6],\n      cos_th = params[7];\n\n  var a00 = cos_th * rx;\n  var a01 = -sin_th * ry;\n  var a10 = sin_th * rx;\n  var a11 = cos_th * ry;\n\n  var cos_th0 = Math.cos(th0);\n  var sin_th0 = Math.sin(th0);\n  var cos_th1 = Math.cos(th1);\n  var sin_th1 = Math.sin(th1);\n\n  var th_half = 0.5 * (th1 - th0);\n  var sin_th_h2 = Math.sin(th_half * 0.5);\n  var t = (8/3) * sin_th_h2 * sin_th_h2 / Math.sin(th_half);\n  var x1 = cx + cos_th0 - t * sin_th0;\n  var y1 = cy + sin_th0 + t * cos_th0;\n  var x3 = cx + cos_th1;\n  var y3 = cy + sin_th1;\n  var x2 = x3 + t * sin_th1;\n  var y2 = y3 - t * cos_th1;\n\n  return (bezierCache[key] = [\n    a00 * x1 + a01 * y1,  a10 * x1 + a11 * y1,\n    a00 * x2 + a01 * y2,  a10 * x2 + a11 * y2,\n    a00 * x3 + a01 * y3,  a10 * x3 + a11 * y3\n  ]);\n}\n\nvar temp = ['l', 0, 0, 0, 0, 0, 0, 0];\n\nfunction scale(current, s) {\n  var c = (temp[0] = current[0]);\n  if (c === 'a' || c === 'A') {\n    temp[1] = s * current[1];\n    temp[2] = s * current[2];\n    temp[6] = s * current[6];\n    temp[7] = s * current[7];\n  } else {\n    for (var i=1, n=current.length; i<n; ++i) {\n      temp[i] = s * current[i];\n    }\n  }\n  return temp;\n}\n\nfunction pathRender(context, path, l, t, s) {\n  var current, // current instruction\n      previous = null,\n      x = 0, // current x\n      y = 0, // current y\n      controlX = 0, // current control point x\n      controlY = 0, // current control point y\n      tempX,\n      tempY,\n      tempControlX,\n      tempControlY;\n\n  if (l == null) l = 0;\n  if (t == null) t = 0;\n  if (s == null) s = 1;\n\n  if (context.beginPath) context.beginPath();\n\n  for (var i=0, len=path.length; i<len; ++i) {\n    current = path[i];\n    if (s !== 1) current = scale(current, s);\n\n    switch (current[0]) { // first letter\n\n      case 'l': // lineto, relative\n        x += current[1];\n        y += current[2];\n        context.lineTo(x + l, y + t);\n        break;\n\n      case 'L': // lineto, absolute\n        x = current[1];\n        y = current[2];\n        context.lineTo(x + l, y + t);\n        break;\n\n      case 'h': // horizontal lineto, relative\n        x += current[1];\n        context.lineTo(x + l, y + t);\n        break;\n\n      case 'H': // horizontal lineto, absolute\n        x = current[1];\n        context.lineTo(x + l, y + t);\n        break;\n\n      case 'v': // vertical lineto, relative\n        y += current[1];\n        context.lineTo(x + l, y + t);\n        break;\n\n      case 'V': // verical lineto, absolute\n        y = current[1];\n        context.lineTo(x + l, y + t);\n        break;\n\n      case 'm': // moveTo, relative\n        x += current[1];\n        y += current[2];\n        context.moveTo(x + l, y + t);\n        break;\n\n      case 'M': // moveTo, absolute\n        x = current[1];\n        y = current[2];\n        context.moveTo(x + l, y + t);\n        break;\n\n      case 'c': // bezierCurveTo, relative\n        tempX = x + current[5];\n        tempY = y + current[6];\n        controlX = x + current[3];\n        controlY = y + current[4];\n        context.bezierCurveTo(\n          x + current[1] + l, // x1\n          y + current[2] + t, // y1\n          controlX + l, // x2\n          controlY + t, // y2\n          tempX + l,\n          tempY + t\n        );\n        x = tempX;\n        y = tempY;\n        break;\n\n      case 'C': // bezierCurveTo, absolute\n        x = current[5];\n        y = current[6];\n        controlX = current[3];\n        controlY = current[4];\n        context.bezierCurveTo(\n          current[1] + l,\n          current[2] + t,\n          controlX + l,\n          controlY + t,\n          x + l,\n          y + t\n        );\n        break;\n\n      case 's': // shorthand cubic bezierCurveTo, relative\n        // transform to absolute x,y\n        tempX = x + current[3];\n        tempY = y + current[4];\n        // calculate reflection of previous control points\n        controlX = 2 * x - controlX;\n        controlY = 2 * y - controlY;\n        context.bezierCurveTo(\n          controlX + l,\n          controlY + t,\n          x + current[1] + l,\n          y + current[2] + t,\n          tempX + l,\n          tempY + t\n        );\n\n        // set control point to 2nd one of this command\n        // the first control point is assumed to be the reflection of\n        // the second control point on the previous command relative\n        // to the current point.\n        controlX = x + current[1];\n        controlY = y + current[2];\n\n        x = tempX;\n        y = tempY;\n        break;\n\n      case 'S': // shorthand cubic bezierCurveTo, absolute\n        tempX = current[3];\n        tempY = current[4];\n        // calculate reflection of previous control points\n        controlX = 2*x - controlX;\n        controlY = 2*y - controlY;\n        context.bezierCurveTo(\n          controlX + l,\n          controlY + t,\n          current[1] + l,\n          current[2] + t,\n          tempX + l,\n          tempY + t\n        );\n        x = tempX;\n        y = tempY;\n        // set control point to 2nd one of this command\n        // the first control point is assumed to be the reflection of\n        // the second control point on the previous command relative\n        // to the current point.\n        controlX = current[1];\n        controlY = current[2];\n\n        break;\n\n      case 'q': // quadraticCurveTo, relative\n        // transform to absolute x,y\n        tempX = x + current[3];\n        tempY = y + current[4];\n\n        controlX = x + current[1];\n        controlY = y + current[2];\n\n        context.quadraticCurveTo(\n          controlX + l,\n          controlY + t,\n          tempX + l,\n          tempY + t\n        );\n        x = tempX;\n        y = tempY;\n        break;\n\n      case 'Q': // quadraticCurveTo, absolute\n        tempX = current[3];\n        tempY = current[4];\n\n        context.quadraticCurveTo(\n          current[1] + l,\n          current[2] + t,\n          tempX + l,\n          tempY + t\n        );\n        x = tempX;\n        y = tempY;\n        controlX = current[1];\n        controlY = current[2];\n        break;\n\n      case 't': // shorthand quadraticCurveTo, relative\n\n        // transform to absolute x,y\n        tempX = x + current[1];\n        tempY = y + current[2];\n\n        if (previous[0].match(/[QqTt]/) === null) {\n          // If there is no previous command or if the previous command was not a Q, q, T or t,\n          // assume the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        else if (previous[0] === 't') {\n          // calculate reflection of previous control points for t\n          controlX = 2 * x - tempControlX;\n          controlY = 2 * y - tempControlY;\n        }\n        else if (previous[0] === 'q') {\n          // calculate reflection of previous control points for q\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        }\n\n        tempControlX = controlX;\n        tempControlY = controlY;\n\n        context.quadraticCurveTo(\n          controlX + l,\n          controlY + t,\n          tempX + l,\n          tempY + t\n        );\n        x = tempX;\n        y = tempY;\n        controlX = x + current[1];\n        controlY = y + current[2];\n        break;\n\n      case 'T':\n        tempX = current[1];\n        tempY = current[2];\n\n        // calculate reflection of previous control points\n        controlX = 2 * x - controlX;\n        controlY = 2 * y - controlY;\n        context.quadraticCurveTo(\n          controlX + l,\n          controlY + t,\n          tempX + l,\n          tempY + t\n        );\n        x = tempX;\n        y = tempY;\n        break;\n\n      case 'a':\n        drawArc(context, x + l, y + t, [\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6] + x + l,\n          current[7] + y + t\n        ]);\n        x += current[6];\n        y += current[7];\n        break;\n\n      case 'A':\n        drawArc(context, x + l, y + t, [\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6] + l,\n          current[7] + t\n        ]);\n        x = current[6];\n        y = current[7];\n        break;\n\n      case 'z':\n      case 'Z':\n        context.closePath();\n        break;\n    }\n    previous = current;\n  }\n}\n\nfunction drawArc(context, x, y, coords) {\n  var seg = segments(\n    coords[5], // end x\n    coords[6], // end y\n    coords[0], // radius x\n    coords[1], // radius y\n    coords[3], // large flag\n    coords[4], // sweep flag\n    coords[2], // rotation\n    x, y\n  );\n  for (var i=0; i<seg.length; ++i) {\n    var bez = bezier(seg[i]);\n    context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);\n  }\n}\n\nvar tau = 2 * Math.PI;\nvar halfSqrt3 = Math.sqrt(3) / 2;\nvar builtins = {\n  'circle': {\n    draw: function(context, size) {\n      var r = Math.sqrt(size) / 2;\n      context.moveTo(r, 0);\n      context.arc(0, 0, r, 0, tau);\n    }\n  },\n  'cross': {\n    draw: function(context, size) {\n      var r = Math.sqrt(size) / 2,\n          s = r / 2.5;\n      context.moveTo(-r, -s);\n      context.lineTo(-r, s);\n      context.lineTo(-s, s);\n      context.lineTo(-s, r);\n      context.lineTo(s, r);\n      context.lineTo(s, s);\n      context.lineTo(r, s);\n      context.lineTo(r, -s);\n      context.lineTo(s, -s);\n      context.lineTo(s, -r);\n      context.lineTo(-s, -r);\n      context.lineTo(-s, -s);\n      context.closePath();\n    }\n  },\n  'diamond': {\n    draw: function(context, size) {\n      var r = Math.sqrt(size) / 2;\n      context.moveTo(-r, 0);\n      context.lineTo(0, -r);\n      context.lineTo(r, 0);\n      context.lineTo(0, r);\n      context.closePath();\n    }\n  },\n  'square': {\n    draw: function(context, size) {\n      var w = Math.sqrt(size),\n          x = -w / 2;\n      context.rect(x, x, w, w);\n    }\n  },\n  'triangle-up': {\n    draw: function(context, size) {\n      var r = Math.sqrt(size) / 2,\n          h = halfSqrt3 * r;\n      context.moveTo(0, -h);\n      context.lineTo(-r, h);\n      context.lineTo(r, h);\n      context.closePath();\n    }\n  },\n  'triangle-down': {\n    draw: function(context, size) {\n      var r = Math.sqrt(size) / 2,\n          h = halfSqrt3 * r;\n      context.moveTo(0, h);\n      context.lineTo(-r, -h);\n      context.lineTo(r, -h);\n      context.closePath();\n    }\n  },\n  'triangle-right': {\n    draw: function(context, size) {\n      var r = Math.sqrt(size) / 2,\n          h = halfSqrt3 * r;\n      context.moveTo(h, 0);\n      context.lineTo(-h, -r);\n      context.lineTo(-h, r);\n      context.closePath();\n    }\n  },\n  'triangle-left': {\n    draw: function(context, size) {\n      var r = Math.sqrt(size) / 2,\n          h = halfSqrt3 * r;\n      context.moveTo(-h, 0);\n      context.lineTo(h, -r);\n      context.lineTo(h, r);\n      context.closePath();\n    }\n  }\n};\n\nfunction symbols(_) {\n  return builtins.hasOwnProperty(_) ? builtins[_] : customSymbol(_);\n}\n\nvar custom = {};\n\nfunction customSymbol(path) {\n  if (!custom.hasOwnProperty(path)) {\n    var parsed = pathParse(path);\n    custom[path] = {\n      draw: function(context, size) {\n        pathRender(context, parsed, 0, 0, Math.sqrt(size) / 2);\n      }\n    };\n  }\n  return custom[path];\n}\n\nfunction rectangleX(d) {\n  return d.x;\n}\n\nfunction rectangleY(d) {\n  return d.y;\n}\n\nfunction rectangleWidth(d) {\n  return d.width;\n}\n\nfunction rectangleHeight(d) {\n  return d.height;\n}\n\nfunction constant$1(_) {\n  return function() { return _; };\n}\n\nfunction vg_rect() {\n  var x = rectangleX,\n      y = rectangleY,\n      width = rectangleWidth,\n      height = rectangleHeight,\n      cornerRadius = constant$1(0),\n      context = null;\n\n  function rectangle(_, x0, y0) {\n    var buffer,\n        x1 = x0 != null ? x0 : +x.call(this, _),\n        y1 = y0 != null ? y0 : +y.call(this, _),\n        w  = +width.call(this, _),\n        h  = +height.call(this, _),\n        cr = +cornerRadius.call(this, _);\n\n    if (!context) context = buffer = d3Path.path();\n\n    if (cr <= 0) {\n      context.rect(x1, y1, w, h);\n    } else {\n      var x2 = x1 + w,\n          y2 = y1 + h;\n      context.moveTo(x1 + cr, y1);\n      context.lineTo(x2 - cr, y1);\n      context.quadraticCurveTo(x2, y1, x2, y1 + cr);\n      context.lineTo(x2, y2 - cr);\n      context.quadraticCurveTo(x2, y2, x2 - cr, y2);\n      context.lineTo(x1 + cr, y2);\n      context.quadraticCurveTo(x1, y2, x1, y2 - cr);\n      context.lineTo(x1, y1 + cr);\n      context.quadraticCurveTo(x1, y1, x1 + cr, y1);\n      context.closePath();\n    }\n\n    if (buffer) return context = null, buffer + '' || null;\n  }\n\n  rectangle.x = function(_) {\n    return arguments.length ? (x = typeof _ === 'function' ? _ : constant$1(+_), rectangle) : x;\n  };\n\n  rectangle.y = function(_) {\n    return arguments.length ? (y = typeof _ === 'function' ? _ : constant$1(+_), rectangle) : y;\n  };\n\n  rectangle.width = function(_) {\n    return arguments.length ? (width = typeof _ === 'function' ? _ : constant$1(+_), rectangle) : width;\n  };\n\n  rectangle.height = function(_) {\n    return arguments.length ? (height = typeof _ === 'function' ? _ : constant$1(+_), rectangle) : height;\n  };\n\n  rectangle.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === 'function' ? _ : constant$1(+_), rectangle) : cornerRadius;\n  };\n\n  rectangle.context = function(_) {\n    return arguments.length ? (context = _ == null ? null : _, rectangle) : context;\n  };\n\n  return rectangle;\n}\n\nvar pi = Math.PI;\n\nfunction vg_trail() {\n  var x,\n      y,\n      size,\n      defined,\n      context = null,\n      ready, x1, y1, r1;\n\n  function point(x2, y2, w2) {\n    var r2 = w2 / 2;\n\n    if (ready) {\n      var ux = y1 - y2,\n          uy = x2 - x1;\n\n      if (ux || uy) {\n        // get normal vector\n        var ud = Math.sqrt(ux * ux + uy * uy),\n            rx = (ux /= ud) * r1,\n            ry = (uy /= ud) * r1,\n            t = Math.atan2(uy, ux);\n\n        // draw segment\n        context.moveTo(x1 - rx, y1 - ry);\n        context.lineTo(x2 - ux * r2, y2 - uy * r2);\n        context.arc(x2, y2, r2, t - pi, t);\n        context.lineTo(x1 + rx, y1 + ry);\n        context.arc(x1, y1, r1, t, t + pi);\n      } else {\n        context.arc(x2, y2, r2, 0, 2*pi);\n      }\n      context.closePath();\n    } else {\n      ready = 1;\n    }\n    x1 = x2, y1 = y2, r1 = r2;\n  }\n\n  function trail(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n\n    if (context == null) context = buffer = d3Path.path();\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) ready = 0;\n      }\n      if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));\n    }\n\n    if (buffer) return context = null, buffer + '' || null;\n  }\n\n  trail.x = function(_) {\n    return arguments.length ? (x = _, trail) : x;\n  };\n\n  trail.y = function(_) {\n    return arguments.length ? (y = _, trail) : y;\n  };\n\n  trail.size = function(_) {\n    return arguments.length ? (size = _, trail) : size;\n  };\n\n  trail.defined = function(_) {\n    return arguments.length ? (defined = _, trail) : defined;\n  };\n\n  trail.context = function(_) {\n    return arguments.length ? (_ == null ? context = null : context = _, trail) : context;\n  };\n\n  return trail;\n}\n\nfunction x(item)    { return item.x || 0; }\nfunction y(item)    { return item.y || 0; }\nfunction w(item)    { return item.width || 0; }\nfunction ts(item)   { return item.size || 1; }\nfunction h(item)    { return item.height || 0; }\nfunction xw(item)   { return (item.x || 0) + (item.width || 0); }\nfunction yh(item)   { return (item.y || 0) + (item.height || 0); }\nfunction cr(item)   { return item.cornerRadius || 0; }\nfunction pa(item)   { return item.padAngle || 0; }\nfunction def(item)  { return !(item.defined === false); }\nfunction size(item) { return item.size == null ? 64 : item.size; }\nfunction type(item) { return symbols(item.shape || 'circle'); }\n\nvar arcShape    = d3Shape.arc().cornerRadius(cr).padAngle(pa);\nvar areavShape  = d3Shape.area().x(x).y1(y).y0(yh).defined(def);\nvar areahShape  = d3Shape.area().y(y).x1(x).x0(xw).defined(def);\nvar lineShape   = d3Shape.line().x(x).y(y).defined(def);\nvar rectShape   = vg_rect().x(x).y(y).width(w).height(h).cornerRadius(cr);\nvar symbolShape = d3Shape.symbol().type(type).size(size);\nvar trailShape  = vg_trail().x(x).y(y).defined(def).size(ts);\nfunction arc$2(context, item) {\n  return arcShape.context(context)(item);\n}\n\nfunction area$1(context, items) {\n  var item = items[0],\n      interp = item.interpolate || 'linear';\n  return (item.orient === 'horizontal' ? areahShape : areavShape)\n    .curve(curves(interp, item.orient, item.tension))\n    .context(context)(items);\n}\n\nfunction line$1(context, items) {\n  var item = items[0],\n      interp = item.interpolate || 'linear';\n  return lineShape.curve(curves(interp, item.orient, item.tension))\n    .context(context)(items);\n}\n\nfunction rectangle(context, item, x, y) {\n  return rectShape.context(context)(item, x, y);\n}\n\nfunction shape(context, item) {\n  return (item.mark.shape || item.shape)\n    .context(context)(item);\n}\n\nfunction symbol$1(context, item) {\n  return symbolShape.context(context)(item);\n}\n\nfunction trail(context, items) {\n  return trailShape.context(context)(items);\n}\n\nfunction boundStroke(bounds, item) {\n  if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {\n    bounds.expand(item.strokeWidth != null ? +item.strokeWidth : 1);\n  }\n  return bounds;\n}\n\nvar bounds;\nvar tau$1 = Math.PI * 2;\nvar halfPi = tau$1 / 4;\nvar circleThreshold = tau$1 - 1e-8;\nfunction context(_) {\n  return bounds = _, context;\n}\n\nfunction noop() {}\n\nfunction add(x, y) { bounds.add(x, y); }\n\ncontext.beginPath = noop;\n\ncontext.closePath = noop;\n\ncontext.moveTo = add;\n\ncontext.lineTo = add;\n\ncontext.rect = function(x, y, w, h) {\n  add(x, y);\n  add(x + w, y + h);\n};\n\ncontext.quadraticCurveTo = function(x1, y1, x2, y2) {\n  add(x1, y1);\n  add(x2, y2);\n};\n\ncontext.bezierCurveTo = function(x1, y1, x2, y2, x3, y3) {\n  add(x1, y1);\n  add(x2, y2);\n  add(x3, y3);\n};\n\ncontext.arc = function(cx, cy, r, sa, ea, ccw) {\n  if (Math.abs(ea - sa) > circleThreshold) {\n    add(cx - r, cy - r);\n    add(cx + r, cy + r);\n    return;\n  }\n\n  var xmin = Infinity, xmax = -Infinity,\n      ymin = Infinity, ymax = -Infinity,\n      s, i, x, y;\n\n  function update(a) {\n    x = r * Math.cos(a);\n    y = r * Math.sin(a);\n    if (x < xmin) xmin = x;\n    if (x > xmax) xmax = x;\n    if (y < ymin) ymin = y;\n    if (y > ymax) ymax = y;\n  }\n\n  // Sample end points and interior points aligned with 90 degrees\n  update(sa);\n  update(ea);\n\n  if (ea !== sa) {\n    sa = sa % tau$1; if (sa < 0) sa += tau$1;\n    ea = ea % tau$1; if (ea < 0) ea += tau$1;\n\n    if (ea < sa) {\n      ccw = !ccw; // flip direction\n      s = sa; sa = ea; ea = s; // swap end-points\n    }\n\n    if (ccw) {\n      ea -= tau$1;\n      s = sa - (sa % halfPi);\n      for (i=0; i<3 && s>ea; ++i, s-=halfPi) update(s);\n    } else {\n      s = sa - (sa % halfPi) + halfPi;\n      for (i=0; i<3 && s<ea; ++i, s=s+halfPi) update(s);\n    }\n  }\n\n  add(cx + xmin, cy + ymin);\n  add(cx + xmax, cy + ymax);\n};\n\nfunction gradient(context, gradient, bounds) {\n  var w = bounds.width(),\n      h = bounds.height(),\n      x1 = bounds.x1 + gradient.x1 * w,\n      y1 = bounds.y1 + gradient.y1 * h,\n      x2 = bounds.x1 + gradient.x2 * w,\n      y2 = bounds.y1 + gradient.y2 * h,\n      stop = gradient.stops,\n      i = 0,\n      n = stop.length,\n      linearGradient = context.createLinearGradient(x1, y1, x2, y2);\n\n  for (; i<n; ++i) {\n    linearGradient.addColorStop(stop[i].offset, stop[i].color);\n  }\n\n  return linearGradient;\n}\n\nfunction color(context, item, value) {\n  return (value.id) ?\n    gradient(context, value, item.bounds) :\n    value;\n}\n\nfunction fill(context, item, opacity) {\n  opacity *= (item.fillOpacity==null ? 1 : item.fillOpacity);\n  if (opacity > 0) {\n    context.globalAlpha = opacity;\n    context.fillStyle = color(context, item, item.fill);\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvar Empty = [];\n\nfunction stroke(context, item, opacity) {\n  var lw = (lw = item.strokeWidth) != null ? lw : 1;\n\n  if (lw <= 0) return false;\n\n  opacity *= (item.strokeOpacity==null ? 1 : item.strokeOpacity);\n  if (opacity > 0) {\n    context.globalAlpha = opacity;\n    context.strokeStyle = color(context, item, item.stroke);\n\n    context.lineWidth = lw;\n    context.lineCap = item.strokeCap || 'butt';\n    context.lineJoin = item.strokeJoin || 'miter';\n    context.miterLimit = item.strokeMiterLimit || 10;\n\n    if (context.setLineDash) {\n      context.setLineDash(item.strokeDash || Empty);\n      context.lineDashOffset = item.strokeDashOffset || 0;\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction compare$1(a, b) {\n  return a.zindex - b.zindex || a.index - b.index;\n}\n\nfunction zorder(scene) {\n  if (!scene.zdirty) return scene.zitems;\n\n  var items = scene.items,\n      output = [], item, i, n;\n\n  for (i=0, n=items.length; i<n; ++i) {\n    item = items[i];\n    item.index = i;\n    if (item.zindex) output.push(item);\n  }\n\n  scene.zdirty = false;\n  return scene.zitems = output.sort(compare$1);\n}\n\nfunction visit(scene, visitor) {\n  var items = scene.items, i, n;\n  if (!items || !items.length) return;\n\n  var zitems = zorder(scene);\n\n  if (zitems && zitems.length) {\n    for (i=0, n=items.length; i<n; ++i) {\n      if (!items[i].zindex) visitor(items[i]);\n    }\n    items = zitems;\n  }\n\n  for (i=0, n=items.length; i<n; ++i) {\n    visitor(items[i]);\n  }\n}\n\nfunction pickVisit(scene, visitor) {\n  var items = scene.items, hit, i;\n  if (!items || !items.length) return null;\n\n  var zitems = zorder(scene);\n  if (zitems && zitems.length) items = zitems;\n\n  for (i=items.length; --i >= 0;) {\n    if (hit = visitor(items[i])) return hit;\n  }\n\n  if (items === zitems) {\n    for (items=scene.items, i=items.length; --i >= 0;) {\n      if (!items[i].zindex) {\n        if (hit = visitor(items[i])) return hit;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction drawAll(path) {\n  return function(context, scene, bounds) {\n    visit(scene, function(item) {\n      if (!bounds || bounds.intersects(item.bounds)) {\n        drawPath(path, context, item, item);\n      }\n    });\n  };\n}\n\nfunction drawOne(path) {\n  return function(context, scene, bounds) {\n    if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) {\n      drawPath(path, context, scene.items[0], scene.items);\n    }\n  };\n}\n\nfunction drawPath(path, context, item, items) {\n  var opacity = item.opacity == null ? 1 : item.opacity;\n  if (opacity === 0) return;\n\n  if (path(context, items)) return;\n\n  if (item.fill && fill(context, item, opacity)) {\n    context.fill();\n  }\n\n  if (item.stroke && stroke(context, item, opacity)) {\n    context.stroke();\n  }\n}\n\nvar trueFunc = function() { return true; };\n\nfunction pick(test) {\n  if (!test) test = trueFunc;\n\n  return function(context, scene, x, y, gx, gy) {\n    if (context.pixelRatio > 1) {\n      x *= context.pixelRatio;\n      y *= context.pixelRatio;\n    }\n\n    return pickVisit(scene, function(item) {\n      var b = item.bounds;\n      // first hit test against bounding box\n      if ((b && !b.contains(gx, gy)) || !b) return;\n      // if in bounding box, perform more careful test\n      if (test(context, item, x, y, gx, gy)) return item;\n    });\n  };\n}\n\nfunction hitPath(path, filled) {\n  return function(context, o, x, y) {\n    var item = Array.isArray(o) ? o[0] : o,\n        fill = (filled == null) ? item.fill : filled,\n        stroke = item.stroke && context.isPointInStroke, lw, lc;\n\n    if (stroke) {\n      lw = item.strokeWidth;\n      lc = item.strokeCap;\n      context.lineWidth = lw != null ? lw : 1;\n      context.lineCap   = lc != null ? lc : 'butt';\n    }\n\n    return path(context, o) ? false :\n      (fill && context.isPointInPath(x, y)) ||\n      (stroke && context.isPointInStroke(x, y));\n  };\n}\n\nfunction pickPath(path) {\n  return pick(hitPath(path));\n}\n\nfunction translate(x, y) {\n  return 'translate(' + x + ',' + y + ')';\n}\n\nfunction translateItem(item) {\n  return translate(item.x || 0, item.y || 0);\n}\n\nfunction markItemPath(type, shape) {\n\n  function attr(emit, item) {\n    emit('transform', translateItem(item));\n    emit('d', shape(null, item));\n  }\n\n  function bound(bounds, item) {\n    shape(context(bounds), item);\n    return boundStroke(bounds, item)\n      .translate(item.x || 0, item.y || 0);\n  }\n\n  function draw(context, item) {\n    var x = item.x || 0,\n        y = item.y || 0;\n    context.translate(x, y);\n    context.beginPath();\n    shape(context, item);\n    context.translate(-x, -y);\n  }\n\n  return {\n    type:   type,\n    tag:    'path',\n    nested: false,\n    attr:   attr,\n    bound:  bound,\n    draw:   drawAll(draw),\n    pick:   pickPath(draw)\n  };\n\n}\n\nvar arc$1 = markItemPath('arc', arc$2);\n\nfunction markMultiItemPath(type, shape) {\n\n  function attr(emit, item) {\n    var items = item.mark.items;\n    if (items.length) emit('d', shape(null, items));\n  }\n\n  function bound(bounds, mark) {\n    var items = mark.items;\n    return items.length === 0 ? bounds\n      : (shape(context(bounds), items), boundStroke(bounds, items[0]));\n  }\n\n  function draw(context, items) {\n    context.beginPath();\n    shape(context, items);\n  }\n\n  var hit = hitPath(draw);\n\n  function pick(context, scene, x, y, gx, gy) {\n    var items = scene.items,\n        b = scene.bounds;\n\n    if (!items || !items.length || b && !b.contains(gx, gy)) {\n      return null;\n    }\n\n    if (context.pixelRatio > 1) {\n      x *= context.pixelRatio;\n      y *= context.pixelRatio;\n    }\n    return hit(context, items, x, y) ? items[0] : null;\n  }\n\n  return {\n    type:   type,\n    tag:    'path',\n    nested: true,\n    attr:   attr,\n    bound:  bound,\n    draw:   drawOne(draw),\n    pick:   pick\n  };\n\n}\n\nvar area$2 = markMultiItemPath('area', area$1);\n\nfunction clip(renderer, item, size) {\n  var defs = renderer._defs,\n      id = item.clip_id || (item.clip_id = 'clip' + defs.clip_id++),\n      c = defs.clipping[id] || (defs.clipping[id] = {id: id});\n  c.width = size.width || 0;\n  c.height = size.height || 0;\n  return 'url(#' + id + ')';\n}\n\nfunction attr(emit, item) {\n  emit('transform', translateItem(item));\n}\n\nfunction background(emit, item) {\n  var offset = item.stroke ? 0.5 : 0;\n  emit('class', 'background');\n  emit('d', rectangle(null, item, offset, offset));\n}\n\nfunction foreground(emit, item, renderer) {\n  var url = item.clip ? clip(renderer, item, item) : null;\n  emit('clip-path', url);\n}\n\nfunction bound(bounds, group) {\n  if (!group.clip && group.items) {\n    var items = group.items;\n    for (var j=0, m=items.length; j<m; ++j) {\n      bounds.union(items[j].bounds);\n    }\n  }\n\n  if (group.clip || group.width || group.height) {\n    boundStroke(\n      bounds.add(0, 0).add(group.width || 0, group.height || 0),\n      group\n    );\n  }\n\n  return bounds.translate(group.x || 0, group.y || 0);\n}\n\nfunction draw(context, scene, bounds) {\n  var renderer = this;\n\n  visit(scene, function(group) {\n    var gx = group.x || 0,\n        gy = group.y || 0,\n        w = group.width || 0,\n        h = group.height || 0,\n        offset, opacity;\n\n    // setup graphics context\n    context.save();\n    context.translate(gx, gy);\n\n    // draw group background\n    if (group.stroke || group.fill) {\n      opacity = group.opacity == null ? 1 : group.opacity;\n      if (opacity > 0) {\n        context.beginPath();\n        offset = group.stroke ? 0.5 : 0;\n        rectangle(context, group, offset, offset);\n        if (group.fill && fill(context, group, opacity)) {\n          context.fill();\n        }\n        if (group.stroke && stroke(context, group, opacity)) {\n          context.stroke();\n        }\n      }\n    }\n\n    // set clip and bounds\n    if (group.clip) {\n      context.beginPath();\n      context.rect(0, 0, w, h);\n      context.clip();\n    }\n    if (bounds) bounds.translate(-gx, -gy);\n\n    // draw group contents\n    visit(group, function(item) {\n      renderer.draw(context, item, bounds);\n    });\n\n    // restore graphics context\n    if (bounds) bounds.translate(gx, gy);\n    context.restore();\n  });\n}\n\nfunction pick$1(context, scene, x, y, gx, gy) {\n  if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {\n    return null;\n  }\n\n  var handler = this;\n\n  return pickVisit(scene, function(group) {\n    var hit, dx, dy, b;\n\n    // first hit test against bounding box\n    // if a group is clipped, that should be handled by the bounds check.\n    b = group.bounds;\n    if (b && !b.contains(gx, gy)) return;\n\n    // passed bounds check, so test sub-groups\n    dx = (group.x || 0);\n    dy = (group.y || 0);\n\n    context.save();\n    context.translate(dx, dy);\n\n    dx = gx - dx;\n    dy = gy - dy;\n\n    hit = pickVisit(group, function(mark) {\n      return pickMark(mark, dx, dy)\n        ? handler.pick(mark, x, y, dx, dy)\n        : null;\n    });\n\n    context.restore();\n    if (hit) return hit;\n\n    hit = scene.interactive !== false\n      && (group.fill || group.stroke)\n      && dx >= 0\n      && dx <= group.width\n      && dy >= 0\n      && dy <= group.height;\n\n    return hit ? group : null;\n  });\n}\n\nfunction pickMark(mark, x, y) {\n  return (mark.interactive !== false || mark.marktype === 'group')\n    && mark.bounds && mark.bounds.contains(x, y);\n}\n\nvar group = {\n  type:       'group',\n  tag:        'g',\n  nested:     false,\n  attr:       attr,\n  bound:      bound,\n  draw:       draw,\n  pick:       pick$1,\n  background: background,\n  foreground: foreground\n};\n\nfunction getImage(item, renderer) {\n  var image = item.image;\n  if (!image || image.url !== item.url) {\n    image = {loaded: false, width: 0, height: 0};\n    renderer.loadImage(item.url).then(function(image) {\n      item.image = image;\n      item.image.url = item.url;\n    });\n  }\n  return image;\n}\n\nfunction imageXOffset(align, w) {\n  return align === 'center' ? w / 2 : align === 'right' ? w : 0;\n}\n\nfunction imageYOffset(baseline, h) {\n  return baseline === 'middle' ? h / 2 : baseline === 'bottom' ? h : 0;\n}\n\nfunction attr$1(emit, item, renderer) {\n  var image = getImage(item, renderer),\n      x = item.x || 0,\n      y = item.y || 0,\n      w = (item.width != null ? item.width : image.width) || 0,\n      h = (item.height != null ? item.height : image.height) || 0,\n      a = item.aspect === false ? 'none' : 'xMidYMid';\n\n  x -= imageXOffset(item.align, w);\n  y -= imageYOffset(item.baseline, h);\n\n  emit('href', image.src || '', 'http://www.w3.org/1999/xlink', 'xlink:href');\n  emit('transform', translate(x, y));\n  emit('width', w);\n  emit('height', h);\n  emit('preserveAspectRatio', a);\n}\n\nfunction bound$1(bounds, item) {\n  var image = item.image,\n      x = item.x || 0,\n      y = item.y || 0,\n      w = (item.width != null ? item.width : (image && image.width)) || 0,\n      h = (item.height != null ? item.height : (image && image.height)) || 0;\n\n  x -= imageXOffset(item.align, w);\n  y -= imageYOffset(item.baseline, h);\n\n  return bounds.set(x, y, x + w, y + h);\n}\n\nfunction draw$1(context, scene, bounds) {\n  var renderer = this;\n\n  visit(scene, function(item) {\n    if (bounds && !bounds.intersects(item.bounds)) return; // bounds check\n\n    var image = getImage(item, renderer),\n        x = item.x || 0,\n        y = item.y || 0,\n        w = (item.width != null ? item.width : image.width) || 0,\n        h = (item.height != null ? item.height : image.height) || 0,\n        opacity, ar0, ar1, t;\n\n    x -= imageXOffset(item.align, w);\n    y -= imageYOffset(item.baseline, h);\n\n    if (item.aspect !== false) {\n      ar0 = image.width / image.height;\n      ar1 = item.width / item.height;\n      if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {\n        if (ar1 < ar0) {\n          t = w / ar0;\n          y += (h - t) / 2;\n          h = t;\n        } else {\n          t = h * ar0;\n          x += (w - t) / 2;\n          w = t;\n        }\n      }\n    }\n\n    if (image.loaded) {\n      context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;\n      context.drawImage(image, x, y, w, h);\n    }\n  });\n}\n\nvar image = {\n  type:     'image',\n  tag:      'image',\n  nested:   false,\n  attr:     attr$1,\n  bound:    bound$1,\n  draw:     draw$1,\n  pick:     pick(),\n  get:      getImage,\n  xOffset:  imageXOffset,\n  yOffset:  imageYOffset\n};\n\nvar line$2 = markMultiItemPath('line', line$1);\n\nfunction attr$2(emit, item) {\n  emit('transform', translateItem(item));\n  emit('d', item.path);\n}\n\nfunction path$1(context, item) {\n  var path = item.path;\n  if (path == null) return true;\n\n  var cache = item.pathCache;\n  if (!cache || cache.path !== path) {\n    (item.pathCache = cache = pathParse(path)).path = path;\n  }\n  pathRender(context, cache, item.x, item.y);\n}\n\nfunction bound$2(bounds, item) {\n  return path$1(context(bounds), item)\n    ? bounds.set(0, 0, 0, 0)\n    : boundStroke(bounds, item);\n}\n\nvar path$2 = {\n  type:   'path',\n  tag:    'path',\n  nested: false,\n  attr:   attr$2,\n  bound:  bound$2,\n  draw:   drawAll(path$1),\n  pick:   pickPath(path$1)\n};\n\nfunction attr$3(emit, item) {\n  emit('d', rectangle(null, item));\n}\n\nfunction bound$3(bounds, item) {\n  var x, y;\n  return boundStroke(bounds.set(\n    x = item.x || 0,\n    y = item.y || 0,\n    (x + item.width) || 0,\n    (y + item.height) || 0\n  ), item);\n}\n\nfunction draw$2(context, item) {\n  context.beginPath();\n  rectangle(context, item);\n}\n\nvar rect = {\n  type:   'rect',\n  tag:    'path',\n  nested: false,\n  attr:   attr$3,\n  bound:  bound$3,\n  draw:   drawAll(draw$2),\n  pick:   pickPath(draw$2)\n};\n\nfunction attr$4(emit, item) {\n  emit('transform', translateItem(item));\n  emit('x2', item.x2 != null ? item.x2 - (item.x||0) : 0);\n  emit('y2', item.y2 != null ? item.y2 - (item.y||0) : 0);\n}\n\nfunction bound$4(bounds, item) {\n  var x1, y1;\n  return boundStroke(bounds.set(\n    x1 = item.x || 0,\n    y1 = item.y || 0,\n    item.x2 != null ? item.x2 : x1,\n    item.y2 != null ? item.y2 : y1\n  ), item);\n}\n\nfunction path$3(context, item, opacity) {\n  var x1, y1, x2, y2;\n\n  if (item.stroke && stroke(context, item, opacity)) {\n    x1 = item.x || 0;\n    y1 = item.y || 0;\n    x2 = item.x2 != null ? item.x2 : x1;\n    y2 = item.y2 != null ? item.y2 : y1;\n    context.beginPath();\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    return true;\n  }\n  return false;\n}\n\nfunction draw$3(context, scene, bounds) {\n  visit(scene, function(item) {\n    if (bounds && !bounds.intersects(item.bounds)) return; // bounds check\n    var opacity = item.opacity == null ? 1 : item.opacity;\n    if (opacity && path$3(context, item, opacity)) {\n      context.stroke();\n    }\n  });\n}\n\nfunction hit(context, item, x, y) {\n  if (!context.isPointInStroke) return false;\n  return path$3(context, item, 1) && context.isPointInStroke(x, y);\n}\n\nvar rule = {\n  type:   'rule',\n  tag:    'line',\n  nested: false,\n  attr:   attr$4,\n  bound:  bound$4,\n  draw:   draw$3,\n  pick:   pick(hit)\n};\n\nvar shape$1 = markItemPath('shape', shape);\n\nvar symbol$2 = markItemPath('symbol', symbol$1);\n\nvar context$1;\nvar fontHeight;\nvar textMetrics = {\n  height: height,\n  measureWidth: measureWidth,\n  estimateWidth: estimateWidth,\n  width: estimateWidth,\n  canvas: canvas\n};\n\ncanvas(true);\n\n// make dumb, simple estimate if no canvas is available\nfunction estimateWidth(item) {\n  return fontHeight = height(item), estimate(textValue(item));\n}\n\nfunction estimate(text) {\n  return ~~(0.8 * text.length * fontHeight);\n}\n\n// measure text width if canvas is available\nfunction measureWidth(item) {\n  return context$1.font = font(item), measure(textValue(item));\n}\n\nfunction measure(text) {\n  return context$1.measureText(text).width;\n}\n\nfunction height(item) {\n  return item.fontSize != null ? item.fontSize : 11;\n}\n\nfunction canvas(_) {\n  context$1 = _\n    ? (context$1 = Canvas$1(1,1)) ? context$1.getContext('2d') : null\n    : null;\n  textMetrics.width = context$1 ? measureWidth : estimateWidth\n}\n\nfunction textValue(item) {\n  var s = item.text;\n  return s == null ? '' : item.limit > 0 ? truncate$1(item) : s + '';\n}\n\nfunction truncate$1(item) {\n  var limit = +item.limit,\n      text = item.text + '',\n      width = context$1\n        ? (context$1.font = font(item), measure)\n        : (fontHeight = height(item), estimate);\n\n  if (width(text) < limit) return text;\n\n  var ellipsis = item.ellipsis || '\\u2026',\n      rtl = item.dir === 'rtl',\n      lo = 0,\n      hi = text.length, mid;\n\n  limit -= width(ellipsis);\n\n  if (rtl) {\n    while (lo < hi) {\n      mid = (lo + hi >>> 1);\n      if (width(text.slice(mid)) > limit) lo = mid + 1;\n      else hi = mid;\n    }\n    return ellipsis + text.slice(lo);\n  } else {\n    while (lo < hi) {\n      mid = 1 + (lo + hi >>> 1);\n      if (width(text.slice(0, mid)) < limit) lo = mid;\n      else hi = mid - 1;\n    }\n    return text.slice(0, lo) + ellipsis;\n  }\n}\n\n\nfunction font(item, quote) {\n  var font = item.font;\n  if (quote && font) {\n    font = String(font).replace(/\\\"/g, '\\'');\n  }\n  return '' +\n    (item.fontStyle ? item.fontStyle + ' ' : '') +\n    (item.fontVariant ? item.fontVariant + ' ' : '') +\n    (item.fontWeight ? item.fontWeight + ' ' : '') +\n    height(item) + 'px ' +\n    (font || 'sans-serif');\n}\n\nfunction offset(item) {\n  // perform our own font baseline calculation\n  // why? not all browsers support SVG 1.1 'alignment-baseline' :(\n  var baseline = item.baseline,\n      h = height(item);\n  return Math.round(\n    baseline === 'top'    ?  0.93*h :\n    baseline === 'middle' ?  0.30*h :\n    baseline === 'bottom' ? -0.21*h : 0\n  );\n}\n\nvar textAlign = {\n  'left':   'start',\n  'center': 'middle',\n  'right':  'end'\n};\n\nvar tempBounds = new Bounds();\n\nfunction attr$5(emit, item) {\n  var dx = item.dx || 0,\n      dy = (item.dy || 0) + offset(item),\n      x = item.x || 0,\n      y = item.y || 0,\n      a = item.angle || 0,\n      r = item.radius || 0, t;\n\n  if (r) {\n    t = (item.theta || 0) - Math.PI/2;\n    x += r * Math.cos(t);\n    y += r * Math.sin(t);\n  }\n\n  emit('text-anchor', textAlign[item.align] || 'start');\n\n  if (a) {\n    t = translate(x, y) + ' rotate('+a+')';\n    if (dx || dy) t += ' ' + translate(dx, dy);\n  } else {\n    t = translate(x + dx, y + dy);\n  }\n  emit('transform', t);\n}\n\nfunction bound$5(bounds, item, noRotate) {\n  var h = textMetrics.height(item),\n      a = item.align,\n      r = item.radius || 0,\n      x = item.x || 0,\n      y = item.y || 0,\n      dx = item.dx || 0,\n      dy = (item.dy || 0) + offset(item) - Math.round(0.8*h), // use 4/5 offset\n      w, t;\n\n  if (r) {\n    t = (item.theta || 0) - Math.PI/2;\n    x += r * Math.cos(t);\n    y += r * Math.sin(t);\n  }\n\n  // horizontal alignment\n  w = textMetrics.width(item);\n  if (a === 'center') {\n    dx -= (w / 2);\n  } else if (a === 'right') {\n    dx -= w;\n  } else {\n    // left by default, do nothing\n  }\n\n  bounds.set(dx+=x, dy+=y, dx+w, dy+h);\n  if (item.angle && !noRotate) {\n    bounds.rotate(item.angle*Math.PI/180, x, y);\n  }\n  return bounds.expand(noRotate ? 0 : 1);\n}\n\nfunction draw$4(context, scene, bounds) {\n  visit(scene, function(item) {\n    var opacity, x, y, r, t, str;\n    if (bounds && !bounds.intersects(item.bounds)) return; // bounds check\n    if (!(str = textValue(item))) return; // get text string\n\n    opacity = item.opacity == null ? 1 : item.opacity;\n    if (opacity === 0) return;\n\n    context.font = font(item);\n    context.textAlign = item.align || 'left';\n\n    x = item.x || 0;\n    y = item.y || 0;\n    if ((r = item.radius)) {\n      t = (item.theta || 0) - Math.PI/2;\n      x += r * Math.cos(t);\n      y += r * Math.sin(t);\n    }\n\n    if (item.angle) {\n      context.save();\n      context.translate(x, y);\n      context.rotate(item.angle * Math.PI/180);\n      x = y = 0; // reset x, y\n    }\n    x += (item.dx || 0);\n    y += (item.dy || 0) + offset(item);\n\n    if (item.fill && fill(context, item, opacity)) {\n      context.fillText(str, x, y);\n    }\n    if (item.stroke && stroke(context, item, opacity)) {\n      context.strokeText(str, x, y);\n    }\n    if (item.angle) context.restore();\n  });\n}\n\nfunction hit$1(context, item, x, y, gx, gy) {\n  if (item.fontSize <= 0) return false;\n  if (!item.angle) return true; // bounds sufficient if no rotation\n\n  // project point into space of unrotated bounds\n  var b = bound$5(tempBounds, item, true),\n      a = -item.angle * Math.PI / 180,\n      cos = Math.cos(a),\n      sin = Math.sin(a),\n      ix = item.x,\n      iy = item.y,\n      px = cos*gx - sin*gy + (ix - ix*cos + iy*sin),\n      py = sin*gx + cos*gy + (iy - ix*sin - iy*cos);\n\n  return b.contains(px, py);\n}\n\nvar text = {\n  type:   'text',\n  tag:    'text',\n  nested: false,\n  attr:   attr$5,\n  bound:  bound$5,\n  draw:   draw$4,\n  pick:   pick(hit$1)\n};\n\nvar trail$1 = markMultiItemPath('trail', trail);\n\nvar Marks = {\n  arc:     arc$1,\n  area:    area$2,\n  group:   group,\n  image:   image,\n  line:    line$2,\n  path:    path$2,\n  rect:    rect,\n  rule:    rule,\n  shape:   shape$1,\n  symbol:  symbol$2,\n  text:    text,\n  trail:   trail$1\n};\n\nfunction boundItem(item, func, opt) {\n  var type = Marks[item.mark.marktype],\n      bound = func || type.bound;\n  if (type.nested) item = item.mark;\n\n  return bound(item.bounds || (item.bounds = new Bounds()), item, opt);\n}\n\nvar DUMMY = {mark: null};\n\nfunction boundMark(mark, bounds, opt) {\n  var type  = Marks[mark.marktype],\n      bound = type.bound,\n      items = mark.items,\n      hasItems = items && items.length,\n      i, n, item, b;\n\n  if (type.nested) {\n    item = hasItems ? items[0] : (DUMMY.mark = mark, DUMMY); // no items, fake it\n    b = boundItem(item, bound, opt);\n    bounds = bounds && bounds.union(b) || b;\n    return bounds;\n  }\n\n  bounds = bounds\n    || mark.bounds && mark.bounds.clear()\n    || new Bounds();\n\n  if (hasItems) {\n    for (i=0, n=items.length; i<n; ++i) {\n      bounds.union(boundItem(items[i], bound, opt));\n    }\n  }\n\n  return mark.bounds = bounds;\n}\n\nvar keys = [\n  'marktype', 'name', 'role', 'interactive', 'clip', 'items', 'zindex',\n  'x', 'y', 'width', 'height', 'align', 'baseline',             // layout\n  'fill', 'fillOpacity', 'opacity',                             // fill\n  'stroke', 'strokeOpacity', 'strokeWidth', 'strokeCap',        // stroke\n  'strokeDash', 'strokeDashOffset',                             // stroke dash\n  'startAngle', 'endAngle', 'innerRadius', 'outerRadius',       // arc\n  'cornerRadius', 'padAngle',                                   // arc, rect\n  'interpolate', 'tension', 'orient', 'defined',                // area, line\n  'url',                                                        // image\n  'path',                                                       // path\n  'x2', 'y2',                                                   // rule\n  'size', 'shape',                                              // symbol\n  'text', 'angle', 'theta', 'radius', 'dx', 'dy',               // text\n  'font', 'fontSize', 'fontWeight', 'fontStyle', 'fontVariant'  // font\n];\n\nfunction sceneToJSON(scene, indent) {\n  return JSON.stringify(scene, keys, indent);\n}\n\nfunction sceneFromJSON(json) {\n  var scene = (typeof json === 'string' ? JSON.parse(json) : json);\n  return initialize(scene);\n}\n\nfunction initialize(scene) {\n  var type = scene.marktype,\n      items = scene.items,\n      parent, i, n;\n\n  if (items) {\n    for (i=0, n=items.length; i<n; ++i) {\n      parent = type ? 'mark' : 'group';\n      items[i][parent] = scene;\n      if (items[i].zindex) items[i][parent].zdirty = true;\n      if ('group' === (type || parent)) initialize(items[i]);\n    }\n  }\n\n  if (type) boundMark(scene);\n  return scene;\n}\n\nfunction Scenegraph(scene) {\n  if (arguments.length) {\n    this.root = sceneFromJSON(scene);\n  } else {\n    this.root = createMark({\n      marktype: 'group',\n      name: 'root',\n      role: 'frame'\n    });\n    this.root.items = [new GroupItem(this.root)];\n  }\n}\n\nvar prototype$2 = Scenegraph.prototype;\n\nprototype$2.toJSON = function(indent) {\n  return sceneToJSON(this.root, indent || 0);\n};\n\nprototype$2.mark = function(markdef, group, index) {\n  group = group || this.root.items[0];\n  var mark = createMark(markdef, group);\n  group.items[index] = mark;\n  if (mark.zindex) mark.group.zdirty = true;\n  return mark;\n};\n\nfunction createMark(def, group) {\n  return {\n    bounds:      new Bounds(),\n    clip:        !!def.clip,\n    group:       group,\n    interactive: def.interactive === false ? false : true,\n    items:       [],\n    marktype:    def.marktype,\n    name:        def.name || undefined,\n    role:        def.role || undefined,\n    zindex:      def.zindex || 0\n  };\n}\n\nfunction Handler(customLoader) {\n  this._active = null;\n  this._handlers = {};\n  this._loader = customLoader || loader();\n}\n\nvar prototype$3 = Handler.prototype;\n\nprototype$3.initialize = function(el, origin, obj) {\n  this._el = el;\n  this._obj = obj || null;\n  return this.origin(origin);\n};\n\nprototype$3.element = function() {\n  return this._el;\n};\n\nprototype$3.origin = function(origin) {\n  this._origin = origin || [0, 0];\n  return this;\n};\n\nprototype$3.scene = function(scene) {\n  if (!arguments.length) return this._scene;\n  this._scene = scene;\n  return this;\n};\n\n// add an event handler\n// subclasses should override\nprototype$3.on = function(/*type, handler*/) {};\n\n// remove an event handler\n// subclasses should override\nprototype$3.off = function(/*type, handler*/) {};\n\n// return an array with all registered event handlers\nprototype$3.handlers = function() {\n  var h = this._handlers, a = [], k;\n  for (k in h) { a.push.apply(a, h[k]); }\n  return a;\n};\n\nprototype$3.eventName = function(name) {\n  var i = name.indexOf('.');\n  return i < 0 ? name : name.slice(0,i);\n};\n\nprototype$3.handleHref = function(event, item, href) {\n  this._loader\n    .sanitize(href, {context:'href'})\n    .then(function(opt) {\n      var e = new MouseEvent(event.type, event),\n          a = domCreate(null, 'a');\n      for (var name in opt) a.setAttribute(name, opt[name]);\n      a.dispatchEvent(e);\n    })\n    .catch(function() { /* do nothing */ });\n};\n\nprototype$3.handleTooltip = function(event, item, tooltipText) {\n  this._el.setAttribute('title', tooltipText || '');\n};\n\n/**\n * Create a new Renderer instance.\n * @param {object} [loader] - Optional loader instance for\n *   image and href URL sanitization. If not specified, a\n *   standard loader instance will be generated.\n * @constructor\n */\nfunction Renderer(loader) {\n  this._el = null;\n  this._bgcolor = null;\n  this._loader = new ResourceLoader(loader);\n}\n\nvar prototype$4 = Renderer.prototype;\n\n/**\n * Initialize a new Renderer instance.\n * @param {DOMElement} el - The containing DOM element for the display.\n * @param {number} width - The width of the display, in pixels.\n * @param {number} height - The height of the display, in pixels.\n * @param {Array<number>} origin - The origin of the display, in pixels.\n *   The coordinate system will be translated to this point.\n * @return {Renderer} - This renderer instance;\n */\nprototype$4.initialize = function(el, width, height, origin) {\n  this._el = el;\n  return this.resize(width, height, origin);\n};\n\n/**\n * Returns the parent container element for a visualization.\n * @return {DOMElement} - The containing DOM element.\n */\nprototype$4.element = function() {\n  return this._el;\n};\n\n/**\n * Returns the scene element (e.g., canvas or SVG) of the visualization\n * Subclasses must override if the first child is not the scene element.\n * @return {DOMElement} - The scene (e.g., canvas or SVG) element.\n */\nprototype$4.scene = function() {\n  return this._el && this._el.firstChild;\n};\n\n/**\n * Get / set the background color.\n */\nprototype$4.background = function(bgcolor) {\n  if (arguments.length === 0) return this._bgcolor;\n  this._bgcolor = bgcolor;\n  return this;\n};\n\n/**\n * Resize the display.\n * @param {number} width - The new width of the display, in pixels.\n * @param {number} height - The new height of the display, in pixels.\n * @param {Array<number>} origin - The new origin of the display, in pixels.\n *   The coordinate system will be translated to this point.\n * @return {Renderer} - This renderer instance;\n */\nprototype$4.resize = function(width, height, origin) {\n  this._width = width;\n  this._height = height;\n  this._origin = origin || [0, 0];\n  return this;\n};\n\n/**\n * Report a dirty item whose bounds should be redrawn.\n * This base class method does nothing. Subclasses that perform\n * incremental should implement this method.\n * @param {Item} item - The dirty item whose bounds should be redrawn.\n */\nprototype$4.dirty = function(/*item*/) {\n};\n\n/**\n * Render an input scenegraph, potentially with a set of dirty items.\n * This method will perform an immediate rendering with available resources.\n * The renderer may also need to perform image loading to perform a complete\n * render. This process can lead to asynchronous re-rendering of the scene\n * after this method returns. To receive notification when rendering is\n * complete, use the renderAsync method instead.\n * @param {object} scene - The root mark of a scenegraph to render.\n * @return {Renderer} - This renderer instance.\n */\nprototype$4.render = function(scene) {\n  var r = this;\n\n  // bind arguments into a render call, and cache it\n  // this function may be subsequently called for async redraw\n  r._call = function() { r._render(scene); };\n\n  // invoke the renderer\n  r._call();\n\n  // clear the cached call for garbage collection\n  // async redraws will stash their own copy\n  r._call = null;\n\n  return r;\n};\n\n/**\n * Internal rendering method. Renderer subclasses should override this\n * method to actually perform rendering.\n * @param {object} scene - The root mark of a scenegraph to render.\n */\nprototype$4._render = function(/*scene*/) {\n  // subclasses to override\n};\n\n/**\n * Asynchronous rendering method. Similar to render, but returns a Promise\n * that resolves when all rendering is completed. Sometimes a renderer must\n * perform image loading to get a complete rendering. The returned\n * Promise will not resolve until this process completes.\n * @param {object} scene - The root mark of a scenegraph to render.\n * @return {Promise} - A Promise that resolves when rendering is complete.\n */\nprototype$4.renderAsync = function(scene) {\n  var r = this.render(scene);\n  return this._ready\n    ? this._ready.then(function() { return r; })\n    : Promise.resolve(r);\n};\n\n/**\n * Internal method for asynchronous resource loading.\n * Proxies method calls to the ImageLoader, and tracks loading\n * progress to invoke a re-render once complete.\n * @param {string} method - The method name to invoke on the ImageLoader.\n * @param {string} uri - The URI for the requested resource.\n * @return {Promise} - A Promise that resolves to the requested resource.\n */\nprototype$4._load = function(method, uri) {\n  var r = this,\n      p = r._loader[method](uri);\n\n  if (!r._ready) {\n    // re-render the scene when loading completes\n    var call = r._call;\n    r._ready = r._loader.ready()\n      .then(function(redraw) {\n        if (redraw) call();\n        r._ready = null;\n      });\n  }\n\n  return p;\n};\n\n/**\n * Sanitize a URL to include as a hyperlink in the rendered scene.\n * This method proxies a call to ImageLoader.sanitizeURL, but also tracks\n * image loading progress and invokes a re-render once complete.\n * @param {string} uri - The URI string to sanitize.\n * @return {Promise} - A Promise that resolves to the sanitized URL.\n */\nprototype$4.sanitizeURL = function(uri) {\n  return this._load('sanitizeURL', uri);\n};\n\n/**\n * Requests an image to include in the rendered scene.\n * This method proxies a call to ImageLoader.loadImage, but also tracks\n * image loading progress and invokes a re-render once complete.\n * @param {string} uri - The URI string of the image.\n * @return {Promise} - A Promise that resolves to the loaded Image.\n */\nprototype$4.loadImage = function(uri) {\n  return this._load('loadImage', uri);\n};\n\nfunction point(event, el) {\n  var rect = el.getBoundingClientRect();\n  return [\n    event.clientX - rect.left - (el.clientLeft || 0),\n    event.clientY - rect.top - (el.clientTop || 0)\n  ];\n}\n\nfunction CanvasHandler(loader) {\n  Handler.call(this, loader);\n  this._down = null;\n  this._touch = null;\n  this._first = true;\n}\n\nvar prototype$5 = inherits(CanvasHandler, Handler);\n\nprototype$5.initialize = function(el, origin, obj) {\n  // add event listeners\n  var canvas = this._canvas = el && domFind(el, 'canvas');\n  if (canvas) {\n    var that = this;\n    this.events.forEach(function(type) {\n      canvas.addEventListener(type, function(evt) {\n        if (prototype$5[type]) {\n          prototype$5[type].call(that, evt);\n        } else {\n          that.fire(type, evt);\n        }\n      });\n    });\n  }\n\n  return Handler.prototype.initialize.call(this, el, origin, obj);\n};\n\nprototype$5.canvas = function() {\n  return this._canvas;\n};\n\n// retrieve the current canvas context\nprototype$5.context = function() {\n  return this._canvas.getContext('2d');\n};\n\n// supported events\nprototype$5.events = [\n  'keydown',\n  'keypress',\n  'keyup',\n  'dragenter',\n  'dragleave',\n  'dragover',\n  'mousedown',\n  'mouseup',\n  'mousemove',\n  'mouseout',\n  'mouseover',\n  'click',\n  'dblclick',\n  'wheel',\n  'mousewheel',\n  'touchstart',\n  'touchmove',\n  'touchend'\n];\n\n// to keep old versions of firefox happy\nprototype$5.DOMMouseScroll = function(evt) {\n  this.fire('mousewheel', evt);\n};\n\nfunction move(moveEvent, overEvent, outEvent) {\n  return function(evt) {\n    var a = this._active,\n        p = this.pickEvent(evt);\n\n    if (p === a) {\n      // active item and picked item are the same\n      this.fire(moveEvent, evt); // fire move\n    } else {\n      // active item and picked item are different\n      if (!a || !a.exit) {\n        // fire out for prior active item\n        // suppress if active item was removed from scene\n        this.fire(outEvent, evt);\n      }\n      this._active = p;          // set new active item\n      this.fire(overEvent, evt); // fire over for new active item\n      this.fire(moveEvent, evt); // fire move for new active item\n    }\n  };\n}\n\nfunction inactive(type) {\n  return function(evt) {\n    this.fire(type, evt);\n    this._active = null;\n  };\n}\n\nprototype$5.mousemove = move('mousemove', 'mouseover', 'mouseout');\nprototype$5.dragover  = move('dragover', 'dragenter', 'dragleave');\n\nprototype$5.mouseout  = inactive('mouseout');\nprototype$5.dragleave = inactive('dragleave');\n\nprototype$5.mousedown = function(evt) {\n  this._down = this._active;\n  this.fire('mousedown', evt);\n};\n\nprototype$5.click = function(evt) {\n  if (this._down === this._active) {\n    this.fire('click', evt);\n    this._down = null;\n  }\n};\n\nprototype$5.touchstart = function(evt) {\n  this._touch = this.pickEvent(evt.changedTouches[0]);\n\n  if (this._first) {\n    this._active = this._touch;\n    this._first = false;\n  }\n\n  this.fire('touchstart', evt, true);\n};\n\nprototype$5.touchmove = function(evt) {\n  this.fire('touchmove', evt, true);\n};\n\nprototype$5.touchend = function(evt) {\n  this.fire('touchend', evt, true);\n  this._touch = null;\n};\n\n// fire an event\nprototype$5.fire = function(type, evt, touch) {\n  var a = touch ? this._touch : this._active,\n      h = this._handlers[type], i, len;\n\n  // if hyperlinked, handle link first\n  if (type === 'click' && a && a.href) {\n    this.handleHref(evt, a, a.href);\n  } else if ((type === 'mouseover' || type === 'mouseout') && a && a.tooltip) {\n    this.handleTooltip(evt, a, type === 'mouseover' ? a.tooltip : null);\n  }\n\n  // invoke all registered handlers\n  if (h) {\n    evt.vegaType = type;\n    for (i=0, len=h.length; i<len; ++i) {\n      h[i].handler.call(this._obj, evt, a);\n    }\n  }\n};\n\n// add an event handler\nprototype$5.on = function(type, handler) {\n  var name = this.eventName(type),\n      h = this._handlers;\n  (h[name] || (h[name] = [])).push({\n    type: type,\n    handler: handler\n  });\n  return this;\n};\n\n// remove an event handler\nprototype$5.off = function(type, handler) {\n  var name = this.eventName(type),\n      h = this._handlers[name], i;\n  if (!h) return;\n  for (i=h.length; --i>=0;) {\n    if (h[i].type !== type) continue;\n    if (!handler || h[i].handler === handler) h.splice(i, 1);\n  }\n  return this;\n};\n\nprototype$5.pickEvent = function(evt) {\n  var p = point(evt, this._canvas),\n      o = this._origin;\n  return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);\n};\n\n// find the scenegraph item at the current mouse position\n// x, y -- the absolute x, y mouse coordinates on the canvas element\n// gx, gy -- the relative coordinates within the current group\nprototype$5.pick = function(scene, x, y, gx, gy) {\n  var g = this.context(),\n      mark = Marks[scene.marktype];\n  return mark.pick.call(this, g, scene, x, y, gx, gy);\n};\n\nfunction clip$1(context, scene) {\n  var group = scene.group;\n  context.save();\n  context.beginPath();\n  context.rect(0, 0, group.width || 0, group.height || 0);\n  context.clip();\n}\n\nvar devicePixelRatio = typeof window !== 'undefined'\n  ? window.devicePixelRatio || 1 : 1;\n\nfunction resize(canvas, width, height, origin) {\n  var scale = typeof HTMLElement !== 'undefined'\n    && canvas instanceof HTMLElement\n    && canvas.parentNode != null;\n\n  var context = canvas.getContext('2d'),\n      ratio = scale ? devicePixelRatio : 1;\n\n  canvas.width = width * ratio;\n  canvas.height = height * ratio;\n\n  if (ratio !== 1) {\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n  }\n\n  context.pixelRatio = ratio;\n  context.setTransform(\n    ratio, 0, 0, ratio,\n    ratio * origin[0],\n    ratio * origin[1]\n  );\n\n  return canvas;\n}\n\nfunction CanvasRenderer(loader) {\n  Renderer.call(this, loader);\n  this._redraw = false;\n  this._dirty = new Bounds();\n}\n\nvar prototype$6 = inherits(CanvasRenderer, Renderer);\nvar base = Renderer.prototype;\nvar tempBounds$1 = new Bounds();\nprototype$6.initialize = function(el, width, height, origin) {\n  this._canvas = Canvas$1(1, 1); // instantiate a small canvas\n  if (el) {\n    domClear(el, 0).appendChild(this._canvas);\n    this._canvas.setAttribute('class', 'marks');\n  }\n  // this method will invoke resize to size the canvas appropriately\n  return base.initialize.call(this, el, width, height, origin);\n};\n\nprototype$6.resize = function(width, height, origin) {\n  base.resize.call(this, width, height, origin);\n  resize(this._canvas, this._width, this._height, this._origin);\n  return this._redraw = true, this;\n};\n\nprototype$6.canvas = function() {\n  return this._canvas;\n};\n\nprototype$6.context = function() {\n  return this._canvas ? this._canvas.getContext('2d') : null;\n};\n\nprototype$6.dirty = function(item) {\n  var b = translate$1(item.bounds, item.mark.group);\n  this._dirty.union(b);\n};\n\nfunction clipToBounds(g, b, origin) {\n  // expand bounds by 1 pixel, then round to pixel boundaries\n  b.expand(1).round();\n\n  // to avoid artifacts translate if origin has fractional pixels\n  b.translate(-(origin[0] % 1), -(origin[1] % 1));\n\n  // set clipping path\n  g.beginPath();\n  g.rect(b.x1, b.y1, b.width(), b.height());\n  g.clip();\n\n  return b;\n}\n\nfunction translate$1(bounds, group) {\n  if (group == null) return bounds;\n  var b = tempBounds$1.clear().union(bounds);\n  for (; group != null; group = group.mark.group) {\n    b.translate(group.x || 0, group.y || 0);\n  }\n  return b;\n}\n\nprototype$6._render = function(scene) {\n  var g = this.context(),\n      o = this._origin,\n      w = this._width,\n      h = this._height,\n      b = this._dirty;\n\n  // setup\n  g.save();\n  b = (this._redraw || b.empty())\n    ? (this._redraw = false, null)\n    : clipToBounds(g, b, o);\n\n  this.clear(-o[0], -o[1], w, h);\n\n  // render\n  this.draw(g, scene, b);\n\n  // takedown\n  g.restore();\n\n  this._dirty.clear();\n  return this;\n};\n\nprototype$6.draw = function(ctx, scene, bounds) {\n  var mark = Marks[scene.marktype];\n  if (scene.clip) clip$1(ctx, scene);\n  mark.draw.call(this, ctx, scene, bounds);\n  if (scene.clip) ctx.restore();\n};\n\nprototype$6.clear = function(x, y, w, h) {\n  var g = this.context();\n  g.clearRect(x, y, w, h);\n  if (this._bgcolor != null) {\n    g.fillStyle = this._bgcolor;\n    g.fillRect(x, y, w, h);\n  }\n};\n\nfunction SVGHandler(loader) {\n  Handler.call(this, loader);\n  var h = this;\n  h._hrefHandler = listener(h, function(evt, item) {\n    if (item && item.href) h.handleHref(evt, item, item.href);\n  });\n  h._tooltipHandler = listener(h, function(evt, item) {\n    if (item && item.tooltip) {\n      h.handleTooltip(evt, item, evt.type === 'mouseover' ? item.tooltip : null);\n    }\n  });\n}\n\nvar prototype$7 = inherits(SVGHandler, Handler);\n\nprototype$7.initialize = function(el, origin, obj) {\n  var svg = this._svg;\n  if (svg) {\n    svg.removeEventListener('click', this._hrefHandler);\n    svg.removeEventListener('mouseover', this._tooltipHandler);\n    svg.removeEventListener('mouseout', this._tooltipHandler);\n  }\n  this._svg = svg = el && domFind(el, 'svg');\n  if (svg) {\n    svg.addEventListener('click', this._hrefHandler);\n    svg.addEventListener('mouseover', this._tooltipHandler);\n    svg.addEventListener('mouseout', this._tooltipHandler);\n  }\n  return Handler.prototype.initialize.call(this, el, origin, obj);\n};\n\nprototype$7.svg = function() {\n  return this._svg;\n};\n\n// wrap an event listener for the SVG DOM\nfunction listener(context, handler) {\n  return function(evt) {\n    var target = evt.target,\n        item = target.__data__;\n    evt.vegaType = evt.type;\n    item = Array.isArray(item) ? item[0] : item;\n    handler.call(context._obj, evt, item);\n  };\n}\n\n// add an event handler\nprototype$7.on = function(type, handler) {\n  var name = this.eventName(type),\n      h = this._handlers,\n      x = {\n        type:     type,\n        handler:  handler,\n        listener: listener(this, handler)\n      };\n\n  (h[name] || (h[name] = [])).push(x);\n\n  if (this._svg) {\n    this._svg.addEventListener(name, x.listener);\n  }\n\n  return this;\n};\n\n// remove an event handler\nprototype$7.off = function(type, handler) {\n  var name = this.eventName(type),\n      svg = this._svg,\n      h = this._handlers[name], i;\n\n  if (!h) return;\n\n  for (i=h.length; --i>=0;) {\n    if (h[i].type === type && !handler || h[i].handler === handler) {\n      if (this._svg) {\n        svg.removeEventListener(name, h[i].listener);\n      }\n      h.splice(i, 1);\n    }\n  }\n\n  return this;\n};\n\n// generate string for an opening xml tag\n// tag: the name of the xml tag\n// attr: hash of attribute name-value pairs to include\n// raw: additional raw string to include in tag markup\nfunction openTag(tag, attr, raw) {\n  var s = '<' + tag, key, val;\n  if (attr) {\n    for (key in attr) {\n      val = attr[key];\n      if (val != null) {\n        s += ' ' + key + '=\"' + val + '\"';\n      }\n    }\n  }\n  if (raw) s += ' ' + raw;\n  return s + '>';\n}\n\n// generate string for closing xml tag\n// tag: the name of the xml tag\nfunction closeTag(tag) {\n  return '</' + tag + '>';\n}\n\nvar metadata = {\n  'version': '1.1',\n  'xmlns': 'http://www.w3.org/2000/svg',\n  'xmlns:xlink': 'http://www.w3.org/1999/xlink'\n};\n\nvar styles = {\n  'fill':             'fill',\n  'fillOpacity':      'fill-opacity',\n  'stroke':           'stroke',\n  'strokeWidth':      'stroke-width',\n  'strokeOpacity':    'stroke-opacity',\n  'strokeCap':        'stroke-linecap',\n  'strokeJoin':       'stroke-linejoin',\n  'strokeDash':       'stroke-dasharray',\n  'strokeDashOffset': 'stroke-dashoffset',\n  'strokeMiterLimit': 'stroke-miterlimit',\n  'opacity':          'opacity'\n};\n\nvar styleProperties = Object.keys(styles);\n\nvar ns = metadata.xmlns;\n\nfunction SVGRenderer(loader) {\n  Renderer.call(this, loader);\n  this._dirtyID = 1;\n  this._dirty = [];\n  this._svg = null;\n  this._root = null;\n  this._defs = null;\n}\n\nvar prototype$8 = inherits(SVGRenderer, Renderer);\nvar base$1 = Renderer.prototype;\n\nprototype$8.initialize = function(el, width, height, padding) {\n  if (el) {\n    this._svg = domChild(el, 0, 'svg', ns);\n    this._svg.setAttribute('class', 'marks');\n    domClear(el, 1);\n    // set the svg root group\n    this._root = domChild(this._svg, 0, 'g', ns);\n    domClear(this._svg, 1);\n  }\n\n  // create the svg definitions cache\n  this._defs = {\n    clip_id:  1,\n    gradient: {},\n    clipping: {}\n  };\n\n  // set background color if defined\n  this.background(this._bgcolor);\n\n  return base$1.initialize.call(this, el, width, height, padding);\n};\n\nprototype$8.background = function(bgcolor) {\n  if (arguments.length && this._svg) {\n    this._svg.style.setProperty('background-color', bgcolor);\n  }\n  return base$1.background.apply(this, arguments);\n};\n\nprototype$8.resize = function(width, height, origin) {\n  base$1.resize.call(this, width, height, origin);\n\n  if (this._svg) {\n    this._svg.setAttribute('width', this._width);\n    this._svg.setAttribute('height', this._height);\n    this._svg.setAttribute('viewBox', '0 0 ' + this._width + ' ' + this._height);\n    this._root.setAttribute('transform', 'translate(' + this._origin + ')');\n  }\n\n  this._dirty = [];\n\n  return this;\n};\n\nprototype$8.svg = function() {\n  if (!this._svg) return null;\n\n  var attr = {\n    'class':  'marks',\n    'width':  this._width,\n    'height': this._height,\n    'viewBox': '0 0 ' + this._width + ' ' + this._height\n  };\n  for (var key in metadata) {\n    attr[key] = metadata[key];\n  }\n\n  return openTag('svg', attr) + this._svg.innerHTML + closeTag('svg');\n};\n\n\n// -- Render entry point --\n\nprototype$8._render = function(scene) {\n  // perform spot updates and re-render markup\n  if (this._dirtyCheck()) {\n    if (this._dirtyAll) this._resetDefs();\n    this.draw(this._root, scene);\n    domClear(this._root, 1);\n  }\n\n  this.updateDefs();\n\n  this._dirty = [];\n  ++this._dirtyID;\n\n  return this;\n};\n\n// -- Manage SVG definitions ('defs') block --\n\nprototype$8.updateDefs = function() {\n  var svg = this._svg,\n      defs = this._defs,\n      el = defs.el,\n      index = 0, id;\n\n  for (id in defs.gradient) {\n    if (!el) defs.el = (el = domChild(svg, 0, 'defs', ns));\n    updateGradient(el, defs.gradient[id], index++);\n  }\n\n  for (id in defs.clipping) {\n    if (!el) defs.el = (el = domChild(svg, 0, 'defs', ns));\n    updateClipping(el, defs.clipping[id], index++);\n  }\n\n  // clean-up\n  if (el) {\n    if (index === 0) {\n      svg.removeChild(el);\n      defs.el = null;\n    } else {\n      domClear(el, index);\n    }\n  }\n};\n\nfunction updateGradient(el, grad, index) {\n  var i, n, stop;\n\n  el = domChild(el, index, 'linearGradient', ns);\n  el.setAttribute('id', grad.id);\n  el.setAttribute('x1', grad.x1);\n  el.setAttribute('x2', grad.x2);\n  el.setAttribute('y1', grad.y1);\n  el.setAttribute('y2', grad.y2);\n\n  for (i=0, n=grad.stops.length; i<n; ++i) {\n    stop = domChild(el, i, 'stop', ns);\n    stop.setAttribute('offset', grad.stops[i].offset);\n    stop.setAttribute('stop-color', grad.stops[i].color);\n  }\n  domClear(el, i);\n}\n\nfunction updateClipping(el, clip, index) {\n  var rect;\n\n  el = domChild(el, index, 'clipPath', ns);\n  el.setAttribute('id', clip.id);\n  rect = domChild(el, 0, 'rect', ns);\n  rect.setAttribute('x', 0);\n  rect.setAttribute('y', 0);\n  rect.setAttribute('width', clip.width);\n  rect.setAttribute('height', clip.height);\n}\n\nprototype$8._resetDefs = function() {\n  var def = this._defs;\n  def.clip_id = 1;\n  def.gradient = {};\n  def.clipping = {};\n};\n\n\n// -- Manage rendering of items marked as dirty --\n\nprototype$8.dirty = function(item) {\n  if (item.dirty !== this._dirtyID) {\n    item.dirty = this._dirtyID;\n    this._dirty.push(item);\n  }\n};\n\nprototype$8.isDirty = function(item) {\n  return this._dirtyAll\n    || !item._svg\n    || item.dirty === this._dirtyID;\n};\n\nprototype$8._dirtyCheck = function() {\n  this._dirtyAll = true;\n  var items = this._dirty;\n  if (!items.length) return true;\n\n  var id = ++this._dirtyID,\n      item, mark, type, mdef, i, n, o;\n\n  for (i=0, n=items.length; i<n; ++i) {\n    item = items[i];\n    mark = item.mark;\n\n    if (mark.marktype !== type) {\n      // memoize mark instance lookup\n      type = mark.marktype;\n      mdef = Marks[type];\n    }\n\n    if (mark.zdirty && mark.dirty !== id) {\n      this._dirtyAll = false;\n      mark.dirty = id;\n      dirtyParents(mark.group, id);\n    }\n\n    if (item.exit) { // EXIT\n      if (mdef.nested && mark.items.length) {\n        // if nested mark with remaining points, update instead\n        o = mark.items[0];\n        if (o._svg) this._update(mdef, o._svg, o);\n      } else if (item._svg) {\n        // otherwise remove from DOM\n        item._svg.parentNode.removeChild(item._svg);\n      }\n      item._svg = null;\n      continue;\n    }\n\n    item = (mdef.nested ? mark.items[0] : item);\n    if (item._update === id) continue; // already visited\n\n    if (!item._svg || !item._svg.ownerSVGElement) {\n      // ENTER\n      this._dirtyAll = false;\n      dirtyParents(item, id);\n    } else {\n      // IN-PLACE UPDATE\n      this._update(mdef, item._svg, item);\n    }\n    item._update = id;\n  }\n  return !this._dirtyAll;\n};\n\nfunction dirtyParents(item, id) {\n  for (; item && item.dirty !== id; item=item.mark.group) {\n    item.dirty = id;\n    if (item.mark && item.mark.dirty !== id) {\n      item.mark.dirty = id;\n    } else return;\n  }\n}\n\n\n// -- Construct & maintain scenegraph to SVG mapping ---\n\n// Draw a mark container.\nprototype$8.draw = function(el, scene, prev) {\n  if (!this.isDirty(scene)) return scene._svg;\n\n  var renderer = this,\n      mdef = Marks[scene.marktype],\n      events = scene.interactive === false ? 'none' : null,\n      isGroup = mdef.tag === 'g',\n      sibling = null,\n      i = 0,\n      parent;\n\n  parent = bind(scene, el, prev, 'g');\n  parent.setAttribute('class', cssClass(scene));\n  if (!isGroup && events) {\n    parent.style.setProperty('pointer-events', events);\n  }\n  if (scene.clip) {\n    parent.setAttribute('clip-path', clip(renderer, scene, scene.group));\n  }\n\n  function process(item) {\n    var dirty = renderer.isDirty(item),\n        node = bind(item, parent, sibling, mdef.tag);\n\n    if (dirty) {\n      renderer._update(mdef, node, item);\n      if (isGroup) recurse(renderer, node, item);\n    }\n\n    sibling = node;\n    ++i;\n  }\n\n  if (mdef.nested) {\n    if (scene.items.length) process(scene.items[0]);\n  } else {\n    visit(scene, process);\n  }\n\n  domClear(parent, i);\n  return parent;\n};\n\n// Recursively process group contents.\nfunction recurse(renderer, el, group) {\n  el = el.lastChild;\n  var prev, idx = 0;\n\n  visit(group, function(item) {\n    prev = renderer.draw(el, item, prev);\n    ++idx;\n  });\n\n  // remove any extraneous DOM elements\n  domClear(el, 1 + idx);\n}\n\n// Bind a scenegraph item to an SVG DOM element.\n// Create new SVG elements as needed.\nfunction bind(item, el, sibling, tag) {\n  var node = item._svg, doc;\n\n  // create a new dom node if needed\n  if (!node) {\n    doc = el.ownerDocument;\n    node = domCreate(doc, tag, ns);\n    item._svg = node;\n\n    if (item.mark) {\n      node.__data__ = item;\n      node.__values__ = {fill: 'default'};\n\n      // if group, create background and foreground elements\n      if (tag === 'g') {\n        var bg = domCreate(doc, 'path', ns);\n        bg.setAttribute('class', 'background');\n        node.appendChild(bg);\n        bg.__data__ = item;\n\n        var fg = domCreate(doc, 'g', ns);\n        node.appendChild(fg);\n        fg.__data__ = item;\n      }\n    }\n  }\n\n  if (doc || node.previousSibling !== sibling) {\n    el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);\n  }\n\n  return node;\n}\n\n\n// -- Set attributes & styles on SVG elements ---\n\nvar element = null;\nvar values = null;\n// temp var for current values hash\n\n// Extra configuration for certain mark types\nvar mark_extras = {\n  group: function(mdef, el, item) {\n    values = el.__values__; // use parent's values hash\n\n    element = el.childNodes[1];\n    mdef.foreground(emit, item, this);\n\n    element = el.childNodes[0];\n    mdef.background(emit, item, this);\n\n    var value = item.mark.interactive === false ? 'none' : null;\n    if (value !== values.events) {\n      element.style.setProperty('pointer-events', value);\n      values.events = value;\n    }\n  },\n  text: function(mdef, el, item) {\n    var str = textValue(item);\n    if (str !== values.text) {\n      el.textContent = str;\n      values.text = str;\n    }\n    str = font(item);\n    if (str !== values.font) {\n      el.style.setProperty('font', str);\n      values.font = str;\n    }\n  }\n};\n\nprototype$8._update = function(mdef, el, item) {\n  // set dom element and values cache\n  // provides access to emit method\n  element = el;\n  values = el.__values__;\n\n  // apply svg attributes\n  mdef.attr(emit, item, this);\n\n  // some marks need special treatment\n  var extra = mark_extras[mdef.type];\n  if (extra) extra.call(this, mdef, el, item);\n\n  // apply svg css styles\n  // note: element may be modified by 'extra' method\n  this.style(element, item);\n};\n\nfunction emit(name, value, ns) {\n  // early exit if value is unchanged\n  if (value === values[name]) return;\n\n  if (value != null) {\n    // if value is provided, update DOM attribute\n    if (ns) {\n      element.setAttributeNS(ns, name, value);\n    } else {\n      element.setAttribute(name, value);\n    }\n  } else {\n    // else remove DOM attribute\n    if (ns) {\n      element.removeAttributeNS(ns, name);\n    } else {\n      element.removeAttribute(name);\n    }\n  }\n\n  // note current value for future comparison\n  values[name] = value;\n}\n\nprototype$8.style = function(el, o) {\n  if (o == null) return;\n  var i, n, prop, name, value;\n\n  for (i=0, n=styleProperties.length; i<n; ++i) {\n    prop = styleProperties[i];\n    value = o[prop];\n    if (value === values[prop]) continue;\n\n    name = styles[prop];\n    if (value == null) {\n      if (name === 'fill') {\n        el.style.setProperty(name, 'none');\n      } else {\n        el.style.removeProperty(name);\n      }\n    } else {\n      if (value.id) {\n        // ensure definition is included\n        this._defs.gradient[value.id] = value;\n        value = 'url(' + href() + '#' + value.id + ')';\n      }\n      el.style.setProperty(name, value+'');\n    }\n\n    values[prop] = value;\n  }\n};\n\nfunction href() {\n  return typeof window !== 'undefined' ? window.location.href : '';\n}\n\nfunction SVGStringRenderer(loader) {\n  Renderer.call(this, loader);\n\n  this._text = {\n    head: '',\n    root: '',\n    foot: '',\n    defs: '',\n    body: ''\n  };\n\n  this._defs = {\n    clip_id:  1,\n    gradient: {},\n    clipping: {}\n  };\n}\n\nvar prototype$9 = inherits(SVGStringRenderer, Renderer);\nvar base$2 = Renderer.prototype;\n\nprototype$9.resize = function(width, height, origin) {\n  base$2.resize.call(this, width, height, origin);\n  var o = this._origin,\n      t = this._text;\n\n  var attr = {\n    'class':  'marks',\n    'width':  this._width,\n    'height': this._height,\n    'viewBox': '0 0 ' + this._width + ' ' + this._height\n  };\n  for (var key in metadata) {\n    attr[key] = metadata[key];\n  }\n\n  t.head = openTag('svg', attr);\n  t.root = openTag('g', {\n    transform: 'translate(' + o + ')'\n  });\n  t.foot = closeTag('g') + closeTag('svg');\n\n  return this;\n};\n\nprototype$9.svg = function() {\n  var t = this._text;\n  return t.head + t.defs + t.root + t.body + t.foot;\n};\n\nprototype$9._render = function(scene) {\n  this._text.body = this.mark(scene);\n  this._text.defs = this.buildDefs();\n  return this;\n};\n\nprototype$9.reset = function() {\n  this._defs.clip_id = 0;\n  return this;\n};\n\nprototype$9.buildDefs = function() {\n  var all = this._defs,\n      defs = '',\n      i, id, def, stops;\n\n  for (id in all.gradient) {\n    def = all.gradient[id];\n    stops = def.stops;\n\n    defs += openTag('linearGradient', {\n      id: id,\n      x1: def.x1,\n      x2: def.x2,\n      y1: def.y1,\n      y2: def.y2\n    });\n\n    for (i=0; i<stops.length; ++i) {\n      defs += openTag('stop', {\n        offset: stops[i].offset,\n        'stop-color': stops[i].color\n      }) + closeTag('stop');\n    }\n\n    defs += closeTag('linearGradient');\n  }\n\n  for (id in all.clipping) {\n    def = all.clipping[id];\n\n    defs += openTag('clipPath', {id: id});\n\n    defs += openTag('rect', {\n      x: 0,\n      y: 0,\n      width: def.width,\n      height: def.height\n    }) + closeTag('rect');\n\n    defs += closeTag('clipPath');\n  }\n\n  return (defs.length > 0) ? openTag('defs') + defs + closeTag('defs') : '';\n};\n\nvar object;\n\nfunction emit$1(name, value, ns, prefixed) {\n  object[prefixed || name] = value;\n}\n\nprototype$9.attributes = function(attr, item) {\n  object = {};\n  attr(emit$1, item, this);\n  return object;\n};\n\nprototype$9.href = function(item) {\n  var that = this,\n      href = item.href,\n      attr;\n\n  if (href) {\n    if (attr = that._hrefs && that._hrefs[href]) {\n      return attr;\n    } else {\n      that.sanitizeURL(href).then(function(attr) {\n        // rewrite to use xlink namespace\n        // note that this will be deprecated in SVG 2.0\n        attr['xlink:href'] = attr.href;\n        attr.href = null;\n        (that._hrefs || (that._hrefs = {}))[href] = attr;\n      });\n    }\n  }\n  return null;\n};\n\nprototype$9.mark = function(scene) {\n  var renderer = this,\n      mdef = Marks[scene.marktype],\n      tag  = mdef.tag,\n      defs = this._defs,\n      str = '',\n      style;\n\n  if (tag !== 'g' && scene.interactive === false) {\n    style = 'style=\"pointer-events: none;\"';\n  }\n\n  // render opening group tag\n  str += openTag('g', {\n    'class': cssClass(scene),\n    'clip-path': scene.clip ? clip(renderer, scene, scene.group) : null\n  }, style);\n\n  // render contained elements\n  function process(item) {\n    var href = renderer.href(item);\n    if (href) str += openTag('a', href);\n\n    style = (tag !== 'g') ? applyStyles(item, scene, tag, defs) : null;\n    str += openTag(tag, renderer.attributes(mdef.attr, item), style);\n\n    if (tag === 'text') {\n      str += escape_text(textValue(item));\n    } else if (tag === 'g') {\n      str += openTag('path', renderer.attributes(mdef.background, item),\n        applyStyles(item, scene, 'bgrect', defs)) + closeTag('path');\n\n      str += openTag('g', renderer.attributes(mdef.foreground, item))\n        + renderer.markGroup(item)\n        + closeTag('g');\n    }\n\n    str += closeTag(tag);\n    if (href) str += closeTag('a');\n  }\n\n  if (mdef.nested) {\n    if (scene.items && scene.items.length) process(scene.items[0]);\n  } else {\n    visit(scene, process);\n  }\n\n  // render closing group tag\n  return str + closeTag('g');\n};\n\nprototype$9.markGroup = function(scene) {\n  var renderer = this,\n      str = '';\n\n  visit(scene, function(item) {\n    str += renderer.mark(item);\n  });\n\n  return str;\n};\n\nfunction applyStyles(o, mark, tag, defs) {\n  if (o == null) return '';\n  var i, n, prop, name, value, s = '';\n\n  if (tag === 'bgrect' && mark.interactive === false) {\n    s += 'pointer-events: none;';\n  }\n\n  if (tag === 'text') {\n    s += 'font: ' + font(o) + ';';\n  }\n\n  for (i=0, n=styleProperties.length; i<n; ++i) {\n    prop = styleProperties[i];\n    name = styles[prop];\n    value = o[prop];\n\n    if (value == null) {\n      if (name === 'fill') {\n        s += (s.length ? ' ' : '') + 'fill: none;';\n      }\n    } else {\n      if (value.id) {\n        // ensure definition is included\n        defs.gradient[value.id] = value;\n        value = 'url(#' + value.id + ')';\n      }\n      s += (s.length ? ' ' : '') + name + ': ' + value + ';';\n    }\n  }\n\n  return s ? 'style=\"' + s + '\"' : null;\n}\n\nfunction escape_text(s) {\n  return s.replace(/&/g, '&amp;')\n          .replace(/</g, '&lt;')\n          .replace(/>/g, '&gt;');\n}\n\nvar Canvas$2 = 'canvas';\nvar PNG = 'png';\nvar SVG = 'svg';\nvar None$1 = 'none';\n\nvar RenderType = {\n  Canvas: Canvas$2,\n  PNG:    PNG,\n  SVG:    SVG,\n  None:   None$1\n};\n\nvar modules = {};\n\nmodules[Canvas$2] = modules[PNG] = {\n  renderer: CanvasRenderer,\n  headless: CanvasRenderer,\n  handler:  CanvasHandler\n};\n\nmodules[SVG] = {\n  renderer: SVGRenderer,\n  headless: SVGStringRenderer,\n  handler:  SVGHandler\n};\n\nmodules[None$1] = {};\n\nfunction renderModule(name, _) {\n  name = String(name || '').toLowerCase();\n  return arguments.length > 1 ? (modules[name] = _, this) : modules[name];\n}\n\nvar TOLERANCE = 1e-9;\n\nfunction sceneEqual(a, b, key) {\n  return (a === b) ? true\n    : (key === 'path') ? pathEqual(a, b)\n    : (a instanceof Date && b instanceof Date) ? +a === +b\n    : (isNumber(a) && isNumber(b)) ? Math.abs(a - b) <= TOLERANCE\n    : (!a || !b || !isObject(a) && !isObject(b)) ? a == b\n    : (a == null || b == null) ? false\n    : objectEqual(a, b);\n}\n\nfunction pathEqual(a, b) {\n  return sceneEqual(pathParse(a), pathParse(b));\n}\n\nfunction objectEqual(a, b) {\n  var ka = Object.keys(a),\n      kb = Object.keys(b),\n      key, i;\n\n  if (ka.length !== kb.length) return false;\n\n  ka.sort();\n  kb.sort();\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i]) return false;\n  }\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!sceneEqual(a[key], b[key], key)) return false;\n  }\n\n  return typeof a === typeof b;\n}\n\nfunction UniqueList(idFunc) {\n  var $ = idFunc || identity,\n      list = [],\n      ids = {};\n\n  list.add = function(_) {\n    var id = $(_);\n    if (!ids[id]) {\n      ids[id] = 1;\n      list.push(_);\n    }\n    return list;\n  };\n\n  list.remove = function(_) {\n    var id = $(_), idx;\n    if (ids[id]) {\n      ids[id] = 0;\n      if ((idx = list.indexOf(_)) >= 0) {\n        list.splice(idx, 1);\n      }\n    }\n    return list;\n  };\n\n  return list;\n}\n\nvar TUPLE_ID = 1;\n\n/**\n * Returns the id of a tuple.\n * @param {Tuple} t - The input tuple.\n * @return the tuple id.\n */\nfunction tupleid(t) {\n  return t._id;\n}\n\n/**\n * Copy the values of one tuple to another (ignoring id and prev fields).\n * @param {Tuple} t - The tuple to copy from.\n * @param {Tuple} c - The tuple to write to.\n * @return The re-written tuple, same as the argument 'c'.\n */\nfunction copy(t, c) {\n  for (var k in t) {\n    if (k !== '_id') c[k] = t[k];\n  }\n  return c;\n}\n\n/**\n * Ingest an object or value as a data tuple.\n * If the input value is an object, an id field will be added to it. For\n * efficiency, the input object is modified directly. A copy is not made.\n * If the input value is a literal, it will be wrapped in a new object\n * instance, with the value accessible as the 'data' property.\n * @param datum - The value to ingest.\n * @return {Tuple} The ingested data tuple.\n */\nfunction ingest(datum) {\n  var tuple = (datum === Object(datum)) ? datum : {data: datum};\n  if (!tuple._id) tuple._id = ++TUPLE_ID;\n  return tuple;\n}\n\n/**\n * Given a source tuple, return a derived copy.\n * @param {object} t - The source tuple.\n * @return {object} The derived tuple.\n */\nfunction derive(t) {\n  return ingest(copy(t, {}));\n}\n\n/**\n * Rederive a derived tuple by copying values from the source tuple.\n * @param {object} t - The source tuple.\n * @param {object} d - The derived tuple.\n * @return {object} The derived tuple.\n */\nfunction rederive(t, d) {\n  return copy(t, d);\n}\n\n/**\n * Replace an existing tuple with a new tuple.\n * The existing tuple will become the previous value of the new.\n * @param {object} t - The existing data tuple.\n * @param {object} d - The new tuple that replaces the old.\n * @return {object} The new tuple.\n */\nfunction replace(t, d) {\n  return d._id = t._id, d;\n}\n\nfunction isChangeSet(v) {\n  return v && v.constructor === changeset;\n}\n\nfunction changeset() {\n  var add = [],  // insert tuples\n      rem = [],  // remove tuples\n      mod = [],  // modify tuples\n      remp = [], // remove by predicate\n      modp = []; // modify by predicate\n\n  return {\n    constructor: changeset,\n    insert: function(t) {\n      var d = array(t), i = 0, n = d.length;\n      for (; i<n; ++i) add.push(d[i]);\n      return this;\n    },\n    remove: function(t) {\n      var a = isFunction(t) ? remp : rem,\n          d = array(t), i = 0, n = d.length;\n      for (; i<n; ++i) a.push(d[i]);\n      return this;\n    },\n    modify: function(t, field, value) {\n      var m = {field: field, value: constant(value)};\n      if (isFunction(t)) m.filter = t, modp.push(m);\n      else m.tuple = t, mod.push(m);\n      return this;\n    },\n    encode: function(t, set) {\n      mod.push({tuple: t, field: set});\n      return this;\n    },\n    pulse: function(pulse, tuples) {\n      var out, i, n, m, f, t, id;\n\n      // add\n      for (i=0, n=add.length; i<n; ++i) {\n        pulse.add.push(ingest(add[i]));\n      }\n\n      // remove\n      for (out={}, i=0, n=rem.length; i<n; ++i) {\n        t = rem[i];\n        out[t._id] = t;\n      }\n      for (i=0, n=remp.length; i<n; ++i) {\n        f = remp[i];\n        tuples.forEach(function(t) {\n          if (f(t)) out[t._id] = t;\n        });\n      }\n      for (id in out) pulse.rem.push(out[id]);\n\n      // modify\n      function modify(t, f, v) {\n        if (v) t[f] = v(t); else pulse.encode = f;\n        out[t._id] = t;\n      }\n      for (out={}, i=0, n=mod.length; i<n; ++i) {\n        m = mod[i];\n        modify(m.tuple, m.field, m.value);\n        pulse.modifies(m.field);\n      }\n      for (i=0, n=modp.length; i<n; ++i) {\n        m = modp[i];\n        f = m.filter;\n        tuples.forEach(function(t) {\n          if (f(t)) modify(t, m.field, m.value);\n        });\n        pulse.modifies(m.field);\n      }\n      for (id in out) pulse.mod.push(out[id]);\n\n      return pulse;\n    }\n  };\n}\n\nvar CACHE = '_:mod:_';\n\n/**\n * Hash that tracks modifications to assigned values.\n * Callers *must* use the set method to update values.\n */\nfunction Parameters() {\n  Object.defineProperty(this, CACHE, {writable:true, value: {}});\n}\n\nvar prototype$12 = Parameters.prototype;\n\n/**\n * Set a parameter value. If the parameter value changes, the parameter\n * will be recorded as modified.\n * @param {string} name - The parameter name.\n * @param {number} index - The index into an array-value parameter. Ignored if\n *   the argument is undefined, null or less than zero.\n * @param {*} value - The parameter value to set.\n * @param {boolean} [force=false] - If true, records the parameter as modified\n *   even if the value is unchanged.\n * @return {Parameters} - This parameter object.\n */\nprototype$12.set = function(name, index, value, force) {\n  var o = this,\n      v = o[name],\n      mod = o[CACHE];\n\n  if (index != null && index >= 0) {\n    if (v[index] !== value || force) {\n      v[index] = value;\n      mod[index + ':' + name] = -1;\n      mod[name] = -1;\n    }\n  } else if (v !== value || force) {\n    o[name] = value;\n    mod[name] = isArray(value) ? value.length : -1;\n  }\n\n  return o;\n};\n\n/**\n * Tests if one or more parameters has been modified. If invoked with no\n * arguments, returns true if any parameter value has changed. If the first\n * argument is array, returns trues if any parameter name in the array has\n * changed. Otherwise, tests if the given name and optional array index has\n * changed.\n * @param {string} name - The parameter name to test.\n * @param {number} [index=undefined] - The parameter array index to test.\n * @return {boolean} - Returns true if a queried parameter was modified.\n */\nprototype$12.modified = function(name, index) {\n  var mod = this[CACHE], k;\n  if (!arguments.length) {\n    for (k in mod) { if (mod[k]) return true; }\n    return false;\n  } else if (isArray(name)) {\n    for (k=0; k<name.length; ++k) {\n      if (mod[name[k]]) return true;\n    }\n    return false;\n  }\n  return (index != null && index >= 0)\n    ? (index < mod[name] || !!mod[index + ':' + name])\n    : !!mod[name];\n};\n\n/**\n * Clears the modification records. After calling this method,\n * all parameters are considered unmodified.\n */\nprototype$12.clear = function() {\n  return this[CACHE] = {}, this;\n};\n\nvar OP_ID = 0;\nvar PULSE = 'pulse';\nvar NO_PARAMS = new Parameters();\n\n// Boolean Flags\nvar SKIP     = 1;\nvar MODIFIED = 2;\n/**\n * An Operator is a processing node in a dataflow graph.\n * Each operator stores a value and an optional value update function.\n * Operators can accept a hash of named parameters. Parameter values can\n * either be direct (JavaScript literals, arrays, objects) or indirect\n * (other operators whose values will be pulled dynamically). Operators\n * included as parameters will have this operator added as a dependency.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {function(object, Pulse)} [update] - An update function. Upon\n *   evaluation of this operator, the update function will be invoked and the\n *   return value will be used as the new value of this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @see parameters\n */\nfunction Operator(init, update, params, react) {\n  this.id = ++OP_ID;\n  this.value = init;\n  this.stamp = -1;\n  this.rank = -1;\n  this.qrank = -1;\n  this.flags = 0;\n\n  if (update) {\n    this._update = update;\n  }\n  if (params) this.parameters(params, react);\n}\n\nvar prototype$11 = Operator.prototype;\n\n/**\n * Returns a list of target operators dependent on this operator.\n * If this list does not exist, it is created and then returned.\n * @return {UniqueList}\n */\nprototype$11.targets = function() {\n  return this._targets || (this._targets = UniqueList(id));\n};\n\n/**\n * Sets the value of this operator.\n * @param {*} value - the value to set.\n * @return {Number} Returns 1 if the operator value has changed\n *   according to strict equality, returns 0 otherwise.\n */\nprototype$11.set = function(value) {\n  return this.value !== value ? (this.value = value, 1) : 0;\n};\n\nfunction flag(bit) {\n  return function(state) {\n    var f = this.flags;\n    if (arguments.length === 0) return !!(f & bit);\n    this.flags = state ? (f | bit) : (f & ~bit);\n    return this;\n  };\n}\n\n/**\n * Indicates that operator evaluation should be skipped on the next pulse.\n * This operator will still propagate incoming pulses, but its update function\n * will not be invoked. The skip flag is reset after every pulse, so calling\n * this method will affect processing of the next pulse only.\n */\nprototype$11.skip = flag(SKIP);\n\n/**\n * Indicates that this operator's value has been modified on its most recent\n * pulse. Normally modification is checked via strict equality; however, in\n * some cases it is more efficient to update the internal state of an object.\n * In those cases, the modified flag can be used to trigger propagation. Once\n * set, the modification flag persists across pulses until unset. The flag can\n * be used with the last timestamp to test if a modification is recent.\n */\nprototype$11.modified = flag(MODIFIED);\n\n/**\n * Sets the parameters for this operator. The parameter values are analyzed for\n * operator instances. If found, this operator will be added as a dependency\n * of the parameterizing operator. Operator values are dynamically marshalled\n * from each operator parameter prior to evaluation. If a parameter value is\n * an array, the array will also be searched for Operator instances. However,\n * the search does not recurse into sub-arrays or object properties.\n * @param {object} params - A hash of operator parameters.\n * @param {boolean} [react=true] - A flag indicating if this operator should\n *   automatically update (react) when parameter values change. In other words,\n *   this flag determines if the operator registers itself as a listener on\n *   any upstream operators included in the parameters.\n * @return {Operator[]} - An array of upstream dependencies.\n */\nprototype$11.parameters = function(params, react) {\n  react = react !== false;\n  var self = this,\n      argval = (self._argval = self._argval || new Parameters()),\n      argops = (self._argops = self._argops || []),\n      deps = [],\n      name, value, n, i;\n\n  function add(name, index, value) {\n    if (value instanceof Operator) {\n      if (value !== self) {\n        if (react) value.targets().add(self);\n        deps.push(value);\n      }\n      argops.push({op:value, name:name, index:index});\n    } else {\n      argval.set(name, index, value);\n    }\n  }\n\n  for (name in params) {\n    value = params[name];\n\n    if (name === PULSE) {\n      array(value).forEach(function(op) {\n        if (!(op instanceof Operator)) {\n          error('Pulse parameters must be operator instances.');\n        } else if (op !== self) {\n          op.targets().add(self);\n          deps.push(op);\n        }\n      });\n      self.source = value;\n    } else if (isArray(value)) {\n      argval.set(name, -1, Array(n = value.length));\n      for (i=0; i<n; ++i) add(name, i, value[i]);\n    } else {\n      add(name, -1, value);\n    }\n  }\n\n  this.marshall().clear(); // initialize values\n  return deps;\n};\n\n/**\n * Internal method for marshalling parameter values.\n * Visits each operator dependency to pull the latest value.\n * @return {Parameters} A Parameters object to pass to the update function.\n */\nprototype$11.marshall = function(stamp) {\n  var argval = this._argval || NO_PARAMS,\n      argops = this._argops, item, i, n, op, mod;\n\n  if (argops && (n = argops.length)) {\n    for (i=0; i<n; ++i) {\n      item = argops[i];\n      op = item.op;\n      mod = op.modified() && op.stamp === stamp;\n      argval.set(item.name, item.index, op.value, mod);\n    }\n  }\n  return argval;\n};\n\n/**\n * Delegate method to perform operator processing.\n * Subclasses can override this method to perform custom processing.\n * By default, it marshalls parameters and calls the update function\n * if that function is defined. If the update function does not\n * change the operator value then StopPropagation is returned.\n * If no update function is defined, this method does nothing.\n * @param {Pulse} pulse - the current dataflow pulse.\n * @return The output pulse or StopPropagation. A falsy return value\n *   (including undefined) will let the input pulse pass through.\n */\nprototype$11.evaluate = function(pulse) {\n  if (this._update) {\n    var params = this.marshall(pulse.stamp),\n        v = this._update(params, pulse);\n\n    params.clear();\n    if (v !== this.value) {\n      this.value = v;\n    } else if (!this.modified()) {\n      return pulse.StopPropagation;\n    }\n  }\n};\n\n/**\n * Run this operator for the current pulse. If this operator has already\n * been run at (or after) the pulse timestamp, returns StopPropagation.\n * Internally, this method calls {@link evaluate} to perform processing.\n * If {@link evaluate} returns a falsy value, the input pulse is returned.\n * This method should NOT be overridden, instead overrride {@link evaluate}.\n * @param {Pulse} pulse - the current dataflow pulse.\n * @return the output pulse for this operator (or StopPropagation)\n */\nprototype$11.run = function(pulse) {\n  if (pulse.stamp <= this.stamp) return pulse.StopPropagation;\n  var rv = this.skip() ? (this.skip(false), 0) : this.evaluate(pulse);\n  return this.stamp = pulse.stamp, this.pulse = rv || pulse;\n};\n\n/**\n * Add an operator to the dataflow graph. This function accepts a\n * variety of input argument types. The basic signature supports an\n * initial value, update function and parameters. If the first parameter\n * is an Operator instance, it will be added directly. If it is a\n * constructor for an Operator subclass, a new instance will be instantiated.\n * Otherwise, if the first parameter is a function instance, it will be used\n * as the update function and a null initial value is assumed.\n * @param {*} init - One of: the operator to add, the initial value of\n *   the operator, an operator class to instantiate, or an update function.\n * @param {function} [update] - The operator update function.\n * @param {object} [params] - The operator parameters.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @return {Operator} - The added operator.\n */\nfunction add$1(init, update, params, react) {\n  var shift = 1,\n      op = (init instanceof Operator) ? init\n        : init && init.prototype instanceof Operator ? new init()\n        : isFunction(init) ? new Operator(null, init)\n        : (shift = 0, new Operator(init, update));\n\n  this.rank(op);\n  if (shift) react = params, params = update;\n  if (params) this.connect(op, op.parameters(params, react));\n  this.touch(op);\n\n  return op;\n}\n\n/**\n * Connect a target operator as a dependent of source operators.\n * If necessary, this method will rerank the target operator and its\n * dependents to ensure propagation proceeds in a topologically sorted order.\n * @param {Operator} target - The target operator.\n * @param {Array<Operator>} - The source operators that should propagate\n *   to the target operator.\n */\nfunction connect(target, sources) {\n  var targetRank = target.rank, i, n;\n\n  for (i=0, n=sources.length; i<n; ++i) {\n    if (targetRank < sources[i].rank) {\n      this.rerank(target);\n      return;\n    }\n  }\n}\n\nvar STREAM_ID = 0;\n\n/**\n * Models an event stream.\n * @constructor\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @param {function(Object)} [receive] - Event callback function to invoke\n *   upon receipt of a new event. Use to override standard event processing.\n */\nfunction EventStream(filter, apply, receive) {\n  this.id = ++STREAM_ID;\n  this.value = null;\n  if (receive) this.receive = receive;\n  if (filter) this._filter = filter;\n  if (apply) this._apply = apply;\n}\n\n/**\n * Creates a new event stream instance with the provided\n * (optional) filter, apply and receive functions.\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @see EventStream\n */\nfunction stream(filter, apply, receive) {\n  return new EventStream(filter, apply, receive);\n}\n\nvar prototype$13 = EventStream.prototype;\n\nprototype$13._filter = truthy;\n\nprototype$13._apply = identity;\n\nprototype$13.targets = function() {\n  return this._targets || (this._targets = UniqueList(id));\n};\n\nprototype$13.consume = function(_) {\n  if (!arguments.length) return !!this._consume;\n  return (this._consume = !!_, this);\n};\n\nprototype$13.receive = function(evt) {\n  if (this._filter(evt)) {\n    var val = (this.value = this._apply(evt)),\n        trg = this._targets,\n        n = trg ? trg.length : 0,\n        i = 0;\n\n    for (; i<n; ++i) trg[i].receive(val);\n\n    if (this._consume) {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n  }\n};\n\nprototype$13.filter = function(filter) {\n  var s = stream(filter);\n  return (this.targets().add(s), s);\n};\n\nprototype$13.apply = function(apply) {\n  var s = stream(null, apply);\n  return (this.targets().add(s), s);\n};\n\nprototype$13.merge = function() {\n  var s = stream();\n\n  this.targets().add(s);\n  for (var i=0, n=arguments.length; i<n; ++i) {\n    arguments[i].targets().add(s);\n  }\n\n  return s;\n};\n\nprototype$13.throttle = function(pause) {\n  var t = -1;\n  return this.filter(function() {\n    var now = Date.now();\n    return (now - t) > pause ? (t = now, 1) : 0;\n  });\n};\n\nprototype$13.debounce = function(delay) {\n  var s = stream(), evt = null, tid = null;\n\n  function callback() {\n    var df = evt.dataflow;\n    s.receive(evt);\n    evt = null; tid = null;\n    if (df && df.run) df.run();\n  }\n\n  this.targets().add(stream(null, null, function(e) {\n    evt = e;\n    if (tid) clearTimeout(tid);\n    tid = setTimeout(callback, delay);\n  }));\n\n  return s;\n};\n\nprototype$13.between = function(a, b) {\n  var active = false;\n  a.targets().add(stream(null, null, function() { active = true; }));\n  b.targets().add(stream(null, null, function() { active = false; }));\n  return this.filter(function() { return active; });\n};\n\n/**\n * Create a new event stream from an event source.\n * @param {object} source - The event source to monitor. The input must\n *  support the addEventListener method.\n * @param {string} type - The event type.\n * @param {function(object): boolean} [filter] - Event filter function.\n * @param {function(object): *} [apply] - Event application function.\n *   If provided, this function will be invoked and the result will be\n *   used as the downstream event value.\n * @return {EventStream}\n */\nfunction events(source, type, filter, apply) {\n  var df = this,\n      s = stream(filter, apply),\n      send = function(e) {\n        e.dataflow = df;\n        s.receive(e);\n        df.run();\n      },\n      sources;\n\n  if (typeof source === 'string' && typeof document !== 'undefined') {\n    sources = document.querySelectorAll(source);\n  } else {\n    sources = array(source);\n  }\n\n  for (var i=0, n=sources.length; i<n; ++i) {\n    sources[i].addEventListener(type, send);\n  }\n\n  return s;\n}\n\nvar SKIP$1 = {skip: true};\n\n/**\n * Perform operator updates in response to events. Applies an\n * update function to compute a new operator value. If the update function\n * returns a {@link ChangeSet}, the operator will be pulsed with those tuple\n * changes. Otherwise, the operator value will be updated to the return value.\n * @param {EventStream|Operator} source - The event source to react to.\n *   This argument can be either an EventStream or an Operator.\n * @param {Operator|function(object):Operator} target - The operator to update.\n *   This argument can either be an Operator instance or (if the source\n *   argument is an EventStream), a function that accepts an event object as\n *   input and returns an Operator to target.\n * @param {function(Parameters,Event): *} [update] - Optional update function\n *   to compute the new operator value, or a literal value to set. Update\n *   functions expect to receive a parameter object and event as arguments.\n *   This function can either return a new operator value or (if the source\n *   argument is an EventStream) a {@link ChangeSet} instance to pulse\n *   the target operator with tuple changes.\n * @param {object} [params] - The update function parameters.\n * @param {object} [options] - Additional options hash. If not overridden,\n *   updated operators will be skipped by default.\n * @param {boolean} [options.skip] - If true, the operator will\n *  be skipped: it will not be evaluated, but its dependents will be.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @return {Dataflow}\n */\nfunction on(source, target, update, params, options) {\n  var fn = source instanceof Operator ? onOperator : onStream;\n  return fn(this, source, target, update, params, options), this;\n}\n\nfunction onStream(df, stream, target, update, params, options) {\n  var opt = extend({}, options, SKIP$1), func, op;\n\n  if (!isFunction(target)) target = constant(target);\n\n  if (update === undefined) {\n    func = function(e) {\n      df.touch(target(e));\n    };\n  } else if (isFunction(update)) {\n    op = new Operator(null, update, params, false);\n    func = function(e) {\n      var t = target(e),\n          v = (op.evaluate(e), op.value);\n      isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);\n    };\n  } else {\n    func = function(e) {\n      df.update(target(e), update, opt);\n    };\n  }\n\n  stream.apply(func);\n}\n\nfunction onOperator(df, source, target, update, params, options) {\n  var func, op;\n\n  if (update === undefined) {\n    op = target;\n  } else {\n    func = isFunction(update) ? update : constant(update);\n    update = !target ? func : function(_, pulse) {\n      var value = func(_, pulse);\n      return target.skip()\n        ? value\n        : (target.skip(true).value = value);\n    };\n\n    op = new Operator(null, update, params, false);\n    op.modified(options && options.force);\n    op.rank = 0;\n\n    if (target) {\n      op.skip(true); // skip first invocation\n      op.value = target.value;\n      op.targets().add(target);\n    }\n  }\n\n  source.targets().add(op);\n}\n\n/**\n * Assigns a rank to an operator. Ranks are assigned in increasing order\n * by incrementing an internal rank counter.\n * @param {Operator} op - The operator to assign a rank.\n */\nfunction rank(op) {\n  op.rank = ++this._rank;\n}\n\n/**\n * Re-ranks an operator and all downstream target dependencies. This\n * is necessary when upstream depencies of higher rank are added to\n * a target operator.\n * @param {Operator} op - The operator to re-rank.\n */\nfunction rerank(op) {\n  var queue = [op],\n      cur, list, i;\n\n  while (queue.length) {\n    this.rank(cur = queue.pop());\n    if (list = cur._targets) {\n      for (i=list.length; --i >= 0;) {\n        queue.push(cur = list[i]);\n        if (cur === op) this.error('Cycle detected in dataflow graph.');\n      }\n    }\n  }\n}\n\n/**\n * Sentinel value indicating pulse propagation should stop.\n */\nvar StopPropagation = {};\n\n// Pulse visit type flags\nvar ADD       = (1 << 0);\nvar REM       = (1 << 1);\nvar MOD       = (1 << 2);\nvar ADD_REM   = ADD | REM;\nvar ADD_MOD   = ADD | MOD;\nvar ALL       = ADD | REM | MOD;\nvar REFLOW    = (1 << 3);\nvar SOURCE    = (1 << 4);\nvar NO_SOURCE = (1 << 5);\nvar NO_FIELDS = (1 << 6);\n/**\n * A Pulse enables inter-operator communication during a run of the\n * dataflow graph. In addition to the current timestamp, a pulse may also\n * contain a change-set of added, removed or modified data tuples, as well as\n * a pointer to a full backing data source. Tuple change sets may not\n * be fully materialized; for example, to prevent needless array creation\n * a change set may include larger arrays and corresponding filter functions.\n * The pulse provides a {@link visit} method to enable proper and efficient\n * iteration over requested data tuples.\n *\n * In addition, each pulse can track modification flags for data tuple fields.\n * Responsible transform operators should call the {@link modifies} method to\n * indicate changes to data fields. The {@link modified} method enables\n * querying of this modification state.\n *\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The current propagation timestamp.\n * @param {string} [encode] - An optional encoding set name, which is then\n *   accessible as Pulse.encode. Operators can respond to (or ignore) this\n *   setting as appropriate. This parameter can be used in conjunction with\n *   the Encode transform in the vega-encode module.\n */\nfunction Pulse(dataflow, stamp, encode) {\n  this.dataflow = dataflow;\n  this.stamp = stamp == null ? -1 : stamp;\n  this.add = [];\n  this.rem = [];\n  this.mod = [];\n  this.fields = null;\n  this.encode = encode || null;\n}\n\nvar prototype$14 = Pulse.prototype;\n\n/**\n * Sentinel value indicating pulse propagation should stop.\n */\nprototype$14.StopPropagation = StopPropagation;\n\n/**\n * Boolean flag indicating ADD (added) tuples.\n */\nprototype$14.ADD = ADD;\n\n/**\n * Boolean flag indicating REM (removed) tuples.\n */\nprototype$14.REM = REM;\n\n/**\n * Boolean flag indicating MOD (modified) tuples.\n */\nprototype$14.MOD = MOD;\n\n/**\n * Boolean flag indicating ADD (added) and REM (removed) tuples.\n */\nprototype$14.ADD_REM = ADD_REM;\n\n/**\n * Boolean flag indicating ADD (added) and MOD (modified) tuples.\n */\nprototype$14.ADD_MOD = ADD_MOD;\n\n/**\n * Boolean flag indicating ADD, REM and MOD tuples.\n */\nprototype$14.ALL = ALL;\n\n/**\n * Boolean flag indicating all tuples in a data source\n * except for the ADD, REM and MOD tuples.\n */\nprototype$14.REFLOW = REFLOW;\n\n/**\n * Boolean flag indicating a 'pass-through' to a\n * backing data source, ignoring ADD, REM and MOD tuples.\n */\nprototype$14.SOURCE = SOURCE;\n\n/**\n * Boolean flag indicating that source data should be\n * suppressed when creating a forked pulse.\n */\nprototype$14.NO_SOURCE = NO_SOURCE;\n\n/**\n * Boolean flag indicating that field modifications should be\n * suppressed when creating a forked pulse.\n */\nprototype$14.NO_FIELDS = NO_FIELDS;\n\n/**\n * Creates a new pulse based on the values of this pulse.\n * The dataflow, time stamp and field modification values are copied over.\n * By default, new empty ADD, REM and MOD arrays are created.\n * @param {number} flags - Integer of boolean flags indicating which (if any)\n *   tuple arrays should be copied to the new pulse. The supported flag values\n *   are ADD, REM and MOD. Array references are copied directly: new array\n *   instances are not created.\n * @return {Pulse} - The forked pulse instance.\n * @see init\n */\nprototype$14.fork = function(flags) {\n  return new Pulse(this.dataflow).init(this, flags);\n};\n\n/**\n * Returns a pulse that adds all tuples from a backing source. This is\n * useful for cases where operators are added to a dataflow after an\n * upstream data pipeline has already been processed, ensuring that\n * new operators can observe all tuples within a stream.\n * @return {Pulse} - A pulse instance with all source tuples included\n *   in the add array. If the current pulse already has all source\n *   tuples in its add array, it is returned directly. If the current\n *   pulse does not have a backing source, it is returned directly.\n */\nprototype$14.addAll = function() {\n  var p = this;\n  return (!this.source || this.source.length === this.add.length) ? p\n    : (p = new Pulse(this.dataflow).init(this), p.add = p.source, p);\n};\n\n/**\n * Initialize this pulse based on the values of another pulse. This method\n * is used internally by {@link fork} to initialize a new forked tuple.\n * The dataflow, time stamp and field modification values are copied over.\n * By default, new empty ADD, REM and MOD arrays are created.\n * @param {Pulse} src - The source pulse to copy from.\n * @param {number} flags - Integer of boolean flags indicating which (if any)\n *   tuple arrays should be copied to the new pulse. The supported flag values\n *   are ADD, REM and MOD. Array references are copied directly: new array\n *   instances are not created. By default, source data arrays are copied\n *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.\n * @return {Pulse} - Returns this Pulse instance.\n */\nprototype$14.init = function(src, flags) {\n  var p = this;\n  p.stamp = src.stamp;\n  p.encode = src.encode;\n  if (src.fields && !(flags & NO_FIELDS)) p.fields = src.fields;\n  p.add = (flags & ADD) ? (p.addF = src.addF, src.add) : (p.addF = null, []);\n  p.rem = (flags & REM) ? (p.remF = src.remF, src.rem) : (p.remF = null, []);\n  p.mod = (flags & MOD) ? (p.modF = src.modF, src.mod) : (p.modF = null, []);\n  p.source = (flags & NO_SOURCE)\n    ? (p.srcF = null, null)\n    : (p.srcF = src.srcF, src.source);\n  return p;\n};\n\n/**\n * Schedules a function to run after pulse propagation completes.\n * @param {function} func - The function to run.\n */\nprototype$14.runAfter = function(func) {\n  this.dataflow.runAfter(func);\n};\n\n/**\n * Indicates if tuples have been added, removed or modified.\n * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.\n *   Defaults to ALL, returning true if any tuple type has changed.\n * @return {boolean} - Returns true if one or more queried tuple types have\n *   changed, false otherwise.\n */\nprototype$14.changed = function(flags) {\n  var f = flags || ALL;\n  return ((f & ADD) && this.add.length)\n      || ((f & REM) && this.rem.length)\n      || ((f & MOD) && this.mod.length);\n};\n\n/**\n * Forces a \"reflow\" of tuple values, such that all tuples in the backing\n * source are added to the MOD set, unless already present in the ADD set.\n * @param {boolean} [fork=false] - If true, returns a forked copy of this\n *   pulse, and invokes reflow on that derived pulse.\n * @return {Pulse} - The reflowed pulse instance.\n */\nprototype$14.reflow = function(fork) {\n  if (fork) return this.fork(ALL).reflow();\n\n  var len = this.add.length,\n      src = this.source && this.source.length;\n  if (src && src !== len) {\n    this.mod = this.source;\n    if (len) this.filter(MOD, filter(this, ADD));\n  }\n  return this;\n};\n\n/**\n * Marks one or more data field names as modified to assist dependency\n * tracking and incremental processing by transform operators.\n * @param {string|Array<string>} _ - The field(s) to mark as modified.\n * @return {Pulse} - This pulse instance.\n */\nprototype$14.modifies = function(_) {\n  var fields = array(_),\n      hash = this.fields || (this.fields = {});\n  fields.forEach(function(f) { hash[f] = true; });\n  return this;\n};\n\n/**\n * Checks if one or more data fields have been modified during this pulse\n * propagation timestamp.\n * @param {string|Array<string>} _ - The field(s) to check for modified.\n * @return {boolean} - Returns true if any of the provided fields has been\n *   marked as modified, false otherwise.\n */\nprototype$14.modified = function(_) {\n  var fields = this.fields;\n  return !(this.mod.length && fields) ? false\n    : !arguments.length ? !!fields\n    : isArray(_) ? _.some(function(f) { return fields[f]; })\n    : fields[_];\n};\n\n/**\n * Adds a filter function to one more tuple sets. Filters are applied to\n * backing tuple arrays, to determine the actual set of tuples considered\n * added, removed or modified. They can be used to delay materialization of\n * a tuple set in order to avoid expensive array copies. In addition, the\n * filter functions can serve as value transformers: unlike standard predicate\n * function (which return boolean values), Pulse filters should return the\n * actual tuple value to process. If a tuple set is already filtered, the\n * new filter value will be appended into a conjuntive ('and') query.\n * @param {number} flags - Flags indicating the tuple set(s) to filter.\n * @param {function(*):object} filter - Filter function that will be applied\n *   to the tuple set array, and should return a data tuple if the value\n *   should be included in the tuple set, and falsy (or null) otherwise.\n * @return {Pulse} - Returns this pulse instance.\n */\nprototype$14.filter = function(flags, filter) {\n  var p = this;\n  if (flags & ADD) p.addF = addFilter(p.addF, filter);\n  if (flags & REM) p.remF = addFilter(p.remF, filter);\n  if (flags & MOD) p.modF = addFilter(p.modF, filter);\n  if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);\n  return p;\n};\n\nfunction addFilter(a, b) {\n  return a ? function(t,i) { return a(t,i) && b(t,i); } : b;\n}\n\n/**\n * Materialize one or more tuple sets in this pulse. If the tuple set(s) have\n * a registered filter function, it will be applied and the tuple set(s) will\n * be replaced with materialized tuple arrays.\n * @param {number} flags - Flags indicating the tuple set(s) to materialize.\n * @return {Pulse} - Returns this pulse instance.\n */\nprototype$14.materialize = function(flags) {\n  flags = flags || ALL;\n  var p = this;\n  if ((flags & ADD) && p.addF) { p.add = p.add.filter(p.addF); p.addF = null; }\n  if ((flags & REM) && p.remF) { p.rem = p.rem.filter(p.remF); p.remF = null; }\n  if ((flags & MOD) && p.modF) { p.mod = p.mod.filter(p.modF); p.modF = null; }\n  if ((flags & SOURCE) && p.srcF) {\n    p.source = p.source.filter(p.srcF); p.srcF = null;\n  }\n  return p;\n};\n\nfunction filter(pulse, flags) {\n  var map = {};\n  pulse.visit(flags, function(t) { map[t._id] = 1; });\n  return function(t) { return map[t._id] ? null : t; };\n}\n\n/**\n * Visit one or more tuple sets in this pulse.\n * @param {number} flags - Flags indicating the tuple set(s) to visit.\n *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source\n *   has been set).\n * @param {function(object):*} - Visitor function invoked per-tuple.\n * @return {Pulse} - Returns this pulse instance.\n */\nprototype$14.visit = function(flags, visitor) {\n  var v = visitor, src, sum;\n\n  if (flags & SOURCE) {\n    visitArray(this.source, this.srcF, v);\n    return this;\n  }\n\n  if (flags & ADD) visitArray(this.add, this.addF, v);\n  if (flags & REM) visitArray(this.rem, this.remF, v);\n  if (flags & MOD) visitArray(this.mod, this.modF, v);\n\n  if ((flags & REFLOW) && (src = this.source)) {\n    sum = this.add.length + this.mod.length;\n    if (sum === src.length) {\n      // do nothing\n    } else if (sum) {\n      visitArray(src, filter(this, ADD_MOD), v);\n    } else {\n      // if no add/rem/mod tuples, visit source\n      visitArray(src, this.srcF, v);\n    }\n  }\n\n  return this;\n};\n\nvar NO_OPT = {skip: false, force: false};\n\n/**\n * Touches an operator, scheduling it to be evaluated. If invoked outside of\n * a pulse propagation, the operator will be evaluated the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the operator\n * will be queued for evaluation if and only if the operator has not yet been\n * evaluated on the current propagation timestamp.\n * @param {Operator} op - The operator to touch.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nfunction touch(op, options) {\n  var opt = options || NO_OPT;\n  if (this._pulse) {\n    this._enqueue(op);\n  } else {\n    this._touched.add(op);\n  }\n  if (opt.skip) op.skip(true);\n  return this;\n}\n\n/**\n * Updates the value of the given operator.\n * @param {Operator} op - The operator to update.\n * @param {*} value - The value to set.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nfunction update(op, value, options) {\n  var opt = options || NO_OPT;\n  if (op.set(value) || opt.force) {\n    this.touch(op, opt);\n  }\n  return this;\n}\n\n/**\n * Pulses an operator with a changeset of tuples. If invoked outside of\n * a pulse propagation, the pulse will be applied the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n * will be added to the set of active pulses and will be applied if and\n * only if the target operator has not yet been evaluated on the current\n * propagation timestamp.\n * @param {Operator} op - The operator to pulse.\n * @param {ChangeSet} value - The tuple changeset to apply.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nfunction pulse(op, changeset, options) {\n  var p = new Pulse(this, this._clock + (this._pulse ? 0 : 1));\n  p.target = op;\n  this._pulses[op.id] = changeset.pulse(p, op.value);\n  return this.touch(op, options || NO_OPT);\n}\n\nfunction ingest$1(target, data, format) {\n  return this.pulse(target, this.changeset().insert(read(data, format)));\n}\n\nfunction loadPending(df) {\n  var accept, reject,\n      pending = new Promise(function(a, r) {\n        accept = a;\n        reject = r;\n      });\n\n  pending.requests = 0;\n\n  pending.done = function() {\n    if (--pending.requests === 0) {\n      df.runAfter(function() {\n        df._pending = null;\n        try {\n          df.run();\n          accept(df);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }\n\n  return (df._pending = pending);\n}\n\nfunction request$1(target, url, format) {\n  var df = this,\n      pending = df._pending || loadPending(df);\n\n  pending.requests += 1;\n\n  df.loader()\n    .load(url, {context:'dataflow'})\n    .then(\n      function(data) {\n        df.ingest(target, data, format);\n      },\n      function(error) {\n        df.warn('Loading failed: ' + url, error);\n        pending.done();\n      })\n    .then(pending.done)\n    .catch(function(error) { df.warn(error); });\n}\n\n/**\n * Represents a set of multiple pulses. Used as input for operators\n * that accept multiple pulses at a time. Contained pulses are\n * accessible via the public \"pulses\" array property. This pulse doe\n * not carry added, removed or modified tuples directly. However,\n * the visit method can be used to traverse all such tuples contained\n * in sub-pulses with a timestamp matching this parent multi-pulse.\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The timestamp.\n * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n */\nfunction MultiPulse(dataflow, stamp, pulses, encode) {\n  var p = this,\n      c = 0,\n      pulse, hash, i, n, f;\n\n  this.dataflow = dataflow;\n  this.stamp = stamp;\n  this.fields = null;\n  this.encode = encode || null;\n  this.pulses = pulses;\n\n  for (i=0, n=pulses.length; i<n; ++i) {\n    pulse = pulses[i];\n    if (pulse.stamp !== stamp) continue;\n\n    if (pulse.fields) {\n      hash = p.fields || (p.fields = {});\n      for (f in pulse.fields) { hash[f] = 1; }\n    }\n\n    if (pulse.changed(p.ADD)) c |= p.ADD;\n    if (pulse.changed(p.REM)) c |= p.REM;\n    if (pulse.changed(p.MOD)) c |= p.MOD;\n  }\n\n  this.changes = c;\n}\n\nvar prototype$15 = inherits(MultiPulse, Pulse);\n\n/**\n * Creates a new pulse based on the values of this pulse.\n * The dataflow, time stamp and field modification values are copied over.\n * @return {Pulse}\n */\nprototype$15.fork = function() {\n  if (arguments.length && (arguments[0] & Pulse.prototype.ALL)) {\n    error('MultiPulse fork does not support tuple change sets.');\n  }\n  return new Pulse(this.dataflow).init(this, 0);\n};\n\nprototype$15.changed = function(flags) {\n  return this.changes & flags;\n};\n\nprototype$15.modified = function(_) {\n  var p = this, fields = p.fields;\n  return !(fields && (p.changes & p.MOD)) ? 0\n    : isArray(_) ? _.some(function(f) { return fields[f]; })\n    : fields[_];\n};\n\nprototype$15.filter = function() {\n  error('MultiPulse does not support filtering.');\n};\n\nprototype$15.materialize = function() {\n  error('MultiPulse does not support materialization.');\n};\n\nprototype$15.visit = function(flags, visitor) {\n  var pulses = this.pulses, i, n;\n\n  for (i=0, n=pulses.length; i<n; ++i) {\n    if (pulses[i].stamp === this.stamp) {\n      pulses[i].visit(flags, visitor);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Runs the dataflow. This method will increment the current timestamp\n * and process all updated, pulsed and touched operators. When run for\n * the first time, all registered operators will be processed. If there\n * are pending data loading operations, this method will return immediately\n * without evaluating the dataflow. Instead, the dataflow will be\n * asynchronously invoked when data loading completes. To track when dataflow\n * evaluation completes, use the {@link runAsync} method instead.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode module.\n */\nfunction run(encode) {\n  if (!this._touched.length) {\n    return 0; // nothing to do!\n  }\n\n  if (this._pending) {\n    this.info('Awaiting requests, delaying dataflow run.');\n    return 0;\n  }\n\n  var df = this,\n      count = 0,\n      level = df.logLevel(),\n      op, next, dt;\n\n  df._pulse = new Pulse(df, ++df._clock, encode);\n\n  if (level >= Info) {\n    dt = Date.now();\n    df.debug('-- START PROPAGATION (' + df._clock + ') -----');\n  }\n\n  // initialize queue, reset touched operators\n  df._touched.forEach(function(op) { df._enqueue(op, true); });\n  df._touched = UniqueList(id);\n\n  try {\n    while (df._heap.size() > 0) {\n      op = df._heap.pop();\n\n      // re-queue if rank changes\n      if (op.rank !== op.qrank) { df._enqueue(op, true); continue; }\n\n      // otherwise, evaluate the operator\n      next = op.run(df._getPulse(op, encode));\n\n      if (level >= Debug) {\n        df.debug(op.id, next === StopPropagation ? 'STOP' : next, op);\n      }\n\n      // propagate the pulse\n      if (next !== StopPropagation) {\n        df._pulse = next;\n        if (op._targets) op._targets.forEach(function(op) { df._enqueue(op); });\n      }\n\n      // increment visit counter\n      ++count;\n    }\n  } catch (err) {\n    df.error(err);\n  }\n\n  // reset pulse map\n  df._pulses = {};\n  df._pulse = null;\n\n  if (level >= Info) {\n    dt = Date.now() - dt;\n    df.info('> Pulse ' + df._clock + ': ' + count + ' operators; ' + dt + 'ms');\n  }\n\n  // invoke callbacks queued via runAfter\n  if (df._postrun.length) {\n    var postrun = df._postrun;\n    df._postrun = [];\n    postrun.forEach(function(f) {\n      try { f(df); } catch (err) { df.error(err); }\n    });\n  }\n\n  return count;\n}\n\n/**\n * Runs the dataflow and returns a Promise that resolves when the\n * propagation cycle completes. The standard run method may exit early\n * if there are pending data loading operations. In contrast, this\n * method returns a Promise to allow callers to receive notification\n * when dataflow evaluation completes.\n * @return {Promise} - A promise that resolves to this dataflow.\n */\nfunction runAsync() {\n  return this._pending || Promise.resolve(this.run());\n}\n\n/**\n * Schedules a callback function to be invoked after the current pulse\n * propagation completes. If no propagation is currently occurring,\n * the function is invoked immediately.\n * @param {function(Dataflow)} callback - The callback function to run.\n *   The callback will be invoked with this Dataflow instance as its\n *   sole argument.\n */\nfunction runAfter(callback) {\n  if (this._pulse) {\n    // pulse propagation is currently running, queue to run after\n    this._postrun.push(callback);\n  } else {\n    // pulse propagation already complete, invoke immediately\n    try { callback(this); } catch (err) { this.error(err); }\n  }\n}\n\n/**\n * Enqueue an operator into the priority queue for evaluation. The operator\n * will be enqueued if it has no registered pulse for the current cycle, or if\n * the force argument is true. Upon enqueue, this method also sets the\n * operator's qrank to the current rank value.\n * @param {Operator} op - The operator to enqueue.\n * @param {boolean} [force] - A flag indicating if the operator should be\n *   forceably added to the queue, even if it has already been previously\n *   enqueued during the current pulse propagation. This is useful when the\n *   dataflow graph is dynamically modified and the operator rank changes.\n */\nfunction enqueue(op, force) {\n  var p = !this._pulses[op.id];\n  if (p) this._pulses[op.id] = this._pulse;\n  if (p || force) {\n    op.qrank = op.rank;\n    this._heap.push(op);\n  }\n}\n\n/**\n * Provide a correct pulse for evaluating an operator. If the operator has an\n * explicit source operator, we will try to pull the pulse(s) from it.\n * If there is an array of source operators, we build a multi-pulse.\n * Otherwise, we return a current pulse with correct source data.\n * If the pulse is the pulse map has an explicit target set, we use that.\n * Else if the pulse on the upstream source operator is current, we use that.\n * Else we use the pulse from the pulse map, but copy the source tuple array.\n * @param {Operator} op - The operator for which to get an input pulse.\n * @param {string} [encode] - An (optional) encoding set name with which to\n *   annotate the returned pulse. See {@link run} for more information.\n */\nfunction getPulse(op, encode) {\n  var s = op.source,\n      stamp = this._clock,\n      p;\n\n  if (s && isArray(s)) {\n    p = s.map(function(_) { return _.pulse; });\n    return new MultiPulse(this, stamp, p, encode);\n  } else {\n    s = s && s.pulse;\n    p = this._pulses[op.id];\n    if (s && s !== StopPropagation) {\n      if (s.stamp === stamp && p.target !== op) p = s;\n      else p.source = s.source;\n    }\n    return p;\n  }\n}\n\nfunction Heap(comparator) {\n  this.cmp = comparator;\n  this.nodes = [];\n}\n\nvar prototype$16 = Heap.prototype;\n\nprototype$16.size = function() {\n  return this.nodes.length;\n};\n\nprototype$16.clear = function() {\n  return (this.nodes = [], this);\n};\n\nprototype$16.peek = function() {\n  return this.nodes[0];\n};\n\nprototype$16.push = function(x) {\n  var array = this.nodes;\n  array.push(x);\n  return siftdown(array, 0, array.length-1, this.cmp);\n};\n\nprototype$16.pop = function() {\n  var array = this.nodes,\n      last = array.pop(),\n      item;\n\n  if (array.length) {\n    item = array[0];\n    array[0] = last;\n    siftup(array, 0, this.cmp);\n  } else {\n    item = last;\n  }\n  return item;\n};\n\nprototype$16.replace = function(item) {\n  var array = this.nodes,\n      retval = array[0];\n  array[0] = item;\n  siftup(array, 0, this.cmp);\n  return retval;\n};\n\nprototype$16.pushpop = function(item) {\n  var array = this.nodes, ref = array[0];\n  if (array.length && this.cmp(ref, item) < 0) {\n    array[0] = item;\n    item = ref;\n    siftup(array, 0, this.cmp);\n  }\n  return item;\n};\n\nfunction siftdown(array, start, idx, cmp) {\n  var item, parent, pidx;\n\n  item = array[idx];\n  while (idx > start) {\n    pidx = (idx - 1) >> 1;\n    parent = array[pidx];\n    if (cmp(item, parent) < 0) {\n      array[idx] = parent;\n      idx = pidx;\n      continue;\n    }\n    break;\n  }\n  return (array[idx] = item);\n}\n\nfunction siftup(array, idx, cmp) {\n  var start = idx,\n      end = array.length,\n      item = array[idx],\n      cidx = 2 * idx + 1, ridx;\n\n  while (cidx < end) {\n    ridx = cidx + 1;\n    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n      cidx = ridx;\n    }\n    array[idx] = array[cidx];\n    idx = cidx;\n    cidx = 2 * idx + 1;\n  }\n  array[idx] = item;\n  return siftdown(array, start, idx, cmp);\n}\n\n/**\n * A dataflow graph for reactive processing of data streams.\n * @constructor\n */\nfunction Dataflow() {\n  this._log = logger();\n\n  this._clock = 0;\n  this._rank = 0;\n  this._loader = loader();\n\n  this._touched = UniqueList(id);\n  this._pulses = {};\n  this._pulse = null;\n\n  this._heap = new Heap(function(a, b) { return a.qrank - b.qrank; });\n  this._postrun = [];\n}\n\nvar prototype$10 = Dataflow.prototype;\n\n/**\n * The current timestamp of this dataflow. This value reflects the\n * timestamp of the previous dataflow run. The dataflow is initialized\n * with a stamp value of 0. The initial run of the dataflow will have\n * a timestap of 1, and so on. This value will match the\n * {@link Pulse.stamp} property.\n * @return {number} - The current timestamp value.\n */\nprototype$10.stamp = function() {\n  return this._clock;\n};\n\n/**\n * Gets or sets the loader instance to use for data file loading. A\n * loader object must provide a \"load\" method for loading files and a\n * \"sanitize\" method for checking URL/filename validity. Both methods\n * should accept a URI and options hash as arguments, and return a Promise\n * that resolves to the loaded file contents (load) or a hash containing\n * sanitized URI data with the sanitized url assigned to the \"href\" property\n * (sanitize).\n * @param {object} _ - The loader instance to use.\n * @return {object|Dataflow} - If no arguments are provided, returns\n *   the current loader instance. Otherwise returns this Dataflow instance.\n */\nprototype$10.loader = function(_) {\n  return arguments.length ? (this._loader = _, this) : this._loader;\n};\n\n/**\n * Empty entry threshold for garbage cleaning. Map data structures will\n * perform cleaning once the number of empty entries exceeds this value.\n */\nprototype$10.cleanThreshold = 1e4;\n\n// OPERATOR REGISTRATION\nprototype$10.add = add$1;\nprototype$10.connect = connect;\nprototype$10.rank = rank;\nprototype$10.rerank = rerank;\n\n// OPERATOR UPDATES\nprototype$10.pulse = pulse;\nprototype$10.touch = touch;\nprototype$10.update = update;\nprototype$10.changeset = changeset;\n\n// DATA LOADING\nprototype$10.ingest = ingest$1;\nprototype$10.request = request$1;\n\n// EVENT HANDLING\nprototype$10.events = events;\nprototype$10.on = on;\n\n// PULSE PROPAGATION\nprototype$10.run = run;\nprototype$10.runAsync = runAsync;\nprototype$10.runAfter = runAfter;\nprototype$10._enqueue = enqueue;\nprototype$10._getPulse = getPulse;\n\n// LOGGING AND ERROR HANDLING\n\nfunction logMethod(method) {\n  return function() {\n    return this._log[method].apply(this, arguments);\n  };\n}\n\n/**\n * Logs a warning message. By default, logged messages are written to console\n * output. The message will only be logged if the current log level is high\n * enough to permit warning messages.\n */\nprototype$10.warn = logMethod('warn');\n\n/**\n * Logs a information message. By default, logged messages are written to\n * console output. The message will only be logged if the current log level is\n * high enough to permit information messages.\n */\nprototype$10.info = logMethod('info');\n\n/**\n * Logs a debug message. By default, logged messages are written to console\n * output. The message will only be logged if the current log level is high\n * enough to permit debug messages.\n */\nprototype$10.debug = logMethod('debug');\n\n/**\n * Get or set the current log level. If an argument is provided, it\n * will be used as the new log level.\n * @param {number} [level] - Should be one of None, Warn, Info\n * @return {number} - The current log level.\n */\nprototype$10.logLevel = logMethod('level');\n\n/**\n * Handle an error. By default, this method re-throws the input error.\n * This method can be overridden for custom error handling.\n */\nprototype$10.error = function(err) {\n  throw err;\n};\n\n/**\n * Abstract class for operators that process data tuples.\n * Subclasses must provide a {@link transform} method for operator processing.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {Operator} [source] - The operator from which to receive pulses.\n */\nfunction Transform(init, params) {\n  Operator.call(this, init, null, params);\n}\n\nvar prototype$17 = inherits(Transform, Operator);\n\n/**\n * Overrides {@link Operator.evaluate} for transform operators.\n * Marshalls parameter values and then invokes {@link transform}.\n * @param {Pulse} pulse - the current dataflow pulse.\n * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n     value (including undefined) will let the input pulse pass through.\n */\nprototype$17.evaluate = function(pulse) {\n  var params = this.marshall(pulse.stamp),\n      out = this.transform(params, pulse);\n  params.clear();\n  return out;\n};\n\n/**\n * Process incoming pulses.\n * Subclasses should override this method to implement transforms.\n * @param {Parameters} _ - The operator parameter values.\n * @param {Pulse} pulse - The current dataflow pulse.\n * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n *   value (including undefined) will let the input pulse pass through.\n */\nprototype$17.transform = function() {};\n\nvar transforms = {};\n\nvar definitions = {};\n\nfunction register(def, constructor) {\n  var type = def.type;\n  definition(type, def);\n  transform(type, constructor);\n}\n\nfunction definition(type, def) {\n  type = type && type.toLowerCase();\n  return arguments.length > 1 ? (definitions[type] = def, this)\n    : definitions.hasOwnProperty(type) ? definitions[type] : null;\n}\n\nfunction transform(type, constructor) {\n  return arguments.length > 1 ? (transforms[type] = constructor, this)\n    : transforms.hasOwnProperty(type) ? transforms[type] : null;\n}\n\nfunction TupleStore(key) {\n  this._key = key || '_id';\n  this._add = [];\n  this._rem = [];\n  this._ext = null;\n  this._get = null;\n  this._q = null;\n}\n\nvar prototype$19 = TupleStore.prototype;\n\nprototype$19.add = function(v) {\n  this._add.push(v);\n};\n\nprototype$19.rem = function(v) {\n  this._rem.push(v);\n};\n\nprototype$19.values = function() {\n  this._get = null;\n  if (this._rem.length === 0) return this._add;\n\n  var a = this._add,\n      r = this._rem,\n      k = this._key,\n      n = a.length,\n      m = r.length,\n      x = Array(n - m),\n      map = {}, i, j, v;\n\n  // use unique key field to clear removed values\n  for (i=0; i<m; ++i) {\n    map[r[i][k]] = 1;\n  }\n  for (i=0, j=0; i<n; ++i) {\n    if (map[(v = a[i])[k]]) {\n      map[v[k]] = 0;\n    } else {\n      x[j++] = v;\n    }\n  }\n\n  this._rem = [];\n  return (this._add = x);\n};\n\n// memoizing statistics methods\n\nprototype$19.distinct = function(get) {\n  var v = this.values(),\n      n = v.length,\n      map = {},\n      count = 0, s;\n\n  while (--n >= 0) {\n    s = get(v[n]) + '';\n    if (!map.hasOwnProperty(s)) {\n      map[s] = 1;\n      ++count;\n    }\n  }\n\n  return count;\n};\n\nprototype$19.extent = function(get) {\n  if (this._get !== get || !this._ext) {\n    var v = this.values(),\n        i = extentIndex(v, get);\n    this._ext = [v[i[0]], v[i[1]]];\n    this._get = get;\n  }\n  return this._ext;\n};\n\nprototype$19.argmin = function(get) {\n  return this.extent(get)[0] || {};\n};\n\nprototype$19.argmax = function(get) {\n  return this.extent(get)[1] || {};\n};\n\nprototype$19.min = function(get) {\n  var m = this.extent(get)[0];\n  return m != null ? get(m) : +Infinity;\n};\n\nprototype$19.max = function(get) {\n  var m = this.extent(get)[1];\n  return m != null ? get(m) : -Infinity;\n};\n\nprototype$19.quartile = function(get) {\n  if (this._get !== get || !this._q) {\n    this._q = quartiles(this.values(), get);\n    this._get = get;\n  }\n  return this._q;\n};\n\nprototype$19.q1 = function(get) {\n  return this.quartile(get)[0];\n};\n\nprototype$19.q2 = function(get) {\n  return this.quartile(get)[1];\n};\n\nprototype$19.q3 = function(get) {\n  return this.quartile(get)[2];\n};\n\nprototype$19.ci = function(get) {\n  if (this._get !== get || !this._ci) {\n    this._ci = bootstrapCI(this.values(), 1000, 0.05, get);\n    this._get = get;\n  }\n  return this._ci;\n};\n\nprototype$19.ci0 = function(get) {\n  return this.ci(get)[0];\n};\n\nprototype$19.ci1 = function(get) {\n  return this.ci(get)[1];\n};\n\nvar Aggregates = {\n  'values': measure$1({\n    name: 'values',\n    init: 'cell.store = true;',\n    set:  'cell.data.values()', idx: -1\n  }),\n  'count': measure$1({\n    name: 'count',\n    set:  'cell.num'\n  }),\n  'missing': measure$1({\n    name: 'missing',\n    set:  'this.missing'\n  }),\n  'valid': measure$1({\n    name: 'valid',\n    set:  'this.valid'\n  }),\n  'sum': measure$1({\n    name: 'sum',\n    init: 'this.sum = 0;',\n    add:  'this.sum += v;',\n    rem:  'this.sum -= v;',\n    set:  'this.sum'\n  }),\n  'mean': measure$1({\n    name: 'mean',\n    init: 'this.mean = 0;',\n    add:  'var d = v - this.mean; this.mean += d / this.valid;',\n    rem:  'var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;',\n    set:  'this.mean'\n  }),\n  'average': measure$1({\n    name: 'average',\n    set:  'this.mean',\n    req:  ['mean'], idx: 1\n  }),\n  'variance': measure$1({\n    name: 'variance',\n    init: 'this.dev = 0;',\n    add:  'this.dev += d * (v - this.mean);',\n    rem:  'this.dev -= d * (v - this.mean);',\n    set:  'this.valid > 1 ? this.dev / (this.valid-1) : 0',\n    req:  ['mean'], idx: 1\n  }),\n  'variancep': measure$1({\n    name: 'variancep',\n    set:  'this.valid > 1 ? this.dev / this.valid : 0',\n    req:  ['variance'], idx: 2\n  }),\n  'stdev': measure$1({\n    name: 'stdev',\n    set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : 0',\n    req:  ['variance'], idx: 2\n  }),\n  'stdevp': measure$1({\n    name: 'stdevp',\n    set:  'this.valid > 1 ? Math.sqrt(this.dev / this.valid) : 0',\n    req:  ['variance'], idx: 2\n  }),\n  'stderr': measure$1({\n    name: 'stderr',\n    set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : 0',\n    req:  ['variance'], idx: 2\n  }),\n  'distinct': measure$1({\n    name: 'distinct',\n    set:  'cell.data.distinct(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'ci0': measure$1({\n    name: 'ci0',\n    set:  'cell.data.ci0(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'ci1': measure$1({\n    name: 'ci1',\n    set:  'cell.data.ci1(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'median': measure$1({\n    name: 'median',\n    set:  'cell.data.q2(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'q1': measure$1({\n    name: 'q1',\n    set:  'cell.data.q1(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'q3': measure$1({\n    name: 'q3',\n    set:  'cell.data.q3(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'argmin': measure$1({\n    name: 'argmin',\n    add:  'if (v < this.min) this.argmin = t;',\n    rem:  'if (v <= this.min) this.argmin = null;',\n    set:  'this.argmin || cell.data.argmin(this.get)',\n    req:  ['min'], str: ['values'], idx: 3\n  }),\n  'argmax': measure$1({\n    name: 'argmax',\n    add:  'if (v > this.max) this.argmax = t;',\n    rem:  'if (v >= this.max) this.argmax = null;',\n    set:  'this.argmax || cell.data.argmax(this.get)',\n    req:  ['max'], str: ['values'], idx: 3\n  }),\n  'min': measure$1({\n    name: 'min',\n    init: 'this.min = null;',\n    add:  'if (v < this.min || this.min === null) this.min = v;',\n    rem:  'if (v <= this.min) this.min = NaN;',\n    set:  'this.min = (isNaN(this.min) ? cell.data.min(this.get) : this.min)',\n    str:  ['values'], idx: 4\n  }),\n  'max': measure$1({\n    name: 'max',\n    init: 'this.max = null;',\n    add:  'if (v > this.max || this.max === null) this.max = v;',\n    rem:  'if (v >= this.max) this.max = NaN;',\n    set:  'this.max = (isNaN(this.max) ? cell.data.max(this.get) : this.max)',\n    str:  ['values'], idx: 4\n  })\n};\n\nfunction createMeasure(op, name) {\n  return Aggregates[op](name);\n}\n\nfunction measure$1(base) {\n  return function(out) {\n    var m = extend({init:'', add:'', rem:'', idx:0}, base);\n    m.out = out || base.name;\n    return m;\n  };\n}\n\nfunction compareIndex(a, b) {\n  return a.idx - b.idx;\n}\n\nfunction resolve(agg, stream) {\n  function collect(m, a) {\n    function helper(r) { if (!m[r]) collect(m, m[r] = Aggregates[r]()); }\n    if (a.req) a.req.forEach(helper);\n    if (stream && a.str) a.str.forEach(helper);\n    return m;\n  }\n  var map = agg.reduce(\n    collect,\n    agg.reduce(function(m, a) { return (m[a.name] = a, m); }, {})\n  );\n  var values = [], key;\n  for (key in map) values.push(map[key]);\n  return values.sort(compareIndex);\n}\n\nfunction compileMeasures(agg, field) {\n  var get = field || identity,\n      all = resolve(agg, true), // assume streaming removes may occur\n      ctr = 'this.cell = cell; this.tuple = t; this.valid = 0; this.missing = 0;',\n      add = 'if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;',\n      rem = 'if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;',\n      set = 'var t = this.tuple; var cell = this.cell;';\n\n  all.forEach(function(a) {\n    if (a.idx < 0) {\n      ctr = a.init + ctr;\n      add = a.add + add;\n      rem = a.rem + rem;\n    } else {\n      ctr += a.init;\n      add += a.add;\n      rem += a.rem;\n    }\n  });\n  agg.slice().sort(compareIndex).forEach(function(a) {\n    set += 't[\\'' + a.out + '\\']=' + a.set + ';';\n  });\n  set += 'return t;';\n\n  ctr = Function('cell', 't', ctr);\n  ctr.prototype.add = Function('v', 't', add);\n  ctr.prototype.rem = Function('v', 't', rem);\n  ctr.prototype.set = Function(set);\n  ctr.prototype.get = get;\n  ctr.fields = agg.map(function(_) { return _.out; });\n  return ctr;\n}\n\n/**\n * Group-by aggregation operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} params.groupby - An array of accessors to groupby.\n * @param {Array<function(object): *>} params.fields - An array of accessors to aggregate.\n * @param {Array<string>} params.ops - An array of strings indicating aggregation operations.\n * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n */\nfunction Aggregate(params) {\n  Transform.call(this, null, params);\n\n  this._adds = []; // array of added output tuples\n  this._mods = []; // array of modified output tuples\n  this._alen = 0;  // number of active added tuples\n  this._mlen = 0;  // number of active modified tuples\n  this._drop = true;   // should empty aggregation cells be removed\n  this._cross = false; // produce full cross-product of group-by values\n\n  this._dims = [];   // group-by dimension accessors\n  this._dnames = []; // group-by dimension names\n\n  this._measures = []; // collection of aggregation monoids\n  this._countOnly = false; // flag indicating only count aggregation\n  this._counts = null; // collection of count fields\n  this._prev = null;   // previous aggregation cells\n\n  this._inputs = null;  // array of dependent input tuple field names\n  this._outputs = null; // array of output tuple field names\n}\n\nvar prototype$18 = inherits(Aggregate, Transform);\n\nprototype$18.transform = function(_, pulse) {\n  var aggr = this,\n      out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      mod;\n\n  this.stamp = out.stamp;\n\n  if (this.value && ((mod = _.modified()) || pulse.modified(this._inputs))) {\n    this._prev = this.value;\n    this.value = mod ? this.init(_) : {};\n    pulse.visit(pulse.SOURCE, function(t) { aggr.add(t); });\n  } else {\n    this.value = this.value || this.init(_);\n    pulse.visit(pulse.REM, function(t) { aggr.rem(t); });\n    pulse.visit(pulse.ADD, function(t) { aggr.add(t); });\n  }\n\n  // Indicate output fields and return aggregate tuples.\n  out.modifies(this._outputs);\n\n  // Should empty cells be dropped?\n  aggr._drop = _.drop !== false;\n\n  // If domain cross-product requested, generate empty cells as needed\n  // and ensure that empty cells are not dropped\n  if (_.cross && aggr._dims.length > 1) {\n    aggr._drop = false;\n    this.cross();\n  }\n\n  return aggr.changes(out);\n};\n\nprototype$18.cross = function() {\n  var aggr = this,\n      curr = aggr.value,\n      dims = aggr._dnames,\n      vals = dims.map(function() { return {}; }),\n      n = dims.length;\n\n  // collect all group-by domain values\n  function collect(cells) {\n    var key, i, t, v;\n    for (key in cells) {\n      t = cells[key].tuple;\n      for (i=0; i<n; ++i) {\n        vals[i][(v = t[dims[i]])] = v;\n      }\n    }\n  }\n  collect(aggr._prev);\n  collect(curr);\n\n  // iterate over key cross-product, create cells as needed\n  function generate(base, tuple, index) {\n    var name = dims[index],\n        v = vals[index++],\n        k, key;\n\n    for (k in v) {\n      tuple[name] = v[k];\n      key = base ? base + '|' + k : k;\n      if (index < n) generate(key, tuple, index);\n      else if (!curr[key]) aggr.cell(key, tuple);\n    }\n  }\n  generate('', {}, 0);\n};\n\nprototype$18.init = function(_) {\n  // initialize input and output fields\n  var inputs = (this._inputs = []),\n      outputs = (this._outputs = []),\n      inputMap = {};\n\n  function inputVisit(get) {\n    var fields = get.fields, i = 0, n = fields.length, f;\n    for (; i<n; ++i) {\n      if (!inputMap[f=fields[i]]) {\n        inputMap[f] = 1;\n        inputs.push(f);\n      }\n    }\n  }\n\n  // initialize group-by dimensions\n  this._dims = array(_.groupby);\n  this._dnames = this._dims.map(function(d) {\n    var dname = accessorName(d)\n    return (inputVisit(d), outputs.push(dname), dname);\n  });\n  this.cellkey = _.key ? _.key\n    : this._dims.length === 0 ? function() { return ''; }\n    : this._dims.length === 1 ? this._dims[0]\n    : cellkey;\n\n  // initialize aggregate measures\n  this._countOnly = true;\n  this._counts = [];\n  this._measures = [];\n\n  var fields = _.fields || [null],\n      ops = _.ops || ['count'],\n      as = _.as || [],\n      n = fields.length,\n      map = {},\n      field, op, m, mname, outname, i;\n\n  if (n !== ops.length) {\n    error('Unmatched number of fields and aggregate ops.');\n  }\n\n  for (i=0; i<n; ++i) {\n    field = fields[i];\n    op = ops[i];\n\n    if (field == null && op !== 'count') {\n      error('Null aggregate field specified.');\n    }\n    mname = accessorName(field);\n    outname = measureName(op, mname, as[i]);\n    outputs.push(outname);\n\n    if (op === 'count') {\n      this._counts.push(outname);\n      continue;\n    }\n\n    m = map[mname];\n    if (!m) {\n      inputVisit(field);\n      m = (map[mname] = []);\n      m.field = field;\n      this._measures.push(m);\n    }\n\n    if (op !== 'count') this._countOnly = false;\n    m.push(createMeasure(op, outname));\n  }\n\n  this._measures = this._measures.map(function(m) {\n    return compileMeasures(m, m.field);\n  });\n\n  return {}; // aggregation cells (this.value)\n};\n\nfunction measureName(op, mname, as) {\n  return as || (op + (!mname ? '' : '_' + mname));\n}\n\n// -- Cell Management -----\n\nfunction cellkey(x) {\n  var d = this._dims,\n      n = d.length, i,\n      k = String(d[0](x));\n\n  for (i=1; i<n; ++i) {\n    k += '|' + d[i](x);\n  }\n\n  return k;\n}\n\nprototype$18.cellkey = cellkey;\n\nprototype$18.cell = function(key, t) {\n  var cell = this.value[key];\n  if (!cell) {\n    cell = this.value[key] = this.newcell(key, t);\n    this._adds[this._alen++] = cell;\n  } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n    cell.stamp = this.stamp;\n    this._adds[this._alen++] = cell;\n  } else if (cell.stamp < this.stamp) {\n    cell.stamp = this.stamp;\n    this._mods[this._mlen++] = cell;\n  }\n  return cell;\n};\n\nprototype$18.newcell = function(key, t) {\n  var cell = {\n    key:   key,\n    num:   0,\n    agg:   null,\n    tuple: this.newtuple(t, this._prev && this._prev[key]),\n    stamp: this.stamp,\n    store: false\n  };\n\n  if (!this._countOnly) {\n    var measures = this._measures,\n        n = measures.length, i;\n\n    cell.agg = Array(n);\n    for (i=0; i<n; ++i) {\n      cell.agg[i] = new measures[i](cell, cell.tuple);\n    }\n  }\n\n  if (cell.store) {\n    cell.data = new TupleStore();\n  }\n\n  return cell;\n};\n\nprototype$18.newtuple = function(t, p) {\n  var names = this._dnames,\n      dims = this._dims,\n      x = {}, i, n;\n\n  for (i=0, n=dims.length; i<n; ++i) {\n    x[names[i]] = dims[i](t);\n  }\n\n  return p ? replace(p.tuple, x) : ingest(x);\n};\n\n// -- Process Tuples -----\n\nprototype$18.add = function(t) {\n  var key = this.cellkey(t),\n      cell = this.cell(key, t),\n      agg, i, n;\n\n  cell.num += 1;\n  if (this._countOnly) return;\n\n  if (cell.store) cell.data.add(t);\n\n  agg = cell.agg;\n  for (i=0, n=agg.length; i<n; ++i) {\n    agg[i].add(agg[i].get(t), t);\n  }\n};\n\nprototype$18.rem = function(t) {\n  var key = this.cellkey(t),\n      cell = this.cell(key, t),\n      agg, i, n;\n\n  cell.num -= 1;\n  if (this._countOnly) return;\n\n  if (cell.store) cell.data.rem(t);\n\n  agg = cell.agg;\n  for (i=0, n=agg.length; i<n; ++i) {\n    agg[i].rem(agg[i].get(t), t);\n  }\n};\n\nprototype$18.celltuple = function(cell) {\n  var tuple = cell.tuple,\n      counts = this._counts,\n      agg, i, n;\n\n  // consolidate stored values\n  if (cell.store) {\n    cell.data.values();\n  }\n\n  // update tuple properties\n  for (i=0, n=counts.length; i<n; ++i) {\n    tuple[counts[i]] = cell.num;\n  }\n  if (!this._countOnly) {\n    agg = cell.agg;\n    for (i=0, n=agg.length; i<n; ++i) {\n      agg[i].set();\n    }\n  }\n\n  return tuple;\n};\n\nprototype$18.changes = function(out) {\n  var adds = this._adds,\n      mods = this._mods,\n      prev = this._prev,\n      drop = this._drop,\n      add = out.add,\n      rem = out.rem,\n      mod = out.mod,\n      cell, key, i, n;\n\n  if (prev) for (key in prev) {\n    rem.push(prev[key].tuple);\n  }\n\n  for (i=0, n=this._alen; i<n; ++i) {\n    add.push(this.celltuple(adds[i]));\n    adds[i] = null; // for garbage collection\n  }\n\n  for (i=0, n=this._mlen; i<n; ++i) {\n    cell = mods[i];\n    (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n    mods[i] = null; // for garbage collection\n  }\n\n  this._alen = this._mlen = 0; // reset list of active cells\n  this._prev = null;\n  return out;\n};\n\n/**\n * Generates a binning function for discretizing data.\n * @constructor\n * @param {object} params - The parameters for this operator. The\n *   provided values should be valid options for the {@link bin} function.\n * @param {function(object): *} params.field - The data field to bin.\n */\nfunction Bin(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$20 = inherits(Bin, Transform);\n\nprototype$20.transform = function(_, pulse) {\n  var bins = this._bins(_),\n      step = bins.step,\n      as = _.as || ['bin0', 'bin1'],\n      b0 = as[0],\n      b1 = as[1],\n      flag = _.modified() ? (pulse = pulse.reflow(true), pulse.SOURCE)\n        : pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD\n        : pulse.ADD;\n\n  pulse.visit(flag, function(t) {\n    var v = bins(t);\n    t[b0] = v;\n    t[b1] = v != null ? v + step : null;\n  });\n\n  return pulse.modifies(as);\n};\n\nprototype$20._bins = function(_) {\n  if (this.value && !_.modified()) {\n    return this.value;\n  }\n\n  var field = _.field,\n      bins  = bin$1(_),\n      start = bins.start,\n      stop  = bins.stop,\n      step  = bins.step,\n      a, d;\n\n  if ((a = _.anchor) != null) {\n    d = a - (start + step * Math.floor((a - start) / step));\n    start += d;\n    stop += d;\n  }\n\n  var f = function(t) {\n    var v = field(t);\n    return v == null ? null\n      : (v = Math.max(start, Math.min(+v, stop - step)),\n         start + step * Math.floor((v - start) / step));\n  };\n\n  f.start = start;\n  f.stop = stop;\n  f.step = step;\n\n  return this.value = accessor(\n    f,\n    accessorFields(field),\n    _.name || 'bin_' + accessorName(field)\n  );\n};\n\n/**\n * Collects all data tuples that pass through this operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for additionally sorting the collected tuples.\n */\nfunction Collect(params) {\n  Transform.call(this, [], params);\n}\n\nvar prototype$21 = inherits(Collect, Transform);\n\nprototype$21.transform = function(_, pulse) {\n  var out = pulse.fork(pulse.ALL),\n      add = pulse.changed(pulse.ADD),\n      mod = pulse.changed(),\n      sort = _.sort,\n      data = this.value,\n      push = function(t) { data.push(t); },\n      n = 0, map;\n\n  if (out.rem.length) { // build id map and filter data array\n    map = {};\n    out.visit(out.REM, function(t) { map[t._id] = 1; ++n; });\n    data = data.filter(function(t) { return !map[t._id]; });\n  }\n\n  if (sort) {\n    // if sort criteria change, re-sort the full data array\n    if (_.modified('sort') || pulse.modified(sort.fields)) {\n      data.sort(sort);\n      mod = true;\n    }\n    // if added tuples, sort them in place and then merge\n    if (add) {\n      data = merge(sort, data, out.add.sort(sort));\n    }\n  } else if (add) {\n    // no sort, so simply add new tuples\n    out.visit(out.ADD, push);\n  }\n\n  this.modified(mod);\n  this.value = out.source = data;\n  return out;\n};\n\n/**\n * Generates a comparator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string>} params.fields - The fields to compare.\n * @param {Array<string>} [params.orders] - The sort orders.\n *   Each entry should be one of \"ascending\" (default) or \"descending\".\n */\nfunction Compare(params) {\n  Operator.call(this, null, update$1, params);\n}\n\ninherits(Compare, Operator);\n\nfunction update$1(_) {\n  return (this.value && !_.modified())\n    ? this.value\n    : compare(_.fields, _.orders);\n}\n\n/**\n * Count regexp-defined pattern occurrences in a text field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the text field.\n * @param {string} [params.pattern] - RegExp string defining the text pattern.\n * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n * @param {string} [params.stopwords] - RegExp string of words to ignore.\n */\nfunction CountPattern(params) {\n  Transform.call(this, null, params);\n}\n\nfunction tokenize(text, tcase, match) {\n  switch (tcase) {\n    case 'upper': text = text.toUpperCase(); break;\n    case 'lower': text = text.toLowerCase(); break;\n  }\n  return text.match(match);\n}\n\nvar prototype$22 = inherits(CountPattern, Transform);\n\nprototype$22.transform = function(_, pulse) {\n  function process(update) {\n    return function(tuple) {\n      var tokens = tokenize(get(tuple), _.case, match) || [], t;\n      for (var i=0, n=tokens.length; i<n; ++i) {\n        if (!stop.test(t = tokens[i])) update(t);\n      }\n    };\n  }\n\n  var init = this._parameterCheck(_, pulse),\n      counts = this._counts,\n      match = this._match,\n      stop = this._stop,\n      get = _.field,\n      as = _.as || ['text', 'count'],\n      add = process(function(t) { counts[t] = 1 + (counts[t] || 0); }),\n      rem = process(function(t) { counts[t] -= 1; });\n\n  if (init) {\n    pulse.visit(pulse.SOURCE, add);\n  } else {\n    pulse.visit(pulse.ADD, add);\n    pulse.visit(pulse.REM, rem);\n  }\n\n  return this._finish(pulse, as); // generate output tuples\n};\n\nprototype$22._parameterCheck = function(_, pulse) {\n  var init = false;\n\n  if (_.modified('stopwords') || !this._stop) {\n    this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n    init = true;\n  }\n\n  if (_.modified('pattern') || !this._match) {\n    this._match = new RegExp((_.pattern || '[\\\\w\\']+'), 'g');\n    init = true;\n  }\n\n  if (_.modified('field') || pulse.modified(_.field.fields)) {\n    init = true;\n  }\n\n  if (init) this._counts = {};\n  return init;\n}\n\nprototype$22._finish = function(pulse, as) {\n  var counts = this._counts,\n      tuples = this._tuples || (this._tuples = {}),\n      text = as[0],\n      count = as[1],\n      out = pulse.fork(),\n      w, t, c;\n\n  for (w in counts) {\n    t = tuples[w];\n    c = counts[w] || 0;\n    if (!t && c) {\n      tuples[w] = (t = ingest({}));\n      t[text] = w;\n      t[count] = c;\n      out.add.push(t);\n    } else if (c === 0) {\n      if (t) out.rem.push(t);\n      counts[w] = null;\n      tuples[w] = null;\n    } else if (t[count] !== c) {\n      t[count] = c;\n      out.mod.push(t);\n    }\n  }\n\n  return out.modifies(as);\n};\n\n/**\n * Perform a cross-product of a tuple stream with itself.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object):boolean} [params.filter] - An optional filter\n *   function for selectively including tuples in the cross product.\n * @param {Array<string>} [params.as] - The names of the output fields.\n */\nfunction Cross(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$23 = inherits(Cross, Transform);\n\nprototype$23.transform = function(_, pulse) {\n  var out = pulse.fork(pulse.NO_SOURCE),\n      data = this.value,\n      as = _.as || ['a', 'b'],\n      a = as[0], b = as[1],\n      reset = !data\n          || pulse.changed(pulse.ADD_REM)\n          || _.modified('as')\n          || _.modified('filter');\n\n  if (reset) {\n    if (data) out.rem = data;\n    out.add = this.value = cross(pulse.source, a, b, _.filter || truthy);\n  } else {\n    out.mod = data;\n  }\n\n  return out.source = this.value, out.modifies(as);\n};\n\nfunction cross(input, a, b, filter) {\n  var data = [],\n      t = {},\n      n = input.length,\n      i = 0,\n      j, left;\n\n  for (; i<n; ++i) {\n    t[a] = left = input[i];\n    for (j=0; j<n; ++j) {\n      t[b] = input[j];\n      if (filter(t)) {\n        data.push(ingest(t));\n        t = {};\n        t[a] = left;\n      }\n    }\n  }\n\n  return data;\n}\n\nvar Distributions = {\n  kde:     randomKDE,\n  mixture: randomMixture,\n  normal:  randomNormal,\n  uniform: randomUniform\n};\n\nvar DISTRIBUTIONS = 'distributions';\nvar FUNCTION = 'function';\nvar FIELD = 'field';\n/**\n * Parse a parameter object for a probability distribution.\n * @param {object} def - The distribution parameter object.\n * @param {function():Array<object>} - A method for requesting\n *   source data. Used for distributions (such as KDE) that\n *   require sample data points. This method will only be\n *   invoked if the 'from' parameter for a target data source\n *   is not provided. Typically this method returns backing\n *   source data for a Pulse object.\n * @return {object} - The output distribution object.\n */\nfunction parse$1(def, data) {\n  var func = def[FUNCTION];\n  if (!Distributions.hasOwnProperty(func)) {\n    error('Unknown distribution function: ' + func);\n  }\n\n  var d = Distributions[func]();\n\n  for (var name in def) {\n    // if data field, extract values\n    if (name === FIELD) {\n      d.data((def.from || data()).map(def[name]));\n    }\n\n    // if distribution mixture, recurse to parse each definition\n    else if (name === DISTRIBUTIONS) {\n      d[name](def[name].map(function(_) { return parse$1(_, data); }));\n    }\n\n    // otherwise, simply set the parameter\n    else if (typeof d[name] === FUNCTION) {\n      d[name](def[name]);\n    }\n  }\n\n  return d;\n}\n\n/**\n * Grid sample points for a probability density. Given a distribution and\n * a sampling extent, will generate points suitable for plotting either\n * PDF (probability density function) or CDF (cumulative distribution\n * function) curves.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.distribution - The probability distribution. This\n *   is an object parameter dependent on the distribution type.\n * @param {string} [params.method='pdf'] - The distribution method to sample.\n *   One of 'pdf' or 'cdf'.\n * @param {Array<number>} [params.extent] - The [min, max] extent over which\n *   to sample the distribution. This argument is required in most cases, but\n *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n *   that returns numerical sample points from which the extent can be deduced.\n * @param {number} [params.steps=100] - The number of sampling steps.\n */\nfunction Density(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$24 = inherits(Density, Transform);\n\nprototype$24.transform = function(_, pulse) {\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n  if (!this.value || pulse.changed() || _.modified()) {\n    var dist = parse$1(_.distribution, source(pulse)),\n        method = _.method || 'pdf';\n\n    if (method !== 'pdf' && method !== 'cdf') {\n      error('Invalid density method: ' + method);\n    }\n    if (!_.extent && !dist.data) {\n      error('Missing density extent parameter.');\n    }\n    method = dist[method];\n\n    var as = _.as || ['value', 'density'],\n        domain = _.extent || d3Array.extent(dist.data()),\n        step = (domain[1] - domain[0]) / (_.steps || 100),\n        values = d3Array.range(domain[0], domain[1] + step/2, step)\n          .map(function(v) {\n            var tuple = {};\n            tuple[as[0]] = v;\n            tuple[as[1]] = method(v);\n            return ingest(tuple);\n          });\n\n    if (this.value) out.rem = this.value;\n    this.value = out.add = out.source = values;\n  }\n\n  return out;\n};\n\nfunction source(pulse) {\n  return function() { return pulse.materialize(pulse.SOURCE).source; };\n}\n\n/**\n * Computes extents (min/max) for a data field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field over which to compute extends.\n */\nfunction Extent(params) {\n  Transform.call(this, [+Infinity, -Infinity], params);\n}\n\nvar prototype$25 = inherits(Extent, Transform);\n\nprototype$25.transform = function(_, pulse) {\n  var extent = this.value,\n      field = _.field,\n      min = extent[0],\n      max = extent[1],\n      flag = pulse.ADD,\n      mod;\n\n  mod = pulse.changed()\n     || pulse.modified(field.fields)\n     || _.modified('field');\n\n  if (mod) {\n    flag = pulse.SOURCE;\n    min = +Infinity;\n    max = -Infinity;\n  }\n\n  pulse.visit(flag, function(t) {\n    var v = field(t);\n    if (v < min) min = v;\n    if (v > max) max = v;\n  });\n\n  this.value = [min, max];\n};\n\n/**\n * Provides a bridge between a parent transform and a target subflow that\n * consumes only a subset of the tuples that pass through the parent.\n * @constructor\n * @param {Pulse} pulse - A pulse to use as the value of this operator.\n * @param {Transform} parent - The parent transform (typically a Facet instance).\n * @param {Transform} target - A transform that receives the subflow of tuples.\n */\nfunction Subflow(pulse, parent) {\n  Operator.call(this, pulse);\n  this.parent = parent;\n}\n\nvar prototype$27 = inherits(Subflow, Operator);\n\nprototype$27.connect = function(target) {\n  this.targets().add(target);\n  return (target.source = this);\n};\n\n/**\n * Add an 'add' tuple to the subflow pulse.\n * @param {Tuple} t - The tuple being added.\n */\nprototype$27.add = function(t) {\n  this.value.add.push(t);\n};\n\n/**\n * Add a 'rem' tuple to the subflow pulse.\n * @param {Tuple} t - The tuple being removed.\n */\nprototype$27.rem = function(t) {\n  this.value.rem.push(t);\n};\n\n/**\n * Add a 'mod' tuple to the subflow pulse.\n * @param {Tuple} t - The tuple being modified.\n */\nprototype$27.mod = function(t) {\n  this.value.mod.push(t);\n};\n\n/**\n * Re-initialize this operator's pulse value.\n * @param {Pulse} pulse - The pulse to copy from.\n * @see Pulse.init\n */\nprototype$27.init = function(pulse) {\n  this.value.init(pulse, pulse.NO_SOURCE);\n};\n\n/**\n * Evaluate this operator. This method overrides the\n * default behavior to simply return the contained pulse value.\n * @return {Pulse}\n */\nprototype$27.evaluate = function() {\n  // assert: this.value.stamp === pulse.stamp\n  return this.value;\n};\n\n/**\n * Facets a dataflow into a set of subflows based on a key.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): *} params.key - The key field to facet by.\n */\nfunction Facet(params) {\n  Transform.call(this, {}, params);\n  this._keys = fastmap(); // cache previously calculated key values\n\n  // keep track of active subflows, use as targets array for listeners\n  // this allows us to limit propagation to only updated subflows\n  var a = this._targets = [];\n  a.active = 0;\n  a.forEach = function(f) {\n    for (var i=0, n=a.active; i<n; ++i) f(a[i], i, a);\n  };\n}\n\nvar prototype$26 = inherits(Facet, Transform);\n\nprototype$26.activate = function(flow) {\n  this._targets[this._targets.active++] = flow;\n};\n\nprototype$26.subflow = function(key, flow, pulse, parent) {\n  var flows = this.value,\n      sf = flows.hasOwnProperty(key) && flows[key],\n      df, p;\n\n  if (!sf) {\n    p = parent || (p = this._group[key]) && p.tuple;\n    df = pulse.dataflow;\n    sf = df.add(new Subflow(pulse.fork(pulse.NO_SOURCE), this))\n      .connect(flow(df, key, p));\n    flows[key] = sf;\n    this.activate(sf);\n  } else if (sf.value.stamp < pulse.stamp) {\n    sf.init(pulse);\n    this.activate(sf);\n  }\n\n  return sf;\n};\n\nprototype$26.transform = function(_, pulse) {\n  var df = pulse.dataflow,\n      self = this,\n      key = _.key,\n      flow = _.subflow,\n      cache = this._keys,\n      rekey = _.modified('key');\n\n  function subflow(key) {\n    return self.subflow(key, flow, pulse);\n  }\n\n  this._group = _.group || {};\n  this._targets.active = 0; // reset list of active subflows\n\n  pulse.visit(pulse.ADD, function(t) {\n    var k = key(t);\n    cache.set(t._id, k);\n    subflow(k).add(t);\n  });\n\n  pulse.visit(pulse.REM, function(t) {\n    var k = cache.get(t._id);\n    cache.delete(t._id);\n    subflow(k).rem(t);\n  });\n\n  if (rekey || pulse.modified(key.fields)) {\n    pulse.visit(pulse.MOD, function(t) {\n      var k0 = cache.get(t._id),\n          k1 = key(t);\n      if (k0 === k1) {\n        subflow(k1).mod(t);\n      } else {\n        cache.set(t._id, k1);\n        subflow(k0).rem(t);\n        subflow(k1).add(t);\n      }\n    });\n  } else if (pulse.changed(pulse.MOD)) {\n    pulse.visit(pulse.MOD, function(t) {\n      subflow(cache.get(t._id)).mod(t);\n    });\n  }\n\n  if (rekey) {\n    pulse.visit(pulse.REFLOW, function(t) {\n      var k0 = cache.get(t._id),\n          k1 = key(t);\n      if (k0 !== k1) {\n        cache.set(t._id, k1);\n        subflow(k0).rem(t);\n        subflow(k1).add(t);\n      }\n    });\n  }\n\n  if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n  return pulse;\n};\n\n/**\n * Generates one or more field accessor functions.\n * If the 'name' parameter is an array, an array of field accessors\n * will be created and the 'as' parameter will be ignored.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.name - The field name(s) to access.\n * @param {string} params.as - The accessor function name.\n */\nfunction Field(params) {\n  Operator.call(this, null, update$2, params);\n}\n\ninherits(Field, Operator);\n\nfunction update$2(_) {\n  return (this.value && !_.modified()) ? this.value\n    : isArray(_.name) ? array(_.name).map(function(f) { return field(f); })\n    : field(_.name, _.as);\n}\n\n/**\n * Filters data tuples according to a predicate function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The predicate expression function\n *   that determines a tuple's filter status. Truthy values pass the filter.\n */\nfunction Filter(params) {\n  Transform.call(this, fastmap(), params);\n}\n\nvar prototype$28 = inherits(Filter, Transform);\n\nprototype$28.transform = function(_, pulse) {\n  var df = pulse.dataflow,\n      cache = this.value, // cache ids of filtered tuples\n      output = pulse.fork(),\n      add = output.add,\n      rem = output.rem,\n      mod = output.mod,\n      test = _.expr,\n      isMod = true;\n\n  pulse.visit(pulse.REM, function(t) {\n    if (!cache.has(t._id)) rem.push(t);\n    else cache.delete(t._id);\n  });\n\n  pulse.visit(pulse.ADD, function(t) {\n    if (test(t, _)) add.push(t);\n    else cache.set(t._id, 1);\n  });\n\n  function revisit(t) {\n    var b = test(t, _),\n        s = cache.get(t._id);\n    if (b && s) {\n      cache.delete(t._id);\n      add.push(t);\n    } else if (!b && !s) {\n      cache.set(t._id, 1);\n      rem.push(t);\n    } else if (isMod && b && !s) {\n      mod.push(t);\n    }\n  }\n\n  pulse.visit(pulse.MOD, revisit);\n\n  if (_.modified()) {\n    isMod = false;\n    pulse.visit(pulse.REFLOW, revisit);\n  }\n\n  if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n  return output;\n};\n\n/**\n * Folds one more tuple fields into multiple tuples in which the field\n * name and values are available under new 'key' and 'value' fields.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.fields - An array of field accessors\n *   for the tuple fields that should be folded.\n */\nfunction Fold(params) {\n  Transform.call(this, {}, params);\n}\n\nvar prototype$29 = inherits(Fold, Transform);\n\nfunction keyFunction(f) {\n  return f.fields.join('|');\n}\n\nprototype$29.transform = function(_, pulse) {\n  var cache = this.value,\n      reset = _.modified('fields'),\n      fields = _.fields,\n      as = _.as || ['key', 'value'],\n      key = as[0],\n      value = as[1],\n      keys = fields.map(keyFunction),\n      n = fields.length,\n      stamp = pulse.stamp,\n      out = pulse.fork(pulse.NO_SOURCE),\n      i = 0, mask = 0, id;\n\n  function add(t) {\n    var f = (cache[t._id] = Array(n)); // create cache of folded tuples\n    for (var i=0, ft; i<n; ++i) { // for each key, derive folds\n      ft = (f[i] = derive(t));\n      ft[key] = keys[i];\n      ft[value] = fields[i](t);\n      out.add.push(ft);\n    }\n  }\n\n  function mod(t) {\n    var f = cache[t._id]; // get cache of folded tuples\n    for (var i=0, ft; i<n; ++i) { // for each key, rederive folds\n      if (!(mask & (1 << i))) continue; // field is unchanged\n      ft = rederive(t, f[i], stamp);\n      ft[key] = keys[i];\n      ft[value] = fields[i](t);\n      out.mod.push(ft);\n    }\n  }\n\n  if (reset) {\n    // on reset, remove all folded tuples and clear cache\n    for (id in cache) out.rem.push.apply(out.rem, cache[id]);\n    cache = this.value = {};\n    pulse.visit(pulse.SOURCE, add);\n  } else {\n    pulse.visit(pulse.ADD, add);\n\n    for (; i<n; ++i) {\n      if (pulse.modified(fields[i].fields)) mask |= (1 << i);\n    }\n    if (mask) pulse.visit(pulse.MOD, mod);\n\n    pulse.visit(pulse.REM, function(t) {\n      out.rem.push.apply(out.rem, cache[t._id]);\n      cache[t._id] = null;\n    });\n  }\n\n  return out.modifies(as);\n};\n\n/**\n * Invokes a function for each data tuple and saves the results as a new field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n * @param {string} params.as - The field name under which to save the result.\n * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n *   added tuples only, and does not update in response to modifications.\n */\nfunction Formula(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$30 = inherits(Formula, Transform);\n\nprototype$30.transform = function(_, pulse) {\n  var func = _.expr,\n      as = _.as,\n      mod = _.modified(),\n      flag = _.initonly ? pulse.ADD\n      : mod ? pulse.SOURCE\n      : pulse.modified(func.fields) ? pulse.ADD_MOD\n      : pulse.ADD;\n\n  function set(t) {\n    t[as] = func(t, _);\n  }\n\n  if (mod) {\n    // parameters updated, need to reflow\n    pulse = pulse.materialize().reflow(true);\n  }\n\n  return pulse.visit(flag, set).modifies(as);\n};\n\n/**\n * Generates data tuples using a provided generator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Parameters): object} params.generator - A tuple generator\n *   function. This function is given the operator parameters as input.\n *   Changes to any additional parameters will not trigger re-calculation\n *   of previously generated tuples. Only future tuples are affected.\n * @param {number} params.size - The number of tuples to produce.\n */\nfunction Generate(params) {\n  Transform.call(this, [], params);\n}\n\nvar prototype$31 = inherits(Generate, Transform);\n\nprototype$31.transform = function(_, pulse) {\n  var data = this.value,\n      out = pulse.fork(pulse.ALL),\n      num = _.size - data.length,\n      gen = _.generator,\n      add, rem, t;\n\n  if (num > 0) {\n    // need more tuples, generate and add\n    for (add=[]; --num >= 0;) {\n      add.push(t = ingest(gen(_)));\n      data.push(t);\n    }\n    out.add = out.add.length\n      ? out.materialize(out.ADD).add.concat(add)\n      : add;\n  } else {\n    // need fewer tuples, remove\n    rem = data.slice(0, -num);\n    out.rem = out.rem.length\n      ? out.materialize(out.REM).rem.concat(rem)\n      : rem;\n    data = data.slice(-num);\n  }\n\n  out.source = this.value = data;\n  return out;\n};\n\nvar Methods = {\n  value: 'value',\n  median: d3Array.median,\n  mean: d3Array.mean,\n  min: d3Array.min,\n  max: d3Array.max\n};\n\nvar Empty$1 = [];\n\n/**\n * Impute missing values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to impute.\n * @param {Array<function(object): *>} [params.groupby] - An array of\n *   accessors to determine series within which to perform imputation.\n * @param {Array<function(object): *>} [params.orderby] - An array of\n *   accessors to determine the ordering within a series.\n * @param {string} [method='value'] - The imputation method to use. One of\n *   'value', 'mean', 'median', 'max', 'min'.\n * @param {*} [value=0] - The constant value to use for imputation\n *   when using method 'value'.\n */\nfunction Impute(params) {\n  Transform.call(this, [], params);\n}\n\nvar prototype$32 = inherits(Impute, Transform);\n\nfunction getValue(_) {\n  var m = _.method || Methods.value, v;\n\n  if (Methods[m] == null) {\n    error('Unrecognized imputation method: ' + m);\n  } else if (m === Methods.value) {\n    v = _.value !== undefined ? _.value : 0;\n    return function() { return v; };\n  } else {\n    return Methods[m];\n  }\n}\n\nfunction getField(_) {\n  var f = _.field;\n  return function(t) { return t ? f(t) : NaN; };\n}\n\nprototype$32.transform = function(_, pulse) {\n  var out = pulse.fork(pulse.ALL),\n      impute = getValue(_),\n      field = getField(_),\n      fName = accessorName(_.field),\n      gNames = _.groupby.map(accessorName),\n      oNames = _.orderby.map(accessorName),\n      groups = partition$1(pulse.source, _.groupby, _.orderby),\n      curr = [],\n      prev = this.value,\n      m = groups.domain.length,\n      group, value, gVals, oVals, g, i, j, l, n, t;\n\n  for (g=0, l=groups.length; g<l; ++g) {\n    group = groups[g];\n    gVals = group.values;\n    value = NaN;\n\n    // add tuples for missing values\n    for (j=0; j<m; ++j) {\n      if (group[j] != null) continue;\n      oVals = groups.domain[j];\n\n      t = {_impute: true};\n      for (i=0, n=gVals.length; i<n; ++i) t[gNames[i]] = gVals[i];\n      for (i=0, n=oVals.length; i<n; ++i) t[oNames[i]] = oVals[i];\n      t[fName] = isNaN(value) ? (value = impute(group, field)) : value;\n\n      curr.push(ingest(t));\n    }\n  }\n\n  // update pulse with imputed tuples\n  if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n  if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n  this.value = curr;\n\n  return out;\n};\n\nfunction partition$1(data, groupby, orderby) {\n  var get = function(f) { return f(t); },\n      groups = [],\n      domain = [],\n      oMap = {}, oVals, oKey,\n      gMap = {}, gVals, gKey,\n      group, i, j, n, t;\n\n  for (i=0, n=data.length; i<n; ++i) {\n    t = data[i];\n\n    oKey = (oVals = orderby.map(get)) + '';\n    j = oMap[oKey] || (oMap[oKey] = domain.push(oVals));\n\n    gKey = (gVals = groupby ? groupby.map(get) : Empty$1) + '';\n    if (!(group = gMap[gKey])) {\n      group = (gMap[gKey] = []);\n      groups.push(group);\n      group.values = gVals;\n    }\n    group[j-1] = t;\n  }\n\n  return (groups.domain = domain, groups);\n}\n\n/**\n * Generates a key function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string>} params.fields - The field name(s) for the key function.\n */\nfunction Key(params) {\n  Operator.call(this, null, update$3, params);\n}\n\ninherits(Key, Operator);\n\nfunction update$3(_) {\n  return (this.value && !_.modified()) ? this.value : key(_.fields);\n}\n\n/**\n * Extend tuples by joining them with values from a lookup table.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Map} params.index - The lookup table map.\n * @param {Array<function(object): *} params.fields - The fields to lookup.\n * @param {Array<string>} params.as - Output field names for each lookup value.\n * @param {*} [params.default] - A default value to use if lookup fails.\n */\nfunction Lookup(params) {\n  Transform.call(this, {}, params);\n}\n\nvar prototype$33 = inherits(Lookup, Transform);\n\nprototype$33.transform = function(_, pulse) {\n  var out = pulse,\n      as = _.as,\n      keys = _.fields,\n      index = _.index,\n      values = _.values,\n      defaultValue = _.default==null ? null : _.default,\n      reset = _.modified(),\n      flag = reset ? pulse.SOURCE : pulse.ADD,\n      n = keys.length,\n      set, m, mods;\n\n  if (values) {\n    m = values.length;\n\n    if (n > 1 && !as) {\n      error('Multi-field lookup requires explicit \"as\" parameter.');\n    }\n    if (as && as.length !== n * m) {\n      error('The \"as\" parameter has too few output field names.');\n    }\n    as = as || values.map(accessorName);\n\n    set = function(t) {\n      for (var i=0, k=0, j, v; i<n; ++i) {\n        v = index.get(keys[i](t));\n        if (v == null) for (j=0; j<m; ++j, ++k) t[as[k]] = defaultValue;\n        else for (j=0; j<m; ++j, ++k) t[as[k]] = values[j](v);\n      }\n    };\n  } else {\n    if (!as) {\n      error('Missing output field names.');\n    }\n\n    set = function(t) {\n      for (var i=0, v; i<n; ++i) {\n        v = index.get(keys[i](t));\n        t[as[i]] = v==null ? defaultValue : v;\n      }\n    };\n  }\n\n  if (reset) {\n    out = pulse.reflow(true);\n  } else {\n    mods = keys.some(function(k) { return pulse.modified(k.fields); });\n    flag |= (mods ? pulse.MOD : 0);\n  }\n  pulse.visit(flag, set);\n\n  return out.modifies(as);\n};\n\n/**\n * Computes global min/max extents over a collection of extents.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<number>>} params.extents - The input extents.\n */\nfunction MultiExtent(params) {\n  Operator.call(this, null, update$4, params);\n}\n\ninherits(MultiExtent, Operator);\n\nfunction update$4(_) {\n  if (this.value && !_.modified()) {\n    return this.value;\n  }\n\n  var min = +Infinity,\n      max = -Infinity,\n      ext = _.extents,\n      i, n, e;\n\n  for (i=0, n=ext.length; i<n; ++i) {\n    e = ext[i];\n    if (e[0] < min) min = e[0];\n    if (e[1] > max) max = e[1];\n  }\n  return [min, max];\n}\n\n/**\n * Merge a collection of value arrays.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<*>>} params.values - The input value arrrays.\n */\nfunction MultiValues(params) {\n  Operator.call(this, null, update$5, params);\n}\n\ninherits(MultiValues, Operator);\n\nfunction update$5(_) {\n  return (this.value && !_.modified())\n    ? this.value\n    : _.values.reduce(function(data, _) { return data.concat(_); }, []);\n}\n\n/**\n * Operator whose value is simply its parameter hash. This operator is\n * useful for enabling reactive updates to values of nested objects.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nfunction Params(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Params, Transform);\n\nParams.prototype.transform = function(_, pulse) {\n  this.modified(_.modified());\n  this.value = _;\n  return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n};\n\n/**\n * Partitions pre-faceted data into tuple subflows.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): Array<object>} params.field - The field\n *   accessor for an array of subflow tuple objects.\n */\nfunction PreFacet(params) {\n  Facet.call(this, params);\n}\n\nvar prototype$34 = inherits(PreFacet, Facet);\n\nprototype$34.transform = function(_, pulse) {\n  var self = this,\n      flow = _.subflow,\n      field = _.field;\n\n  if (_.modified('field')) {\n    error('PreFacet does not support field modification.');\n  }\n\n  this._targets.active = 0; // reset list of active subflows\n\n  pulse.visit(pulse.MOD, function(t) {\n    var sf = self.subflow(t._id, flow, pulse, t);\n    field ? field(t).forEach(function(_) { sf.mod(_); }) : sf.mod(t);\n  });\n\n  pulse.visit(pulse.ADD, function(t) {\n    var sf = self.subflow(t._id, flow, pulse, t);\n    field ? field(t).forEach(function(_) { sf.add(ingest(_)); }) : sf.add(t);\n  });\n\n  pulse.visit(pulse.REM, function(t) {\n    var sf = self.subflow(t._id, flow, pulse, t);\n    field ? field(t).forEach(function(_) { sf.rem(_); }) : sf.rem(t);\n  });\n\n  return pulse;\n};\n\n/**\n * Proxy the value of another operator as a pure signal value.\n * Ensures no tuples are propagated.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {*} params.value - The value to proxy, becomes the value of this operator.\n */\nfunction Proxy(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$35 = inherits(Proxy, Transform);\n\nprototype$35.transform = function(_, pulse) {\n  this.value = _.value;\n  return _.modified('value')\n    ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n    : pulse.StopPropagation;\n};\n\n/**\n * Compute rank order scores for tuples. The tuples are assumed to have been\n * sorted in the desired rank order by an upstream data source.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the field to rank.\n * @param {boolean} params.normalize - Boolean flag for normalizing rank values.\n *   If true, the integer rank scores are normalized to range [0, 1].\n */\nfunction Rank(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$36 = inherits(Rank, Transform);\n\nprototype$36.transform = function(_, pulse) {\n  if (!pulse.source) {\n    error('Rank transform requires an upstream data source.');\n  }\n\n  var norm  = _.normalize,\n      field = _.field,\n      as = _.as || 'rank',\n      ranks = {},\n      n = -1, rank;\n\n  if (field) {\n    // If we have a field accessor, first compile distinct keys.\n    pulse.visit(pulse.SOURCE, function(t) {\n      var v = field(t);\n      if (ranks[v] == null) ranks[v] = ++n;\n    });\n    pulse.visit(pulse.SOURCE, norm && --n\n      ? function(t) { t[as] = ranks[field(t)] / n; }\n      : function(t) { t[as] = ranks[field(t)]; }\n    );\n  } else {\n    n += pulse.source.length;\n    rank = -1;\n    // Otherwise rank all the tuples together.\n    pulse.visit(pulse.SOURCE, norm && n\n      ? function(t) { t[as] = ++rank / n; }\n      : function(t) { t[as] = ++rank; }\n    );\n  }\n\n  return pulse.reflow(_.modified()).modifies(as);\n};\n\n/**\n * Relays a data stream between data processing pipelines.\n * If the derive parameter is set, this transform will create derived\n * copies of observed tuples. This provides derived data streams in which\n * modifications to the tuples do not pollute an upstream data source.\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.derive=false] - Boolean flag indicating if\n *   the transform should make derived copies of incoming tuples.\n * @constructor\n */\nfunction Relay(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$37 = inherits(Relay, Transform);\n\nprototype$37.transform = function(_, pulse) {\n  var out,\n      lut = this.value || (out = pulse = pulse.addAll(), this.value = {});\n\n  if (_.derive) {\n    out = pulse.fork();\n\n    pulse.visit(pulse.ADD, function(t) {\n      var dt = derive(t);\n      lut[t._id] = dt;\n      out.add.push(dt);\n    });\n\n    pulse.visit(pulse.MOD, function(t) {\n      out.mod.push(rederive(t, lut[t._id]));\n    });\n\n    pulse.visit(pulse.REM, function(t) {\n      out.rem.push(lut[t._id]);\n      lut[t._id] = null;\n    });\n  }\n\n  return out;\n};\n\n/**\n * Samples tuples passing through this operator.\n * Uses reservoir sampling to maintain a representative sample.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.size=1000] - The maximum number of samples.\n */\nfunction Sample(params) {\n  Transform.call(this, [], params);\n  this.count = 0;\n}\n\nvar prototype$38 = inherits(Sample, Transform);\n\nprototype$38.transform = function(_, pulse) {\n  var out = pulse.fork(),\n      mod = _.modified('size'),\n      num = _.size,\n      res = this.value,\n      cnt = this.count,\n      cap = 0,\n      map = res.reduce(function(m, t) { return (m[t._id] = 1, m); }, {});\n\n  // sample reservoir update function\n  function update(t) {\n    var p, idx;\n\n    if (res.length < num) {\n      res.push(t);\n    } else {\n      idx = ~~(cnt * Math.random());\n      if (idx < res.length && idx >= cap) {\n        p = res[idx];\n        if (map[p._id]) out.rem.push(p); // eviction\n        res[idx] = t;\n      }\n    }\n    ++cnt;\n  }\n\n  if (pulse.rem.length) {\n    // find all tuples that should be removed, add to output\n    pulse.visit(pulse.REM, function(t) {\n      if (map[t._id]) {\n        map[t._id] = -1;\n        out.rem.push(t);\n      }\n      --cnt;\n    });\n\n    // filter removed tuples out of the sample reservoir\n    res = res.filter(function(t) { return map[t._id] !== -1; });\n  }\n\n  if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n    // replenish sample if backing data source is available\n    cap = cnt = res.length;\n    pulse.visit(pulse.SOURCE, function(t) {\n      // update, but skip previously sampled tuples\n      if (!map[t._id]) update(t);\n    });\n    cap = -1;\n  }\n\n  if (mod && res.length > num) {\n    for (var i=0, n=res.length-num; i<n; ++i) {\n      map[res[i]._id] = -1;\n      out.rem.push(res[i]);\n    }\n    res = res.slice(n);\n  }\n\n  if (pulse.mod.length) {\n    // propagate modified tuples in the sample reservoir\n    pulse.visit(pulse.MOD, function(t) {\n      if (map[t._id]) out.mod.push(t);\n    });\n  }\n\n  if (pulse.add.length) {\n    // update sample reservoir\n    pulse.visit(pulse.ADD, update);\n  }\n\n  if (pulse.add.length || cap < 0) {\n    // output newly added tuples\n    out.add = res.filter(function(t) { return !map[t._id]; });\n  }\n\n  this.count = cnt;\n  this.value = out.source = res;\n  return out;\n};\n\n/**\n * Generates data tuples for a specified sequence range of numbers.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} params.start - The first number in the sequence.\n * @param {number} params.stop - The last number (exclusive) in the sequence.\n * @param {number} [params.step=1] - The step size between numbers in the sequence.\n */\nfunction Sequence(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$39 = inherits(Sequence, Transform);\n\nprototype$39.transform = function(_, pulse) {\n  if (this.value && !_.modified()) return;\n\n  var out = pulse.materialize().fork(pulse.MOD);\n\n  out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n  out.source = this.value = d3Array.range(_.start, _.stop, _.step || 1).map(ingest);\n  out.add = pulse.add.concat(this.value);\n  return out;\n};\n\n/**\n * Propagates a new pulse without any tuples so long as the input\n * pulse contains some added, removed or modified tuples.\n * @param {object} params - The parameters for this operator.\n * @constructor\n */\nfunction Sieve(params) {\n  Transform.call(this, null, params);\n  this.modified(true); // always treat as modified\n}\n\nvar prototype$40 = inherits(Sieve, Transform);\n\nprototype$40.transform = function(_, pulse) {\n  this.value = pulse.source;\n  return pulse.changed()\n    ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n    : pulse.StopPropagation;\n};\n\n/**\n * An index that maps from unique, string-coerced, field values to tuples.\n * Assumes that the field serves as a unique key with no duplicate values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field accessor to index.\n */\nfunction TupleIndex(params) {\n  Transform.call(this, fastmap(), params);\n}\n\nvar prototype$41 = inherits(TupleIndex, Transform);\n\nprototype$41.transform = function(_, pulse) {\n  var df = pulse.dataflow,\n      field = _.field,\n      index = this.value,\n      mod = true;\n\n  function set(t) { index.set(field(t), t); }\n\n  if (_.modified('field') || pulse.modified(field.fields)) {\n    index.clear();\n    pulse.visit(pulse.SOURCE, set);\n  } else if (pulse.changed()) {\n    pulse.visit(pulse.REM, function(t) { index.delete(field(t)); });\n    pulse.visit(pulse.ADD, set);\n  } else {\n    mod = false;\n  }\n\n  this.modified(mod);\n  if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n  return pulse.fork();\n};\n\n/**\n * Extracts an array of values. Assumes the source data has already been\n * reduced as needed (e.g., by an upstream Aggregate transform).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The domain field to extract.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for sorting the values. The comparator will be\n *   applied to backing tuples prior to value extraction.\n */\nfunction Values(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$42 = inherits(Values, Transform);\n\nprototype$42.transform = function(_, pulse) {\n  var run = !this.value\n    || _.modified('field')\n    || _.modified('sort')\n    || pulse.changed()\n    || (_.sort && pulse.modified(_.sort.fields));\n\n  if (run) {\n    this.value = (_.sort\n      ? pulse.source.slice().sort(_.sort)\n      : pulse.source).map(_.field);\n  }\n};\n\nvar AggregateDefinition = {\n  \"type\": \"Aggregate\",\n  \"metadata\": {\"generates\": true, \"changes\": true},\n  \"params\": [\n    { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n    { \"name\": \"fields\", \"type\": \"field\", \"array\": true },\n    { \"name\": \"ops\", \"type\": \"enum\", \"array\": true,\n      \"values\": [\n        \"count\", \"valid\", \"missing\", \"distinct\",\n        \"sum\", \"mean\", \"average\",\n        \"variance\", \"variancep\", \"stdev\", \"stdevp\", \"stderr\",\n        \"median\", \"q1\", \"q3\", \"ci0\", \"ci1\",\n        \"min\", \"max\", \"argmin\", \"argmax\" ] },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true },\n    { \"name\": \"drop\", \"type\": \"boolean\", \"default\": true },\n    { \"name\": \"cross\", \"type\": \"boolean\", \"default\": false },\n    { \"name\": \"key\", \"type\": \"field\" }\n  ]\n};\n\nvar BinDefinition = {\n  \"type\": \"Bin\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n    { \"name\": \"anchor\", \"type\": \"number\" },\n    { \"name\": \"maxbins\", \"type\": \"number\", \"default\": 20 },\n    { \"name\": \"base\", \"type\": \"number\", \"default\": 10 },\n    { \"name\": \"divide\", \"type\": \"number\", \"array\": true, \"default\": [5, 2] },\n    { \"name\": \"extent\", \"type\": \"number\", \"array\": true, \"length\": 2, \"required\": true },\n    { \"name\": \"step\", \"type\": \"number\" },\n    { \"name\": \"steps\", \"type\": \"number\", \"array\": true },\n    { \"name\": \"minstep\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"nice\", \"type\": \"boolean\", \"default\": true },\n    { \"name\": \"name\", \"type\": \"string\" },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"bin0\", \"bin1\"] }\n  ]\n};\n\nvar CollectDefinition = {\n  \"type\": \"Collect\",\n  \"metadata\": {\"source\": true},\n  \"params\": [\n    { \"name\": \"sort\", \"type\": \"compare\" }\n  ]\n};\n\nvar CountPatternDefinition = {\n  \"type\": \"CountPattern\",\n  \"metadata\": {\"generates\": true, \"changes\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n    { \"name\": \"case\", \"type\": \"enum\", \"values\": [\"upper\", \"lower\", \"mixed\"], \"default\": \"mixed\" },\n    { \"name\": \"pattern\", \"type\": \"string\", \"default\": \"[\\\\w\\\"]+\" },\n    { \"name\": \"stopwords\", \"type\": \"string\", \"default\": \"\" },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"text\", \"count\"] }\n  ]\n};\n\nvar CrossDefinition = {\n  \"type\": \"Cross\",\n  \"metadata\": {\"source\": true, \"generates\": true, \"changes\": true},\n  \"params\": [\n    { \"name\": \"filter\", \"type\": \"expr\" },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"a\", \"b\"] }\n  ]\n};\n\nvar distributions = [\n  {\n    \"key\": {\"function\": \"normal\"},\n    \"params\": [\n      { \"name\": \"mean\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"stdev\", \"type\": \"number\", \"default\": 1 }\n    ]\n  },\n  {\n    \"key\": {\"function\": \"uniform\"},\n    \"params\": [\n      { \"name\": \"min\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"max\", \"type\": \"number\", \"default\": 1 }\n    ]\n  },\n  {\n    \"key\": {\"function\": \"kde\"},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"from\", \"type\": \"data\" },\n      { \"name\": \"bandwidth\", \"type\": \"number\", \"default\": 0 }\n    ]\n  }\n];\n\nvar mixture = {\n  \"key\": {\"function\": \"mixture\"},\n  \"params\": [\n    { \"name\": \"distributions\", \"type\": \"param\", \"array\": true,\n      \"params\": distributions },\n    { \"name\": \"weights\", \"type\": \"number\", \"array\": true }\n  ]\n};\n\nvar DensityDefinition = {\n  \"type\": \"Density\",\n  \"metadata\": {\"generates\": true, \"source\": true},\n  \"params\": [\n    { \"name\": \"extent\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"steps\", \"type\": \"number\", \"default\": 100 },\n    { \"name\": \"method\", \"type\": \"string\", \"default\": \"pdf\",\n      \"values\": [\"pdf\", \"cdf\"] },\n    { \"name\": \"distribution\", \"type\": \"param\",\n      \"params\": distributions.concat(mixture) },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true,\n      \"default\": [\"value\", \"density\"] }\n  ]\n};\n\nvar ExtentDefinition = {\n  \"type\": \"Extent\",\n  \"metadata\": {},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\", \"required\": true }\n  ]\n};\n\nvar FilterDefinition = {\n  \"type\": \"Filter\",\n  \"metadata\": {\"changes\": true},\n  \"params\": [\n    { \"name\": \"expr\", \"type\": \"expr\", \"required\": true }\n  ]\n};\n\nvar FoldDefinition = {\n  \"type\": \"Fold\",\n  \"metadata\": {\"generates\": true, \"changes\": true},\n  \"params\": [\n    { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"key\", \"value\"] }\n  ]\n};\n\nvar FormulaDefinition = {\n  \"type\": \"Formula\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"expr\", \"type\": \"expr\", \"required\": true },\n    { \"name\": \"as\", \"type\": \"string\", \"required\": true },\n    { \"name\": \"initonly\", \"type\": \"boolean\" }\n  ]\n};\n\nvar ImputeDefinition = {\n  \"type\": \"Impute\",\n  \"metadata\": {\"changes\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n    { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n    { \"name\": \"orderby\", \"type\": \"field\", \"array\": true },\n    { \"name\": \"method\", \"type\": \"enum\", \"default\": \"value\",\n      \"values\": [\"value\", \"mean\", \"median\", \"max\", \"min\"] },\n    { \"name\": \"value\", \"default\": 0 }\n  ]\n};\n\nvar LookupDefinition = {\n  \"type\": \"Lookup\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"index\", \"type\": \"index\", \"params\": [\n        {\"name\": \"from\", \"type\": \"data\", \"required\": true },\n        {\"name\": \"key\", \"type\": \"field\", \"required\": true }\n      ] },\n    { \"name\": \"values\", \"type\": \"field\", \"array\": true },\n    { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true },\n    { \"name\": \"default\", \"default\": null }\n  ]\n};\n\nvar RankDefinition = {\n  \"type\": \"Rank\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\" },\n    { \"name\": \"normalize\", \"type\": \"boolean\", \"default\": false },\n    { \"name\": \"as\", \"type\": \"string\", \"default\": \"rank\" }\n  ]\n};\n\nvar SampleDefinition = {\n  \"type\": \"Sample\",\n  \"metadata\": {\"source\": true, \"changes\": true},\n  \"params\": [\n    { \"name\": \"size\", \"type\": \"number\", \"default\": 1000 }\n  ]\n};\n\nvar SequenceDefinition = {\n  \"type\": \"Sequence\",\n  \"metadata\": {\"generates\": true, \"source\": true},\n  \"params\": [\n    { \"name\": \"start\", \"type\": \"number\", \"required\": true },\n    { \"name\": \"stop\", \"type\": \"number\", \"required\": true },\n    { \"name\": \"step\", \"type\": \"number\", \"default\": 1 }\n  ],\n  \"output\": [\"value\"]\n};\n\n// Data Transforms\nregister(AggregateDefinition, Aggregate);\nregister(BinDefinition, Bin);\nregister(CollectDefinition, Collect);\nregister(CountPatternDefinition, CountPattern);\nregister(CrossDefinition, Cross);\nregister(DensityDefinition, Density);\nregister(ExtentDefinition, Extent);\nregister(FilterDefinition, Filter);\nregister(FoldDefinition, Fold);\nregister(FormulaDefinition, Formula);\nregister(ImputeDefinition, Impute);\nregister(LookupDefinition, Lookup);\nregister(RankDefinition, Rank);\nregister(SampleDefinition, Sample);\nregister(SequenceDefinition, Sequence);\n\ntransform('Compare', Compare);\ntransform('Facet', Facet);\ntransform('Field', Field);\ntransform('Generate', Generate);\ntransform('Key', Key);\ntransform('MultiExtent', MultiExtent);\ntransform('MultiValues', MultiValues);\ntransform('Params', Params);\ntransform('PreFacet', PreFacet);\ntransform('Proxy', Proxy);\ntransform('Relay', Relay);\ntransform('Sieve', Sieve);\ntransform('Subflow', Subflow);\ntransform('TupleIndex', TupleIndex);\ntransform('Values', Values);\n\nfunction invertRange(scale) {\n  return function(_) {\n    var lo = _[0],\n        hi = _[1],\n        t;\n\n    if (hi < lo) t = lo, lo = hi, hi = t;\n\n    return [\n      scale.invert(lo),\n      scale.invert(hi)\n    ];\n  }\n}\n\nfunction invertRangeExtent(scale) {\n  return function(_) {\n    var range = scale.range(),\n        lo = _[0],\n        hi = _[1],\n        min = -1, max, t, i, n;\n\n    if (hi < lo) t = lo, lo = hi, hi = t;\n\n    for (i=0, n=range.length; i<n; ++i) {\n      if (range[i] >= lo && range[i] <= hi) {\n        if (min < 0) min = i;\n        max = i;\n      }\n    }\n\n    if (min < 0) return undefined;\n\n    lo = scale.invertExtent(range[min]);\n    hi = scale.invertExtent(range[max]);\n\n    return [\n      lo[0] === undefined ? lo[1] : lo[0],\n      hi[1] === undefined ? hi[0] : hi[1]\n    ];\n  }\n}\n\nfunction bandSpace(count, paddingInner, paddingOuter) {\n  var space = count - paddingInner + paddingOuter * 2;\n  return count ? (space > 0 ? space : 1) : 0;\n}\n\nfunction band() {\n  var scale = $.scaleOrdinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      range = [0, 1],\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = range[1] < range[0],\n        start = range[reverse - 0],\n        stop = range[1 - reverse],\n        space = bandSpace(n, paddingInner, paddingOuter);\n    step = (stop - start) / (space || 1);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = d3Array.range(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = [+_[0], +_[1]], round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.invertRange = function(_) {\n    var lo = +_[0],\n        hi = +_[1],\n        reverse = range[1] < range[0],\n        values = reverse ? ordinalRange().reverse() : ordinalRange(),\n        n = values.length - 1, a, b, t;\n\n    // order range inputs, bail if outside of scale range\n    if (hi < lo) t = lo, lo = hi, hi = t;\n    if (hi < values[0] || lo > range[1-reverse]) return undefined;\n\n    // binary search to index into scale range\n    a = Math.max(0, d3Array.bisectRight(values, lo) - 1);\n    b = lo===hi ? a : d3Array.bisectRight(values, hi) - 1;\n\n    // increment index a if lo is within padding gap\n    if (lo - values[a] > bandwidth + 1e-10) ++a;\n\n    if (reverse) t = a, a = n - b, b = n - t; // map + swap\n    return (a > b) ? undefined : domain().slice(a, b+1);\n  };\n\n  scale.invert = function(_) {\n    var value = scale.invertRange([_, _]);\n    return value ? value[0] : value;\n  };\n\n  scale.copy = function() {\n    return band()\n        .domain(domain())\n        .range(range)\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return rescale();\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nfunction point$1() {\n  return pointish(band().paddingInner(1));\n}\n\nvar map = Array.prototype.map;\nvar slice = Array.prototype.slice;\nfunction numbers$1(_) {\n  return map.call(_, function(x) { return +x; });\n}\n\nfunction binLinear() {\n  var linear = $.scaleLinear(),\n      domain = [];\n\n  function scale(x) {\n    return x == null || x !== x\n      ? undefined\n      : linear(domain[Math.max(d3Array.bisect(domain, x), 1)-1]);\n  }\n\n  function setDomain(_) {\n    domain = numbers$1(_);\n    linear.domain([domain[0], peek(domain)]);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (setDomain(_), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (linear.range(_), scale) : linear.range();\n  };\n\n  scale.rangeRound = function(_) {\n    return arguments.length ? (linear.rangeRound(_), scale) : linear.rangeRound();\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (linear.interpolate(_), scale) : linear.interpolate();\n  };\n\n  scale.invert = function(_) {\n    return linear.invert(_);\n  };\n\n  scale.ticks = function(count) {\n    var n = domain.length,\n        stride = ~~(n / (count || n));\n\n    return stride < 2\n      ? scale.domain()\n      : domain.filter(function(x, i) { return !(i % stride); });\n  };\n\n  scale.tickFormat = function() {\n    return linear.tickFormat.apply(linear, arguments);\n  };\n\n  scale.copy = function() {\n    return binLinear().domain(scale.domain()).range(scale.range());\n  };\n\n  return scale;\n}\n\nfunction binOrdinal() {\n  var domain = [],\n      range = [];\n\n  function scale(x) {\n    return x == null || x !== x\n      ? undefined\n      : range[(d3Array.bisect(domain, x) - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = numbers$1(_), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), scale) : range.slice();\n  };\n\n  scale.copy = function() {\n    return binOrdinal().domain(scale.domain()).range(scale.range());\n  };\n\n  return scale;\n}\n\nfunction sequential(interpolator) {\n  var linear = $.scaleLinear(),\n      x0 = 0,\n      dx = 1,\n      clamp = false;\n\n  function update() {\n    var domain = linear.domain();\n    x0 = domain[0];\n    dx = peek(domain) - x0;\n  }\n\n  function scale(x) {\n    var t = (x - x0) / dx;\n    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);\n  }\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (linear.domain(_), update(), scale) : linear.domain();\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.copy = function() {\n    return sequential().domain(linear.domain()).clamp(clamp).interpolator(interpolator);\n  };\n\n  scale.ticks = function(count) {\n    return linear.ticks(count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return linear.tickFormat(count, specifier);\n  };\n\n  scale.nice = function(count) {\n    return linear.nice(count), update(), scale;\n  };\n\n  return scale;\n}\n\n/**\n * Augment scales with their type and needed inverse methods.\n */\nfunction create(type, constructor) {\n  return function scale() {\n    var s = constructor();\n\n    if (!s.invertRange) {\n      s.invertRange = s.invert ? invertRange(s)\n        : s.invertExtent ? invertRangeExtent(s)\n        : undefined;\n    }\n\n    return s.type = type, s;\n  };\n}\n\nfunction scale$1(type, scale) {\n  return arguments.length > 1 ? (scales[type] = create(type, scale), this)\n    : scales.hasOwnProperty(type) ? scales[type] : undefined;\n}\n\nvar scales = {\n  // base scale types\n  identity:      $.scaleIdentity,\n  linear:        $.scaleLinear,\n  log:           $.scaleLog,\n  ordinal:       $.scaleOrdinal,\n  pow:           $.scalePow,\n  sqrt:          $.scaleSqrt,\n  quantile:      $.scaleQuantile,\n  quantize:      $.scaleQuantize,\n  threshold:     $.scaleThreshold,\n  time:          $.scaleTime,\n  utc:           $.scaleUtc,\n\n  // extended scale types\n  band:          band,\n  point:         point$1,\n  sequential:    sequential,\n  'bin-linear':  binLinear,\n  'bin-ordinal': binOrdinal\n};\n\nfor (var key$1 in scales) {\n  scale$1(key$1, scales[key$1]);\n}\n\nfunction colors(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n}\n\nvar tableau10 = colors(\n  '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac'\n);\n\nvar tableau20 = colors(\n  '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5'\n);\n\nvar blueOrange = new Array(3).concat(\n  \"67a9cff7f7f7f1a340\",\n  \"0571b092c5defdb863e66101\",\n  \"0571b092c5def7f7f7fdb863e66101\",\n  \"2166ac67a9cfd1e5f0fee0b6f1a340b35806\",\n  \"2166ac67a9cfd1e5f0f7f7f7fee0b6f1a340b35806\",\n  \"2166ac4393c392c5ded1e5f0fee0b6fdb863e08214b35806\",\n  \"2166ac4393c392c5ded1e5f0f7f7f7fee0b6fdb863e08214b35806\",\n  \"0530612166ac4393c392c5ded1e5f0fee0b6fdb863e08214b358067f3b08\",\n  \"0530612166ac4393c392c5ded1e5f0f7f7f7fee0b6fdb863e08214b358067f3b08\"\n).map(colors);\n\nvar discrete = {\n  blueorange:  blueOrange\n};\n\nvar schemes = {\n  // d3 built-in categorical palettes\n  category10:  $.schemeCategory10,\n  category20:  $.schemeCategory20,\n  category20b: $.schemeCategory20b,\n  category20c: $.schemeCategory20c,\n\n  // extended categorical palettes\n  accent:      _.schemeAccent,\n  dark2:       _.schemeDark2,\n  paired:      _.schemePaired,\n  pastel1:     _.schemePastel1,\n  pastel2:     _.schemePastel2,\n  set1:        _.schemeSet1,\n  set2:        _.schemeSet2,\n  set3:        _.schemeSet3,\n  tableau10:   tableau10,\n  tableau20:   tableau20,\n\n  // d3 built-in interpolators\n  viridis:     $.interpolateViridis,\n  magma:       $.interpolateMagma,\n  inferno:     $.interpolateInferno,\n  plasma:      $.interpolatePlasma,\n\n  // extended interpolators\n  blueorange:  $$1.interpolateRgbBasis(peek(blueOrange))\n};\n\nfunction add$2(name, suffix) {\n  schemes[name] = _['interpolate' + suffix];\n  discrete[name] = _['scheme' + suffix];\n}\n\n// sequential single-hue\nadd$2('blues',    'Blues');\nadd$2('greens',   'Greens');\nadd$2('greys',    'Greys');\nadd$2('purples',  'Purples');\nadd$2('reds',     'Reds');\nadd$2('oranges',  'Oranges');\n\n// diverging\nadd$2('brownbluegreen',    'BrBG');\nadd$2('purplegreen',       'PRGn');\nadd$2('pinkyellowgreen',   'PiYG');\nadd$2('purpleorange',      'PuOr');\nadd$2('redblue',           'RdBu');\nadd$2('redgrey',           'RdGy');\nadd$2('redyellowblue',     'RdYlBu');\nadd$2('redyellowgreen',    'RdYlGn');\nadd$2('spectral',          'Spectral');\n\n// sequential multi-hue\nadd$2('bluegreen',         'BuGn');\nadd$2('bluepurple',        'BuPu');\nadd$2('greenblue',         'GnBu');\nadd$2('orangered',         'OrRd');\nadd$2('purplebluegreen',   'PuBuGn');\nadd$2('purpleblue',        'PuBu');\nadd$2('purplered',         'PuRd');\nadd$2('redpurple',         'RdPu');\nadd$2('yellowgreenblue',   'YlGnBu');\nadd$2('yellowgreen',       'YlGn');\nadd$2('yelloworangebrown', 'YlOrBr');\nadd$2('yelloworangered',   'YlOrRd');\n\nfunction getScheme(name, scheme) {\n  if (arguments.length > 1) return (schemes[name] = scheme, this);\n\n  var part = name.split('-');\n  name = part[0];\n  part = +part[1] + 1;\n\n  return part && discrete.hasOwnProperty(name) ? discrete[name][part-1]\n    : !part && schemes.hasOwnProperty(name) ? schemes[name]\n    : undefined;\n}\n\nfunction interpolateRange(interpolator, range) {\n  var start = range[0],\n      span = peek(range) - start;\n  return function(i) { return interpolator(start + i * span); };\n}\n\nfunction scaleFraction(scale, min, max) {\n  return scale.type === 'linear' || scale.type === 'sequential'\n    ? function(_) { return (_ - min) / (max - min); }\n    : scale.copy().domain([min, max]).range([0, 1]).interpolate(lerp);\n}\n\nfunction lerp(a, b) {\n  var span = b - a;\n  return function(i) { return a + i * span; }\n}\n\nfunction getInterpolate(type, gamma) {\n  var interp = $$1[method(type)];\n  return (gamma != null && interp && interp.gamma)\n    ? interp.gamma(gamma)\n    : interp;\n}\n\nfunction method(type) {\n  return 'interpolate' + type.toLowerCase()\n    .split('-')\n    .map(function(s) { return s[0].toUpperCase() + s.slice(1); })\n    .join('');\n}\n\nvar array$1 = Array.prototype;\n\nvar slice$1 = array$1.slice;\n\nfunction ascending$1(a, b) {\n  return a - b;\n}\n\nfunction area$3(ring) {\n  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area;\n}\n\nfunction constant$2(x) {\n  return function() {\n    return x;\n  };\n}\n\nfunction contains(ring, hole) {\n  var i = -1, n = hole.length, c;\n  while (++i < n) if (c = ringContains(ring, hole[i])) return c;\n  return 0;\n}\n\nfunction ringContains(ring, point) {\n  var x = point[0], y = point[1], contains = -1;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\n    if (segmentContains(pi, pj, point)) return 0;\n    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;\n  }\n  return contains;\n}\n\nfunction segmentContains(a, b, c) {\n  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);\n}\n\nfunction collinear(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\n}\n\nfunction within(p, q, r) {\n  return p <= q && q <= r || r <= q && q <= p;\n}\n\nfunction noop$1() {}\n\nvar cases = [\n  [],\n  [[[1,1.5],[0.5,1]]],\n  [[[1.5,1],[1,1.5]]],\n  [[[1.5,1],[0.5,1]]],\n  [[[1,0.5],[1.5,1]]],\n  [[[1,0.5],[0.5,1]],[[1,1.5],[1.5,1]]],\n  [[[1,0.5],[1,1.5]]],\n  [[[1,0.5],[0.5,1]]],\n  [[[0.5,1],[1,0.5]]],\n  [[[1,1.5],[1,0.5]]],\n  [[[0.5,1],[1,1.5]],[[1.5,1],[1,0.5]]],\n  [[[1.5,1],[1,0.5]]],\n  [[[0.5,1],[1.5,1]]],\n  [[[1,1.5],[1.5,1]]],\n  [[[0.5,1],[1,1.5]]],\n  []\n];\n\nfunction contours() {\n  var dx = 1,\n      dy = 1,\n      threshold = d3Array.thresholdSturges,\n      smooth = smoothLinear;\n\n  function contours(values) {\n    var tz = threshold(values);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var domain = d3Array.extent(values), start = domain[0], stop = domain[1];\n      tz = d3Array.tickStep(start, stop, tz);\n      tz = d3Array.range(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);\n    } else {\n      tz = tz.slice().sort(ascending$1);\n    }\n\n    // Accumulate, smooth contour rings, assign holes to exterior rings.\n    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\n    var layers = tz.map(function(value) {\n      var polygons = [],\n          holes = [];\n\n      isorings(values, value, function(ring) {\n        smooth(ring, values, value);\n        if (area$3(ring) > 0) polygons.push([ring]);\n        else holes.push(ring);\n      });\n\n      holes.forEach(function(hole) {\n        for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\n          if (contains((polygon = polygons[i])[0], hole)) {\n            polygon.push(hole);\n            return;\n          }\n        }\n      });\n\n      return polygons;\n    });\n\n    return layers.map(function(polygons, i) {\n      return {\n        type: \"MultiPolygon\",\n        value: tz[i],\n        coordinates: polygons\n      };\n    });\n  }\n\n  // Marching squares with isolines stitched into rings.\n  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\n  function isorings(values, value, callback) {\n    var fragmentByStart = new Array,\n        fragmentByEnd = new Array,\n        x, y, t0, t1, t2, t3;\n\n    // Special case for the first row (y = -1, t2 = t3 = 0).\n    x = y = -1;\n    t1 = values[0] >= value;\n    cases[t1 << 1].forEach(stitch);\n    while (++x < dx - 1) {\n      t0 = t1, t1 = values[x + 1] >= value;\n      cases[t0 | t1 << 1].forEach(stitch);\n    }\n    cases[t1 << 0].forEach(stitch);\n\n    // General case for the intermediate rows.\n    while (++y < dy - 1) {\n      x = -1;\n      t1 = values[y * dx + dx] >= value;\n      t2 = values[y * dx] >= value;\n      cases[t1 << 1 | t2 << 2].forEach(stitch);\n      while (++x < dx - 1) {\n        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\n        t3 = t2, t2 = values[y * dx + x + 1] >= value;\n        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\n      }\n      cases[t1 | t2 << 3].forEach(stitch);\n    }\n\n    // Special case for the last row (y = dy - 1, t0 = t1 = 0).\n    x = -1;\n    t2 = values[y * dx] >= value;\n    cases[t2 << 2].forEach(stitch);\n    while (++x < dx - 1) {\n      t3 = t2, t2 = values[y * dx + x + 1] >= value;\n      cases[t2 << 2 | t3 << 3].forEach(stitch);\n    }\n    cases[t2 << 3].forEach(stitch);\n\n    function stitch(line) {\n      var start = [line[0][0] + x, line[0][1] + y],\n          end = [line[1][0] + x, line[1][1] + y],\n          startIndex = index(start),\n          endIndex = index(end),\n          f, g;\n      if (f = fragmentByEnd[startIndex]) {\n        if (g = fragmentByStart[endIndex]) {\n          delete fragmentByEnd[f.end];\n          delete fragmentByStart[g.start];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};\n          }\n        } else {\n          delete fragmentByEnd[f.end];\n          f.ring.push(end);\n          fragmentByEnd[f.end = endIndex] = f;\n        }\n      } else if (f = fragmentByStart[endIndex]) {\n        if (g = fragmentByEnd[startIndex]) {\n          delete fragmentByStart[f.start];\n          delete fragmentByEnd[g.end];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};\n          }\n        } else {\n          delete fragmentByStart[f.start];\n          f.ring.unshift(start);\n          fragmentByStart[f.start = startIndex] = f;\n        }\n      } else {\n        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};\n      }\n    }\n  }\n\n  function index(point) {\n    return point[0] * 2 + point[1] * (dx + 1) * 4;\n  }\n\n  function smoothLinear(ring, values, value) {\n    ring.forEach(function(point) {\n      var x = point[0],\n          y = point[1],\n          xt = x | 0,\n          yt = y | 0,\n          v0,\n          v1 = values[yt * dx + xt];\n      if (x > 0 && x < dx && xt === x) {\n        v0 = values[yt * dx + xt - 1];\n        point[0] = x + (value - v0) / (v1 - v0) - 0.5;\n      }\n      if (y > 0 && y < dy && yt === y) {\n        v0 = values[(yt - 1) * dx + xt];\n        point[1] = y + (value - v0) / (v1 - v0) - 0.5;\n      }\n    });\n  }\n\n  contours.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\n    if (!(_0 > 0) || !(_1 > 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, contours;\n  };\n\n  contours.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant$2(slice$1.call(_)) : constant$2(_), contours) : threshold;\n  };\n\n  contours.smooth = function(_) {\n    return arguments.length ? (smooth = _ ? smoothLinear : noop$1, contours) : smooth === smoothLinear;\n  };\n\n  return contours;\n}\n\n// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nfunction blurX(source, target, r) {\n  var n = source.width,\n      m = source.height,\n      w = (r << 1) + 1;\n  for (var j = 0; j < m; ++j) {\n    for (var i = 0, sr = 0; i < n + r; ++i) {\n      if (i < n) {\n        sr += source.data[i + j * n];\n      }\n      if (i >= r) {\n        if (i >= w) {\n          sr -= source.data[i - w + j * n];\n        }\n        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\n      }\n    }\n  }\n}\n\n// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nfunction blurY(source, target, r) {\n  var n = source.width,\n      m = source.height,\n      w = (r << 1) + 1;\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0, sr = 0; j < m + r; ++j) {\n      if (j < m) {\n        sr += source.data[i + j * n];\n      }\n      if (j >= r) {\n        if (j >= w) {\n          sr -= source.data[i + (j - w) * n];\n        }\n        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\n      }\n    }\n  }\n}\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction contourDensity() {\n  var x = defaultX,\n      y = defaultY,\n      dx = 960,\n      dy = 500,\n      r = 20, // blur radius\n      k = 2, // log2(grid cell size)\n      o = r * 3, // grid offset, to pad for blur\n      n = (dx + o * 2) >> k, // grid width\n      m = (dy + o * 2) >> k, // grid height\n      threshold = constant$2(20);\n\n  function density(data) {\n    var values0 = new Float32Array(n * m),\n        values1 = new Float32Array(n * m);\n\n    data.forEach(function(d, i, data) {\n      var xi = (x(d, i, data) + o) >> k,\n          yi = (y(d, i, data) + o) >> k;\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        ++values0[xi + yi * n];\n      }\n    });\n\n    // TODO Optimize.\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n\n    var tz = threshold(values0);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var stop = d3Array.max(values0);\n      tz = d3Array.tickStep(0, stop, tz);\n      tz = d3Array.range(0, Math.floor(stop / tz) * tz, tz);\n      tz.shift();\n    }\n\n    return contours()\n        .thresholds(tz)\n        .size([n, m])\n      (values0)\n        .map(transform);\n  }\n\n  function transform(geometry) {\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = (dx + o * 2) >> k;\n    m = (dy + o * 2) >> k;\n    return density;\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$2(+_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$2(+_), density) : y;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\n    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant$2(slice$1.call(_)) : constant$2(_), density) : threshold;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n\n  return density;\n}\n\nvar CONTOUR_PARAMS = ['values', 'size', 'thresholds'];\nvar DENSITY_PARAMS = ['x', 'y', 'size', 'cellSize', 'bandwidth', 'thresholds'];\n\n/**\n * Generate contours based on kernel-density estimation of point data.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.\n *  If the values parameter is provided, this must be the dimensions of the input data.\n *  If density estimation is performed, this is the output view dimensions in pixels.\n * @param {Array<number>} [params.values] - An array of numeric values representing an\n *  width x height grid of values over which to compute contours. If unspecified, this\n *  transform will instead attempt to compute contours for the kernel density estimate\n *  using values drawn from data tuples in the input pulse.\n * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.\n * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.\n * @param {number} [params.cellSize] - Contour density calculation cell size.\n * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.\n * @param {number} [params.thresholds] - Contour threshold array or desired number of contours.\n */\nfunction Contour(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$43 = inherits(Contour, Transform);\n\nprototype$43.transform = function(_, pulse) {\n  if (this.value && !pulse.changed() && !_.modified())\n    return pulse.StopPropagation;\n\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      contour, params, values;\n\n  if (_.values) {\n    contour = contours();\n    params = CONTOUR_PARAMS;\n    values = _.values;\n  } else {\n    contour = contourDensity();\n    params = DENSITY_PARAMS;\n    values = pulse.materialize(pulse.SOURCE).source;\n  }\n\n  params.forEach(function(param) {\n    if (_[param] != null) contour[param](_[param]);\n  });\n\n  if (this.value) out.rem = this.value;\n  this.value = out.source = out.add = contour(values).map(ingest);\n\n  return out;\n};\n\nvar defaultPath = d3Geo.geoPath();\n\nvar properties = [\n  // standard properties in d3-geo\n  'clipAngle',\n  'clipExtent',\n  'scale',\n  'translate',\n  'center',\n  'rotate',\n  'parallels',\n  'precision',\n\n  // extended properties in d3-geo-projections\n  'coefficient',\n  'distance',\n  'fraction',\n  'lobes',\n  'parallel',\n  'radius',\n  'ratio',\n  'spacing',\n  'tilt'\n];\n\n/**\n * Augment projections with their type and a copy method.\n */\nfunction create$1(type, constructor) {\n  return function projection() {\n    var p = constructor();\n\n    p.type = type;\n\n    p.path = d3Geo.geoPath().projection(p);\n\n    p.copy = p.copy || function() {\n      var c = projection();\n      properties.forEach(function(prop) {\n        if (p.hasOwnProperty(prop)) c[prop](p[prop]());\n      });\n      c.path.pointRadius(p.path.pointRadius());\n      return c;\n    };\n\n    return p;\n  };\n}\n\nfunction projection(type, proj) {\n  return arguments.length > 1 ? (projections[type] = create$1(type, proj), this)\n    : projections.hasOwnProperty(type) ? projections[type] : null;\n}\n\nfunction getPath(proj) {\n  return (proj && proj.path) || defaultPath;\n}\n\nvar projections = {\n  // base d3-geo projection types\n  albers:               d3Geo.geoAlbers,\n  albersusa:            d3Geo.geoAlbersUsa,\n  azimuthalequalarea:   d3Geo.geoAzimuthalEqualArea,\n  azimuthalequidistant: d3Geo.geoAzimuthalEquidistant,\n  conicconformal:       d3Geo.geoConicConformal,\n  conicequalarea:       d3Geo.geoConicEqualArea,\n  conicequidistant:     d3Geo.geoConicEquidistant,\n  equirectangular:      d3Geo.geoEquirectangular,\n  gnomonic:             d3Geo.geoGnomonic,\n  mercator:             d3Geo.geoMercator,\n  orthographic:         d3Geo.geoOrthographic,\n  stereographic:        d3Geo.geoStereographic,\n  transversemercator:   d3Geo.geoTransverseMercator\n};\n\nfor (var key$2 in projections) {\n  projection(key$2, projections[key$2]);\n}\n\n/**\n * Map GeoJSON data to an SVG path string.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(number, number): *} params.projection - The cartographic\n *   projection to apply.\n * @param {function(object): *} [params.field] - The field with GeoJSON data,\n *   or null if the tuple itself is a GeoJSON feature.\n * @param {string} [params.as='path'] - The output field in which to store\n *   the generated path data (default 'path').\n */\nfunction GeoPath(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$44 = inherits(GeoPath, Transform);\n\nprototype$44.transform = function(_, pulse) {\n  var out = pulse.fork(pulse.ALL),\n      path = this.value,\n      field = _.field || identity,\n      as = _.as || 'path',\n      mod;\n\n  function set(t) { t[as] = path(field(t)); }\n\n  if (!path || _.modified()) {\n    // parameters updated, reset and reflow\n    this.value = path = getPath(_.projection).context(null);\n    out.materialize().reflow().visit(out.SOURCE, set);\n  } else {\n    path.context(null);\n    mod = field === identity || pulse.modified(field.fields);\n    out.visit(mod ? out.ADD_MOD : out.ADD, set);\n  }\n\n  return out.modifies(as);\n};\n\n/**\n * Geo-code a longitude/latitude point to an x/y coordinate.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(number, number): *} params.projection - The cartographic\n *   projection to apply.\n * @param {Array<function(object): *>} params.fields - A two-element array of\n *   field accessors for the longitude and latitude values.\n * @param {Array<string>} [params.as] - A two-element array of field names\n *   under which to store the result. Defaults to ['x','y'].\n */\nfunction GeoPoint(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$45 = inherits(GeoPoint, Transform);\n\nprototype$45.transform = function(_, pulse) {\n  var proj = _.projection,\n      lon = _.fields[0],\n      lat = _.fields[1],\n      as = _.as || ['x', 'y'],\n      x = as[0],\n      y = as[1],\n      mod;\n\n  function set(t) {\n    var xy = proj([lon(t), lat(t)]);\n    if (xy) t[x] = xy[0], t[y] = xy[1];\n    else t[x] = undefined, t[y] = undefined;\n  }\n\n  if (_.modified()) {\n    // parameters updated, reflow\n    pulse.materialize().reflow(true).visit(pulse.SOURCE, set);\n  } else {\n    mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);\n    pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);\n  }\n\n  return pulse.modifies(as);\n};\n\n/**\n * Annotate items with a geopath shape generator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(number, number): *} params.projection - The cartographic\n *   projection to apply.\n * @param {function(object): *} [params.field] - The field with GeoJSON data,\n *   or null if the tuple itself is a GeoJSON feature.\n * @param {string} [params.as='shape'] - The output field in which to store\n *   the generated path data (default 'shape').\n */\nfunction GeoShape(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$46 = inherits(GeoShape, Transform);\n\nprototype$46.transform = function(_, pulse) {\n  var out = pulse.fork(pulse.ALL),\n      shape = this.value,\n      datum = _.field || field('datum'),\n      as = _.as || 'shape',\n      flag = out.ADD_MOD;\n\n  if (!shape || _.modified()) {\n    // parameters updated, reset and reflow\n    this.value = shape = shapeGenerator(getPath(_.projection), datum);\n    out.materialize().reflow();\n    flag = out.SOURCE;\n  }\n\n  out.visit(flag, function(t) { t[as] = shape; });\n\n  return out.modifies(as);\n};\n\nfunction shapeGenerator(path, field) {\n  var shape = function(_) { return path(field(_)); };\n  shape.context = function(_) { return path.context(_), shape; };\n  return shape;\n}\n\n/**\n * GeoJSON feature generator for creating graticules.\n * @constructor\n */\nfunction Graticule(params) {\n  Transform.call(this, [], params);\n  this.generator = d3Geo.geoGraticule();\n}\n\nvar prototype$47 = inherits(Graticule, Transform);\n\nprototype$47.transform = function(_, pulse) {\n  var out = pulse.fork(),\n      src = this.value,\n      gen = this.generator, t;\n\n  if (!src.length || _.modified()) {\n    for (var prop in _) {\n      if (isFunction(gen[prop])) {\n        gen[prop](_[prop]);\n      }\n    }\n  }\n\n  t = gen();\n  if (src.length) {\n    t._id = src[0]._id;\n    out.mod.push(t);\n  } else {\n    out.add.push(ingest(t));\n  }\n  src[0] = t;\n\n  return out.source = src, out;\n};\n\n/**\n * Maintains a cartographic projection.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nfunction Projection(params) {\n  Transform.call(this, null, params);\n  this.modified(true); // always treat as modified\n}\n\nvar prototype$48 = inherits(Projection, Transform);\n\nprototype$48.transform = function(_) {\n  var proj = this.value;\n\n  if (!proj || _.modified('type')) {\n    this.value = (proj = create$2(_.type));\n    properties.forEach(function(prop) {\n      if (_[prop] != null) set(proj, prop, _[prop]);\n    });\n  } else {\n    properties.forEach(function(prop) {\n      if (_.modified(prop)) set(proj, prop, _[prop]);\n    });\n  }\n\n  if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);\n  if (_.fit) fit(proj, _);\n};\n\nfunction fit(proj, _) {\n  var data = geoJSON(_.fit);\n  _.extent ? proj.fitExtent(_.extent, data)\n    : _.size ? proj.fitSize(_.size, data) : 0;\n}\n\nfunction geoJSON(data) {\n  return !isArray(data) ? data\n    : data.length > 1 ? {type: 'FeatureCollection', features: data}\n    : data[0];\n}\n\nfunction create$2(type) {\n  var constructor = projection((type || 'mercator').toLowerCase());\n  if (!constructor) error('Unrecognized projection type: ' + type);\n  return constructor();\n}\n\nfunction set(proj, key, value) {\n   if (isFunction(proj[key])) proj[key](value);\n}\n\nvar ContourDefinition = {\n  \"type\": \"Contour\",\n  \"metadata\": {\"generates\": true, \"source\": true},\n  \"params\": [\n    { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2, \"required\": true },\n    { \"name\": \"values\", \"type\": \"number\", \"array\": true },\n    { \"name\": \"x\", \"type\": \"field\" },\n    { \"name\": \"y\", \"type\": \"field\" },\n    { \"name\": \"cellSize\", \"type\": \"number\" },\n    { \"name\": \"bandwidth\", \"type\": \"number\" },\n    { \"name\": \"thresholds\", \"type\": \"number\" }\n  ]\n}\n\nvar GeoPathDefinition = {\n  \"type\": \"GeoPath\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"projection\", \"type\": \"projection\" },\n    { \"name\": \"field\", \"type\": \"field\" },\n    { \"name\": \"as\", \"type\": \"string\", \"default\": \"path\" }\n  ]\n}\n\nvar GeoPointDefinition = {\n  \"type\": \"GeoPoint\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"projection\", \"type\": \"projection\", \"required\": true },\n    { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true, \"length\": 2 },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"x\", \"y\"] }\n  ]\n}\n\nvar GeoShapeDefinition = {\n  \"type\": \"GeoShape\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"projection\", \"type\": \"projection\" },\n    { \"name\": \"field\", \"type\": \"field\", \"default\": \"datum\" },\n    { \"name\": \"as\", \"type\": \"string\", \"default\": \"shape\" }\n  ]\n}\n\nvar GraticuleDefinition = {\n  \"type\": \"Graticule\",\n  \"metadata\": {\"source\": true, \"generates\": true, \"changes\": true},\n  \"params\": [\n    { \"name\": \"extent\", \"type\": \"array\", \"array\": true, \"length\": 2,\n      \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n    { \"name\": \"extentMajor\", \"type\": \"array\", \"array\": true, \"length\": 2,\n      \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n    { \"name\": \"extentMinor\", \"type\": \"array\", \"array\": true, \"length\": 2,\n      \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n    { \"name\": \"step\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"stepMajor\", \"type\": \"number\", \"array\": true, \"length\": 2, \"default\": [90, 360] },\n    { \"name\": \"stepMinor\", \"type\": \"number\", \"array\": true, \"length\": 2, \"default\": [10, 10] },\n    { \"name\": \"precision\", \"type\": \"number\", \"default\": 2.5 }\n  ]\n}\n\nregister(ContourDefinition, Contour);\nregister(GeoPathDefinition, GeoPath);\nregister(GeoPointDefinition, GeoPoint);\nregister(GeoShapeDefinition, GeoShape);\nregister(GraticuleDefinition, Graticule);\n\ntransform('Projection', Projection);\n\nvar Log = 'log';\nvar Pow = 'pow';\nvar Sqrt = 'sqrt';\nvar Band = 'band';\nvar Point = 'point';\nvar Linear = 'linear';\nvar Ordinal = 'ordinal';\nvar Quantile = 'quantile';\nvar Quantize = 'quantize';\nvar Threshold = 'threshold';\nvar BinLinear = 'bin-linear';\nvar BinOrdinal = 'bin-ordinal';\nvar Sequential = 'sequential';\n\n/**\n * Generate tick values for the given scale and approximate tick count or\n * interval value. If the scale has a 'ticks' method, it will be used to\n * generate the ticks, with the count argument passed as a parameter. If the\n * scale lacks a 'ticks' method, the full scale domain will be returned.\n * @param {Scale} scale - The scale for which to generate tick values.\n * @param {*} [count] - The approximate number of desired ticks.\n * @return {Array<*>} - The generated tick values.\n */\nfunction tickValues(scale, count) {\n  return scale.ticks ? scale.ticks(count) : scale.domain();\n}\n\n/**\n * Generate a label format function for a scale. If the scale has a\n * 'tickFormat' method, it will be used to generate the formatter, with the\n * count and specifier arguments passed as parameters. If the scale lacks a\n * 'tickFormat' method, the returned formatter performs simple string coercion.\n * If the input scale is a logarithmic scale and the format specifier does not\n * indicate a desired decimal precision, a special variable precision formatter\n * that automatically trims trailing zeroes will be generated.\n * @param {Scale} scale - The scale for which to generate the label formatter.\n * @param {*} [count] - The approximate number of desired ticks.\n * @param {string} [specifier] - The format specifier. Must be a legal d3 4.0\n *   specifier string (see https://github.com/d3/d3-format#formatSpecifier).\n * @return {function(*):string} - The generated label formatter.\n */\nfunction tickFormat(scale, count, specifier) {\n  var format = scale.tickFormat\n    ? scale.tickFormat(count, specifier)\n    : String;\n\n  return (scale.type === Log)\n    ? filter$1(format, variablePrecision(specifier))\n    : format;\n}\n\nfunction filter$1(sourceFormat, targetFormat) {\n  return function(_) {\n    return sourceFormat(_) ? targetFormat(_) : '';\n  };\n}\n\nfunction variablePrecision(specifier) {\n  var s = d3Format.formatSpecifier(specifier || ',');\n\n  if (s.precision == null) {\n    s.precision = 12;\n    switch (s.type) {\n      case '%': s.precision -= 2; break;\n      case 'e': s.precision -= 1; break;\n    }\n    return trimZeroes(\n      d3Format.format(s),          // number format\n      d3Format.format('.1f')(1)[1] // decimal point character\n    );\n  } else {\n    return d3Format.format(s);\n  }\n}\n\nfunction trimZeroes(format, decimalChar) {\n  return function(x) {\n    var str = format(x),\n        dec = str.indexOf(decimalChar),\n        idx, end;\n\n    if (dec < 0) return str;\n\n    idx = rightmostDigit(str, dec);\n    end = idx < str.length ? str.slice(idx) : '';\n    while (--idx > dec) if (str[idx] !== '0') { ++idx; break; }\n\n    return str.slice(0, idx) + end;\n  };\n}\n\nfunction rightmostDigit(str, dec) {\n  var i = str.lastIndexOf('e'), c;\n  if (i > 0) return i;\n  for (i=str.length; --i > dec;) {\n    c = str.charCodeAt(i);\n    if (c >= 48 && c <= 57) return i + 1; // is digit\n  }\n}\n\n/**\n * Generates axis ticks for visualizing a spatial scale.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Scale} params.scale - The scale to generate ticks for.\n * @param {*} [params.count=10] - The approximate number of ticks, or\n *   desired tick interval, to use.\n * @param {Array<*>} [params.values] - The exact tick values to use.\n *   These must be legal domain values for the provided scale.\n *   If provided, the count argument is ignored.\n * @param {function(*):string} [params.formatSpecifier] - A format specifier\n *   to use in conjunction with scale.tickFormat. Legal values are\n *   any valid d3 4.0 format specifier.\n * @param {function(*):string} [params.format] - The format function to use.\n *   If provided, the formatSpecifier argument is ignored.\n */\nfunction AxisTicks(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$49 = inherits(AxisTicks, Transform);\n\nprototype$49.transform = function(_, pulse) {\n  if (this.value && !_.modified()) {\n    return pulse.StopPropagation;\n  }\n\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      ticks = this.value,\n      scale = _.scale,\n      count = _.count,\n      format = _.format || tickFormat(scale, count, _.formatSpecifier),\n      values = _.values || tickValues(scale, count);\n\n  if (ticks) out.rem = ticks;\n\n  ticks = values.map(function(value) {\n    return ingest({value: value, label: format(value)})\n  });\n\n  if (_.extra) {\n    // add an extra tick pegged to the initial domain value\n    // this is used to generate axes with 'binned' domains\n    ticks.push(ingest({\n      extra: {value: ticks[0].value},\n      label: ''\n    }));\n  }\n\n  return (out.source = out.add = this.value = ticks), out;\n};\n\n/**\n * Joins a set of data elements against a set of visual items.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): object} [params.item] - An item generator function.\n * @param {function(object): *} [params.key] - The key field associating data and visual items.\n */\nfunction DataJoin(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$50 = inherits(DataJoin, Transform);\n\nfunction defaultItemCreate() {\n  return ingest({});\n}\n\nfunction isExit(t) {\n  return t.exit;\n}\n\nprototype$50.transform = function(_, pulse) {\n  var df = pulse.dataflow,\n      out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      item = _.item || defaultItemCreate,\n      key = _.key || tupleid,\n      map = this.value;\n\n  if (!map) {\n    pulse = pulse.addAll();\n    this.value = map = fastmap().test(isExit);\n    map.lookup = function(t) { return map.get(key(t)); };\n  }\n\n  if (_.modified('key') || pulse.modified(key)) {\n    error('DataJoin does not support modified key function or fields.');\n  }\n\n  pulse.visit(pulse.ADD, function(t) {\n    var k = key(t),\n        x = map.get(k);\n\n    if (x) {\n      (x.exit ? (--map.empty, out.add) : out.mod).push(x);\n    } else {\n      map.set(k, (x = item(t)));\n      out.add.push(x);\n    }\n\n    x.datum = t;\n    x.exit = false;\n  });\n\n  pulse.visit(pulse.MOD, function(t) {\n    var k = key(t),\n        x = map.get(k);\n\n    if (x) {\n      x.datum = t;\n      out.mod.push(x);\n    }\n  });\n\n  pulse.visit(pulse.REM, function(t) {\n    var k = key(t),\n        x = map.get(k);\n\n    if (t === x.datum && !x.exit) {\n      out.rem.push(x);\n      x.exit = true;\n      ++map.empty;\n    }\n  });\n\n  if (pulse.changed(pulse.ADD_MOD)) out.modifies('datum');\n\n  if (_.clean && map.empty > df.cleanThreshold) df.runAfter(map.clean);\n\n  return out;\n};\n\n/**\n * Invokes encoding functions for visual items.\n * @constructor\n * @param {object} params - The parameters to the encoding functions. This\n *   parameter object will be passed through to all invoked encoding functions.\n * @param {object} param.encoders - The encoding functions\n * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set\n * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set\n * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set\n */\nfunction Encode(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$51 = inherits(Encode, Transform);\n\nprototype$51.transform = function(_, pulse) {\n  var out = pulse.fork(pulse.ADD_REM),\n      encode = pulse.encode,\n      reenter = encode === 'enter',\n      update = _.encoders.update || falsy,\n      enter = _.encoders.enter || falsy,\n      exit = _.encoders.exit || falsy,\n      set = (encode && !reenter ? _.encoders[encode] : update) || falsy;\n\n  if (pulse.changed(pulse.ADD)) {\n    pulse.visit(pulse.ADD, function(t) {\n      enter(t, _);\n      update(t, _);\n      if (set !== falsy && set !== update) set(t, _);\n    });\n    out.modifies(enter.output);\n    out.modifies(update.output);\n    if (set !== falsy && set !== update) out.modifies(set.output);\n  }\n\n  if (pulse.changed(pulse.REM) && exit !== falsy) {\n    pulse.visit(pulse.REM, function(t) { exit(t, _); });\n    out.modifies(exit.output);\n  }\n\n  if (reenter || set !== falsy) {\n    var flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);\n    if (reenter) {\n      pulse.visit(flag, function(t) {\n        var mod = enter(t, _);\n        if (set(t, _) || mod) out.mod.push(t);\n      });\n      if (out.mod.length) out.modifies(enter.output);\n    } else {\n      pulse.visit(flag, function(t) {\n        if (set(t, _)) out.mod.push(t);\n      });\n    }\n    if (out.mod.length) out.modifies(set.output);\n  }\n\n  return out;\n};\n\nvar discrete$1 = {}\ndiscrete$1[Quantile] = quantile$1;\ndiscrete$1[Quantize] = quantize;\ndiscrete$1[Threshold] = threshold;\ndiscrete$1[BinLinear] = bin$2;\ndiscrete$1[BinOrdinal] = bin$2;\n\nfunction labelValues(scale, count, gradient) {\n  if (gradient) return scale.domain();\n  var values = discrete$1[scale.type];\n  return values ? values(scale) : tickValues(scale, count);\n}\n\nfunction quantize(scale) {\n  var domain = scale.domain(),\n      x0 = domain[0],\n      x1 = peek(domain),\n      n = scale.range().length,\n      values = new Array(n),\n      i = 0;\n\n  values[0] = x0;\n  while (++i < n) values[i] = (i * x1 - (i - n) * x0) / n;\n  return values.max = x1, values;\n}\n\nfunction quantile$1(scale) {\n  var domain = scale.domain(),\n      values = [domain[0]].concat(scale.quantiles());\n  return values.max = peek(domain), values;\n}\n\nfunction threshold(scale) {\n  var values = [-Infinity].concat(scale.domain());\n  return values.max = +Infinity, values;\n}\n\nfunction bin$2(scale) {\n  var values = scale.domain();\n  return values.max = values.pop(), values;\n}\n\nfunction labelFormat(scale, format) {\n  return discrete$1[scale.type] ? formatRange(format) : formatPoint(format);\n}\n\nfunction formatRange(format) {\n  return function(value, index, array) {\n    var limit = array[index + 1] || array.max || +Infinity,\n        lo = formatValue(value, format),\n        hi = formatValue(limit, format);\n    return lo && hi ? lo + '\\u2013' + hi : hi ? '< ' + hi : '\\u2265 ' + lo;\n  };\n}\n\nfunction formatValue(value, format) {\n  return isFinite(value) ? format(value) : null;\n}\n\nfunction formatPoint(format) {\n  return function(value) {\n    return format(value);\n  };\n}\n\n/**\n * Generates legend entries for visualizing a scale.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Scale} params.scale - The scale to generate items for.\n * @param {*} [params.count=10] - The approximate number of items, or\n *   desired tick interval, to use.\n * @param {Array<*>} [params.values] - The exact tick values to use.\n *   These must be legal domain values for the provided scale.\n *   If provided, the count argument is ignored.\n * @param {function(*):string} [params.formatSpecifier] - A format specifier\n *   to use in conjunction with scale.tickFormat. Legal values are\n *   any valid d3 4.0 format specifier.\n * @param {function(*):string} [params.format] - The format function to use.\n *   If provided, the formatSpecifier argument is ignored.\n */\nfunction LegendEntries(params) {\n  Transform.call(this, [], params);\n}\n\nvar prototype$52 = inherits(LegendEntries, Transform);\n\nprototype$52.transform = function(_, pulse) {\n  if (this.value != null && !_.modified()) {\n    return pulse.StopPropagation;\n  }\n\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      total = 0,\n      items = this.value,\n      grad  = _.type === 'gradient',\n      scale = _.scale,\n      count = _.count == null ? 5 : _.count,\n      format = _.format || tickFormat(scale, count, _.formatSpecifier),\n      values = _.values || labelValues(scale, count, grad);\n\n  format = labelFormat(scale, format);\n  if (items) out.rem = items;\n\n  if (grad) {\n    var domain = _.values ? scale.domain() : values,\n        fraction = scaleFraction(scale, domain[0], peek(domain));\n  } else {\n    var size = _.size,\n        offset;\n    if (isFunction(size)) {\n      // if first value maps to size zero, remove from list (vega#717)\n      if (!_.values && scale(values[0]) === 0) {\n        values = values.slice(1);\n      }\n      // compute size offset for legend entries\n      offset = values.reduce(function(max, value) {\n        return Math.max(max, size(value, _));\n      }, 0);\n    } else {\n      size = constant(offset = size || 8);\n    }\n  }\n\n  items = values.map(function(value, index) {\n    var t = ingest({\n      index: index,\n      label: format(value, index, values),\n      value: value\n    });\n\n    if (grad) {\n      t.perc = fraction(value);\n    } else {\n      t.offset = offset;\n      t.size = size(value, _);\n      t.total = Math.round(total);\n      total += t.size;\n    }\n    return t;\n  });\n\n  return (out.source = out.add = this.value = items), out;\n};\n\nvar Paths = fastmap({\n  'line': line$3,\n  'line-radial': lineR,\n  'arc': arc$3,\n  'arc-radial': arcR,\n  'curve': curve,\n  'curve-radial': curveR,\n  'orthogonal-horizontal': orthoX,\n  'orthogonal-vertical': orthoY,\n  'orthogonal-radial': orthoR,\n  'diagonal-horizontal': diagonalX,\n  'diagonal-vertical': diagonalY,\n  'diagonal-radial': diagonalR\n});\n\nfunction sourceX(t) { return t.source.x; }\nfunction sourceY(t) { return t.source.y; }\nfunction targetX(t) { return t.target.x; }\nfunction targetY(t) { return t.target.y; }\n\n /**\n  * Layout paths linking source and target elements.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  */\nfunction LinkPath(params) {\n  Transform.call(this, {}, params);\n}\n\nvar prototype$53 = inherits(LinkPath, Transform);\n\nprototype$53.transform = function(_, pulse) {\n  var sx = _.sourceX || sourceX,\n      sy = _.sourceY || sourceY,\n      tx = _.targetX || targetX,\n      ty = _.targetY || targetY,\n      as = _.as || 'path',\n      orient = _.orient || 'vertical',\n      shape = _.shape || 'line',\n      path = Paths.get(shape + '-' + orient) || Paths.get(shape);\n\n  if (!path) {\n    error('LinkPath unsupported type: ' + _.shape\n      + (_.orient ? '-' + _.orient : ''));\n  }\n\n  pulse.visit(pulse.SOURCE, function(t) {\n    t[as] = path(sx(t), sy(t), tx(t), ty(t));\n  });\n\n  return pulse.reflow(_.modified()).modifies(as);\n};\n\n// -- Link Path Generation Methods -----\n\nfunction line$3(sx, sy, tx, ty) {\n  return 'M' + sx + ',' + sy +\n         'L' + tx + ',' + ty;\n}\n\nfunction lineR(sa, sr, ta, tr) {\n  return line$3(\n    sr * Math.cos(sa), sr * Math.sin(sa),\n    tr * Math.cos(ta), tr * Math.sin(ta)\n  );\n}\n\nfunction arc$3(sx, sy, tx, ty) {\n  var dx = tx - sx,\n      dy = ty - sy,\n      rr = Math.sqrt(dx * dx + dy * dy) / 2,\n      ra = 180 * Math.atan2(dy, dx) / Math.PI;\n  return 'M' + sx + ',' + sy +\n         'A' + rr + ',' + rr +\n         ' ' + ra + ' 0 1' +\n         ' ' + tx + ',' + ty;\n}\n\nfunction arcR(sa, sr, ta, tr) {\n  return arc$3(\n    sr * Math.cos(sa), sr * Math.sin(sa),\n    tr * Math.cos(ta), tr * Math.sin(ta)\n  );\n}\n\nfunction curve(sx, sy, tx, ty) {\n  var dx = tx - sx,\n      dy = ty - sy,\n      ix = 0.2 * (dx + dy),\n      iy = 0.2 * (dy - dx);\n  return 'M' + sx + ',' + sy +\n         'C' + (sx+ix) + ',' + (sy+iy) +\n         ' ' + (tx+iy) + ',' + (ty-ix) +\n         ' ' + tx + ',' + ty;\n}\n\nfunction curveR(sa, sr, ta, tr) {\n  return curve(\n    sr * Math.cos(sa), sr * Math.sin(sa),\n    tr * Math.cos(ta), tr * Math.sin(ta)\n  );\n}\n\nfunction orthoX(sx, sy, tx, ty) {\n  return 'M' + sx + ',' + sy +\n         'V' + ty + 'H' + tx;\n}\n\nfunction orthoY(sx, sy, tx, ty) {\n  return 'M' + sx + ',' + sy +\n         'H' + tx + 'V' + ty;\n}\n\nfunction orthoR(sa, sr, ta, tr) {\n  var sc = Math.cos(sa),\n      ss = Math.sin(sa),\n      tc = Math.cos(ta),\n      ts = Math.sin(ta),\n      sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;\n  return 'M' + (sr*sc) + ',' + (sr*ss) +\n         'A' + sr + ',' + sr + ' 0 0,' + (sf?1:0) +\n         ' ' + (sr*tc) + ',' + (sr*ts) +\n         'L' + (tr*tc) + ',' + (tr*ts);\n}\n\nfunction diagonalX(sx, sy, tx, ty) {\n  var m = (sx + tx) / 2;\n  return 'M' + sx + ',' + sy +\n         'C' + m  + ',' + sy +\n         ' ' + m  + ',' + ty +\n         ' ' + tx + ',' + ty;\n}\n\nfunction diagonalY(sx, sy, tx, ty) {\n  var m = (sy + ty) / 2;\n  return 'M' + sx + ',' + sy +\n         'C' + sx + ',' + m +\n         ' ' + tx + ',' + m +\n         ' ' + tx + ',' + ty;\n}\n\nfunction diagonalR(sa, sr, ta, tr) {\n  var sc = Math.cos(sa),\n      ss = Math.sin(sa),\n      tc = Math.cos(ta),\n      ts = Math.sin(ta),\n      mr = (sr + tr) / 2;\n  return 'M' + (sr*sc) + ',' + (sr*ss) +\n         'C' + (mr*sc) + ',' + (mr*ss) +\n         ' ' + (mr*tc) + ',' + (mr*ts) +\n         ' ' + (tr*tc) + ',' + (tr*ts);\n}\n\n/**\n * Pie and donut chart layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size pie segments.\n * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.\n * @param {number} [params.endAngle=2π] - The end angle (in radians) of the layout.\n * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.\n */\nfunction Pie(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$54 = inherits(Pie, Transform);\n\nprototype$54.transform = function(_, pulse) {\n  var as = _.as || ['startAngle', 'endAngle'],\n      startAngle = as[0],\n      endAngle = as[1],\n      field = _.field || one,\n      start = _.startAngle || 0,\n      stop = _.endAngle != null ? _.endAngle : 2 * Math.PI,\n      data = pulse.source,\n      values = data.map(field),\n      n = values.length,\n      a = start,\n      k = (stop - start) / d3Array.sum(values),\n      index = d3Array.range(n),\n      i, t, v;\n\n  if (_.sort) {\n    index.sort(function(a, b) {\n      return values[a] - values[b];\n    });\n  }\n\n  for (i=0; i<n; ++i) {\n    v = values[index[i]];\n    t = data[index[i]];\n    t[startAngle] = a;\n    t[endAngle] = (a += v * k);\n  }\n\n  this.value = values;\n  return pulse.reflow(_.modified()).modifies(as);\n};\n\nvar DEFAULT_COUNT = 5;\n\nvar INCLUDE_ZERO = toSet([Linear, Pow, Sqrt]);\n\nvar SKIP$2 = toSet([\n  'set', 'modified', 'clear', 'type', 'scheme', 'schemeExtent', 'schemeCount',\n  'domain', 'domainMin', 'domainMid', 'domainMax', 'domainRaw', 'nice', 'zero',\n  'range', 'rangeStep', 'round', 'reverse', 'interpolate', 'interpolateGamma'\n]);\n\n/**\n * Maintains a scale function mapping data values to visual channels.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nfunction Scale(params) {\n  Transform.call(this, null, params);\n  this.modified(true); // always treat as modified\n}\n\nvar prototype$55 = inherits(Scale, Transform);\n\nprototype$55.transform = function(_, pulse) {\n  var df = pulse.dataflow,\n      scale = this.value,\n      prop;\n\n  if (!scale || _.modified('type')) {\n    this.value = scale = scale$1((_.type || Linear).toLowerCase())();\n  }\n\n  for (prop in _) if (!SKIP$2[prop]) {\n    isFunction(scale[prop])\n      ? scale[prop](_[prop])\n      : df.warn('Unsupported scale property: ' + prop);\n  }\n\n  configureRange(scale, _, configureDomain(scale, _), df);\n\n  return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n};\n\nfunction configureDomain(scale, _, df) {\n  // check raw domain, if provided use that and exit early\n  var raw = rawDomain(scale, _.domainRaw);\n  if (raw > -1) return raw;\n\n  var domain = _.domain,\n      zero = _.zero || (_.zero === undefined && INCLUDE_ZERO[scale.type]),\n      n, mid;\n\n  if (!domain) return 0;\n\n  // adjust domain based on zero, min, max settings\n  if (zero || _.domainMin != null || _.domainMax != null || _.domainMid != null) {\n    n = ((domain = domain.slice()).length - 1) || 1;\n    if (zero) {\n      if (domain[0] > 0) domain[0] = 0;\n      if (domain[n] < 0) domain[n] = 0;\n    }\n    if (_.domainMin != null) domain[0] = _.domainMin;\n    if (_.domainMax != null) domain[n] = _.domainMax;\n\n    if (_.domainMid != null) {\n      mid = _.domainMid;\n      if (mid < domain[0] || mid > domain[n]) {\n        df.warn('Scale domainMid exceeds domain min or max.', mid);\n      }\n      domain.splice(n, 0, mid);\n    }\n  }\n\n  // set the scale domain\n  scale.domain(domain);\n\n  // perform 'nice' adjustment as requested\n  if (_.nice && scale.nice) scale.nice((_.nice !== true && +_.nice) || null);\n\n  // return the cardinality of the domain\n  return domain.length;\n}\n\nfunction rawDomain(scale, raw) {\n  return raw ? (scale.domain(raw), raw.length) : -1;\n}\n\nfunction configureRange(scale, _, count) {\n  var round = _.round || false,\n      range = _.range;\n\n  // if range step specified, calculate full range extent\n  if (_.rangeStep != null) {\n    range = configureRangeStep(scale.type, _, count);\n  }\n\n  // else if a range scheme is defined, use that\n  else if (_.scheme) {\n    range = configureScheme(scale.type, _, count);\n    if (isFunction(range)) return scale.interpolator(range);\n  }\n\n  // given a range array for a sequential scale, convert to interpolator\n  else if (range && scale.type === Sequential) {\n    return scale.interpolator($$1.interpolateRgbBasis(flip(range, _.reverse)));\n  }\n\n  // configure rounding / interpolation\n  if (range && _.interpolate && scale.interpolate) {\n    scale.interpolate(getInterpolate(_.interpolate, _.interpolateGamma));\n  } else if (isFunction(scale.round)) {\n    scale.round(round);\n  } else if (isFunction(scale.rangeRound)) {\n    scale.interpolate(round ? $$1.interpolateRound : $$1.interpolate);\n  }\n\n  if (range) scale.range(flip(range, _.reverse));\n}\n\nfunction configureRangeStep(type, _, count) {\n  if (type !== Band && type !== Point) {\n    error('Only band and point scales support rangeStep.');\n  }\n\n  // calculate full range based on requested step size and padding\n  var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0,\n      inner = type === Point ? 1\n            : ((_.paddingInner != null ? _.paddingInner : _.padding) || 0);\n  return [0, _.rangeStep * bandSpace(count, inner, outer)];\n}\n\nfunction configureScheme(type, _, count) {\n  var name = _.scheme.toLowerCase(),\n      scheme = getScheme(name),\n      extent = _.schemeExtent,\n      discrete;\n\n  if (!scheme) {\n    error('Unrecognized scheme name: ' + _.scheme);\n  }\n\n  // determine size for potential discrete range\n  count = (type === Threshold) ? count + 1\n    : (type === BinOrdinal) ? count - 1\n    : (type === Quantile || type === Quantize) ? (+_.schemeCount || DEFAULT_COUNT)\n    : count;\n\n  // adjust and/or quantize scheme as appropriate\n  return type === Sequential ? adjustScheme(scheme, extent, _.reverse)\n    : !extent && (discrete = getScheme(name + '-' + count)) ? discrete\n    : isFunction(scheme) ? quantize$1(adjustScheme(scheme, extent), count)\n    : type === Ordinal ? scheme : scheme.slice(0, count);\n}\n\nfunction adjustScheme(scheme, extent, reverse) {\n  return (isFunction(scheme) && (extent || reverse))\n    ? interpolateRange(scheme, flip(extent || [0, 1], reverse))\n    : scheme;\n}\n\nfunction flip(array, reverse) {\n  return reverse ? array.slice().reverse() : array;\n}\n\nfunction quantize$1(interpolator, count) {\n  var samples = new Array(count),\n      n = (count - 1) || 1;\n  for (var i = 0; i < count; ++i) samples[i] = interpolator(i / n);\n  return samples;\n}\n\n/**\n * Sorts scenegraph items in the pulse source array.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - A comparator\n *   function for sorting tuples.\n */\nfunction SortItems(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$56 = inherits(SortItems, Transform);\n\nprototype$56.transform = function(_, pulse) {\n  var mod = _.modified('sort')\n         || pulse.changed(pulse.ADD)\n         || pulse.modified(_.sort.fields)\n         || pulse.modified('datum');\n\n  if (mod) pulse.source.sort(_.sort);\n\n  this.modified(mod);\n  return pulse;\n};\n\nvar Center = 'center';\nvar Normalize = 'normalize';\n/**\n * Stack layout for visualization elements.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to stack.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {function(object,object): number} [params.sort] - A comparator for stack sorting.\n * @param {string} [offset='zero'] - One of 'zero', 'center', 'normalize'.\n */\nfunction Stack(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$57 = inherits(Stack, Transform);\n\nprototype$57.transform = function(_, pulse) {\n  var as = _.as || ['y0', 'y1'],\n      y0 = as[0],\n      y1 = as[1],\n      field = _.field || one,\n      stack = _.offset === Center ? stackCenter\n            : _.offset === Normalize ? stackNormalize\n            : stackZero,\n      groups, i, n, max;\n\n  // partition, sum, and sort the stack groups\n  groups = partition$2(pulse.source, _.groupby, _.sort, field);\n\n  // compute stack layouts per group\n  for (i=0, n=groups.length, max=groups.max; i<n; ++i) {\n    stack(groups[i], max, field, y0, y1);\n  }\n\n  return pulse.reflow(_.modified()).modifies(as);\n};\n\nfunction stackCenter(group, max, field, y0, y1) {\n  var last = (max - group.sum) / 2,\n      m = group.length,\n      j = 0, t;\n\n  for (; j<m; ++j) {\n    t = group[j];\n    t[y0] = last;\n    t[y1] = (last += Math.abs(field(t)));\n  }\n}\n\nfunction stackNormalize(group, max, field, y0, y1) {\n  var scale = 1 / group.sum,\n      last = 0,\n      m = group.length,\n      j = 0, v = 0, t;\n\n  for (; j<m; ++j) {\n    t = group[j];\n    t[y0] = last;\n    t[y1] = last = scale * (v += Math.abs(field(t)));\n  }\n}\n\nfunction stackZero(group, max, field, y0, y1) {\n  var lastPos = 0,\n      lastNeg = 0,\n      m = group.length,\n      j = 0, v, t;\n\n  for (; j<m; ++j) {\n    t = group[j];\n    v = field(t);\n    if (v < 0) {\n      t[y0] = lastNeg;\n      t[y1] = (lastNeg += v);\n    } else {\n      t[y0] = lastPos;\n      t[y1] = (lastPos += v);\n    }\n  }\n}\n\nfunction partition$2(data, groupby, sort, field) {\n  var groups = [],\n      get = function(f) { return f(t); },\n      map, i, n, m, t, k, g, s, max;\n\n  // partition data points into stack groups\n  if (groupby == null) {\n    groups.push(data.slice());\n  } else {\n    for (map={}, i=0, n=data.length; i<n; ++i) {\n      t = data[i];\n      k = groupby.map(get);\n      g = map[k] || (groups.push(map[k] = []), map[k]);\n      g.push(t);\n    }\n  }\n\n  // compute sums of groups, sort groups as needed\n  for (k=0, max=0, m=groups.length; k<m; ++k) {\n    g = groups[k];\n    for (i=0, s=0, n=g.length; i<n; ++i) {\n      s += Math.abs(field(g[i]));\n    }\n    g.sum = s;\n    if (s > max) max = s;\n    if (sort) g.sort(sort);\n  }\n  groups.max = max;\n\n  return groups;\n}\n\nvar LinkPathDefinition = {\n  \"type\": \"LinkPath\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"sourceX\", \"type\": \"field\", \"default\": \"source.x\" },\n    { \"name\": \"sourceY\", \"type\": \"field\", \"default\": \"source.y\" },\n    { \"name\": \"targetX\", \"type\": \"field\", \"default\": \"target.x\" },\n    { \"name\": \"targetY\", \"type\": \"field\", \"default\": \"target.y\" },\n    { \"name\": \"orient\", \"type\": \"enum\", \"default\": \"vertical\",\n      \"values\": [\"horizontal\", \"vertical\", \"radial\"] },\n    { \"name\": \"shape\", \"type\": \"enum\", \"default\": \"line\",\n      \"values\": [\"line\", \"arc\", \"curve\", \"diagonal\", \"orthogonal\"] },\n    { \"name\": \"as\", \"type\": \"string\", \"default\": \"path\" }\n  ]\n};\n\nvar PieDefinition = {\n  \"type\": \"Pie\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\" },\n    { \"name\": \"startAngle\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"endAngle\", \"type\": \"number\", \"default\": 6.283185307179586 },\n    { \"name\": \"sort\", \"type\": \"boolean\", \"default\": false },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"startAngle\", \"endAngle\"] }\n  ]\n};\n\nvar StackDefinition = {\n  \"type\": \"Stack\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\" },\n    { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n    { \"name\": \"sort\", \"type\": \"compare\" },\n    { \"name\": \"offset\", \"type\": \"enum\", \"default\": \"zero\", \"values\": [\"zero\", \"center\", \"normalize\"] },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"y0\", \"y1\"] }\n  ]\n};\n\nregister(LinkPathDefinition, LinkPath);\nregister(PieDefinition, Pie);\nregister(StackDefinition, Stack);\n\ntransform('AxisTicks', AxisTicks);\ntransform('DataJoin', DataJoin);\ntransform('Encode', Encode);\ntransform('LegendEntries', LegendEntries);\ntransform('Scale', Scale);\ntransform('SortItems', SortItems);\n\nvar ForceMap = {\n  center: d3Force.forceCenter,\n  collide: d3Force.forceCollide,\n  nbody: d3Force.forceManyBody,\n  link: d3Force.forceLink,\n  x: d3Force.forceX,\n  y: d3Force.forceY\n};\n\nvar Forces = 'forces';\nvar ForceParams = [\n      'alpha', 'alphaMin', 'alphaTarget',\n      'velocityDecay', 'forces'\n    ];\nvar ForceConfig = ['static', 'iterations'];\nvar ForceOutput = ['x', 'y', 'vx', 'vy'];\n/**\n * Force simulation layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<object>} params.forces - The forces to apply.\n */\nfunction Force(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$58 = inherits(Force, Transform);\n\nprototype$58.transform = function(_, pulse) {\n  var sim = this.value,\n      change = pulse.changed(pulse.ADD_REM),\n      params = _.modified(ForceParams),\n      iters = _.iterations || 300;\n\n  // configure simulation\n  if (!sim) {\n    this.value = sim = simulation(pulse.source, _);\n    sim.on('tick', rerun(pulse.dataflow, this));\n    if (!_.static) change = true, sim.tick(); // ensure we run on init\n    pulse.modifies('index');\n  } else {\n    if (change) pulse.modifies('index'), sim.nodes(pulse.source);\n    if (params) setup(sim, _);\n  }\n\n  // run simulation\n  if (params || change || _.modified(ForceConfig)\n      || (pulse.changed() && _.restart))\n  {\n    sim.alpha(Math.max(sim.alpha(), _.alpha || 1))\n       .alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));\n\n    if (_.static) {\n      for (sim.stop(); --iters >= 0;) sim.tick();\n    } else {\n      if (sim.stopped()) sim.restart();\n      if (!change) return pulse.StopPropagation; // defer to sim ticks\n    }\n  }\n\n  return this.finish(_, pulse);\n};\n\nprototype$58.finish = function(_, pulse) {\n  var dataflow = pulse.dataflow;\n\n  // inspect dependencies, touch link source data\n  for (var args=this._argops, j=0, m=args.length, arg; j<m; ++j) {\n    arg = args[j];\n    if (arg.name !== Forces || arg.op._argval.force !== 'link') {\n      continue;\n    }\n    for (var ops=arg.op._argops, i=0, n=ops.length, op; i<n; ++i) {\n      if (ops[i].name === 'links' && (op = ops[i].op.source)) {\n        dataflow.touch(op); break;\n      }\n    }\n  }\n\n  // reflow all nodes\n  return pulse.reflow(_.modified()).modifies(ForceOutput);\n};\n\nfunction rerun(df, op) {\n  return function() { df.touch(op).run(); }\n}\n\nfunction simulation(nodes, _) {\n  var sim = d3Force.forceSimulation(nodes),\n      stopped = false,\n      stop = sim.stop,\n      restart = sim.restart;\n\n  sim.stopped = function() { return stopped; };\n  sim.restart = function() { return stopped = false, restart(); };\n  sim.stop = function() { return stopped = true, stop(); };\n\n  return setup(sim, _, true).on('end', function() { stopped = true; });\n}\n\nfunction setup(sim, _, init) {\n  var f = array(_.forces), i, n, p;\n\n  for (i=0, n=ForceParams.length; i<n; ++i) {\n    p = ForceParams[i];\n    if (p !== Forces && _.modified(p)) sim[p](_[p]);\n  }\n\n  for (i=0, n=f.length; i<n; ++i) {\n    if (init || _.modified(Forces, i)) {\n      sim.force(Forces + i, getForce(f[i]));\n    }\n  }\n  for (n=(sim.numForces || 0); i<n; ++i) {\n    sim.force(Forces + i, null); // remove\n  }\n\n  return sim.numForces = f.length, sim;\n}\n\nfunction getForce(_) {\n  var f, p;\n  if (!ForceMap.hasOwnProperty(_.force)) {\n    error('Unrecognized force: ' + _.force);\n  }\n  f = ForceMap[_.force]();\n  for (p in _) if (isFunction(f[p])) f[p](_[p]);\n  return f;\n}\n\nvar ForceDefinition = {\n  \"type\": \"Force\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"static\", \"type\": \"boolean\", \"default\": false },\n    { \"name\": \"restart\", \"type\": \"boolean\", \"default\": false },\n    { \"name\": \"iterations\", \"type\": \"number\", \"default\": 300 },\n    { \"name\": \"alpha\", \"type\": \"number\", \"default\": 1 },\n    { \"name\": \"alphaMin\", \"type\": \"number\", \"default\": 0.001 },\n    { \"name\": \"alphaTarget\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"velocityDecay\", \"type\": \"number\", \"default\": 0.4 },\n    { \"name\": \"forces\", \"type\": \"param\", \"array\": true,\n      \"params\": [\n        {\n          \"key\": {\"force\": \"center\"},\n          \"params\": [\n            { \"name\": \"x\", \"type\": \"number\", \"default\": 0 },\n            { \"name\": \"y\", \"type\": \"number\", \"default\": 0 }\n          ]\n        },\n        {\n          \"key\": {\"force\": \"collide\"},\n          \"params\": [\n            { \"name\": \"radius\", \"type\": \"number\", \"expr\": true },\n            { \"name\": \"strength\", \"type\": \"number\", \"default\": 0.7 },\n            { \"name\": \"iterations\", \"type\": \"number\", \"default\": 1 }\n          ]\n        },\n        {\n          \"key\": {\"force\": \"nbody\"},\n          \"params\": [\n            { \"name\": \"strength\", \"type\": \"number\", \"default\": -30 },\n            { \"name\": \"theta\", \"type\": \"number\", \"default\": 0.9 },\n            { \"name\": \"distanceMin\", \"type\": \"number\", \"default\": 1 },\n            { \"name\": \"distanceMax\", \"type\": \"number\" }\n          ]\n        },\n        {\n          \"key\": {\"force\": \"link\"},\n          \"params\": [\n            { \"name\": \"links\", \"type\": \"data\" },\n            { \"name\": \"id\", \"type\": \"field\" },\n            { \"name\": \"distance\", \"type\": \"number\", \"default\": 30, \"expr\": true },\n            { \"name\": \"strength\", \"type\": \"number\", \"expr\": true },\n            { \"name\": \"iterations\", \"type\": \"number\", \"default\": 1 }\n          ]\n        },\n        {\n          \"key\": {\"force\": \"x\"},\n          \"params\": [\n            { \"name\": \"strength\", \"type\": \"number\", \"default\": 0.1 },\n            { \"name\": \"x\", \"type\": \"field\" }\n          ]\n        },\n        {\n          \"key\": {\"force\": \"y\"},\n          \"params\": [\n            { \"name\": \"strength\", \"type\": \"number\", \"default\": 0.1 },\n            { \"name\": \"y\", \"type\": \"field\" }\n          ]\n        }\n      ] },\n    {\n      \"name\": \"as\", \"type\": \"string\", \"array\": true, \"modify\": false,\n      \"default\": [\"x\", \"y\", \"vx\", \"vy\"]\n    }\n  ]\n};\n\nregister(ForceDefinition, Force);\n\n/**\n  * Nest tuples into a tree structure, grouped by key values.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.\n  * @param {function(object): *} [params.key] - Unique key field for each tuple.\n  *   If not provided, the tuple id field is used.\n  */\nfunction Nest(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$59 = inherits(Nest, Transform);\n\nfunction children(n) {\n  return n.values;\n}\n\nprototype$59.transform = function(_, pulse) {\n  if (!pulse.source) {\n    error('Nest transform requires an upstream data source.');\n  }\n\n  var key = _.key || tupleid,\n      root, tree, map, mod;\n\n  if (!this.value || (mod = _.modified()) || pulse.changed()) {\n    root = array(_.keys)\n      .reduce(function(n, k) { return (n.key(k), n)}, d3Collection.nest())\n      .entries(pulse.source);\n    tree = d3Hierarchy.hierarchy({values: root}, children);\n    map = tree.lookup = {};\n    tree.each(function(node) {\n      if (tupleid(node.data) != null) map[key(node.data)] = node;\n    });\n    this.value = tree;\n  }\n\n  pulse.source.root = this.value;\n  return mod ? pulse.fork(pulse.ALL) : pulse;\n};\n\n/**\n  * Stratify a collection of tuples into a tree structure based on\n  * id and parent id fields.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  * @param {function(object): *} params.key - Unique key field for each tuple.\n  * @param {function(object): *} params.parentKey - Field with key for parent tuple.\n  */\nfunction Stratify(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$60 = inherits(Stratify, Transform);\n\nprototype$60.transform = function(_, pulse) {\n  if (!pulse.source) {\n    error('Stratify transform requires an upstream data source.');\n  }\n\n  var mod = _.modified(), tree, map,\n      run = !this.value\n         || mod\n         || pulse.changed(pulse.ADD_REM)\n         || pulse.modified(_.key.fields)\n         || pulse.modified(_.parentKey.fields);\n\n  if (run) {\n    tree = d3Hierarchy.stratify().id(_.key).parentId(_.parentKey)(pulse.source);\n    map = tree.lookup = {};\n    tree.each(function(node) { map[_.key(node.data)] = node; });\n    this.value = tree;\n  }\n\n  pulse.source.root = this.value;\n  return mod ? pulse.fork(pulse.ALL) : pulse;\n};\n\n/**\n  * Generate tuples representing links between tree nodes.\n  * The resulting tuples will contain 'source' and 'target' fields,\n  * which point to parent and child node tuples, respectively.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  * @param {function(object): *} [params.key] - Unique key field for each tuple.\n  *   If not provided, the tuple id field is used.\n  */\nfunction TreeLinks(params) {\n  Transform.call(this, {}, params);\n}\n\nvar prototype$61 = inherits(TreeLinks, Transform);\n\nfunction parentTuple(node) {\n  var p;\n  return node.parent\n      && (p=node.parent.data)\n      && (tupleid(p) != null) && p;\n}\n\nprototype$61.transform = function(_, pulse) {\n  if (!pulse.source || !pulse.source.root) {\n    error('TreeLinks transform requires a backing tree data source.');\n  }\n\n  var root = pulse.source.root,\n      nodes = root.lookup,\n      links = this.value,\n      key = _.key || tupleid,\n      mods = {},\n      out = pulse.fork();\n\n  function modify(id) {\n    var link = links[id];\n    if (link) mods[id] = 1, out.mod.push(link);\n  }\n\n  // process removed tuples\n  // assumes that if a parent node is removed the child will be, too.\n  pulse.visit(pulse.REM, function(t) {\n    var id = key(t),\n        link = links[id];\n    if (link) delete links[id], out.rem.push(link);\n  });\n\n  // create new link instances for added nodes with valid parents\n  pulse.visit(pulse.ADD, function(t) {\n    var id = key(t), p;\n    if (p = parentTuple(nodes[id])) {\n      out.add.push(links[id] = ingest({source: p, target: t}));\n      mods[id] = 1;\n    }\n  });\n\n  // process modified nodes and their children\n  pulse.visit(pulse.MOD, function(t) {\n    var id = key(t),\n        node = nodes[id],\n        kids = node.children;\n\n    modify(id);\n    if (kids) for (var i=0, n=kids.length; i<n; ++i) {\n      if (!mods[(id=key(kids[i].data))]) modify(id);\n    }\n  });\n\n  return out;\n};\n\nvar Tiles = {\n  binary: d3Hierarchy.treemapBinary,\n  dice: d3Hierarchy.treemapDice,\n  slice: d3Hierarchy.treemapSlice,\n  slicedice: d3Hierarchy.treemapSliceDice,\n  squarify: d3Hierarchy.treemapSquarify,\n  resquarify: d3Hierarchy.treemapResquarify\n};\n\nvar Layouts = {\n  tidy: d3Hierarchy.tree,\n  cluster: d3Hierarchy.cluster\n};\n\n/**\n * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n */\nfunction treeLayout(method) {\n  var m = method || 'tidy';\n  if (Layouts.hasOwnProperty(m)) return Layouts[m]();\n  else error('Unrecognized Tree layout method: ' + m);\n}\n\n/**\n * Treemap layout generator. Adds 'method' and 'ratio' parameters\n * to configure the underlying tile method.\n */\nfunction treemapLayout() {\n  var x = d3Hierarchy.treemap();\n  x.ratio = function(_) {\n    var t = x.tile();\n    if (t.ratio) x.tile(t.ratio(_));\n  };\n  x.method = function(_) {\n    if (Tiles.hasOwnProperty(_)) x.tile(Tiles[_]);\n    else error('Unrecognized Treemap layout method: ' + _);\n  };\n  return x;\n}\n\n /**\n  * Abstract class for tree layout.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  */\nfunction HierarchyLayout(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$62 = inherits(HierarchyLayout, Transform);\n\nprototype$62.transform = function(_, pulse) {\n  if (!pulse.source || !pulse.source.root) {\n    error(this.constructor.name\n      + ' transform requires a backing tree data source.');\n  }\n\n  var layout = this.layout(_.method),\n      fields = this.fields,\n      root = pulse.source.root,\n      as = _.as || fields;\n\n  if (_.field) root.sum(_.field);\n  if (_.sort) root.sort(_.sort);\n\n  setParams(layout, this.params, _);\n  try {\n    this.value = layout(root);\n  } catch (err) {\n    error(err);\n  }\n  root.each(function(node) { setFields(node, fields, as); });\n\n  return pulse.reflow(_.modified()).modifies(as).modifies('leaf');\n};\n\nfunction setParams(layout, params, _) {\n  for (var p, i=0, n=params.length; i<n; ++i) {\n    p = params[i];\n    if (p in _) layout[p](_[p]);\n  }\n}\n\nfunction setFields(node, fields, as) {\n  var t = node.data;\n  for (var i=0, n=fields.length-1; i<n; ++i) {\n    t[as[i]] = node[fields[i]];\n  }\n  t[as[n]] = node.children ? node.children.length : 0;\n}\n\n/**\n * Tree layout. Depending on the method parameter, performs either\n * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nfunction Tree(params) {\n  HierarchyLayout.call(this, params);\n}\ninherits(Tree, HierarchyLayout);\nTree.prototype.layout = treeLayout;\nTree.prototype.params = ['size', 'nodeSize', 'separation'];\nTree.prototype.fields = ['x', 'y', 'depth', 'children'];\n\n/**\n * Treemap layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\nfunction Treemap(params) {\n  HierarchyLayout.call(this, params);\n}\ninherits(Treemap, HierarchyLayout);\nTreemap.prototype.layout = treemapLayout;\nTreemap.prototype.params = [\n  'method', 'ratio', 'size', 'round',\n  'padding', 'paddingInner', 'paddingOuter',\n  'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'\n];\nTreemap.prototype.fields = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n/**\n * Partition tree layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\nfunction Partition(params) {\n  HierarchyLayout.call(this, params);\n}\ninherits(Partition, HierarchyLayout);\nPartition.prototype.layout = d3Hierarchy.partition;\nPartition.prototype.params = ['size', 'round', 'padding'];\nPartition.prototype.fields = Treemap.prototype.fields;\n\n/**\n * Packed circle tree layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\nfunction Pack(params) {\n  HierarchyLayout.call(this, params);\n}\ninherits(Pack, HierarchyLayout);\nPack.prototype.layout = d3Hierarchy.pack;\nPack.prototype.params = ['size', 'padding'];\nPack.prototype.fields = ['x', 'y', 'r', 'depth', 'children'];\n\nvar NestDefinition = {\n  \"type\": \"Nest\",\n  \"metadata\": {\"treesource\": true},\n  \"params\": [\n    { \"name\": \"keys\", \"type\": \"field\", \"array\": true },\n    { \"name\": \"key\", \"type\": \"field\" }\n  ]\n};\n\nvar StratifyDefinition = {\n  \"type\": \"Stratify\",\n  \"metadata\": {\"treesource\": true},\n  \"params\": [\n    { \"name\": \"key\", \"type\": \"field\", \"required\": true },\n    { \"name\": \"parentKey\", \"type\": \"field\", \"required\": true  }\n  ]\n};\n\nvar TreeLinksDefinition = {\n  \"type\": \"TreeLinks\",\n  \"metadata\": {\"tree\": true, \"generates\": true, \"changes\": true},\n  \"params\": [\n    { \"name\": \"key\", \"type\": \"field\" }\n  ]\n}\n\nvar PackDefinition = {\n  \"type\": \"Pack\",\n  \"metadata\": {\"tree\": true, \"modifies\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\" },\n    { \"name\": \"sort\", \"type\": \"compare\" },\n    { \"name\": \"padding\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"radius\", \"type\": \"field\", \"default\": null },\n    { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 3, \"default\": [\"x\", \"y\", \"r\", \"depth\", \"children\"] }\n  ]\n};\n\nvar PartitionDefinition = {\n  \"type\": \"Partition\",\n  \"metadata\": {\"tree\": true, \"modifies\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\" },\n    { \"name\": \"sort\", \"type\": \"compare\" },\n    { \"name\": \"padding\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"round\", \"type\": \"boolean\", \"default\": false },\n    { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 4, \"default\": [\"x0\", \"y0\", \"x1\", \"y1\", \"depth\", \"children\"] }\n  ]\n};\n\nvar TreeDefinition = {\n  \"type\": \"Tree\",\n  \"metadata\": {\"tree\": true, \"modifies\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\" },\n    { \"name\": \"sort\", \"type\": \"compare\" },\n    { \"name\": \"method\", \"type\": \"enum\", \"default\": \"tidy\", \"values\": [\"tidy\", \"cluster\"] },\n    { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"nodeSize\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 4, \"default\": [\"x\", \"y\", \"depth\", \"children\"] }\n  ]\n};\n\nvar TreemapDefinition = {\n  \"type\": \"Treemap\",\n  \"metadata\": {\"tree\": true, \"modifies\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\" },\n    { \"name\": \"sort\", \"type\": \"compare\" },\n    { \"name\": \"method\", \"type\": \"enum\", \"default\": \"squarify\",\n      \"values\": [\"squarify\", \"resquarify\", \"binary\", \"dice\", \"slice\", \"slicedice\"] },\n    { \"name\": \"padding\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingInner\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingOuter\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingTop\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingRight\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingBottom\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingLeft\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"ratio\", \"type\": \"number\", \"default\": 1.618033988749895 },\n    { \"name\": \"round\", \"type\": \"boolean\", \"default\": false },\n    { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 4, \"default\": [\"x0\", \"y0\", \"x1\", \"y1\", \"depth\", \"children\"] }\n  ]\n};\n\nregister(NestDefinition, Nest);\nregister(StratifyDefinition, Stratify);\nregister(TreeLinksDefinition, TreeLinks);\nregister(PackDefinition, Pack);\nregister(PartitionDefinition, Partition);\nregister(TreeDefinition, Tree);\nregister(TreemapDefinition, Treemap);\n\nfunction Voronoi(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$63 = inherits(Voronoi, Transform);\n\nvar defaultExtent = [[-1e5, -1e5], [1e5, 1e5]];\n\nprototype$63.transform = function(_, pulse) {\n  var as = _.as || 'path',\n      data = pulse.source,\n      diagram, polygons, i, n;\n\n  // configure and construct voronoi diagram\n  diagram = d3Voronoi.voronoi().x(_.x).y(_.y);\n  if (_.size) diagram.size(_.size);\n  else diagram.extent(_.extent || defaultExtent);\n\n  this.value = (diagram = diagram(data));\n\n  // map polygons to paths\n  polygons = diagram.polygons();\n  for (i=0, n=data.length; i<n; ++i) {\n    data[i][as] = polygons[i]\n      ? 'M' + polygons[i].join('L') + 'Z'\n      : null;\n  }\n\n  return pulse.reflow(_.modified()).modifies(as);\n};\n\nvar VoronoiDefinition = {\n  \"type\": \"Voronoi\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"x\", \"type\": \"field\", \"required\": true },\n    { \"name\": \"y\", \"type\": \"field\", \"required\": true },\n    { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"extent\", \"type\": \"array\", \"array\": true, \"length\": 2,\n      \"default\": [[-1e5, -1e5], [1e5, 1e5]],\n      \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n    { \"name\": \"as\", \"type\": \"string\", \"default\": \"path\" }\n  ]\n};\n\nregister(VoronoiDefinition, Voronoi);\n\nvar cloudRadians = Math.PI / 180;\nvar cw = 1 << 11 >> 5;\nvar ch = 1 << 11;\nfunction cloud() {\n  var size = [256, 256],\n      text,\n      font,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      rotate,\n      padding,\n      spiral = archimedeanSpiral,\n      words = [],\n      random = Math.random,\n      cloud = {},\n      canvas = cloudCanvas;\n\n  cloud.layout = function() {\n    var contextAndRatio = getContext(canvas()),\n        board = zeroArray((size[0] >> 5) * size[1]),\n        bounds = null,\n        n = words.length,\n        i = -1,\n        tags = [],\n        data = words.map(function(d) {\n          return {\n            text: text(d),\n            font: font(d),\n            style: fontStyle(d),\n            weight: fontWeight(d),\n            rotate: rotate(d),\n            size: ~~fontSize(d),\n            padding: padding(d),\n            xoff: 0,\n            yoff: 0,\n            x1: 0,\n            y1: 0,\n            x0: 0,\n            y0: 0,\n            hasText: false,\n            sprite: null,\n            datum: d\n          };\n        }).sort(function(a, b) { return b.size - a.size; });\n\n    while (++i < n) {\n      var d = data[i];\n      d.x = (size[0] * (random() + .5)) >> 1;\n      d.y = (size[1] * (random() + .5)) >> 1;\n      cloudSprite(contextAndRatio, d, data, i);\n      if (d.hasText && place(board, d, bounds)) {\n        tags.push(d);\n        if (bounds) cloudBounds(bounds, d);\n        else bounds = [{x: d.x + d.x0, y: d.y + d.y0}, {x: d.x + d.x1, y: d.y + d.y1}];\n        // Temporary hack\n        d.x -= size[0] >> 1;\n        d.y -= size[1] >> 1;\n      }\n    }\n\n    return tags;\n  }\n\n  function getContext(canvas) {\n    canvas.width = canvas.height = 1;\n    var ratio = Math.sqrt(canvas.getContext(\"2d\").getImageData(0, 0, 1, 1).data.length >> 2);\n    canvas.width = (cw << 5) / ratio;\n    canvas.height = ch / ratio;\n\n    var context = canvas.getContext(\"2d\");\n    context.fillStyle = context.strokeStyle = \"red\";\n    context.textAlign = \"center\";\n\n    return {context: context, ratio: ratio};\n  }\n\n  function place(board, tag, bounds) {\n    var startX = tag.x,\n        startY = tag.y,\n        maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),\n        s = spiral(size),\n        dt = random() < .5 ? 1 : -1,\n        t = -dt,\n        dxdy,\n        dx,\n        dy;\n\n    while (dxdy = s(t += dt)) {\n      dx = ~~dxdy[0];\n      dy = ~~dxdy[1];\n\n      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;\n\n      tag.x = startX + dx;\n      tag.y = startY + dy;\n\n      if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 ||\n          tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;\n      // TODO only check for collisions within current bounds.\n      if (!bounds || !cloudCollide(tag, board, size[0])) {\n        if (!bounds || collideRects(tag, bounds)) {\n          var sprite = tag.sprite,\n              w = tag.width >> 5,\n              sw = size[0] >> 5,\n              lx = tag.x - (w << 4),\n              sx = lx & 0x7f,\n              msx = 32 - sx,\n              h = tag.y1 - tag.y0,\n              x = (tag.y + tag.y0) * sw + (lx >> 5),\n              last;\n          for (var j = 0; j < h; j++) {\n            last = 0;\n            for (var i = 0; i <= w; i++) {\n              board[x + i] |= (last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\n            }\n            x += sw;\n          }\n          tag.sprite = null;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  cloud.words = function(_) {\n    return arguments.length ? (words = _, cloud) : words;\n  };\n\n  cloud.size = function(_) {\n    return arguments.length ? (size = [+_[0], +_[1]], cloud) : size;\n  };\n\n  cloud.font = function(_) {\n    return arguments.length ? (font = functor(_), cloud) : font;\n  };\n\n  cloud.fontStyle = function(_) {\n    return arguments.length ? (fontStyle = functor(_), cloud) : fontStyle;\n  };\n\n  cloud.fontWeight = function(_) {\n    return arguments.length ? (fontWeight = functor(_), cloud) : fontWeight;\n  };\n\n  cloud.rotate = function(_) {\n    return arguments.length ? (rotate = functor(_), cloud) : rotate;\n  };\n\n  cloud.text = function(_) {\n    return arguments.length ? (text = functor(_), cloud) : text;\n  };\n\n  cloud.spiral = function(_) {\n    return arguments.length ? (spiral = spirals[_] || _, cloud) : spiral;\n  };\n\n  cloud.fontSize = function(_) {\n    return arguments.length ? (fontSize = functor(_), cloud) : fontSize;\n  };\n\n  cloud.padding = function(_) {\n    return arguments.length ? (padding = functor(_), cloud) : padding;\n  };\n\n  cloud.random = function(_) {\n    return arguments.length ? (random = _, cloud) : random;\n  };\n\n  return cloud;\n}\n\n// Fetches a monochrome sprite bitmap for the specified text.\n// Load in batches for speed.\nfunction cloudSprite(contextAndRatio, d, data, di) {\n  if (d.sprite) return;\n  var c = contextAndRatio.context,\n      ratio = contextAndRatio.ratio;\n\n  c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\n  var x = 0,\n      y = 0,\n      maxh = 0,\n      n = data.length,\n      w, w32, h, i, j;\n  --di;\n  while (++di < n) {\n    d = data[di];\n    c.save();\n    c.font = d.style + \" \" + d.weight + \" \" + ~~((d.size + 1) / ratio) + \"px \" + d.font;\n    w = c.measureText(d.text + \"m\").width * ratio;\n    h = d.size << 1;\n    if (d.rotate) {\n      var sr = Math.sin(d.rotate * cloudRadians),\n          cr = Math.cos(d.rotate * cloudRadians),\n          wcr = w * cr,\n          wsr = w * sr,\n          hcr = h * cr,\n          hsr = h * sr;\n      w = (Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f) >> 5 << 5;\n      h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\n    } else {\n      w = (w + 0x1f) >> 5 << 5;\n    }\n    if (h > maxh) maxh = h;\n    if (x + w >= (cw << 5)) {\n      x = 0;\n      y += maxh;\n      maxh = 0;\n    }\n    if (y + h >= ch) break;\n    c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\n    if (d.rotate) c.rotate(d.rotate * cloudRadians);\n    c.fillText(d.text, 0, 0);\n    if (d.padding) c.lineWidth = 2 * d.padding, c.strokeText(d.text, 0, 0);\n    c.restore();\n    d.width = w;\n    d.height = h;\n    d.xoff = x;\n    d.yoff = y;\n    d.x1 = w >> 1;\n    d.y1 = h >> 1;\n    d.x0 = -d.x1;\n    d.y0 = -d.y1;\n    d.hasText = true;\n    x += w;\n  }\n  var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,\n      sprite = [];\n  while (--di >= 0) {\n    d = data[di];\n    if (!d.hasText) continue;\n    w = d.width;\n    w32 = w >> 5;\n    h = d.y1 - d.y0;\n    // Zero the buffer\n    for (i = 0; i < h * w32; i++) sprite[i] = 0;\n    x = d.xoff;\n    if (x == null) return;\n    y = d.yoff;\n    var seen = 0,\n        seenRow = -1;\n    for (j = 0; j < h; j++) {\n      for (i = 0; i < w; i++) {\n        var k = w32 * j + (i >> 5),\n            m = pixels[((y + j) * (cw << 5) + (x + i)) << 2] ? 1 << (31 - (i % 32)) : 0;\n        sprite[k] |= m;\n        seen |= m;\n      }\n      if (seen) seenRow = j;\n      else {\n        d.y0++;\n        h--;\n        j--;\n        y++;\n      }\n    }\n    d.y1 = d.y0 + seenRow;\n    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\n  }\n}\n\n// Use mask-based collision detection.\nfunction cloudCollide(tag, board, sw) {\n  sw >>= 5;\n  var sprite = tag.sprite,\n      w = tag.width >> 5,\n      lx = tag.x - (w << 4),\n      sx = lx & 0x7f,\n      msx = 32 - sx,\n      h = tag.y1 - tag.y0,\n      x = (tag.y + tag.y0) * sw + (lx >> 5),\n      last;\n  for (var j = 0; j < h; j++) {\n    last = 0;\n    for (var i = 0; i <= w; i++) {\n      if (((last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0))\n          & board[x + i]) return true;\n    }\n    x += sw;\n  }\n  return false;\n}\n\nfunction cloudBounds(bounds, d) {\n  var b0 = bounds[0],\n      b1 = bounds[1];\n  if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\n  if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\n  if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\n  if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\n}\n\nfunction collideRects(a, b) {\n  return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;\n}\n\nfunction archimedeanSpiral(size) {\n  var e = size[0] / size[1];\n  return function(t) {\n    return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];\n  };\n}\n\nfunction rectangularSpiral(size) {\n  var dy = 4,\n      dx = dy * size[0] / size[1],\n      x = 0,\n      y = 0;\n  return function(t) {\n    var sign = t < 0 ? -1 : 1;\n    // See triangular numbers: T_n = n * (n + 1) / 2.\n    switch ((Math.sqrt(1 + 4 * sign * t) - sign) & 3) {\n      case 0:  x += dx; break;\n      case 1:  y += dy; break;\n      case 2:  x -= dx; break;\n      default: y -= dy; break;\n    }\n    return [x, y];\n  };\n}\n\n// TODO reuse arrays?\nfunction zeroArray(n) {\n  var a = [],\n      i = -1;\n  while (++i < n) a[i] = 0;\n  return a;\n}\n\nfunction cloudCanvas() {\n  try {\n    return typeof document !== 'undefined' && document.createElement\n      ? document.createElement('canvas')\n      : new (require('canvas'))();\n  } catch (e) {\n    error('Canvas unavailable. Run in browser or install node-canvas.');\n  }\n}\n\nfunction functor(d) {\n  return typeof d === \"function\" ? d : function() { return d; };\n}\n\nvar spirals = {\n  archimedean: archimedeanSpiral,\n  rectangular: rectangularSpiral\n};\n\nvar output = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];\nvar params = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];\n\nfunction Wordcloud(params) {\n  Transform.call(this, cloud(), params);\n}\n\nvar prototype$64 = inherits(Wordcloud, Transform);\n\nprototype$64.transform = function(_, pulse) {\n  function modp(param) {\n    var p = _[param];\n    return isFunction(p) && pulse.modified(p.fields);\n  }\n\n  var mod = _.modified();\n  if (!(mod || pulse.changed(pulse.ADD_REM) || params.some(modp))) return;\n\n  var layout = this.value,\n      as = _.as || output,\n      fontSize = _.fontSize || 14,\n      range;\n\n  isFunction(fontSize)\n    ? (range = _.fontSizeRange)\n    : (fontSize = constant(fontSize));\n\n  // create font size scaling function as needed\n  if (range) {\n    var fsize = fontSize,\n        sizeScale = scale$1('sqrt')()\n          .domain(extent$1(fsize, pulse))\n          .range(range);\n    fontSize = function(x) { return sizeScale(fsize(x)); };\n  }\n\n  var data = pulse.materialize(pulse.SOURCE).source;\n  data.forEach(function(t) {\n    t[as[0]] = NaN;\n    t[as[1]] = NaN;\n    t[as[3]] = 0;\n  });\n\n  // configure layout\n  var words = layout\n    .words(data)\n    .text(_.text)\n    .size(_.size || [500, 500])\n    .padding(_.padding || 1)\n    .spiral(_.spiral || 'archimedean')\n    .rotate(_.rotate || 0)\n    .font(_.font || 'sans-serif')\n    .fontStyle(_.fontStyle || 'normal')\n    .fontWeight(_.fontWeight || 'normal')\n    .fontSize(fontSize)\n    .layout();\n\n  var size = layout.size(),\n      dx = size[0] >> 1,\n      dy = size[1] >> 1,\n      i = 0,\n      n = words.length,\n      w, t;\n\n  for (; i<n; ++i) {\n    w = words[i];\n    t = w.datum;\n    t[as[0]] = w.x + dx;\n    t[as[1]] = w.y + dy;\n    t[as[2]] = w.font;\n    t[as[3]] = w.size;\n    t[as[4]] = w.style;\n    t[as[5]] = w.weight;\n    t[as[6]] = w.rotate;\n  }\n\n  return pulse.reflow(mod).modifies(as);\n};\n\nfunction extent$1(size, pulse) {\n  var e = new transforms.Extent();\n  e.transform({field: size, modified: truthy}, pulse);\n  return e.value;\n}\n\nvar WordcloudDefinition = {\n  \"type\": \"Wordcloud\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"font\", \"type\": \"string\", \"expr\": true, \"default\": \"sans-serif\" },\n    { \"name\": \"fontStyle\", \"type\": \"string\", \"expr\": true, \"default\": \"normal\" },\n    { \"name\": \"fontWeight\", \"type\": \"string\", \"expr\": true, \"default\": \"normal\" },\n    { \"name\": \"fontSize\", \"type\": \"number\", \"expr\": true, \"default\": 14 },\n    { \"name\": \"fontSizeRange\", \"type\": \"number\", \"array\": true, \"null\": true, \"default\": [10, 50] },\n    { \"name\": \"rotate\", \"type\": \"number\", \"expr\": true, \"default\": 0 },\n    { \"name\": \"text\", \"type\": \"field\" },\n    { \"name\": \"spiral\", \"type\": \"string\", \"values\": [\"archimedean\", \"rectangular\"] },\n    { \"name\": \"padding\", \"type\": \"number\", \"expr\": true },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 7,\n      \"default\": [\"x\", \"y\", \"font\", \"fontSize\", \"fontStyle\", \"fontWeight\", \"angle\"] }\n  ]\n};\n\nregister(WordcloudDefinition, Wordcloud);\n\nfunction array8(n) { return new Uint8Array(n); }\n\nfunction array16(n) { return new Uint16Array(n); }\n\nfunction array32(n) { return new Uint32Array(n); }\n\n/**\n * Maintains CrossFilter state.\n */\nfunction Bitmaps() {\n\n  var width = 8,\n      data = [],\n      seen = array32(0),\n      curr = array$2(0, width),\n      prev = array$2(0, width);\n\n  return {\n\n    data: function() { return data; },\n\n    seen: function() {\n      return (seen = lengthen(seen, data.length));\n    },\n\n    add: function(array) {\n      for (var i=0, j=data.length, n=array.length, t; i<n; ++i) {\n        t = array[i];\n        t._index = j++;\n        data.push(t);\n      }\n    },\n\n    remove: function(num, map) { // map: index -> boolean (true => remove)\n      var n = data.length,\n          copy = Array(n - num),\n          reindex = data, // reuse old data array for index map\n          t, i, j;\n\n      // seek forward to first removal\n      for (i=0; !map[i] && i<n; ++i) {\n        copy[i] = data[i];\n        reindex[i] = i;\n      }\n\n      // condense arrays\n      for (j=i; i<n; ++i) {\n        t = data[i];\n        if (!map[i]) {\n          reindex[i] = j;\n          curr[j] = curr[i];\n          prev[j] = prev[i];\n          copy[j] = t;\n          t._index = j++;\n        } else {\n          reindex[i] = -1;\n        }\n        curr[i] = 0; // clear unused bits\n      }\n\n      return (data = copy, reindex);\n    },\n\n    size: function() { return data.length; },\n\n    curr: function() { return curr; },\n\n    prev: function() { return prev; },\n\n    reset: function(k) { prev[k] = curr[k]; },\n\n    all: function() {\n      return width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff;\n    },\n\n    set: function(k, one) { curr[k] |= one; },\n\n    clear: function(k, one) { curr[k] &= ~one; },\n\n    resize: function(n, m) {\n      var k = curr.length;\n      if (n > k || m > width) {\n        width = Math.max(m, width);\n        curr = array$2(n, width, curr);\n        prev = array$2(n, width);\n      }\n    }\n  };\n}\n\nfunction lengthen(array, length, copy) {\n  if (array.length >= length) return array;\n  copy = copy || new array.constructor(length);\n  copy.set(array);\n  return copy;\n}\n\nfunction array$2(n, m, array) {\n  var copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);\n  if (array) copy.set(array);\n  return copy;\n}\n\nfunction Dimension(index, i, query) {\n  var bit = (1 << i);\n\n  return {\n    one:     bit,\n    zero:    ~bit,\n    range:   query.slice(),\n    bisect:  index.bisect,\n    index:   index.index,\n    size:    index.size,\n\n    onAdd: function(added, curr) {\n      var dim = this,\n          range = dim.bisect(dim.range, added.value),\n          idx = added.index,\n          lo = range[0],\n          hi = range[1],\n          n1 = idx.length, i;\n\n      for (i=0;  i<lo; ++i) curr[idx[i]] |= bit;\n      for (i=hi; i<n1; ++i) curr[idx[i]] |= bit;\n      return dim;\n    }\n  };\n}\n\n/**\n * Maintains a list of values, sorted by key.\n */\nfunction SortedIndex() {\n  var index = array32(0),\n      value = [],\n      size = 0;\n\n  function insert(key, data, base) {\n    if (!data.length) return [];\n\n    var n0 = size,\n        n1 = data.length,\n        addv = Array(n1),\n        addi = array32(n1),\n        oldv, oldi, i;\n\n    for (i=0; i<n1; ++i) {\n      addv[i] = key(data[i]);\n      addi[i] = i;\n    }\n    addv = sort(addv, addi);\n\n    if (n0) {\n      oldv = value;\n      oldi = index;\n      value = Array(n0 + n1);\n      index = array32(n0 + n1);\n      merge$1(base, oldv, oldi, n0, addv, addi, n1, value, index);\n    } else {\n      if (base > 0) for (i=0; i<n1; ++i) {\n        addi[i] += base;\n      }\n      value = addv;\n      index = addi;\n    }\n    size = n0 + n1;\n\n    return {index: addi, value: addv};\n  }\n\n  function remove(num, map) {\n    // map: index -> remove\n    var n = size,\n        idx, i, j;\n\n    // seek forward to first removal\n    for (i=0; !map[index[i]] && i<n; ++i);\n\n    // condense index and value arrays\n    for (j=i; i<n; ++i) {\n      if (!map[idx=index[i]]) {\n        index[j] = idx;\n        value[j] = value[i];\n        ++j;\n      }\n    }\n\n    size = n - num;\n  }\n\n  function reindex(map) {\n    for (var i=0, n=size; i<n; ++i) {\n      index[i] = map[index[i]];\n    }\n  }\n\n  function bisect(range, array) {\n    var n = array ? array.length : (array = value, size);\n    return [\n      d3Array.bisectLeft(array, range[0], 0, n),\n      d3Array.bisectRight(array, range[1], 0, n)\n    ];\n  }\n\n  return {\n    insert:  insert,\n    remove:  remove,\n    bisect:  bisect,\n    reindex: reindex,\n    index:   function() { return index; },\n    size:    function() { return size; }\n  };\n}\n\nfunction sort(values, index) {\n  values.sort.call(index, function(a, b) {\n    var x = values[a],\n        y = values[b];\n    return x < y ? -1 : x > y ? 1 : 0;\n  });\n  return d3Array.permute(values, index);\n}\n\nfunction merge$1(base, value0, index0, n0, value1, index1, n1, value, index) {\n  var i0 = 0, i1 = 0, i;\n\n  for (i=0; i0 < n0 && i1 < n1; ++i) {\n    if (value0[i0] < value1[i1]) {\n      value[i] = value0[i0];\n      index[i] = index0[i0++];\n    } else {\n      value[i] = value1[i1];\n      index[i] = index1[i1++] + base;\n    }\n  }\n\n  for (; i0 < n0; ++i0, ++i) {\n    value[i] = value0[i0];\n    index[i] = index0[i0];\n  }\n\n  for (; i1 < n1; ++i1, ++i) {\n    value[i] = value1[i1];\n    index[i] = index1[i1] + base;\n  }\n}\n\n/**\n * An indexed multi-dimensional filter.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.\n * @param {Array} params.query - An array of per-dimension range queries.\n */\nfunction CrossFilter(params) {\n  Transform.call(this, Bitmaps(), params);\n  this._indices = null;\n  this._dims = null;\n}\n\nvar prototype$65 = inherits(CrossFilter, Transform);\n\nprototype$65.transform = function(_, pulse) {\n  if (!this._dims) {\n    return this.init(_, pulse);\n  } else {\n    var init = _.modified('fields')\n          || _.fields.some(function(f) { return pulse.modified(f.fields); });\n\n    return init\n      ? this.reinit(_, pulse)\n      : this.eval(_, pulse);\n  }\n};\n\nprototype$65.init = function(_, pulse) {\n  var fields = _.fields,\n      query = _.query,\n      indices = this._indices = {},\n      dims = this._dims = [],\n      m = query.length,\n      i = 0, key, index;\n\n  // instantiate indices and dimensions\n  for (; i<m; ++i) {\n    key = fields[i].fname;\n    index = indices[key] || (indices[key] = SortedIndex());\n    dims.push(Dimension(index, i, query[i]));\n  }\n\n  return this.eval(_, pulse);\n};\n\nprototype$65.reinit = function(_, pulse) {\n  var output = pulse.materialize().fork(),\n      fields = _.fields,\n      query = _.query,\n      indices = this._indices,\n      dims = this._dims,\n      bits = this.value,\n      curr = bits.curr(),\n      prev = bits.prev(),\n      all = bits.all(),\n      out = (output.rem = output.add),\n      mod = output.mod,\n      m = query.length,\n      adds = {}, add, index, key,\n      mods, remMap, modMap, i, n, f;\n\n  // set prev to current state\n  prev.set(curr);\n\n  // if pulse has remove tuples, process them first\n  if (pulse.rem.length) {\n    remMap = this.remove(_, pulse, output);\n  }\n\n  // if pulse has added tuples, add them to state\n  if (pulse.add.length) {\n    bits.add(pulse.add);\n  }\n\n  // if pulse has modified tuples, create an index map\n  if (pulse.mod.length) {\n    modMap = {};\n    for (mods=pulse.mod, i=0, n=mods.length; i<n; ++i) {\n      modMap[mods[i]._index] = 1;\n    }\n  }\n\n  // re-initialize indices as needed, update curr bitmap\n  for (i=0; i<m; ++i) {\n    f = fields[i];\n    if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {\n      key = f.fname;\n      if (!(add = adds[key])) {\n        indices[key] = index = SortedIndex();\n        adds[key] = add = index.insert(f, pulse.source, 0);\n      }\n      dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);\n    }\n  }\n\n  // visit each tuple\n  // if filter state changed, push index to add/rem\n  // else if in mod and passes a filter, push index to mod\n  for (i=0, n=bits.data().length; i<n; ++i) {\n    if (remMap[i]) { // skip if removed tuple\n      continue;\n    } else if (prev[i] !== curr[i]) { // add if state changed\n      out.push(i);\n    } else if (modMap[i] && curr[i] !== all) { // otherwise, pass mods through\n      mod.push(i);\n    }\n  }\n\n  bits.mask = (1 << m) - 1;\n  return output;\n};\n\nprototype$65.eval = function(_, pulse) {\n  var output = pulse.materialize().fork(),\n      m = this._dims.length,\n      mask = 0;\n\n  if (pulse.rem.length) {\n    this.remove(_, pulse, output);\n    mask |= (1 << m) - 1;\n  }\n\n  if (_.modified('query') && !_.modified('fields')) {\n    mask |= this.update(_, pulse, output);\n  }\n\n  if (pulse.add.length) {\n    this.insert(_, pulse, output);\n    mask |= (1 << m) - 1;\n  }\n\n  if (pulse.mod.length) {\n    this.modify(pulse, output);\n    mask |= (1 << m) - 1;\n  }\n\n  this.value.mask = mask;\n  return output;\n};\n\nprototype$65.insert = function(_, pulse, output) {\n  var tuples = pulse.add,\n      bits = this.value,\n      dims = this._dims,\n      indices = this._indices,\n      fields = _.fields,\n      adds = {},\n      out = output.add,\n      k = bits.size(),\n      n = k + tuples.length,\n      m = dims.length, j, key, add;\n\n  // resize bitmaps and add tuples as needed\n  bits.resize(n, m);\n  bits.add(tuples);\n\n  var curr = bits.curr(),\n      prev = bits.prev(),\n      all  = bits.all();\n\n  // add to dimensional indices\n  for (j=0; j<m; ++j) {\n    key = fields[j].fname;\n    add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));\n    dims[j].onAdd(add, curr);\n  }\n\n  // set previous filters, output if passes at least one filter\n  for (; k<n; ++k) {\n    prev[k] = all;\n    if (curr[k] !== all) out.push(k);\n  }\n};\n\nprototype$65.modify = function(pulse, output) {\n  var out = output.mod,\n      bits = this.value,\n      curr = bits.curr(),\n      all  = bits.all(),\n      tuples = pulse.mod,\n      i, n, k;\n\n  for (i=0, n=tuples.length; i<n; ++i) {\n    k = tuples[i]._index;\n    if (curr[k] !== all) out.push(k);\n  }\n};\n\nprototype$65.remove = function(_, pulse, output) {\n  var indices = this._indices,\n      bits = this.value,\n      curr = bits.curr(),\n      prev = bits.prev(),\n      all  = bits.all(),\n      map = {},\n      out = output.rem,\n      tuples = pulse.rem,\n      i, n, k, f;\n\n  // process tuples, output if passes at least one filter\n  for (i=0, n=tuples.length; i<n; ++i) {\n    k = tuples[i]._index;\n    map[k] = 1; // build index map\n    prev[k] = (f = curr[k]);\n    curr[k] = all;\n    if (f !== all) out.push(k);\n  }\n\n  // remove from dimensional indices\n  for (k in indices) {\n    indices[k].remove(n, map);\n  }\n\n  return (this.reindex(pulse, n, map), map);\n};\n\n// reindex filters and indices after propagation completes\nprototype$65.reindex = function(pulse, num, map) {\n  var indices = this._indices,\n      bits = this.value;\n\n  pulse.runAfter(function() {\n    var indexMap = bits.remove(num, map);\n    for (var key in indices) indices[key].reindex(indexMap);\n  });\n};\n\nprototype$65.update = function(_, pulse, output) {\n  var dims = this._dims,\n      query = _.query,\n      stamp = pulse.stamp,\n      m = dims.length,\n      mask = 0, i, q;\n\n  // survey how many queries have changed\n  output.filters = 0;\n  for (q=0; q<m; ++q) {\n    if (_.modified('query', q)) { i = q; ++mask; }\n  }\n\n  if (mask === 1) {\n    // only one query changed, use more efficient update\n    mask = dims[i].one;\n    this.incrementOne(dims[i], query[i], output.add, output.rem);\n  } else {\n    // multiple queries changed, perform full record keeping\n    for (q=0, mask=0; q<m; ++q) {\n      if (!_.modified('query', q)) continue;\n      mask |= dims[q].one;\n      this.incrementAll(dims[q], query[q], stamp, output.add);\n      output.rem = output.add; // duplicate add/rem for downstream resolve\n    }\n  }\n\n  return mask;\n};\n\nprototype$65.incrementAll = function(dim, query, stamp, out) {\n  var bits = this.value,\n      seen = bits.seen(),\n      curr = bits.curr(),\n      prev = bits.prev(),\n      index = dim.index(),\n      old = dim.bisect(dim.range),\n      range = dim.bisect(query),\n      lo1 = range[0],\n      hi1 = range[1],\n      lo0 = old[0],\n      hi0 = old[1],\n      one = dim.one,\n      i, j, k;\n\n  // Fast incremental update based on previous lo index.\n  if (lo1 < lo0) {\n    for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n      k = index[i];\n      if (seen[k] !== stamp) {\n        prev[k] = curr[k];\n        seen[k] = stamp;\n        out.push(k);\n      }\n      curr[k] ^= one;\n    }\n  } else if (lo1 > lo0) {\n    for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n      k = index[i];\n      if (seen[k] !== stamp) {\n        prev[k] = curr[k];\n        seen[k] = stamp;\n        out.push(k);\n      }\n      curr[k] ^= one;\n    }\n  }\n\n  // Fast incremental update based on previous hi index.\n  if (hi1 > hi0) {\n    for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n      k = index[i];\n      if (seen[k] !== stamp) {\n        prev[k] = curr[k];\n        seen[k] = stamp;\n        out.push(k);\n      }\n      curr[k] ^= one;\n    }\n  } else if (hi1 < hi0) {\n    for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n      k = index[i];\n      if (seen[k] !== stamp) {\n        prev[k] = curr[k];\n        seen[k] = stamp;\n        out.push(k);\n      }\n      curr[k] ^= one;\n    }\n  }\n\n  dim.range = query.slice();\n};\n\nprototype$65.incrementOne = function(dim, query, add, rem) {\n  var bits = this.value,\n      curr = bits.curr(),\n      index = dim.index(),\n      old = dim.bisect(dim.range),\n      range = dim.bisect(query),\n      lo1 = range[0],\n      hi1 = range[1],\n      lo0 = old[0],\n      hi0 = old[1],\n      one = dim.one,\n      i, j, k;\n\n  // Fast incremental update based on previous lo index.\n  if (lo1 < lo0) {\n    for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n      k = index[i];\n      curr[k] ^= one;\n      add.push(k);\n    }\n  } else if (lo1 > lo0) {\n    for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n      k = index[i];\n      curr[k] ^= one;\n      rem.push(k);\n    }\n  }\n\n  // Fast incremental update based on previous hi index.\n  if (hi1 > hi0) {\n    for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n      k = index[i];\n      curr[k] ^= one;\n      add.push(k);\n    }\n  } else if (hi1 < hi0) {\n    for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n      k = index[i];\n      curr[k] ^= one;\n      rem.push(k);\n    }\n  }\n\n  dim.range = query.slice();\n};\n\nvar CrossFilterDefinition = {\n  \"type\": \"CrossFilter\",\n  \"metadata\": {},\n  \"params\": [\n    { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true },\n    { \"name\": \"query\", \"type\": \"array\", \"array\": true, \"required\": true,\n      \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} }\n  ]\n};\n\n/**\n * Selectively filters tuples by resolving against a filter bitmap.\n * Useful for processing the output of a cross-filter transform.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.ignore - A bit mask indicating which filters to ignore.\n * @param {object} params.filter - The per-tuple filter bitmaps. Typically this\n *   parameter value is a reference to a {@link CrossFilter} transform.\n */\nfunction ResolveFilter(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$66 = inherits(ResolveFilter, Transform);\n\nprototype$66.transform = function(_, pulse) {\n  var ignore = ~(_.ignore || 0), // bit mask where zeros -> dims to ignore\n      bitmap = _.filter,\n      mask = bitmap.mask;\n\n  // exit early if no relevant filter changes\n  if ((mask & ignore) === 0) return pulse.StopPropagation;\n\n  var output = pulse.fork(pulse.ALL),\n      data = bitmap.data(),\n      curr = bitmap.curr(),\n      prev = bitmap.prev(),\n      pass = function(k) {\n        return !(curr[k] & ignore) ? data[k] : null;\n      };\n\n  // propagate all mod tuples that pass the filter\n  output.filter(output.MOD, pass);\n\n  // determine add & rem tuples via filter functions\n  // for efficiency, we do *not* populate new arrays,\n  // instead we add filter functions applied downstream\n\n  if (!(mask & (mask-1))) { // only one filter changed\n    output.filter(output.ADD, pass);\n    output.filter(output.REM, function(k) {\n      return (curr[k] & ignore) === mask ? data[k] : null;\n    });\n\n  } else { // multiple filters changed\n    output.filter(output.ADD, function(k) {\n      var c = curr[k] & ignore,\n          f = !c && (c ^ (prev[k] & ignore));\n      return f ? data[k] : null;\n    });\n    output.filter(output.REM, function(k) {\n      var c = curr[k] & ignore,\n          f = c && !(c ^ (c ^ (prev[k] & ignore)));\n      return f ? data[k] : null;\n    });\n  }\n\n  // add filter to source data in case of reflow...\n  return output.filter(output.SOURCE, function(t) { return pass(t._index); });\n};\n\nvar ResolveFilterDefinition = {\n  \"type\": \"ResolveFilter\",\n  \"metadata\": {},\n  \"params\": [\n    { \"name\": \"ignore\", \"type\": \"number\", \"required\": true,\n      \"description\": \"A bit mask indicating which filters to ignore.\" },\n    { \"name\": \"filter\", \"type\": \"object\", \"required\": true,\n      \"description\": \"Per-tuple filter bitmaps from a CrossFilter transform.\" }\n  ]\n};\n\nregister(CrossFilterDefinition, CrossFilter);\n\nregister(ResolveFilterDefinition, ResolveFilter);\n\n/**\n * Calculate bounding boxes for scenegraph items.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.mark - The scenegraph mark instance to bound.\n */\nfunction Bound(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$67 = inherits(Bound, Transform);\nvar temp$1 = new Bounds();\nprototype$67.transform = function(_, pulse) {\n  var view = pulse.dataflow,\n      mark = _.mark,\n      type = mark.marktype,\n      entry = Marks[type],\n      bound = entry.bound,\n      clip = mark.clip,\n      markBounds = mark.bounds, rebound;\n\n  if (entry.nested) {\n    // multi-item marks have a single bounds instance\n    if (mark.items.length) view.dirty(mark.items[0]);\n    markBounds = boundItem$1(mark, bound);\n    mark.items.forEach(function(item) {\n      item.bounds.clear().union(markBounds);\n    });\n  }\n\n  else if (type === 'group' || _.modified()) {\n    // operator parameters modified -> re-bound all items\n    // updates group bounds in response to modified group content\n    pulse.visit(pulse.MOD, function(item) { view.dirty(item); });\n    markBounds.clear();\n    mark.items.forEach(function(item) {\n      markBounds.union(boundItem$1(item, bound));\n    });\n  }\n\n  else {\n    // incrementally update bounds, re-bound mark as needed\n    rebound = pulse.changed(pulse.REM);\n\n    pulse.visit(pulse.ADD, function(item) {\n      markBounds.union(boundItem$1(item, bound));\n    });\n\n    pulse.visit(pulse.MOD, function(item) {\n      rebound = rebound || markBounds.alignsWith(item.bounds);\n      view.dirty(item);\n      markBounds.union(boundItem$1(item, bound));\n    });\n\n    if (rebound && !clip) {\n      markBounds.clear();\n      mark.items.forEach(function(item) { markBounds.union(item.bounds); });\n    }\n  }\n\n  if (clip) {\n    markBounds.intersect(temp$1.set(0, 0, mark.group.width, mark.group.height));\n  }\n\n  return pulse.modifies('bounds');\n};\n\nfunction boundItem$1(item, bound, opt) {\n  return bound(item.bounds.clear(), item, opt);\n}\n\n/**\n * Bind scenegraph items to a scenegraph mark instance.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.markdef - The mark definition for creating the mark.\n *   This is an object of legal scenegraph mark properties which *must* include\n *   the 'marktype' property.\n * @param {Array<number>} params.scenepath - Scenegraph tree coordinates for the mark.\n *   The path is an array of integers, each indicating the index into\n *   a successive chain of items arrays.\n */\nfunction Mark(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$68 = inherits(Mark, Transform);\n\nprototype$68.transform = function(_, pulse) {\n  var mark = this.value;\n\n  // acquire mark on first invocation, bind context and group\n  if (!mark) {\n    mark = pulse.dataflow.scenegraph().mark(_.markdef, lookup$1(_), _.index);\n    mark.group.context = _.context;\n    if (!_.context.group) _.context.group = mark.group;\n    mark.source = this;\n    this.value = mark;\n  }\n\n  // initialize entering items\n  var Init = mark.marktype === 'group' ? GroupItem : Item;\n  pulse.visit(pulse.ADD, function(item) { Init.call(item, mark); });\n\n  // bind items array to scenegraph mark\n  return (mark.items = pulse.source, pulse);\n};\n\nfunction lookup$1(_) {\n  var g = _.groups, p = _.parent;\n  return g && g.size === 1 ? g.get(Object.keys(g.object)[0])\n    : g && p ? g.lookup(p)\n    : null;\n}\n\n/**\n * Queue modified scenegraph items for rendering.\n * @constructor\n */\nfunction Render(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$69 = inherits(Render, Transform);\n\nprototype$69.transform = function(_, pulse) {\n  var view = pulse.dataflow;\n\n  pulse.visit(pulse.ALL, function(item) { view.dirty(item); });\n\n  // set z-index dirty flag as needed\n  if (pulse.fields && pulse.fields['zindex']) {\n    var item = pulse.source && pulse.source[0];\n    if (item) item.mark.zdirty = true;\n  }\n};\n\nvar AxisRole$1 = 'axis';\nvar LegendRole$1 = 'legend';\nvar RowHeader$1 = 'row-header';\nvar RowFooter$1 = 'row-footer';\nvar RowTitle  = 'row-title';\nvar ColHeader$1 = 'column-header';\nvar ColFooter$1 = 'column-footer';\nvar ColTitle  = 'column-title';\nfunction extractGroups(group) {\n  var groups = group.items,\n      n = groups.length,\n      i = 0, mark, items;\n\n  var views = {\n    marks:      [],\n    rowheaders: [],\n    rowfooters: [],\n    colheaders: [],\n    colfooters: [],\n    rowtitle: null,\n    coltitle: null\n  };\n\n  // layout axes, gather legends, collect bounds\n  for (; i<n; ++i) {\n    mark = groups[i];\n    items = mark.items;\n    if (mark.marktype === 'group') {\n      switch (mark.role) {\n        case AxisRole$1:\n        case LegendRole$1:\n          break;\n        case RowHeader$1: addAll(items, views.rowheaders); break;\n        case RowFooter$1: addAll(items, views.rowfooters); break;\n        case ColHeader$1: addAll(items, views.colheaders); break;\n        case ColFooter$1: addAll(items, views.colfooters); break;\n        case RowTitle:  views.rowtitle = items[0]; break;\n        case ColTitle:  views.coltitle = items[0]; break;\n        default:        addAll(items, views.marks);\n      }\n    }\n  }\n\n  return views;\n}\n\nfunction addAll(items, array) {\n  for (var i=0, n=items.length; i<n; ++i) {\n    array.push(items[i]);\n  }\n}\n\nfunction bboxFlush(item) {\n  return {x1: 0, y1: 0, x2: item.width || 0, y2: item.height || 0};\n}\n\nfunction bboxFull(item) {\n  return item.bounds.clone().translate(-(item.x||0), -(item.y||0));\n}\n\nfunction boundFlush(item, field) {\n  var b = {x1: item.x, y1: item.y, x2: item.x + item.width, y2: item.y + item.height};\n  return b[field];\n}\n\nfunction boundFull(item, field) {\n  return item.bounds[field];\n}\n\nfunction get(opt, key, d) {\n  return (isObject(opt) ? opt[key] : opt) || d || 0;\n}\n\nfunction gridLayout(view, group, opt) {\n  var views = extractGroups(group, opt),\n      groups = views.marks,\n      flush = opt.bounds === 'flush',\n      bbox = flush ? bboxFlush : bboxFull,\n      bounds = new Bounds(0, 0, 0, 0),\n      alignCol = get(opt.align, 'column'),\n      alignRow = get(opt.align, 'row'),\n      padCol = get(opt.padding, 'column'),\n      padRow = get(opt.padding, 'row'),\n      off = opt.offset,\n      ncols = opt.columns || groups.length,\n      nrows = ncols < 0 ? 1 : Math.ceil(groups.length / ncols),\n      cells = nrows * ncols,\n      xOffset = [], xInit = 0,\n      yOffset = [], yInit = 0,\n      n = groups.length,\n      m, i, j, b, g, px, py, x, y, band, offset;\n\n  // determine offsets for each group\n  for (i=0; i<n; ++i) {\n    b = bbox(groups[i]);\n    px = i % ncols === 0 ? 0 : Math.ceil(bbox(groups[i-1]).x2);\n    py = i < ncols ? 0 : Math.ceil(bbox(groups[i-ncols]).y2);\n    x = (b.x1 < 0 ? Math.ceil(-b.x1) : 0) + px;\n    y = (b.y1 < 0 ? Math.ceil(-b.y1) : 0) + py;\n    xOffset.push(x + padCol);\n    yOffset.push(y + padRow);\n    view.dirty(groups[i]);\n  }\n\n  // set initial alignment offsets\n  for (i=0; i<n; ++i) {\n    if (i % ncols === 0) xOffset[i] = xInit;\n    if (i < ncols) yOffset[i] = yInit;\n  }\n\n  // enforce column alignment constraints\n  if (alignCol === 'each') {\n    for (j=1; j<ncols; ++j) {\n      for (offset=0, i=j; i<n; i += ncols) {\n        if (offset < xOffset[i]) offset = xOffset[i];\n      }\n      for (i=j; i<n; i += ncols) {\n        xOffset[i] = offset;\n      }\n    }\n  } else if (alignCol === 'all') {\n    for (offset=0, i=0; i<n; ++i) {\n      if (i % ncols && offset < xOffset[i]) offset = xOffset[i];\n    }\n    for (i=0; i<n; ++i) {\n      if (i % ncols) xOffset[i] = offset;\n    }\n  }\n\n  // enforce row alignment constraints\n  if (alignRow === 'each') {\n    for (j=1; j<nrows; ++j) {\n      for (offset=0, i=j*ncols, m=i+ncols; i<m; ++i) {\n        if (offset < yOffset[i]) offset = yOffset[i];\n      }\n      for (i=j*ncols; i<m; ++i) {\n        yOffset[i] = offset;\n      }\n    }\n  } else if (alignRow === 'all') {\n    for (offset=0, i=ncols; i<n; ++i) {\n      if (offset < yOffset[i]) offset = yOffset[i];\n    }\n    for (i=ncols; i<n; ++i) {\n      yOffset[i] = offset;\n    }\n  }\n\n  // perform horizontal grid layout\n  for (x=0, i=0; i<n; ++i) {\n    g = groups[i];\n    px = g.x || 0;\n    g.x = (x = xOffset[i] + (i % ncols ? x : 0));\n    g.bounds.translate(x - px, 0);\n  }\n\n  // perform vertical grid layout\n  for (j=0; j<ncols; ++j) {\n    for (y=0, i=j; i<n; i += ncols) {\n      g = groups[i];\n      py = g.y || 0;\n      g.y = (y += yOffset[i]);\n      g.bounds.translate(0, y - py);\n    }\n  }\n\n  // update mark bounds, mark dirty\n  for (i=0; i<n; ++i) groups[i].mark.bounds.clear();\n  for (i=0; i<n; ++i) {\n    g = groups[i];\n    view.dirty(g);\n    bounds.union(g.mark.bounds.union(g.bounds));\n  }\n\n  // -- layout grid headers and footers --\n\n  // aggregation functions for grid margin determination\n  function min(a, b) { return Math.floor(Math.min(a, b)); }\n  function max(a, b) { return Math.ceil(Math.max(a, b)); }\n\n  // bounding box calculation methods\n  bbox = flush ? boundFlush : boundFull;\n\n  // perform header layout\n  x = layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -get(off, 'rowHeader'),    min, 0, bbox, 'x1', 0, ncols, 1);\n  y = layoutHeaders(view, views.colheaders, groups, ncols, ncols, -get(off, 'columnHeader'), min, 1, bbox, 'y1', 0, 1, ncols);\n\n  // perform footer layout\n  layoutHeaders(    view, views.rowfooters, groups, ncols, nrows,  get(off, 'rowFooter'),    max, 0, bbox, 'x2', ncols-1, ncols, 1);\n  layoutHeaders(    view, views.colfooters, groups, ncols, ncols,  get(off, 'columnFooter'), max, 1, bbox, 'y2', cells-ncols, 1, ncols);\n\n  // perform row title layout\n  if (views.rowtitle) {\n    offset = x - get(off, 'rowTitle');\n    band = get(opt.titleBand, 'row', 0.5);\n    layoutTitle$1(view, views.rowtitle, offset, 0, bounds, band);\n  }\n\n  // perform column title layout\n  if (views.coltitle) {\n    offset = y - get(off, 'columnTitle');\n    band = get(opt.titleBand, 'column', 0.5);\n    layoutTitle$1(view, views.coltitle, offset, 1, bounds, band);\n  }\n}\n\nfunction layoutHeaders(view, headers, groups, ncols, limit, offset, agg, isX, bound, bf, start, stride, back) {\n  var n = groups.length,\n      init = 0,\n      edge = 0,\n      i, j, k, m, b, h, g, x, y;\n\n  // compute margin\n  for (i=start; i<n; i+=stride) {\n    if (groups[i]) init = agg(init, bound(groups[i], bf));\n  }\n\n  // if no headers, return margin calculation\n  if (!headers.length) return init;\n\n  // check if number of headers exceeds number of rows or columns\n  if (headers.length > limit) {\n    view.warn('Grid headers exceed limit: ' + limit);\n    headers = headers.slice(0, limit);\n  }\n\n  // apply offset\n  init += offset;\n\n  // clear mark bounds for all headers\n  for (j=0, m=headers.length; j<m; ++j) {\n    view.dirty(headers[j]);\n    headers[j].mark.bounds.clear();\n  }\n\n  // layout each header\n  for (i=start, j=0, m=headers.length; j<m; ++j, i+=stride) {\n    h = headers[j];\n    b = h.mark.bounds;\n\n    // search for nearest group to align to\n    // necessary if table has empty cells\n    for (k=i; (g = groups[k]) == null; k-=back);\n\n    // assign coordinates and update bounds\n    isX ? (x = g.x, y = init) : (x = init, y = g.y);\n    b.union(h.bounds.translate(x - (h.x || 0), y - (h.y || 0)));\n    h.x = x;\n    h.y = y;\n    view.dirty(h);\n\n    // update current edge of layout bounds\n    edge = agg(edge, b[bf]);\n  }\n\n  return edge;\n}\n\nfunction layoutTitle$1(view, g, offset, isX, bounds, band) {\n  if (!g) return;\n  view.dirty(g);\n\n  // compute title coordinates\n  var x = offset, y = offset;\n  isX\n    ? (x = Math.round(bounds.x1 + band * bounds.width()))\n    : (y = Math.round(bounds.y1 + band * bounds.height()));\n\n  // assign coordinates and update bounds\n  g.bounds.translate(x - (g.x || 0), y - (g.y || 0));\n  g.mark.bounds.clear().union(g.bounds);\n  g.x = x;\n  g.y = y;\n\n  // queue title for redraw\n  view.dirty(g);\n}\n\nvar Fit = 'fit';\nvar Pad = 'pad';\nvar None$2 = 'none';\nvar AxisRole = 'axis';\nvar TitleRole = 'title';\nvar FrameRole = 'frame';\nvar LegendRole = 'legend';\nvar ScopeRole = 'scope';\nvar RowHeader = 'row-header';\nvar RowFooter = 'row-footer';\nvar ColHeader = 'column-header';\nvar ColFooter = 'column-footer';\nvar tempBounds$2 = new Bounds();\n\n/**\n * Layout view elements such as axes and legends.\n * Also performs size adjustments.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.mark - Scenegraph mark of groups to layout.\n */\nfunction ViewLayout(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype$70 = inherits(ViewLayout, Transform);\n\nprototype$70.transform = function(_, pulse) {\n  // TODO incremental update, output?\n  var view = pulse.dataflow;\n  _.mark.items.forEach(function(group) {\n    if (_.layout) gridLayout(view, group, _.layout);\n    layoutGroup(view, group, _);\n  });\n  return pulse;\n};\n\nfunction layoutGroup(view, group, _) {\n  var items = group.items,\n      width = Math.max(0, group.width || 0),\n      height = Math.max(0, group.height || 0),\n      viewBounds = new Bounds().set(0, 0, width, height),\n      axisBounds = viewBounds.clone(),\n      legendBounds = viewBounds.clone(),\n      legends = [], title,\n      mark, flow, b, i, n;\n\n  // layout axes, gather legends, collect bounds\n  for (i=0, n=items.length; i<n; ++i) {\n    mark = items[i];\n    switch (mark.role) {\n      case AxisRole:\n        axisBounds.union(b = layoutAxis(view, mark, width, height));\n        if (isYAxis(mark)) legendBounds.union(b);\n        break;\n      case TitleRole:\n        title = mark; break;\n      case LegendRole:\n        legends.push(mark); break;\n      case FrameRole:\n      case ScopeRole:\n      case RowHeader:\n      case RowFooter:\n      case ColHeader:\n      case ColFooter:\n        legendBounds.union(mark.bounds);\n        break;\n      default:\n        viewBounds.union(mark.bounds);\n    }\n  }\n\n  // layout title, adjust bounds\n  if (title) {\n    axisBounds.union(b = layoutTitle(view, title, axisBounds));\n    if (isYAxis(title)) legendBounds.union(b);\n  }\n\n  // layout legends, adjust viewBounds\n  if (legends.length) {\n    flow = {left: 0, right: 0, margin: _.legendMargin || 8};\n\n    for (i=0, n=legends.length; i<n; ++i) {\n      b = layoutLegend(view, legends[i], flow, legendBounds, width, height);\n      (_.autosize && _.autosize.type === Fit)\n        ? viewBounds.add(b.x1, 0).add(b.x2, 0)\n        : viewBounds.union(b);\n    }\n  }\n\n  // perform size adjustment\n  layoutSize(view, group, viewBounds.union(legendBounds).union(axisBounds), _);\n}\n\nfunction set$1(item, property, value) {\n  return item[property] === value ? 0\n    : (item[property] = value, 1);\n}\n\nfunction isYAxis(mark) {\n  var orient = mark.items[0].datum.orient;\n  return orient === 'left' || orient === 'right';\n}\n\nfunction axisIndices(datum) {\n  var index = +datum.grid;\n  return [\n    datum.ticks  ? index++ : -1, // ticks index\n    datum.labels ? index++ : -1, // labels index\n    index + (+datum.domain)      // title index\n  ];\n}\n\nfunction layoutAxis(view, axis, width, height) {\n  var item = axis.items[0],\n      datum = item.datum,\n      orient = datum.orient,\n      indices = axisIndices(datum),\n      range = item.range,\n      offset = item.offset,\n      position = item.position,\n      minExtent = item.minExtent,\n      maxExtent = item.maxExtent,\n      title = datum.title && item.items[indices[2]].items[0],\n      titlePadding = item.titlePadding,\n      bounds = item.bounds,\n      x = 0, y = 0, i, s;\n\n  tempBounds$2.clear().union(bounds);\n  bounds.clear();\n  if ((i=indices[0]) > -1) bounds.union(item.items[i].bounds);\n  if ((i=indices[1]) > -1) bounds.union(item.items[i].bounds);\n\n  // position axis group and title\n  switch (orient) {\n    case 'top':\n      x = position || 0;\n      y = -offset;\n      s = Math.max(minExtent, Math.min(maxExtent, -bounds.y1));\n      if (title) title.auto\n        ? (title.y = -(s += titlePadding), s += title.bounds.height())\n        : bounds.union(title.bounds);\n      bounds.add(0, -s).add(range, 0);\n      break;\n    case 'left':\n      x = -offset;\n      y = position || 0;\n      s = Math.max(minExtent, Math.min(maxExtent, -bounds.x1));\n      if (title) title.auto\n        ? (title.x = -(s += titlePadding), s += title.bounds.width())\n        : bounds.union(title.bounds);\n      bounds.add(-s, 0).add(0, range);\n      break;\n    case 'right':\n      x = width + offset;\n      y = position || 0;\n      s = Math.max(minExtent, Math.min(maxExtent, bounds.x2));\n      if (title) title.auto\n        ? (title.x = (s += titlePadding), s += title.bounds.width())\n        : bounds.union(title.bounds);\n      bounds.add(0, 0).add(s, range);\n      break;\n    case 'bottom':\n      x = position || 0;\n      y = height + offset;\n      s = Math.max(minExtent, Math.min(maxExtent, bounds.y2));\n      if (title) title.auto\n        ? (title.y = (s += titlePadding), s += title.bounds.height())\n        : bounds.union(title.bounds);\n      bounds.add(0, 0).add(range, s);\n      break;\n    default:\n      x = item.x;\n      y = item.y;\n  }\n\n  // update bounds\n  boundStroke(bounds.translate(x, y), item);\n\n  if (set$1(item, 'x', x + 0.5) | set$1(item, 'y', y + 0.5)) {\n    item.bounds = tempBounds$2;\n    view.dirty(item);\n    item.bounds = bounds;\n    view.dirty(item);\n  }\n\n  return item.mark.bounds.clear().union(bounds);\n}\n\nfunction layoutTitle(view, title, axisBounds) {\n  var item = title.items[0],\n      datum = item.datum,\n      orient = datum.orient,\n      offset = item.offset,\n      bounds = item.bounds,\n      x = 0, y = 0;\n\n  tempBounds$2.clear().union(bounds);\n\n  // position axis group and title\n  switch (orient) {\n    case 'top':\n      x = item.x;\n      y = axisBounds.y1 - offset;\n      break;\n    case 'left':\n      x = axisBounds.x1 - offset;\n      y = item.y;\n      break;\n    case 'right':\n      x = axisBounds.x2 + offset;\n      y = item.y;\n      break;\n    case 'bottom':\n      x = item.x;\n      y = axisBounds.y2 + offset;\n      break;\n    default:\n      x = item.x;\n      y = item.y;\n  }\n\n  bounds.translate(x - item.x, y - item.y);\n  if (set$1(item, 'x', x) | set$1(item, 'y', y)) {\n    item.bounds = tempBounds$2;\n    view.dirty(item);\n    item.bounds = bounds;\n    view.dirty(item);\n  }\n\n  // update bounds\n  return title.bounds.clear().union(bounds);\n}\n\nfunction layoutLegend(view, legend, flow, axisBounds, width, height) {\n  var item = legend.items[0],\n      datum = item.datum,\n      orient = datum.orient,\n      offset = item.offset,\n      bounds = item.bounds,\n      x = 0,\n      y = (flow[orient] || 0),\n      w, h;\n\n  tempBounds$2.clear().union(bounds);\n  bounds.clear();\n\n  // aggregate bounds to determine size\n  // shave off 1 pixel because it looks better...\n  item.items.forEach(function(_) { bounds.union(_.bounds); });\n  w = Math.round(bounds.width()) + 2 * item.padding - 1;\n  h = Math.round(bounds.height()) + 2 * item.padding - 1;\n\n  switch (orient) {\n    case 'left':\n      x -= w + offset - Math.floor(axisBounds.x1);\n      flow.left += h + flow.margin;\n      break;\n    case 'right':\n      x += offset + Math.ceil(axisBounds.x2);\n      flow.right += h + flow.margin;\n      break;\n    case 'top-left':\n      x += offset;\n      y += offset;\n      break;\n    case 'top-right':\n      x += width - w - offset;\n      y += offset;\n      break;\n    case 'bottom-left':\n      x += offset;\n      y += height - h - offset;\n      break;\n    case 'bottom-right':\n      x += width - w - offset;\n      y += height - h - offset;\n      break;\n    default:\n      x = item.x;\n      y = item.y;\n  }\n\n  // update bounds\n  boundStroke(bounds.set(x, y, x + w, y + h), item);\n\n  // update legend layout\n  if (set$1(item, 'x', x) | set$1(item, 'width', w) |\n      set$1(item, 'y', y) | set$1(item, 'height', h)) {\n    item.bounds = tempBounds$2;\n    view.dirty(item);\n    item.bounds = bounds;\n    view.dirty(item);\n  }\n\n  return item.mark.bounds.clear().union(bounds);\n}\n\nfunction layoutSize(view, group, viewBounds, _) {\n  var type = _.autosize && _.autosize.type,\n      auto = _.autosize && _.autosize.resize,\n      viewWidth = view._width,\n      viewHeight = view._height;\n\n  if (view._autosize < 1 || !type) return;\n\n  var width  = Math.max(0, group.width || 0),\n      left   = Math.max(0, Math.ceil(-viewBounds.x1)),\n      right  = Math.max(0, Math.ceil(viewBounds.x2 - width)),\n      height = Math.max(0, group.height || 0),\n      top    = Math.max(0, Math.ceil(-viewBounds.y1)),\n      bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));\n\n  if (type === None$2) {\n    viewWidth = width;\n    viewHeight = height;\n    left = 0;\n    top = 0;\n  }\n\n  else if (type === Fit) {\n    width = Math.max(0, viewWidth - left - right);\n    height = Math.max(0, viewHeight - top - bottom);\n  }\n\n  else if (type === Pad) {\n    viewWidth = width + left + right;\n    viewHeight = height + top + bottom;\n  }\n\n  view.autosize(viewWidth, viewHeight, width, height, [left, top], auto);\n}\n\nvar Default = 'default';\n\nfunction cursor(view) {\n  var cursor = view._signals.cursor;\n\n  // add cursor signal to dataflow, if needed\n  if (!cursor) {\n    view._signals.cursor = (cursor = view.add({user: Default, item: null}));\n  }\n\n  // evaluate cursor on each mousemove event\n  view.on(view.events('view', 'mousemove'), cursor,\n    function(_, event) {\n      var value = cursor.value,\n          user = value ? (isString(value) ? value : value.user) : Default,\n          item = event.item && event.item.cursor || null;\n\n      return (value && user === value.user && item == value.item) ? value\n        : {user: user, item: item};\n    }\n  );\n\n  // when cursor signal updates, set visible cursor\n  view.add(null, function(_) {\n    var user = _.cursor,\n        item = this.value;\n\n    if (!isString(user)) {\n      item = user.item;\n      user = user.user;\n    }\n\n    setCursor(user && user !== Default ? user : (item || user));\n\n    return item;\n  }, {cursor: cursor});\n}\n\nfunction setCursor(cursor) {\n  // set cursor on document body\n  // this ensures cursor applies even if dragging out of view\n  if (typeof document !== 'undefined' && document.body) {\n    document.body.style.cursor = cursor;\n  }\n}\n\nfunction dataref(view, name) {\n  var data = view._runtime.data;\n  if (!data.hasOwnProperty(name)) {\n    view.error('Unrecognized data set: ' + name);\n  }\n  return data[name];\n}\n\nfunction data(name) {\n  return dataref(this, name).values.value;\n}\n\nfunction change(name, changes) {\n  if (!isChangeSet(changes)) {\n    this.error('Second argument to changes must be a changeset.');\n  }\n  var dataset = dataref(this, name);\n  dataset.modified = true;\n  return this.pulse(dataset.input, changes);\n}\n\nfunction insert(name, _) {\n  return change.call(this, name, changeset().insert(_));\n}\n\nfunction remove(name, _) {\n  return change.call(this, name, changeset().remove(_));\n}\n\nfunction width(view) {\n  var padding = view.padding();\n  return Math.max(0, view._width + padding.left + padding.right);\n}\n\nfunction height$1(view) {\n  var padding = view.padding();\n  return Math.max(0, view._height + padding.top + padding.bottom);\n}\n\nfunction offset$1(view) {\n  var padding = view.padding(),\n      origin = view._origin;\n  return [\n    padding.left + origin[0],\n    padding.top + origin[1]\n  ];\n}\n\nfunction resizeRenderer(view) {\n  var origin = offset$1(view);\n  view._renderer.background(view._background);\n  view._renderer.resize(width(view), height$1(view), origin);\n  view._handler.origin(origin);\n}\n\n/**\n * Extend an event with additional view-specific methods.\n * Adds a new property ('vega') to an event that provides a number\n * of methods for querying information about the current interaction.\n * The vega object provides the following methods:\n *   view - Returns the backing View instance.\n *   item - Returns the currently active scenegraph item (if any).\n *   group - Returns the currently active scenegraph group (if any).\n *     This method accepts a single string-typed argument indicating the name\n *     of the desired parent group. The scenegraph will be traversed from\n *     the item up towards the root to search for a matching group. If no\n *     argument is provided the enclosing group for the active item is\n *     returned, unless the item it itself a group, in which case it is\n *     returned directly.\n *   xy - Returns a two-element array containing the x and y coordinates for\n *     mouse or touch events. For touch events, this is based on the first\n *     elements in the changedTouches array. This method accepts a single\n *     argument: either an item instance or mark name that should serve as\n *     the reference coordinate system. If no argument is provided the\n *     top-level view coordinate system is assumed.\n *   x - Returns the current x-coordinate, accepts the same arguments as xy.\n *   y - Returns the current y-coordinate, accepts the same arguments as xy.\n * @param {Event} event - The input event to extend.\n * @param {Item} item - The currently active scenegraph item (if any).\n * @return {Event} - The extended input event.\n */\nfunction eventExtend(view, event, item) {\n  var el = view._renderer.element(),\n      p, e, translate;\n\n  if (el) {\n    translate = offset$1(view);\n    e = event.changedTouches ? event.changedTouches[0] : event;\n    p = point(e, el);\n    p[0] -= translate[0];\n    p[1] -= translate[1];\n  }\n\n  return event.vega = extension(view, item, p), event.item = item, event;\n}\n\nfunction extension(view, item, point) {\n  var itemGroup = item\n    ? item.mark.marktype === 'group' ? item : item.mark.group\n    : null;\n\n  function group(name) {\n    var g = itemGroup, i;\n    if (name) for (i = item; i; i = i.mark.group) {\n      if (i.mark.name === name) { g = i; break; }\n    }\n    return g && g.mark && g.mark.interactive ? g : {};\n  }\n\n  function xy(item) {\n    if (!item) return point;\n    if (isString(item)) item = group(item);\n\n    var p = point.slice();\n    while (item) {\n      p[0] -= item.x || 0;\n      p[1] -= item.y || 0;\n      item = item.mark && item.mark.group;\n    }\n    return p;\n  }\n\n  return {\n    view:  constant(view),\n    item:  constant(item || {}),\n    group: group,\n    xy:    xy,\n    x:     function(item) { return xy(item)[0]; },\n    y:     function(item) { return xy(item)[1]; }\n  };\n}\n\nvar VIEW = 'view';\nvar WINDOW = 'window';\n/**\n * Create a new event stream from an event source.\n * @param {object} source - The event source to monitor.\n * @param {string} type - The event type.\n * @param {function(object): boolean} [filter] - Event filter function.\n * @return {EventStream}\n */\nfunction events$1(source, type, filter) {\n  var view = this,\n      s = new EventStream(filter),\n      send = function(e, item) {\n        if (view.preventDefault() && source === VIEW) {\n          e.preventDefault();\n        }\n        s.receive(eventExtend(view, e, item));\n        view.run();\n      },\n      sources;\n\n  if (source === VIEW) {\n    view.addEventListener(type, send);\n    return s;\n  }\n\n  if (source === WINDOW) {\n    if (typeof window !== 'undefined') sources = [window];\n  } else if (typeof document !== 'undefined') {\n    sources = document.querySelectorAll(source);\n  }\n\n  if (!sources) {\n    view.warn('Can not resolve event source: ' + source);\n    return s;\n  }\n\n  for (var i=0, n=sources.length; i<n; ++i) {\n    sources[i].addEventListener(type, send);\n  }\n\n  view._eventListeners.push({\n    type:    type,\n    sources: sources,\n    handler: send\n  });\n\n  return s;\n}\n\nfunction itemFilter(event) {\n  return event.item;\n}\n\nfunction markTarget(event) {\n  // grab upstream collector feeding the mark operator\n  var source = event.item.mark.source;\n  return source.source || source;\n}\n\nfunction invoke(name) {\n  return function(_, event) {\n    return event.vega.view()\n      .changeset()\n      .encode(event.item, name);\n  };\n}\n\nfunction hover(hoverSet, leaveSet) {\n  // invoke hover set upon mouseover\n  this.on(\n    this.events('view', 'mouseover', itemFilter),\n    markTarget,\n    invoke(hoverSet || 'hover')\n  );\n\n  // invoke leave set upon mouseout\n  this.on(\n    this.events('view', 'mouseout', itemFilter),\n    markTarget,\n    invoke(leaveSet || 'update')\n  );\n\n  return this;\n}\n\n/**\n * Remove all external event listeners.\n */\nfunction finalize() {\n  var listeners = this._eventListeners,\n      n = listeners.length, m, e;\n\n  while (--n >= 0) {\n    e = listeners[n];\n    m = e.sources.length;\n    while (--m >= 0) {\n      e.sources[m].removeEventListener(e.type, e.handler);\n    }\n  }\n}\n\nfunction element$1(tag, attr, text) {\n  var el = document.createElement(tag);\n  for (var key in attr) el.setAttribute(key, attr[key]);\n  if (text != null) el.textContent = text;\n  return el;\n}\n\nvar BindClass = 'vega-bind';\nvar NameClass = 'vega-bind-name';\nvar RadioClass = 'vega-bind-radio';\nvar OptionClass = 'vega-option-';\n/**\n * Bind a signal to an external HTML input element. The resulting two-way\n * binding will propagate input changes to signals, and propagate signal\n * changes to the input element state. If this view instance has no parent\n * element, we assume the view is headless and no bindings are created.\n * @param {Element|string} el - The parent DOM element to which the input\n *   element should be appended as a child. If string-valued, this argument\n *   will be treated as a CSS selector. If null or undefined, the parent\n *   element of this view will be used as the element.\n * @param {object} param - The binding parameters which specify the signal\n *   to bind to, the input element type, and type-specific configuration.\n * @return {View} - This view instance.\n */\nfunction bind$1(view, el, binding) {\n  var param = binding.param;\n  var bind = binding.state || (binding.state = {\n    elements: null,\n    set: null,\n    update: function(value) {\n      bind.source = true;\n      view.signal(param.signal, value).run();\n    },\n    active: false\n  });\n\n  if (isString(el)) el = document.querySelector(el);\n  generate(bind, el, param, view.signal(param.signal));\n\n  if (!bind.active) {\n    view.on(view._signals[param.signal], null, function() {\n      bind.source\n        ? (bind.source = false)\n        : bind.set(view.signal(param.signal));\n    });\n    bind.active = true;\n  }\n\n  return bind;\n}\n\n/**\n * Generate an HTML input form element and bind it to a signal.\n */\nfunction generate(bind, el, param, value) {\n  var div = element$1('div', {'class': BindClass});\n\n  div.appendChild(element$1('span',\n    {'class': NameClass},\n    (param.name || param.signal)\n  ));\n\n  el.appendChild(div);\n\n  var input = form;\n  switch (param.input) {\n    case 'checkbox': input = checkbox; break;\n    case 'select':   input = select; break;\n    case 'radio':    input = radio; break;\n    case 'range':    input = range$1; break;\n  }\n\n  input(bind, div, param, value);\n}\n\n/**\n * Generates an arbitrary input form element.\n * The input type is controlled via user-provided parameters.\n */\nfunction form(bind, el, param, value) {\n  var node = element$1('input');\n\n  for (var key in param) {\n    if (key !== 'signal' && key !== 'element') {\n      node.setAttribute(key === 'input' ? 'type' : key, param[key]);\n    }\n  }\n  node.setAttribute('name', param.signal);\n  node.value = value;\n\n  el.appendChild(node);\n\n  node.addEventListener('input', function() {\n    bind.update(node.value);\n  });\n\n  bind.elements = [node];\n  bind.set = function(value) { node.value = value; };\n}\n\n/**\n * Generates a checkbox input element.\n */\nfunction checkbox(bind, el, param, value) {\n  var attr = {type: 'checkbox', name: param.signal};\n  if (value) attr.checked = true;\n  var node = element$1('input', attr);\n\n  el.appendChild(node);\n\n  node.addEventListener('change', function() {\n    bind.update(node.checked);\n  });\n\n  bind.elements = [node];\n  bind.set = function(value) { node.checked = !!value || null; }\n}\n\n/**\n * Generates a selection list input element.\n */\nfunction select(bind, el, param, value) {\n  var node = element$1('select', {name: param.signal});\n\n  param.options.forEach(function(option) {\n    var attr = {value: option};\n    if (valuesEqual(option, value)) attr.selected = true;\n    node.appendChild(element$1('option', attr, option+''));\n  });\n\n  el.appendChild(node);\n\n  node.addEventListener('change', function() {\n    bind.update(param.options[node.selectedIndex]);\n  });\n\n  bind.elements = [node];\n  bind.set = function(value) {\n    for (var i=0, n=param.options.length; i<n; ++i) {\n      if (valuesEqual(param.options[i], value)) {\n        node.selectedIndex = i; return;\n      }\n    }\n  };\n}\n\n/**\n * Generates a radio button group.\n */\nfunction radio(bind, el, param, value) {\n  var group = element$1('span', {'class': RadioClass});\n\n  el.appendChild(group);\n\n  bind.elements = param.options.map(function(option) {\n    var id = OptionClass + param.signal + '-' + option;\n\n    var attr = {\n      id:    id,\n      type:  'radio',\n      name:  param.signal,\n      value: option\n    };\n    if (valuesEqual(option, value)) attr.checked = true;\n\n    var input = element$1('input', attr);\n\n    input.addEventListener('change', function() {\n      bind.update(option);\n    });\n\n    group.appendChild(input);\n    group.appendChild(element$1('label', {'for': id}, option+''));\n\n    return input;\n  });\n\n  bind.set = function(value) {\n    var nodes = bind.elements,\n        i = 0,\n        n = nodes.length;\n    for (; i<n; ++i) {\n      if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;\n    }\n  };\n}\n\n/**\n * Generates a slider input element.\n */\nfunction range$1(bind, el, param, value) {\n  value = value !== undefined ? value : ((+param.max) + (+param.min)) / 2;\n\n  var min = param.min || Math.min(0, +value) || 0,\n      max = param.max || Math.max(100, +value) || 100,\n      step = param.step || d3Array.tickStep(min, max, 100);\n\n  var node = element$1('input', {\n    type:  'range',\n    name:  param.signal,\n    min:   min,\n    max:   max,\n    step:  step\n  });\n  node.value = value;\n\n  var label = element$1('label', {}, +value);\n\n  el.appendChild(node);\n  el.appendChild(label);\n\n  function update() {\n    label.textContent = node.value;\n    bind.update(+node.value);\n  }\n\n  // subscribe to both input and change\n  // signal updates halt redundant values, maintaining performance\n  node.addEventListener('input', update);\n  node.addEventListener('change', update);\n\n  bind.elements = [node];\n  bind.set = function(value) {\n    node.value = value;\n    label.textContent = value;\n  };\n}\n\nfunction valuesEqual(a, b) {\n  return a === b || (a+'' === b+'');\n}\n\nfunction initializeRenderer(view, r, el, constructor) {\n  r = r || new constructor(view.loader());\n  return r\n    .initialize(el, width(view), height$1(view), offset$1(view))\n    .background(view._background);\n}\n\nfunction initializeHandler(view, prevHandler, el, constructor) {\n  var handler = new constructor()\n    .scene(view.scenegraph().root)\n    .initialize(el, offset$1(view), view);\n\n  if (prevHandler) {\n    handler.handleTooltip = prevHandler.handleTooltip;\n    prevHandler.handlers().forEach(function(h) {\n      handler.on(h.type, h.handler);\n    });\n  }\n\n  return handler;\n}\n\nfunction initialize$1(el, elBind) {\n  var view = this,\n      type = view._renderType,\n      module = renderModule(type),\n      Handler, Renderer;\n\n  // containing dom element\n  el = view._el = el ? lookup$2(view, el) : null;\n\n  // select appropriate renderer & handler\n  if (!module) view.error('Unrecognized renderer type: ' + type);\n  Handler = module.handler || CanvasHandler;\n  Renderer = (el ? module.renderer : module.headless);\n\n  // initialize renderer and input handler\n  view._renderer = !Renderer ? null\n    : initializeRenderer(view, view._renderer, el, Renderer);\n  view._handler = initializeHandler(view, view._handler, el, Handler);\n  view._redraw = true;\n\n  // initialize signal bindings\n  if (el) {\n    elBind = elBind ? lookup$2(view, elBind)\n      : el.appendChild(element$1('div', {'class': 'vega-bindings'}));\n\n    view._bind.forEach(function(_) {\n      if (_.param.element) lookup$2(view, _.param.element);\n    });\n\n    view._bind.forEach(function(_) {\n      bind$1(view, _.param.element || elBind, _);\n    });\n  }\n\n  return view;\n}\n\nfunction lookup$2(view, el) {\n  if (typeof el === 'string') {\n    el = typeof document !== 'undefined'\n      ? document.querySelector(el)\n      : view.error('DOM document instance not found.');\n  }\n  return el.innerHTML = '', el;\n}\n\n/**\n * Render the current scene in a headless fashion.\n * This method is asynchronous, returning a Promise instance.\n * @return {Promise} - A Promise that resolves to a renderer.\n */\nfunction renderHeadless(view, type) {\n  var module = renderModule(type);\n  return !(module && module.headless)\n    ? Promise.reject('Unrecognized renderer type: ' + type)\n    : view.runAsync().then(function() {\n        return initializeRenderer(view, null, null, module.headless)\n          .renderAsync(view._scenegraph.root);\n      });\n}\n\n/**\n * Produce an image URL for the visualization. Depending on the type\n * parameter, the generated URL contains data for either a PNG or SVG image.\n * The URL can be used (for example) to download images of the visualization.\n * This method is asynchronous, returning a Promise instance.\n * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.\n *   The 'canvas' and 'png' types are synonyms for a PNG image.\n * @return {Promise} - A promise that resolves to an image URL.\n */\nfunction renderToImageURL(type) {\n  return (type !== RenderType.Canvas && type !== RenderType.SVG && type !== RenderType.PNG)\n    ? Promise.reject('Unrecognized image type: ' + type)\n    : renderHeadless(this, type).then(function(renderer) {\n        return type === RenderType.SVG\n          ? toBlobURL(renderer.svg(), 'image/svg+xml')\n          : renderer.canvas().toDataURL('image/png');\n\n      });\n}\n\nfunction toBlobURL(data, mime) {\n  var blob = new Blob([data], {type: mime});\n  return window.URL.createObjectURL(blob);\n}\n\n/**\n * Produce a Canvas instance containing a rendered visualization.\n * This method is asynchronous, returning a Promise instance.\n * @return {Promise} - A promise that resolves to a Canvas instance.\n */\nfunction renderToCanvas() {\n  return renderHeadless(this, RenderType.Canvas)\n    .then(function(renderer) { return renderer.canvas(); });\n}\n\n/**\n * Produce a rendered SVG string of the visualization.\n * This method is asynchronous, returning a Promise instance.\n * @return {Promise} - A promise that resolves to an SVG string.\n */\nfunction renderToSVG() {\n  return renderHeadless(this, RenderType.SVG)\n    .then(function(renderer) { return renderer.svg(); });\n}\n\nfunction parseAutosize(spec, config) {\n  spec = spec || config.autosize;\n  return isObject(spec) ? spec\n    : (spec = spec || 'pad', {type: spec});\n}\n\nfunction parsePadding(spec, config) {\n  spec = spec || config.padding;\n  return isObject(spec) ? spec\n    : (spec = +spec || 0, {top:spec, bottom:spec, left:spec, right:spec});\n}\n\nvar OUTER = 'outer';\nvar OUTER_INVALID = ['value', 'update', 'react', 'bind'];\nfunction outerError(prefix, name) {\n  error(prefix + ' for \"outer\" push: ' + $$2(name));\n}\n\nfunction parseSignal(signal, scope) {\n  var name = signal.name;\n\n  if (signal.push === OUTER) {\n    // signal must already be defined, raise error if not\n    if (!scope.signals[name]) outerError('No prior signal definition', name);\n    // signal push must not use properties reserved for standard definition\n    OUTER_INVALID.forEach(function(prop) {\n      if (signal[prop] !== undefined) outerError('Invalid property ', prop);\n    });\n  } else {\n    // define a new signal in the current scope\n    var op = scope.addSignal(name, signal.value);\n    if (signal.react === false) op.react = false;\n    if (signal.bind) scope.addBinding(name, signal.bind);\n  }\n}\n\nfunction ASTNode(type) {\n  this.type = type;\n}\n\nASTNode.prototype.visit = function(visitor) {\n  var node = this, c, i, n;\n\n  if (visitor(node)) return 1;\n\n  for (c=children$1(node), i=0, n=c.length; i<n; ++i) {\n    if (c[i].visit(visitor)) return 1;\n  }\n}\n\nfunction children$1(node) {\n  switch (node.type) {\n    case 'ArrayExpression':\n      return node.elements;\n    case 'BinaryExpression':\n    case 'LogicalExpression':\n      return [node.left, node.right];\n    case 'CallExpression':\n      var args = node.arguments.slice();\n      args.unshift(node.callee);\n      return args;\n    case 'ConditionalExpression':\n      return [node.test, node.consequent, node.alternate];\n    case 'MemberExpression':\n      return [node.object, node.property];\n    case 'ObjectExpression':\n      return node.properties;\n    case 'Property':\n      return [node.key, node.value];\n    case 'UnaryExpression':\n      return [node.argument];\n    case 'Identifier':\n    case 'Literal':\n    case 'RawCode':\n    default:\n      return [];\n  }\n}\n\n/*\n  The following expression parser is based on Esprima (http://esprima.org/).\n  Original header comment and license for Esprima is included here:\n\n  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\nvar source$1;\nvar index;\nvar length;\nvar lookahead;\nvar TokenBooleanLiteral = 1;\nvar TokenEOF = 2;\nvar TokenIdentifier = 3;\nvar TokenKeyword = 4;\nvar TokenNullLiteral = 5;\nvar TokenNumericLiteral = 6;\nvar TokenPunctuator = 7;\nvar TokenStringLiteral = 8;\nvar SyntaxArrayExpression = 'ArrayExpression';\nvar SyntaxBinaryExpression = 'BinaryExpression';\nvar SyntaxCallExpression = 'CallExpression';\nvar SyntaxConditionalExpression = 'ConditionalExpression';\nvar SyntaxIdentifier = 'Identifier';\nvar SyntaxLiteral = 'Literal';\nvar SyntaxLogicalExpression = 'LogicalExpression';\nvar SyntaxMemberExpression = 'MemberExpression';\nvar SyntaxObjectExpression = 'ObjectExpression';\nvar SyntaxProperty = 'Property';\nvar SyntaxUnaryExpression = 'UnaryExpression';\nvar MessageUnexpectedToken = 'Unexpected token %0';\nvar MessageUnexpectedNumber = 'Unexpected number';\nvar MessageUnexpectedString = 'Unexpected string';\nvar MessageUnexpectedIdentifier = 'Unexpected identifier';\nvar MessageUnexpectedReserved = 'Unexpected reserved word';\nvar MessageUnexpectedEOS = 'Unexpected end of input';\nvar MessageInvalidRegExp = 'Invalid regular expression';\nvar MessageUnterminatedRegExp = 'Invalid regular expression: missing /';\nvar MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.';\nvar MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';\nvar ILLEGAL = 'ILLEGAL';\nvar DISABLED = 'Disabled.';\nvar RegexNonAsciiIdentifierStart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]');\nvar RegexNonAsciiIdentifierPart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]');\n// Ensure the condition is true, otherwise throw an error.\n// This is only to have a better contract semantic, i.e. another safety net\n// to catch a logic error. The condition shall be fulfilled in normal case.\n// Do NOT use this to enforce a certain condition on any user input.\n\nfunction assert(condition, message) {\n  /* istanbul ignore next */\n  if (!condition) {\n    throw new Error('ASSERT: ' + message);\n  }\n}\n\nfunction isDecimalDigit(ch) {\n  return (ch >= 0x30 && ch <= 0x39); // 0..9\n}\n\nfunction isHexDigit(ch) {\n  return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n}\n\nfunction isOctalDigit(ch) {\n  return '01234567'.indexOf(ch) >= 0;\n}\n\n// 7.2 White Space\n\nfunction isWhiteSpace(ch) {\n  return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n    (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n}\n\n// 7.3 Line Terminators\n\nfunction isLineTerminator(ch) {\n  return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n}\n\n// 7.6 Identifier Names and Identifiers\n\nfunction isIdentifierStart(ch) {\n  return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n    (ch >= 0x41 && ch <= 0x5A) || // A..Z\n    (ch >= 0x61 && ch <= 0x7A) || // a..z\n    (ch === 0x5C) || // \\ (backslash)\n    ((ch >= 0x80) && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch)));\n}\n\nfunction isIdentifierPart(ch) {\n  return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n    (ch >= 0x41 && ch <= 0x5A) || // A..Z\n    (ch >= 0x61 && ch <= 0x7A) || // a..z\n    (ch >= 0x30 && ch <= 0x39) || // 0..9\n    (ch === 0x5C) || // \\ (backslash)\n    ((ch >= 0x80) && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n}\n\n// 7.6.1.1 Keywords\n\nvar keywords$1 = {\n  'if':1, 'in':1, 'do':1,\n  'var':1, 'for':1, 'new':1, 'try':1, 'let':1,\n  'this':1, 'else':1, 'case':1, 'void':1, 'with':1, 'enum':1,\n  'while':1, 'break':1, 'catch':1, 'throw':1, 'const':1, 'yield':1, 'class':1, 'super':1,\n  'return':1, 'typeof':1, 'delete':1, 'switch':1, 'export':1, 'import':1, 'public':1, 'static':1,\n  'default':1, 'finally':1, 'extends':1, 'package':1, 'private':1,\n  'function':1, 'continue':1, 'debugger':1,\n  'interface':1, 'protected':1,\n  'instanceof':1, 'implements':1\n};\n\nfunction skipComment() {\n  var ch;\n\n  while (index < length) {\n    ch = source$1.charCodeAt(index);\n\n    if (isWhiteSpace(ch) || isLineTerminator(ch)) {\n      ++index;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction scanHexEscape(prefix) {\n  var i, len, ch, code = 0;\n\n  len = (prefix === 'u') ? 4 : 2;\n  for (i = 0; i < len; ++i) {\n    if (index < length && isHexDigit(source$1[index])) {\n      ch = source$1[index++];\n      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n    } else {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n  }\n  return String.fromCharCode(code);\n}\n\nfunction scanUnicodeCodePointEscape() {\n  var ch, code, cu1, cu2;\n\n  ch = source$1[index];\n  code = 0;\n\n  // At least, one hex digit is required.\n  if (ch === '}') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  while (index < length) {\n    ch = source$1[index++];\n    if (!isHexDigit(ch)) {\n      break;\n    }\n    code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n  }\n\n  if (code > 0x10FFFF || ch !== '}') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  // UTF-16 Encoding\n  if (code <= 0xFFFF) {\n    return String.fromCharCode(code);\n  }\n  cu1 = ((code - 0x10000) >> 10) + 0xD800;\n  cu2 = ((code - 0x10000) & 1023) + 0xDC00;\n  return String.fromCharCode(cu1, cu2);\n}\n\nfunction getEscapedIdentifier() {\n  var ch, id;\n\n  ch = source$1.charCodeAt(index++);\n  id = String.fromCharCode(ch);\n\n  // '\\u' (U+005C, U+0075) denotes an escaped character.\n  if (ch === 0x5C) {\n    if (source$1.charCodeAt(index) !== 0x75) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n    ++index;\n    ch = scanHexEscape('u');\n    if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n    id = ch;\n  }\n\n  while (index < length) {\n    ch = source$1.charCodeAt(index);\n    if (!isIdentifierPart(ch)) {\n      break;\n    }\n    ++index;\n    id += String.fromCharCode(ch);\n\n    // '\\u' (U+005C, U+0075) denotes an escaped character.\n    if (ch === 0x5C) {\n      id = id.substr(0, id.length - 1);\n      if (source$1.charCodeAt(index) !== 0x75) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      ++index;\n      ch = scanHexEscape('u');\n      if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      id += ch;\n    }\n  }\n\n  return id;\n}\n\nfunction getIdentifier() {\n  var start, ch;\n\n  start = index++;\n  while (index < length) {\n    ch = source$1.charCodeAt(index);\n    if (ch === 0x5C) {\n      // Blackslash (U+005C) marks Unicode escape sequence.\n      index = start;\n      return getEscapedIdentifier();\n    }\n    if (isIdentifierPart(ch)) {\n      ++index;\n    } else {\n      break;\n    }\n  }\n\n  return source$1.slice(start, index);\n}\n\nfunction scanIdentifier() {\n  var start, id, type;\n\n  start = index;\n\n  // Backslash (U+005C) starts an escaped character.\n  id = (source$1.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();\n\n  // There is no keyword or literal with only one character.\n  // Thus, it must be an identifier.\n  if (id.length === 1) {\n    type = TokenIdentifier;\n  } else if (keywords$1.hasOwnProperty(id)) {\n    type = TokenKeyword;\n  } else if (id === 'null') {\n    type = TokenNullLiteral;\n  } else if (id === 'true' || id === 'false') {\n    type = TokenBooleanLiteral;\n  } else {\n    type = TokenIdentifier;\n  }\n\n  return {\n    type: type,\n    value: id,\n    start: start,\n    end: index\n  };\n}\n\n// 7.7 Punctuators\n\nfunction scanPunctuator() {\n  var start = index,\n    code = source$1.charCodeAt(index),\n    code2,\n    ch1 = source$1[index],\n    ch2,\n    ch3,\n    ch4;\n\n  switch (code) {\n\n    // Check for most common single-character punctuators.\n    case 0x2E: // . dot\n    case 0x28: // ( open bracket\n    case 0x29: // ) close bracket\n    case 0x3B: // ; semicolon\n    case 0x2C: // , comma\n    case 0x7B: // { open curly brace\n    case 0x7D: // } close curly brace\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x3A: // :\n    case 0x3F: // ?\n    case 0x7E: // ~\n      ++index;\n      return {\n        type: TokenPunctuator,\n        value: String.fromCharCode(code),\n        start: start,\n        end: index\n      };\n\n    default:\n      code2 = source$1.charCodeAt(index + 1);\n\n      // '=' (U+003D) marks an assignment or comparison operator.\n      if (code2 === 0x3D) {\n        switch (code) {\n          case 0x2B: // +\n          case 0x2D: // -\n          case 0x2F: // /\n          case 0x3C: // <\n          case 0x3E: // >\n          case 0x5E: // ^\n          case 0x7C: // |\n          case 0x25: // %\n          case 0x26: // &\n          case 0x2A: // *\n            index += 2;\n            return {\n              type: TokenPunctuator,\n              value: String.fromCharCode(code) + String.fromCharCode(code2),\n              start: start,\n              end: index\n            };\n\n          case 0x21: // !\n          case 0x3D: // =\n            index += 2;\n\n            // !== and ===\n            if (source$1.charCodeAt(index) === 0x3D) {\n              ++index;\n            }\n            return {\n              type: TokenPunctuator,\n              value: source$1.slice(start, index),\n              start: start,\n              end: index\n            };\n        }\n      }\n  }\n\n  // 4-character punctuator: >>>=\n\n  ch4 = source$1.substr(index, 4);\n\n  if (ch4 === '>>>=') {\n    index += 4;\n    return {\n      type: TokenPunctuator,\n      value: ch4,\n      start: start,\n      end: index\n    };\n  }\n\n  // 3-character punctuators: === !== >>> <<= >>=\n\n  ch3 = ch4.substr(0, 3);\n\n  if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n    index += 3;\n    return {\n      type: TokenPunctuator,\n      value: ch3,\n      start: start,\n      end: index\n    };\n  }\n\n  // Other 2-character punctuators: ++ -- << >> && ||\n  ch2 = ch3.substr(0, 2);\n\n  if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {\n    index += 2;\n    return {\n      type: TokenPunctuator,\n      value: ch2,\n      start: start,\n      end: index\n    };\n  }\n\n  // 1-character punctuators: < > = ! + - * % & | ^ /\n\n  if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n    ++index;\n    return {\n      type: TokenPunctuator,\n      value: ch1,\n      start: start,\n      end: index\n    };\n  }\n\n  throwError({}, MessageUnexpectedToken, ILLEGAL);\n}\n\n// 7.8.3 Numeric Literals\n\nfunction scanHexLiteral(start) {\n  var number = '';\n\n  while (index < length) {\n    if (!isHexDigit(source$1[index])) {\n      break;\n    }\n    number += source$1[index++];\n  }\n\n  if (number.length === 0) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  if (isIdentifierStart(source$1.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseInt('0x' + number, 16),\n    start: start,\n    end: index\n  };\n}\n\nfunction scanOctalLiteral(start) {\n  var number = '0' + source$1[index++];\n  while (index < length) {\n    if (!isOctalDigit(source$1[index])) {\n      break;\n    }\n    number += source$1[index++];\n  }\n\n  if (isIdentifierStart(source$1.charCodeAt(index)) || isDecimalDigit(source$1.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseInt(number, 8),\n    octal: true,\n    start: start,\n    end: index\n  };\n}\n\nfunction scanNumericLiteral() {\n  var number, start, ch;\n\n  ch = source$1[index];\n  assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\n    'Numeric literal must start with a decimal digit or a decimal point');\n\n  start = index;\n  number = '';\n  if (ch !== '.') {\n    number = source$1[index++];\n    ch = source$1[index];\n\n    // Hex number starts with '0x'.\n    // Octal number starts with '0'.\n    if (number === '0') {\n      if (ch === 'x' || ch === 'X') {\n        ++index;\n        return scanHexLiteral(start);\n      }\n      if (isOctalDigit(ch)) {\n        return scanOctalLiteral(start);\n      }\n\n      // decimal number starts with '0' such as '09' is illegal.\n      if (ch && isDecimalDigit(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n    }\n\n    while (isDecimalDigit(source$1.charCodeAt(index))) {\n      number += source$1[index++];\n    }\n    ch = source$1[index];\n  }\n\n  if (ch === '.') {\n    number += source$1[index++];\n    while (isDecimalDigit(source$1.charCodeAt(index))) {\n      number += source$1[index++];\n    }\n    ch = source$1[index];\n  }\n\n  if (ch === 'e' || ch === 'E') {\n    number += source$1[index++];\n\n    ch = source$1[index];\n    if (ch === '+' || ch === '-') {\n      number += source$1[index++];\n    }\n    if (isDecimalDigit(source$1.charCodeAt(index))) {\n      while (isDecimalDigit(source$1.charCodeAt(index))) {\n        number += source$1[index++];\n      }\n    } else {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n  }\n\n  if (isIdentifierStart(source$1.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseFloat(number),\n    start: start,\n    end: index\n  };\n}\n\n// 7.8.4 String Literals\n\nfunction scanStringLiteral() {\n  var str = '',\n    quote, start, ch, code, octal = false;\n\n  quote = source$1[index];\n  assert((quote === '\\'' || quote === '\"'),\n    'String literal must starts with a quote');\n\n  start = index;\n  ++index;\n\n  while (index < length) {\n    ch = source$1[index++];\n\n    if (ch === quote) {\n      quote = '';\n      break;\n    } else if (ch === '\\\\') {\n      ch = source$1[index++];\n      if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n        switch (ch) {\n          case 'u':\n          case 'x':\n            if (source$1[index] === '{') {\n              ++index;\n              str += scanUnicodeCodePointEscape();\n            } else {\n              str += scanHexEscape(ch);\n            }\n            break;\n          case 'n':\n            str += '\\n';\n            break;\n          case 'r':\n            str += '\\r';\n            break;\n          case 't':\n            str += '\\t';\n            break;\n          case 'b':\n            str += '\\b';\n            break;\n          case 'f':\n            str += '\\f';\n            break;\n          case 'v':\n            str += '\\x0B';\n            break;\n\n          default:\n            if (isOctalDigit(ch)) {\n              code = '01234567'.indexOf(ch);\n\n              // \\0 is not octal escape sequence\n              if (code !== 0) {\n                octal = true;\n              }\n\n              if (index < length && isOctalDigit(source$1[index])) {\n                octal = true;\n                code = code * 8 + '01234567'.indexOf(source$1[index++]);\n\n                // 3 digits are only allowed when string starts\n                // with 0, 1, 2, 3\n                if ('0123'.indexOf(ch) >= 0 &&\n                  index < length &&\n                  isOctalDigit(source$1[index])) {\n                  code = code * 8 + '01234567'.indexOf(source$1[index++]);\n                }\n              }\n              str += String.fromCharCode(code);\n            } else {\n              str += ch;\n            }\n            break;\n        }\n      } else {\n        if (ch === '\\r' && source$1[index] === '\\n') {\n          ++index;\n        }\n      }\n    } else if (isLineTerminator(ch.charCodeAt(0))) {\n      break;\n    } else {\n      str += ch;\n    }\n  }\n\n  if (quote !== '') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenStringLiteral,\n    value: str,\n    octal: octal,\n    start: start,\n    end: index\n  };\n}\n\nfunction testRegExp(pattern, flags) {\n  var tmp = pattern;\n\n  if (flags.indexOf('u') >= 0) {\n    // Replace each astral symbol and every Unicode code point\n    // escape sequence with a single ASCII symbol to avoid throwing on\n    // regular expressions that are only valid in combination with the\n    // `/u` flag.\n    // Note: replacing with the ASCII symbol `x` might cause false\n    // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n    // perfectly valid pattern that is equivalent to `[a-b]`, but it\n    // would be replaced by `[x-b]` which throws an error.\n    tmp = tmp\n      .replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function($0, $1) {\n        if (parseInt($1, 16) <= 0x10FFFF) {\n          return 'x';\n        }\n        throwError({}, MessageInvalidRegExp);\n      })\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, 'x');\n  }\n\n  // First, detect invalid regular expressions.\n  try {\n    new RegExp(tmp);\n  } catch (e) {\n    throwError({}, MessageInvalidRegExp);\n  }\n\n  // Return a regular expression object for this pattern-flag pair, or\n  // `null` in case the current environment doesn't support the flags it\n  // uses.\n  try {\n    return new RegExp(pattern, flags);\n  } catch (exception) {\n    return null;\n  }\n}\n\nfunction scanRegExpBody() {\n  var ch, str, classMarker, terminated, body;\n\n  ch = source$1[index];\n  assert(ch === '/', 'Regular expression literal must start with a slash');\n  str = source$1[index++];\n\n  classMarker = false;\n  terminated = false;\n  while (index < length) {\n    ch = source$1[index++];\n    str += ch;\n    if (ch === '\\\\') {\n      ch = source$1[index++];\n      // ECMA-262 7.8.5\n      if (isLineTerminator(ch.charCodeAt(0))) {\n        throwError({}, MessageUnterminatedRegExp);\n      }\n      str += ch;\n    } else if (isLineTerminator(ch.charCodeAt(0))) {\n      throwError({}, MessageUnterminatedRegExp);\n    } else if (classMarker) {\n      if (ch === ']') {\n        classMarker = false;\n      }\n    } else {\n      if (ch === '/') {\n        terminated = true;\n        break;\n      } else if (ch === '[') {\n        classMarker = true;\n      }\n    }\n  }\n\n  if (!terminated) {\n    throwError({}, MessageUnterminatedRegExp);\n  }\n\n  // Exclude leading and trailing slash.\n  body = str.substr(1, str.length - 2);\n  return {\n    value: body,\n    literal: str\n  };\n}\n\nfunction scanRegExpFlags() {\n  var ch, str, flags;\n\n  str = '';\n  flags = '';\n  while (index < length) {\n    ch = source$1[index];\n    if (!isIdentifierPart(ch.charCodeAt(0))) {\n      break;\n    }\n\n    ++index;\n    if (ch === '\\\\' && index < length) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    } else {\n      flags += ch;\n      str += ch;\n    }\n  }\n\n  if (flags.search(/[^gimuy]/g) >= 0) {\n    throwError({}, MessageInvalidRegExp, flags);\n  }\n\n  return {\n    value: flags,\n    literal: str\n  };\n}\n\nfunction scanRegExp() {\n  var start, body, flags, value;\n\n  lookahead = null;\n  skipComment();\n  start = index;\n\n  body = scanRegExpBody();\n  flags = scanRegExpFlags();\n  value = testRegExp(body.value, flags.value);\n\n  return {\n    literal: body.literal + flags.literal,\n    value: value,\n    regex: {\n      pattern: body.value,\n      flags: flags.value\n    },\n    start: start,\n    end: index\n  };\n}\n\nfunction isIdentifierName(token) {\n  return token.type === TokenIdentifier ||\n    token.type === TokenKeyword ||\n    token.type === TokenBooleanLiteral ||\n    token.type === TokenNullLiteral;\n}\n\nfunction advance() {\n  var ch;\n\n  skipComment();\n\n  if (index >= length) {\n    return {\n      type: TokenEOF,\n      start: index,\n      end: index\n    };\n  }\n\n  ch = source$1.charCodeAt(index);\n\n  if (isIdentifierStart(ch)) {\n    return scanIdentifier();\n  }\n\n  // Very common: ( and ) and ;\n  if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n    return scanPunctuator();\n  }\n\n  // String literal starts with single quote (U+0027) or double quote (U+0022).\n  if (ch === 0x27 || ch === 0x22) {\n    return scanStringLiteral();\n  }\n\n\n  // Dot (.) U+002E can also start a floating-point number, hence the need\n  // to check the next character.\n  if (ch === 0x2E) {\n    if (isDecimalDigit(source$1.charCodeAt(index + 1))) {\n      return scanNumericLiteral();\n    }\n    return scanPunctuator();\n  }\n\n  if (isDecimalDigit(ch)) {\n    return scanNumericLiteral();\n  }\n\n  return scanPunctuator();\n}\n\nfunction lex() {\n  var token;\n\n  token = lookahead;\n  index = token.end;\n\n  lookahead = advance();\n\n  index = token.end;\n\n  return token;\n}\n\nfunction peek$1() {\n  var pos;\n\n  pos = index;\n\n  lookahead = advance();\n  index = pos;\n}\n\nfunction finishArrayExpression(elements) {\n  var node = new ASTNode(SyntaxArrayExpression);\n  node.elements = elements;\n  return node;\n}\n\nfunction finishBinaryExpression(operator, left, right) {\n  var node = new ASTNode((operator === '||' || operator === '&&') ? SyntaxLogicalExpression : SyntaxBinaryExpression);\n  node.operator = operator;\n  node.left = left;\n  node.right = right;\n  return node;\n}\n\nfunction finishCallExpression(callee, args) {\n  var node = new ASTNode(SyntaxCallExpression);\n  node.callee = callee;\n  node.arguments = args;\n  return node;\n}\n\nfunction finishConditionalExpression(test, consequent, alternate) {\n  var node = new ASTNode(SyntaxConditionalExpression);\n  node.test = test;\n  node.consequent = consequent;\n  node.alternate = alternate;\n  return node;\n}\n\nfunction finishIdentifier(name) {\n  var node = new ASTNode(SyntaxIdentifier);\n  node.name = name;\n  return node;\n}\n\nfunction finishLiteral(token) {\n  var node = new ASTNode(SyntaxLiteral);\n  node.value = token.value;\n  node.raw = source$1.slice(token.start, token.end);\n  if (token.regex) {\n    if (node.raw === '//') {\n      node.raw = '/(?:)/';\n    }\n    node.regex = token.regex;\n  }\n  return node;\n}\n\nfunction finishMemberExpression(accessor, object, property) {\n  var node = new ASTNode(SyntaxMemberExpression);\n  node.computed = accessor === '[';\n  node.object = object;\n  node.property = property;\n  if (!node.computed) property.member = true;\n  return node;\n}\n\nfunction finishObjectExpression(properties) {\n  var node = new ASTNode(SyntaxObjectExpression);\n  node.properties = properties;\n  return node;\n}\n\nfunction finishProperty(kind, key, value) {\n  var node = new ASTNode(SyntaxProperty);\n  node.key = key;\n  node.value = value;\n  node.kind = kind;\n  return node;\n}\n\nfunction finishUnaryExpression(operator, argument) {\n  var node = new ASTNode(SyntaxUnaryExpression);\n  node.operator = operator;\n  node.argument = argument;\n  node.prefix = true;\n  return node;\n}\n\n// Throw an exception\n\nfunction throwError(token, messageFormat) {\n  var error,\n    args = Array.prototype.slice.call(arguments, 2),\n    msg = messageFormat.replace(\n      /%(\\d)/g,\n      function(whole, index) {\n        assert(index < args.length, 'Message reference must be in range');\n        return args[index];\n      }\n    );\n\n\n  error = new Error(msg);\n  error.index = index;\n  error.description = msg;\n  throw error;\n}\n\n// Throw an exception because of the token.\n\nfunction throwUnexpected(token) {\n  if (token.type === TokenEOF) {\n    throwError(token, MessageUnexpectedEOS);\n  }\n\n  if (token.type === TokenNumericLiteral) {\n    throwError(token, MessageUnexpectedNumber);\n  }\n\n  if (token.type === TokenStringLiteral) {\n    throwError(token, MessageUnexpectedString);\n  }\n\n  if (token.type === TokenIdentifier) {\n    throwError(token, MessageUnexpectedIdentifier);\n  }\n\n  if (token.type === TokenKeyword) {\n    throwError(token, MessageUnexpectedReserved);\n  }\n\n  // BooleanLiteral, NullLiteral, or Punctuator.\n  throwError(token, MessageUnexpectedToken, token.value);\n}\n\n// Expect the next token to match the specified punctuator.\n// If not, an exception will be thrown.\n\nfunction expect(value) {\n  var token = lex();\n  if (token.type !== TokenPunctuator || token.value !== value) {\n    throwUnexpected(token);\n  }\n}\n\n// Return true if the next token matches the specified punctuator.\n\nfunction match(value) {\n  return lookahead.type === TokenPunctuator && lookahead.value === value;\n}\n\n// Return true if the next token matches the specified keyword\n\nfunction matchKeyword(keyword) {\n  return lookahead.type === TokenKeyword && lookahead.value === keyword;\n}\n\n// 11.1.4 Array Initialiser\n\nfunction parseArrayInitialiser() {\n  var elements = [];\n\n  index = lookahead.start;\n  expect('[');\n\n  while (!match(']')) {\n    if (match(',')) {\n      lex();\n      elements.push(null);\n    } else {\n      elements.push(parseConditionalExpression());\n\n      if (!match(']')) {\n        expect(',');\n      }\n    }\n  }\n\n  lex();\n\n  return finishArrayExpression(elements);\n}\n\n// 11.1.5 Object Initialiser\n\nfunction parseObjectPropertyKey() {\n  var token;\n\n  index = lookahead.start;\n  token = lex();\n\n  // Note: This function is called only from parseObjectProperty(), where\n  // EOF and Punctuator tokens are already filtered out.\n\n  if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {\n    if (token.octal) {\n      throwError(token, MessageStrictOctalLiteral);\n    }\n    return finishLiteral(token);\n  }\n\n  return finishIdentifier(token.value);\n}\n\nfunction parseObjectProperty() {\n  var token, key, id, value;\n\n  index = lookahead.start;\n  token = lookahead;\n\n  if (token.type === TokenIdentifier) {\n    id = parseObjectPropertyKey();\n    expect(':');\n    value = parseConditionalExpression();\n    return finishProperty('init', id, value);\n  }\n  if (token.type === TokenEOF || token.type === TokenPunctuator) {\n    throwUnexpected(token);\n  } else {\n    key = parseObjectPropertyKey();\n    expect(':');\n    value = parseConditionalExpression();\n    return finishProperty('init', key, value);\n  }\n}\n\nfunction parseObjectInitialiser() {\n  var properties = [],\n    property, name, key, map = {},\n    toString = String;\n\n  index = lookahead.start;\n  expect('{');\n\n  while (!match('}')) {\n    property = parseObjectProperty();\n\n    if (property.key.type === SyntaxIdentifier) {\n      name = property.key.name;\n    } else {\n      name = toString(property.key.value);\n    }\n\n    key = '$' + name;\n    if (Object.prototype.hasOwnProperty.call(map, key)) {\n      throwError({}, MessageStrictDuplicateProperty);\n    } else {\n      map[key] = true;\n    }\n\n    properties.push(property);\n\n    if (!match('}')) {\n      expect(',');\n    }\n  }\n\n  expect('}');\n\n  return finishObjectExpression(properties);\n}\n\n// 11.1.6 The Grouping Operator\n\nfunction parseGroupExpression() {\n  var expr;\n\n  expect('(');\n\n  expr = parseExpression$1();\n\n  expect(')');\n\n  return expr;\n}\n\n\n// 11.1 Primary Expressions\n\nvar legalKeywords = {\n  \"if\": 1,\n  \"this\": 1\n};\n\nfunction parsePrimaryExpression() {\n  var type, token, expr;\n\n  if (match('(')) {\n    return parseGroupExpression();\n  }\n\n  if (match('[')) {\n    return parseArrayInitialiser();\n  }\n\n  if (match('{')) {\n    return parseObjectInitialiser();\n  }\n\n  type = lookahead.type;\n  index = lookahead.start;\n\n\n  if (type === TokenIdentifier || legalKeywords[lookahead.value]) {\n    expr = finishIdentifier(lex().value);\n  } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {\n    if (lookahead.octal) {\n      throwError(lookahead, MessageStrictOctalLiteral);\n    }\n    expr = finishLiteral(lex());\n  } else if (type === TokenKeyword) {\n    throw new Error(DISABLED);\n  } else if (type === TokenBooleanLiteral) {\n    token = lex();\n    token.value = (token.value === 'true');\n    expr = finishLiteral(token);\n  } else if (type === TokenNullLiteral) {\n    token = lex();\n    token.value = null;\n    expr = finishLiteral(token);\n  } else if (match('/') || match('/=')) {\n    expr = finishLiteral(scanRegExp());\n    peek$1();\n  } else {\n    throwUnexpected(lex());\n  }\n\n  return expr;\n}\n\n// 11.2 Left-Hand-Side Expressions\n\nfunction parseArguments() {\n  var args = [];\n\n  expect('(');\n\n  if (!match(')')) {\n    while (index < length) {\n      args.push(parseConditionalExpression());\n      if (match(')')) {\n        break;\n      }\n      expect(',');\n    }\n  }\n\n  expect(')');\n\n  return args;\n}\n\nfunction parseNonComputedProperty() {\n  var token;\n  index = lookahead.start;\n  token = lex();\n\n  if (!isIdentifierName(token)) {\n    throwUnexpected(token);\n  }\n\n  return finishIdentifier(token.value);\n}\n\nfunction parseNonComputedMember() {\n  expect('.');\n\n  return parseNonComputedProperty();\n}\n\nfunction parseComputedMember() {\n  var expr;\n\n  expect('[');\n\n  expr = parseExpression$1();\n\n  expect(']');\n\n  return expr;\n}\n\nfunction parseLeftHandSideExpressionAllowCall() {\n  var expr, args, property;\n\n  expr = parsePrimaryExpression();\n\n  for (;;) {\n    if (match('.')) {\n      property = parseNonComputedMember();\n      expr = finishMemberExpression('.', expr, property);\n    } else if (match('(')) {\n      args = parseArguments();\n      expr = finishCallExpression(expr, args);\n    } else if (match('[')) {\n      property = parseComputedMember();\n      expr = finishMemberExpression('[', expr, property);\n    } else {\n      break;\n    }\n  }\n\n  return expr;\n}\n\n// 11.3 Postfix Expressions\n\nfunction parsePostfixExpression() {\n  var expr = parseLeftHandSideExpressionAllowCall();\n\n  if (lookahead.type === TokenPunctuator) {\n    if ((match('++') || match('--'))) {\n      throw new Error(DISABLED);\n    }\n  }\n\n  return expr;\n}\n\n// 11.4 Unary Operators\n\nfunction parseUnaryExpression() {\n  var token, expr;\n\n  if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {\n    expr = parsePostfixExpression();\n  } else if (match('++') || match('--')) {\n    throw new Error(DISABLED);\n  } else if (match('+') || match('-') || match('~') || match('!')) {\n    token = lex();\n    expr = parseUnaryExpression();\n    expr = finishUnaryExpression(token.value, expr);\n  } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n    throw new Error(DISABLED);\n  } else {\n    expr = parsePostfixExpression();\n  }\n\n  return expr;\n}\n\nfunction binaryPrecedence(token) {\n  var prec = 0;\n\n  if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {\n    return 0;\n  }\n\n  switch (token.value) {\n    case '||':\n      prec = 1;\n      break;\n\n    case '&&':\n      prec = 2;\n      break;\n\n    case '|':\n      prec = 3;\n      break;\n\n    case '^':\n      prec = 4;\n      break;\n\n    case '&':\n      prec = 5;\n      break;\n\n    case '==':\n    case '!=':\n    case '===':\n    case '!==':\n      prec = 6;\n      break;\n\n    case '<':\n    case '>':\n    case '<=':\n    case '>=':\n    case 'instanceof':\n    case 'in':\n      prec = 7;\n      break;\n\n    case '<<':\n    case '>>':\n    case '>>>':\n      prec = 8;\n      break;\n\n    case '+':\n    case '-':\n      prec = 9;\n      break;\n\n    case '*':\n    case '/':\n    case '%':\n      prec = 11;\n      break;\n\n    default:\n      break;\n  }\n\n  return prec;\n}\n\n// 11.5 Multiplicative Operators\n// 11.6 Additive Operators\n// 11.7 Bitwise Shift Operators\n// 11.8 Relational Operators\n// 11.9 Equality Operators\n// 11.10 Binary Bitwise Operators\n// 11.11 Binary Logical Operators\n\nfunction parseBinaryExpression() {\n  var marker, markers, expr, token, prec, stack, right, operator, left, i;\n\n  marker = lookahead;\n  left = parseUnaryExpression();\n\n  token = lookahead;\n  prec = binaryPrecedence(token);\n  if (prec === 0) {\n    return left;\n  }\n  token.prec = prec;\n  lex();\n\n  markers = [marker, lookahead];\n  right = parseUnaryExpression();\n\n  stack = [left, token, right];\n\n  while ((prec = binaryPrecedence(lookahead)) > 0) {\n\n    // Reduce: make a binary expression from the three topmost entries.\n    while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n      right = stack.pop();\n      operator = stack.pop().value;\n      left = stack.pop();\n      markers.pop();\n      expr = finishBinaryExpression(operator, left, right);\n      stack.push(expr);\n    }\n\n    // Shift.\n    token = lex();\n    token.prec = prec;\n    stack.push(token);\n    markers.push(lookahead);\n    expr = parseUnaryExpression();\n    stack.push(expr);\n  }\n\n  // Final reduce to clean-up the stack.\n  i = stack.length - 1;\n  expr = stack[i];\n  markers.pop();\n  while (i > 1) {\n    markers.pop()\n    expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n    i -= 2;\n  }\n\n  return expr;\n}\n\n// 11.12 Conditional Operator\n\nfunction parseConditionalExpression() {\n  var expr, consequent, alternate;\n\n  expr = parseBinaryExpression();\n\n  if (match('?')) {\n    lex();\n    consequent = parseConditionalExpression();\n    expect(':');\n    alternate = parseConditionalExpression();\n\n    expr = finishConditionalExpression(expr, consequent, alternate);\n  }\n\n  return expr;\n}\n\n// 11.14 Comma Operator\n\nfunction parseExpression$1() {\n  var expr = parseConditionalExpression();\n\n  if (match(',')) {\n    throw new Error(DISABLED); // no sequence expressions\n  }\n\n  return expr;\n}\n\nfunction parse$3(code) {\n  source$1 = code;\n  index = 0;\n  length = source$1.length;\n  lookahead = null;\n\n  peek$1();\n\n  var expr = parseExpression$1();\n\n  if (lookahead.type !== TokenEOF) {\n    throw new Error(\"Unexpect token after expression.\");\n  }\n  return expr;\n}\n\nvar Constants = {\n  NaN:     'NaN',\n  E:       'Math.E',\n  LN2:     'Math.LN2',\n  LN10:    'Math.LN10',\n  LOG2E:   'Math.LOG2E',\n  LOG10E:  'Math.LOG10E',\n  PI:      'Math.PI',\n  SQRT1_2: 'Math.SQRT1_2',\n  SQRT2:   'Math.SQRT2'\n};\n\nfunction Functions(codegen) {\n\n  function fncall(name, args, cast, type) {\n    var obj = codegen(args[0]);\n    if (cast) {\n      obj = cast + '(' + obj + ')';\n      if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';\n    }\n    return obj + '.' + name + (type < 0 ? '' : type === 0 ?\n      '()' :\n      '(' + args.slice(1).map(codegen).join(',') + ')');\n  }\n\n  function fn(name, cast, type) {\n    return function(args) {\n      return fncall(name, args, cast, type);\n    };\n  }\n\n  var DATE = 'new Date',\n      STRING = 'String',\n      REGEXP = 'RegExp';\n\n  return {\n    // MATH functions\n    isNaN:    'isNaN',\n    isFinite: 'isFinite',\n    abs:      'Math.abs',\n    acos:     'Math.acos',\n    asin:     'Math.asin',\n    atan:     'Math.atan',\n    atan2:    'Math.atan2',\n    ceil:     'Math.ceil',\n    cos:      'Math.cos',\n    exp:      'Math.exp',\n    floor:    'Math.floor',\n    log:      'Math.log',\n    max:      'Math.max',\n    min:      'Math.min',\n    pow:      'Math.pow',\n    random:   'Math.random',\n    round:    'Math.round',\n    sin:      'Math.sin',\n    sqrt:     'Math.sqrt',\n    tan:      'Math.tan',\n\n    clamp: function(args) {\n      if (args.length < 3) error('Missing arguments to clamp function.');\n      if (args.length > 3) error('Too many arguments to clamp function.');\n      var a = args.map(codegen);\n      return 'Math.max('+a[1]+', Math.min('+a[2]+','+a[0]+'))';\n    },\n\n    // DATE functions\n    now:             'Date.now',\n    utc:             'Date.UTC',\n    datetime:        DATE,\n    date:            fn('getDate', DATE, 0),\n    day:             fn('getDay', DATE, 0),\n    year:            fn('getFullYear', DATE, 0),\n    month:           fn('getMonth', DATE, 0),\n    hours:           fn('getHours', DATE, 0),\n    minutes:         fn('getMinutes', DATE, 0),\n    seconds:         fn('getSeconds', DATE, 0),\n    milliseconds:    fn('getMilliseconds', DATE, 0),\n    time:            fn('getTime', DATE, 0),\n    timezoneoffset:  fn('getTimezoneOffset', DATE, 0),\n    utcdate:         fn('getUTCDate', DATE, 0),\n    utcday:          fn('getUTCDay', DATE, 0),\n    utcyear:         fn('getUTCFullYear', DATE, 0),\n    utcmonth:        fn('getUTCMonth', DATE, 0),\n    utchours:        fn('getUTCHours', DATE, 0),\n    utcminutes:      fn('getUTCMinutes', DATE, 0),\n    utcseconds:      fn('getUTCSeconds', DATE, 0),\n    utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),\n\n    // shared sequence functions\n    length:      fn('length', null, -1),\n    indexof:     fn('indexOf', null),\n    lastindexof: fn('lastIndexOf', null),\n    slice:       fn('slice', null),\n\n    // STRING functions\n    parseFloat:  'parseFloat',\n    parseInt:    'parseInt',\n    upper:       fn('toUpperCase', STRING, 0),\n    lower:       fn('toLowerCase', STRING, 0),\n    substring:   fn('substring', STRING),\n    replace:     fn('replace', STRING),\n\n    // REGEXP functions\n    regexp:  REGEXP,\n    test:    fn('test', REGEXP),\n\n    // Control Flow functions\n    if: function(args) {\n        if (args.length < 3) error('Missing arguments to if function.');\n        if (args.length > 3) error('Too many arguments to if function.');\n        var a = args.map(codegen);\n        return '('+a[0]+'?'+a[1]+':'+a[2]+')';\n      }\n  };\n}\n\nfunction codegen(opt) {\n  opt = opt || {};\n\n  var whitelist = opt.whitelist ? toSet(opt.whitelist) : {},\n      blacklist = opt.blacklist ? toSet(opt.blacklist) : {},\n      constants = opt.constants || Constants,\n      functions = (opt.functions || Functions)(visit),\n      globalvar = opt.globalvar,\n      fieldvar = opt.fieldvar,\n      globals = {},\n      fields = {},\n      memberDepth = 0;\n\n  var outputGlobal = isFunction(globalvar)\n    ? globalvar\n    : function (id) { return globalvar + '[\"' + id + '\"]'; };\n\n  function visit(ast) {\n    if (isString(ast)) return ast;\n    var generator = Generators[ast.type];\n    if (generator == null) error('Unsupported type: ' + ast.type);\n    return generator(ast);\n  }\n\n  var Generators = {\n    Literal: function(n) {\n        return n.raw;\n      },\n\n    Identifier: function(n) {\n        var id = n.name;\n        return memberDepth > 0 ? id\n          : blacklist.hasOwnProperty(id) ? error('Illegal identifier: ' + id)\n          : constants.hasOwnProperty(id) ? constants[id]\n          : whitelist.hasOwnProperty(id) ? id\n          : (globals[id] = 1, outputGlobal(id));\n      },\n\n    MemberExpression: function(n) {\n        var d = !n.computed;\n        var o = visit(n.object);\n        if (d) memberDepth += 1;\n        var p = visit(n.property);\n        if (o === fieldvar) { fields[p] = 1; } // HACKish...\n        if (d) memberDepth -= 1;\n        return o + (d ? '.'+p : '['+p+']');\n      },\n\n    CallExpression: function(n) {\n        if (n.callee.type !== 'Identifier') {\n          error('Illegal callee type: ' + n.callee.type);\n        }\n        var callee = n.callee.name;\n        var args = n.arguments;\n        var fn = functions.hasOwnProperty(callee) && functions[callee];\n        if (!fn) error('Unrecognized function: ' + callee);\n        return isFunction(fn)\n          ? fn(args)\n          : fn + '(' + args.map(visit).join(',') + ')';\n      },\n\n    ArrayExpression: function(n) {\n        return '[' + n.elements.map(visit).join(',') + ']';\n      },\n\n    BinaryExpression: function(n) {\n        return '(' + visit(n.left) + n.operator + visit(n.right) + ')';\n      },\n\n    UnaryExpression: function(n) {\n        return '(' + n.operator + visit(n.argument) + ')';\n      },\n\n    ConditionalExpression: function(n) {\n        return '(' + visit(n.test) +\n          '?' + visit(n.consequent) +\n          ':' + visit(n.alternate) +\n          ')';\n      },\n\n    LogicalExpression: function(n) {\n        return '(' + visit(n.left) + n.operator + visit(n.right) + ')';\n      },\n\n    ObjectExpression: function(n) {\n        return '{' + n.properties.map(visit).join(',') + '}';\n      },\n\n    Property: function(n) {\n        memberDepth += 1;\n        var k = visit(n.key);\n        memberDepth -= 1;\n        return k + ':' + visit(n.value);\n      }\n  };\n\n  function codegen(ast) {\n    var result = {\n      code:    visit(ast),\n      globals: Object.keys(globals),\n      fields:  Object.keys(fields)\n    };\n    globals = {};\n    fields = {};\n    return result;\n  }\n\n  codegen.functions = functions;\n  codegen.constants = constants;\n\n  return codegen;\n}\n\nfunction formatter(method) {\n  var cache = {};\n  return function(_, specifier) {\n    var f = cache[specifier] || (cache[specifier] = method(specifier));\n    return f(_);\n  };\n}\n\nvar format$1 = formatter(d3Format.format);\nvar utcFormat$1 = formatter(d3TimeFormat.utcFormat);\nvar timeFormat$1 = formatter(d3TimeFormat.timeFormat);\n\nvar utcParse$1 = formatter(d3TimeFormat.utcParse);\nvar timeParse$1 = formatter(d3TimeFormat.timeParse);\n\nvar dateObj = new Date(2000, 0, 1);\n\nfunction time(month, day, specifier) {\n  dateObj.setMonth(month);\n  dateObj.setDate(day);\n  return timeFormat$1(dateObj, specifier);\n}\n\nfunction monthFormat(month) {\n  return time(month, 1, '%B');\n}\n\nfunction monthAbbrevFormat(month) {\n  return time(month, 1, '%b');\n}\n\nfunction dayFormat(day) {\n  return time(0, 2 + day, '%A');\n}\n\nfunction dayAbbrevFormat(day) {\n  return time(0, 2 + day, '%a');\n}\n\nfunction quarter(date) {\n  return 1 + ~~(new Date(date).getMonth() / 3);\n}\n\nfunction utcquarter(date) {\n  return 1 + ~~(new Date(date).getUTCMonth() / 3);\n}\n\nfunction log$1(df, method, args) {\n  try {\n    df[method].apply(df, ['EXPRESSION'].concat([].slice.call(args)));\n  } catch (err) {\n    df.warn(err);\n  }\n  return args[args.length-1];\n}\n\nfunction warn() {\n  return log$1(this.context.dataflow, 'warn', arguments);\n}\n\nfunction info() {\n  return log$1(this.context.dataflow, 'info', arguments);\n}\n\nfunction debug() {\n  return log$1(this.context.dataflow, 'debug', arguments);\n}\n\nfunction inScope(item) {\n  var group = this.context.group,\n      value = false;\n\n  if (group) while (item) {\n    if (item === group) { value = true; break; }\n    item = item.mark.group;\n  }\n  return value;\n}\n\n/**\n * Span-preserving range clamp. If the span of the input range is less\n * than (max - min) and an endpoint exceeds either the min or max value,\n * the range is translated such that the span is preserved and one\n * endpoint touches the boundary of the min/max range.\n * If the span exceeds (max - min), the range [min, max] is returned.\n */\nfunction clampRange(range, min, max) {\n  var lo = range[0],\n      hi = range[1],\n      span;\n\n  if (hi < lo) span = hi, hi = lo, lo = span;\n  span = hi - lo;\n\n  return span >= (max - min)\n    ? [min, max]\n    : [\n        Math.min(Math.max(lo, min), max - span),\n        Math.min(Math.max(hi, span), max)\n      ];\n}\n\nfunction pinchDistance() {\n  return 'Math.sqrt('\n    + 'Math.pow(event.touches[0].clientX - event.touches[1].clientX, 2) + '\n    + 'Math.pow(event.touches[0].clientY - event.touches[1].clientY, 2)'\n    + ')';\n}\n\nfunction pinchAngle() {\n  return 'Math.atan2('\n    + 'event.touches[1].clientY - event.touches[0].clientY,'\n    + 'event.touches[1].clientX - event.touches[0].clientX'\n    + ')';\n}\n\nvar _window = (typeof window !== 'undefined' && window) || null;\n\nfunction screen() {\n  return _window ? _window.screen : {};\n}\n\nfunction windowsize() {\n  return _window\n    ? [_window.innerWidth, _window.innerHeight]\n    : [undefined, undefined];\n}\n\nfunction span(array) {\n  return (array[array.length-1] - array[0]) || 0;\n}\n\nvar Literal = 'Literal';\nvar Identifier = 'Identifier';\n\nvar indexPrefix  = '@';\nvar scalePrefix  = '%';\nvar dataPrefix   = ':';\n\nfunction getScale(name, ctx) {\n  var s;\n  return isFunction(name) ? name\n    : isString(name) ? (s = ctx.scales[name]) && s.value\n    : undefined;\n}\n\nfunction addScaleDependency(scope, params, name) {\n  var scaleName = scalePrefix + name;\n  if (!params.hasOwnProperty(scaleName)) {\n    try {\n      params[scaleName] = scope.scaleRef(name);\n    } catch (err) {\n      // TODO: error handling? warning?\n    }\n  }\n}\n\nfunction scaleVisitor(name, args, scope, params) {\n  if (args[0].type === Literal) {\n    // add scale dependency\n    addScaleDependency(scope, params, args[0].value);\n  }\n  else if (args[0].type === Identifier) {\n    // indirect scale lookup; add all scales as parameters\n    for (name in scope.scales) {\n      addScaleDependency(scope, params, name);\n    }\n  }\n}\n\nfunction range$2(name, group) {\n  var s = getScale(name, (group || this).context);\n  return s && s.range ? s.range() : [];\n}\n\nfunction domain(name, group) {\n  var s = getScale(name, (group || this).context);\n  return s ? s.domain() : [];\n}\n\nfunction bandwidth(name, group) {\n  var s = getScale(name, (group || this).context);\n  return s && s.bandwidth ? s.bandwidth() : 0;\n}\n\nfunction bandspace(count, paddingInner, paddingOuter) {\n  return bandSpace(count || 0, paddingInner || 0, paddingOuter || 0);\n}\n\nfunction copy$1(name, group) {\n  var s = getScale(name, (group || this).context);\n  return s ? s.copy() : undefined;\n}\n\nfunction scale$2(name, value, group) {\n  var s = getScale(name, (group || this).context);\n  return s ? s(value) : undefined;\n}\n\nfunction invert(name, range, group) {\n  var s = getScale(name, (group || this).context);\n  return !s ? undefined\n    : isArray(range) ? (s.invertRange || s.invert)(range)\n    : (s.invert || s.invertExtent)(range);\n}\n\nfunction scaleGradient(scale, p0, p1, count) {\n  var gradient = Gradient(p0, p1),\n      stops = scale.domain(),\n      min = stops[0],\n      max = stops[stops.length-1],\n      fraction = scaleFraction(scale, min, max);\n\n  if (scale.ticks) {\n    stops = scale.ticks(+count || 15);\n    if (min !== stops[0]) stops.unshift(min);\n    if (max !== stops[stops.length-1]) stops.push(max);\n  }\n\n  for (var i=0, n=stops.length; i<n; ++i) {\n    gradient.stop(fraction(stops[i]), scale(stops[i]));\n  }\n\n  return gradient;\n}\n\nfunction geoMethod(method) {\n  return function(projection, geojson, group) {\n    var p = getScale(projection, (group || this).context);\n    return p && p.path[method](geojson);\n  };\n}\n\nvar geoArea = geoMethod('area');\nvar geoBounds = geoMethod('bounds');\nvar geoCentroid = geoMethod('centroid');\n\nfunction data$1(name) {\n  var data = this.context.data[name];\n  return data ? data.values.value : [];\n}\n\nfunction dataVisitor(name, args, scope, params) {\n  if (args[0].type !== Literal) {\n    error('First argument to data functions must be a string literal.');\n  }\n\n  var data = args[0].value,\n      dataName = dataPrefix + data;\n\n  if (!params.hasOwnProperty(dataName)) {\n    params[dataName] = scope.getData(data).tuplesRef();\n  }\n}\n\nfunction indata(name, field, value) {\n  var index = this.context.data[name]['index:' + field],\n      entry = index ? index.value.get(value) : undefined;\n  return entry ? entry.count : entry;\n}\n\nfunction indataVisitor(name, args, scope, params) {\n  if (args[0].type !== Literal) error('First argument to indata must be a string literal.');\n  if (args[1].type !== Literal) error('Second argument to indata must be a string literal.');\n\n  var data = args[0].value,\n      field = args[1].value,\n      indexName = indexPrefix + field;\n\n  if (!params.hasOwnProperty(indexName)) {\n    params[indexName] = scope.getData(data).indataRef(scope, field);\n  }\n}\n\nvar EMPTY = {};\n\nfunction datum(d) { return d.data; }\n\nfunction treeNodes(name, context) {\n  var tree = data$1.call(context, name);\n  return tree.root && tree.root.lookup || EMPTY;\n}\n\nfunction treePath(name, source, target) {\n  var nodes = treeNodes(name, this),\n      s = nodes[source],\n      t = nodes[target];\n  return s && t ? s.path(t).map(datum) : undefined;\n}\n\nfunction treeAncestors(name, node) {\n  var n = treeNodes(name, this)[node];\n  return n ? n.ancestors().map(datum) : undefined;\n}\n\nfunction inrange(value, range) {\n  var r0 = range[0], r1 = range[range.length-1], t;\n  if (r0 > r1) t = r0, r0 = r1, r1 = t;\n  return r0 <= value && value <= r1;\n}\n\nfunction encode(item, name, retval) {\n  if (item) {\n    var df = this.context.dataflow,\n        target = item.mark.source;\n    df.pulse(target, df.changeset().encode(item, name));\n  }\n  return retval !== undefined ? retval : item;\n}\n\nfunction removePredicate(props) {\n  return function(_) {\n    for (var key in props) {\n      if (key !== '_id' && _[key] !== props[key]) return false;\n    }\n    return true;\n  };\n}\n\nfunction modify(name, insert, remove, toggle, modify, values) {\n  var df = this.context.dataflow,\n      data = this.context.data[name],\n      input = data.input,\n      changes = data.changes,\n      stamp = df.stamp(),\n      predicate, key;\n\n  if (df._trigger === false || !(input.value.length || insert || toggle)) {\n    // nothing to do!\n    return 0;\n  }\n\n  if (!changes || changes.stamp < stamp) {\n    data.changes = (changes = df.changeset());\n    changes.stamp = stamp;\n    df.runAfter(function() {\n      data.modified = true;\n      df.pulse(input, changes).run();\n    });\n  }\n\n  if (remove) {\n    predicate = remove === true ? truthy\n      : (isArray(remove) || remove._id != null) ? remove\n      : removePredicate(remove);\n    changes.remove(predicate);\n  }\n\n  if (insert) {\n    changes.insert(insert);\n  }\n\n  if (toggle) {\n    predicate = removePredicate(toggle);\n    if (input.value.some(predicate)) {\n      changes.remove(predicate);\n    } else {\n      changes.insert(toggle);\n    }\n  }\n\n  if (modify) {\n    for (key in values) {\n      changes.modify(modify, key, values[key]);\n    }\n  }\n\n  return 1;\n}\n\nvar UNION = 'union';\nvar UNIT = 'unit';\nvar OTHERS = 'others';\nfunction testPoint(datum, entry) {\n  var fields = entry.fields,\n      values = entry.values,\n      getter = entry.getter || (entry.getter = []),\n      n = fields.length,\n      i = 0;\n\n  for (; i<n; ++i) {\n    getter[i] = getter[i] || field(fields[i]);\n    if (getter[i](datum) !== values[i]) return false;\n  }\n\n  return true;\n}\n\nfunction testInterval(datum, entry) {\n  var ivals = entry.intervals,\n      n = ivals.length,\n      i = 0,\n      getter, extent, value;\n\n  for (; i<n; ++i) {\n    extent = ivals[i].extent;\n    getter = ivals[i].getter || (ivals[i].getter = field(ivals[i].field));\n    value = getter(datum);\n    if (!extent || extent[0] === extent[1]) return true;\n    if (isNumber(extent[0]) && !inrange(value, extent)) return false;\n    else if (isString(extent[0]) && extent.indexOf(value) < 0) return false;\n  }\n\n  return true;\n}\n\n/**\n * Tests if a tuple is contained within an interactive selection.\n * @param {string} name - The name of the data set representing the selection.\n * @param {*} unit - A unique key value indicating the current unit chart.\n * @param {object} datum - The tuple to test for inclusion.\n * @param {string} op - The set operation for combining selections.\n *   One of 'intersect' (default) or 'union'.\n * @param {string} scope - The scope within which to resolve the selection.\n *   One of 'all' (default, resolve against active selections across all unit charts),\n *   'unit' (consider only selections in the current unit chart),\n *   'others' (resolve against all units *except* the current unit).\n * @param {function(object,object):boolean} test - A boolean-valued test\n *   predicate for determining selection status within a single unit chart.\n * @return {boolean} - True if the datum is in the selection, false otherwise.\n */\nfunction vlSelection(name, unit, datum, op, scope, test) {\n  var data = this.context.data[name],\n      entries = data ? data.values.value : [],\n      intersect = op !== UNION,\n      n = entries.length,\n      i = 0,\n      entry, b;\n\n  for (; i<n; ++i) {\n    entry = entries[i];\n\n    // is the selection entry from the current unit?\n    b = unit === entry.unit;\n\n    // perform test if source unit is a valid selection source\n    if (!(scope === OTHERS && b || scope === UNIT && !b)) {\n      b = test(datum, entry);\n\n      // if we find a match and we don't require intersection return true\n      // if we find a miss and we do require intersection return false\n      if (intersect ^ b) return b;\n    }\n  }\n\n  // if intersecting and we made it here, then we saw no misses\n  // if not intersecting, then we saw no matches\n  // if no active selections, return true\n  return !n || intersect;\n}\n\n// Assumes point selection tuples are of the form:\n// {unit: string, encodings: array<string>, fields: array<string>, values: array<*>, }\nfunction vlPoint(name, unit, datum, op, scope) {\n  return vlSelection.call(this, name, unit, datum, op, scope, testPoint);\n}\n\n// Assumes interval selection typles are of the form:\n// {unit: string, intervals: array<{encoding: string, field:string, extent:array<number>}>}\nfunction vlInterval(name, unit, datum, op, scope) {\n  return vlSelection.call(this, name, unit, datum, op, scope, testInterval);\n}\n\n/**\n * Materializes a point selection as a scale domain. With point selections,\n * we assume that they are projected over a single field or encoding channel.\n * @param {string} name - The name of the dataset representing the selection.\n * @param {string} [encoding] - A particular encoding channel to materialize.\n * @param {string} [field] - A particular field to materialize.\n * @param {string} [op='intersect'] - The set operation for combining selections.\n * One of 'intersect' (default) or 'union'.\n * @returns {array} An array of values to serve as a scale domain.\n */\nfunction vlPointDomain(name, encoding, field, op) {\n  var data = this.context.data[name],\n      entries = data ? data.values.value : [],\n      units = {}, count = 0,\n      values = {}, domain = [],\n      i = 0, n = entries.length,\n      entry, unit, v, key;\n\n  for (; i<n; ++i) {\n    entry = entries[i];\n    unit  = entry.unit;\n    key   = entry.values[0];\n\n    if (!units[unit]) units[unit] = ++count;\n\n    if ((encoding && entry.encodings[0] === encoding) ||\n        (field && entry.fields[0] === field))\n    {\n      if (!(v = values[key])) {\n        values[key] = v = {value: key, units: {}, count: 0};\n      }\n      if (!v.units[unit]) v.units[unit] = ++v.count;\n    }\n  }\n\n  for (key in values) {\n    if (op !== UNION && (v = values[key]).count !== count) continue;\n    domain.push(v.value);\n  }\n\n  return domain.length ? domain : undefined;\n}\n\n/**\n * Materializes an interval selection as a scale domain.\n * @param {string} name - The name of the dataset representing the selection.\n * @param {string} [encoding] - A particular encoding channel to materialize.\n * @param {string} [field] - A particular field to materialize.\n * @param {string} [op='intersect'] - The set operation for combining selections.\n * One of 'intersect' (default) or 'union'.\n * @returns {array} An array of values to serve as a scale domain.\n */\nfunction vlIntervalDomain(name, encoding, field, op) {\n  var merge = op === UNION ? unionInterval : intersectInterval,\n      data = this.context.data[name],\n      entries = data ? data.values.value : [],\n      i = 0, n = entries.length,\n      entry, m, j, interval, extent, domain, lo, hi;\n\n  for (; i<n; ++i) {\n    entry = entries[i].intervals;\n\n    for (j=0, m=entry.length; j<m; ++j) {\n      interval = entry[j];\n      if ((encoding && interval.encoding === encoding) ||\n          (field && interval.field === field))\n      {\n        extent = interval.extent, lo = extent[0], hi = extent[1];\n        if (lo > hi) hi = extent[1], lo = extent[0];\n        domain = domain ? merge(domain, lo, hi) : [lo, hi];\n      }\n    }\n  }\n\n  return domain && domain.length && (+domain[0] !== +domain[1])\n    ? domain\n    : undefined;\n}\n\nfunction unionInterval(domain, lo, hi) {\n  if (domain[0] > lo) domain[0] = lo;\n  if (domain[1] < hi) domain[1] = hi;\n  return domain;\n}\n\nfunction intersectInterval(domain, lo, hi) {\n  if (hi < domain[0] || domain[1] < lo) {\n    return [];\n  } else {\n    if (domain[0] < lo) domain[0] = lo;\n    if (domain[1] > hi) domain[1] = hi;\n  }\n  return domain;\n}\n\n// Expression function context object\nvar functionContext = {\n  isArray: isArray,\n  isBoolean: isBoolean,\n  isDate: isDate,\n  isNumber: isNumber,\n  isObject: isObject,\n  isRegExp: isRegExp,\n  isString: isString,\n  toBoolean: toBoolean,\n  toDate: toDate,\n  toNumber: toNumber,\n  toString: toString,\n  pad: pad,\n  truncate: truncate,\n  rgb: d3Color.rgb,\n  lab: d3Color.lab,\n  hcl: d3Color.hcl,\n  hsl: d3Color.hsl,\n  sequence: d3Array.range,\n  format: format$1,\n  utcFormat: utcFormat$1,\n  utcParse: utcParse$1,\n  timeFormat: timeFormat$1,\n  timeParse: timeParse$1,\n  monthFormat: monthFormat,\n  monthAbbrevFormat: monthAbbrevFormat,\n  dayFormat: dayFormat,\n  dayAbbrevFormat: dayAbbrevFormat,\n  quarter: quarter,\n  utcquarter: utcquarter,\n  warn: warn,\n  info: info,\n  debug: debug,\n  inScope: inScope,\n  clampRange: clampRange,\n  pinchDistance: pinchDistance,\n  pinchAngle: pinchAngle,\n  screen: screen,\n  windowsize: windowsize,\n  span: span,\n  bandspace: bandspace,\n  inrange: inrange,\n  encode: encode,\n  modify: modify\n};\n\nvar eventFunctions = ['view', 'item', 'group', 'xy', 'x', 'y'];\nvar eventPrefix = 'event.vega.';\nvar thisPrefix = 'this.';\nvar astVisitors = {};\n// AST visitors for dependency analysis\n\nfunction expressionFunction(name, fn, visitor) {\n  if (arguments.length === 1) {\n    return functionContext[name];\n  }\n\n  // register with the functionContext\n  functionContext[name] = fn;\n\n  // if there is an astVisitor register that, too\n  if (visitor) astVisitors[name] = visitor;\n\n  // if the code generator has already been initialized,\n  // we need to also register the function with it\n  if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;\n  return this;\n}\n\n// register expression functions with ast visitors\nexpressionFunction('bandwidth', bandwidth, scaleVisitor);\nexpressionFunction('copy', copy$1, scaleVisitor);\nexpressionFunction('domain', domain, scaleVisitor);\nexpressionFunction('range', range$2, scaleVisitor);\nexpressionFunction('invert', invert, scaleVisitor);\nexpressionFunction('scale', scale$2, scaleVisitor);\nexpressionFunction('gradient', scaleGradient, scaleVisitor);\nexpressionFunction('geoArea', geoArea, scaleVisitor);\nexpressionFunction('geoBounds', geoBounds, scaleVisitor);\nexpressionFunction('geoCentroid', geoCentroid, scaleVisitor);\nexpressionFunction('indata', indata, indataVisitor);\nexpressionFunction('data', data$1, dataVisitor);\nexpressionFunction('vlPoint', vlPoint, dataVisitor);\nexpressionFunction('vlInterval', vlInterval, dataVisitor);\nexpressionFunction('vlPointDomain', vlPointDomain, dataVisitor);\nexpressionFunction('vlIntervalDomain', vlIntervalDomain, dataVisitor);\nexpressionFunction('treePath', treePath, dataVisitor);\nexpressionFunction('treeAncestors', treeAncestors, dataVisitor);\n\n// Build expression function registry\nfunction buildFunctions(codegen) {\n  var fn = Functions(codegen);\n  eventFunctions.forEach(function(name) { fn[name] = eventPrefix + name; });\n  for (var name in functionContext) { fn[name] = thisPrefix + name; }\n  return fn;\n}\n\n// Export code generator and parameters\nvar codegenParams = {\n  blacklist:  ['_'],\n  whitelist:  ['datum', 'event', 'item'],\n  fieldvar:   'datum',\n  globalvar:  function(id) { return '_[' + $$2('$' + id) + ']'; },\n  functions:  buildFunctions,\n  constants:  Constants,\n  visitors:   astVisitors\n};\n\nvar codeGenerator = codegen(codegenParams);\n\nvar signalPrefix = '$';\n\nfunction parseExpression(expr, scope, preamble) {\n  var params = {}, ast, gen;\n\n  // parse the expression to an abstract syntax tree (ast)\n  try {\n    ast = parse$3(expr);\n  } catch (err) {\n    error('Expression parse error: ' + $$2(expr));\n  }\n\n  // analyze ast function calls for dependencies\n  ast.visit(function visitor(node) {\n    if (node.type !== 'CallExpression') return;\n    var name = node.callee.name,\n        visit = codegenParams.visitors[name];\n    if (visit) visit(name, node.arguments, scope, params);\n  });\n\n  // perform code generation\n  gen = codeGenerator(ast);\n\n  // collect signal dependencies\n  gen.globals.forEach(function(name) {\n    var signalName = signalPrefix + name;\n    if (!params.hasOwnProperty(signalName) && scope.getSignal(name)) {\n      params[signalName] = scope.signalRef(name);\n    }\n  });\n\n  // return generated expression code and dependencies\n  return {\n    $expr:   preamble ? preamble + 'return(' + gen.code + ');' : gen.code,\n    $fields: gen.fields,\n    $params: params\n  };\n}\n\nvar VIEW$1 = 'view';\nvar SCOPE = 'scope';\nfunction parseStream(stream, scope) {\n  return stream.signal\n    ? scope.getSignal(stream.signal).id\n    : parseStream$1(stream, scope);\n}\n\nfunction eventSource(source) {\n   return source === SCOPE ? VIEW$1 : (source || VIEW$1);\n}\n\nfunction parseStream$1(stream, scope) {\n  var method = stream.merge ? mergeStream\n    : stream.stream ? nestedStream\n    : stream.type ? eventStream\n    : error('Invalid stream specification: ' + $$2(stream));\n\n  return method(stream, scope);\n}\n\nfunction mergeStream(stream, scope) {\n  var list = stream.merge.map(function(s) {\n    return parseStream$1(s, scope);\n  });\n\n  var entry = streamParameters({merge: list}, stream, scope);\n  return scope.addStream(entry).id;\n}\n\nfunction nestedStream(stream, scope) {\n  var id = parseStream$1(stream.stream, scope),\n      entry = streamParameters({stream: id}, stream, scope);\n  return scope.addStream(entry).id;\n}\n\nfunction eventStream(stream, scope) {\n  var id = scope.event(eventSource(stream.source), stream.type),\n      entry = streamParameters({stream: id}, stream, scope);\n  return Object.keys(entry).length === 1 ? id\n    : scope.addStream(entry).id;\n}\n\nfunction streamParameters(entry, stream, scope) {\n  var param = stream.between;\n\n  if (param) {\n    if (param.length !== 2) {\n      error('Stream \"between\" parameter must have 2 entries: ' + $$2(stream));\n    }\n    entry.between = [\n      parseStream$1(param[0], scope),\n      parseStream$1(param[1], scope)\n    ];\n  }\n\n  param = stream.filter ? array(stream.filter) : [];\n  if (stream.marktype || stream.markname || stream.markrole) {\n    // add filter for mark type, name and/or role\n    param.push(filterMark(stream.marktype, stream.markname, stream.markrole));\n  }\n  if (stream.source === SCOPE) {\n    // add filter to limit events from sub-scope only\n    param.push('inScope(event.item)');\n  }\n  if (param.length) {\n    entry.filter = parseExpression('(' + param.join(')&&(') + ')').$expr;\n  }\n\n  if ((param = stream.throttle) != null) {\n    entry.throttle = +param;\n  }\n\n  if ((param = stream.debounce) != null) {\n    entry.debounce = +param;\n  }\n\n  if (stream.consume) {\n    entry.consume = true;\n  }\n\n  return entry;\n}\n\nfunction filterMark(type, name, role) {\n  var item = 'event.item';\n  return item\n    + (type && type !== '*' ? '&&' + item + '.mark.marktype===\\'' + type + '\\'' : '')\n    + (role ? '&&' + item + '.mark.role===\\'' + role + '\\'' : '')\n    + (name ? '&&' + item + '.mark.name===\\'' + name + '\\'' : '');\n}\n\n/**\n * Parse an event selector string.\n * Returns an array of event stream definitions.\n */\nfunction selector(selector, source, marks) {\n  DEFAULT_SOURCE = source || VIEW$2;\n  MARKS = marks || DEFAULT_MARKS;\n  return parseMerge(selector.trim()).map(parseSelector);\n}\n\nvar VIEW$2    = 'view';\nvar LBRACK  = '[';\nvar RBRACK  = ']';\nvar LBRACE  = '{';\nvar RBRACE  = '}';\nvar COLON   = ':';\nvar COMMA   = ',';\nvar NAME    = '@';\nvar GT      = '>';\nvar ILLEGAL$1 = /[\\[\\]\\{\\}]/;\nvar DEFAULT_SOURCE;\nvar MARKS;\nvar DEFAULT_MARKS = {\n      '*': 1,\n      arc: 1,\n      area: 1,\n      group: 1,\n      image: 1,\n      line: 1,\n      path: 1,\n      rect: 1,\n      rule: 1,\n      shape: 1,\n      symbol: 1,\n      text: 1,\n      trail: 1\n    };\nfunction isMarkType(type) {\n  return MARKS.hasOwnProperty(type);\n}\n\nfunction find(s, i, endChar, pushChar, popChar) {\n  var count = 0,\n      n = s.length,\n      c;\n  for (; i<n; ++i) {\n    c = s[i];\n    if (!count && c === endChar) return i;\n    else if (popChar && popChar.indexOf(c) >= 0) --count;\n    else if (pushChar && pushChar.indexOf(c) >= 0) ++count;\n  }\n  return i;\n}\n\nfunction parseMerge(s) {\n  var output = [],\n      start = 0,\n      n = s.length,\n      i = 0;\n\n  while (i < n) {\n    i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);\n    output.push(s.substring(start, i).trim());\n    start = ++i;\n  }\n\n  if (output.length === 0) {\n    throw 'Empty event selector: ' + s;\n  }\n  return output;\n}\n\nfunction parseSelector(s) {\n  return s[0] === '['\n    ? parseBetween(s)\n    : parseStream$2(s);\n}\n\nfunction parseBetween(s) {\n  var n = s.length,\n      i = 1,\n      b, stream;\n\n  i = find(s, i, RBRACK, LBRACK, RBRACK);\n  if (i === n) {\n    throw 'Empty between selector: ' + s;\n  }\n\n  b = parseMerge(s.substring(1, i));\n  if (b.length !== 2) {\n    throw 'Between selector must have two elements: ' + s;\n  }\n\n  s = s.slice(i + 1).trim();\n  if (s[0] !== GT) {\n    throw 'Expected \\'>\\' after between selector: ' + s;\n  }\n\n  b = b.map(parseSelector);\n\n  stream = parseSelector(s.slice(1).trim());\n  if (stream.between) {\n    return {\n      between: b,\n      stream: stream\n    };\n  } else {\n    stream.between = b;\n  }\n\n  return stream;\n}\n\nfunction parseStream$2(s) {\n  var stream = {source: DEFAULT_SOURCE},\n      source = [],\n      throttle = [0, 0],\n      markname = 0,\n      start = 0,\n      n = s.length,\n      i = 0, j,\n      filter;\n\n  // extract throttle from end\n  if (s[n-1] === RBRACE) {\n    i = s.lastIndexOf(LBRACE);\n    if (i >= 0) {\n      try {\n        throttle = parseThrottle(s.substring(i+1, n-1));\n      } catch (e) {\n        throw 'Invalid throttle specification: ' + s;\n      }\n      s = s.slice(0, i).trim();\n      n = s.length;\n    } else throw 'Unmatched right brace: ' + s;\n    i = 0;\n  }\n\n  if (!n) throw s;\n\n  // set name flag based on first char\n  if (s[0] === NAME) markname = ++i;\n\n  // extract first part of multi-part stream selector\n  j = find(s, i, COLON);\n  if (j < n) {\n    source.push(s.substring(start, j).trim());\n    start = i = ++j;\n  }\n\n  // extract remaining part of stream selector\n  i = find(s, i, LBRACK);\n  if (i === n) {\n    source.push(s.substring(start, n).trim());\n  } else {\n    source.push(s.substring(start, i).trim());\n    filter = [];\n    start = ++i;\n    if (start === n) throw 'Unmatched left bracket: ' + s;\n  }\n\n  // extract filters\n  while (i < n) {\n    i = find(s, i, RBRACK);\n    if (i === n) throw 'Unmatched left bracket: ' + s;\n    filter.push(s.substring(start, i).trim());\n    if (i < n-1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;\n    start = ++i;\n  }\n\n  // marshall event stream specification\n  if (!(n = source.length) || ILLEGAL$1.test(source[n-1])) {\n    throw 'Invalid event selector: ' + s;\n  }\n\n  if (n > 1) {\n    stream.type = source[1];\n    if (markname) {\n      stream.markname = source[0].slice(1);\n    } else if (isMarkType(source[0])) {\n      stream.marktype = source[0];\n    } else {\n      stream.source = source[0];\n    }\n  } else {\n    stream.type = source[0];\n  }\n  if (stream.type.slice(-1) === '!') {\n    stream.consume = true;\n    stream.type = stream.type.slice(0, -1)\n  }\n  if (filter != null) stream.filter = filter;\n  if (throttle[0]) stream.throttle = throttle[0];\n  if (throttle[1]) stream.debounce = throttle[1];\n\n  return stream;\n}\n\nfunction parseThrottle(s) {\n  var a = s.split(COMMA);\n  if (!s.length || a.length > 2) throw s;\n  return a.map(function(_) {\n    var x = +_;\n    if (x !== x) throw s;\n    return x;\n  });\n}\n\nvar preamble = 'var datum=event.item&&event.item.datum;';\n\nfunction parseUpdate(spec, scope, target) {\n  var events = spec.events,\n      update = spec.update,\n      encode = spec.encode,\n      sources = [],\n      value = '', entry;\n\n  if (!events) {\n    error('Signal update missing events specification.');\n  }\n\n  // interpret as an event selector string\n  if (isString(events)) {\n    events = selector(events);\n  }\n\n  // separate event streams from signal updates\n  events = array(events).filter(function(stream) {\n    return stream.signal ? (sources.push(stream), 0) : 1;\n  });\n\n  // merge event streams, include as source\n  if (events.length) {\n    sources.push(events.length > 1 ? {merge: events} : events[0]);\n  }\n\n  if (encode != null) {\n    if (update) error('Signal encode and update are mutually exclusive.');\n    update = 'encode(item(),' + $$2(encode) + ')';\n  }\n\n  // resolve update value\n  value = isString(update) ? parseExpression(update, scope, preamble)\n    : update.expr != null ? parseExpression(update.expr, scope, preamble)\n    : update.value != null ? update.value\n    : update.signal != null ? {\n        $expr:   '_.value',\n        $params: {value: scope.signalRef(update.signal)}\n      }\n    : error('Invalid signal update specification.');\n\n  entry = {\n    target: target,\n    update: value\n  };\n\n  if (spec.force) {\n    entry.options = {force: true};\n  }\n\n  sources.forEach(function(source) {\n    source = {source: parseStream(source, scope)};\n    scope.addUpdate(extend(source, entry));\n  });\n}\n\nfunction parseSignalUpdates(signal, scope) {\n  var op = scope.getSignal(signal.name);\n\n  if (signal.update) {\n    var expr = parseExpression(signal.update, scope);\n    op.update = expr.$expr;\n    op.params = expr.$params;\n  }\n\n  if (signal.on) {\n    signal.on.forEach(function(_) {\n      parseUpdate(_, scope, op.id);\n    });\n  }\n}\n\nfunction Entry(type, value, params, parent) {\n  this.id = -1,\n  this.type = type;\n  this.value = value;\n  this.params = params;\n  if (parent) this.parent = parent;\n}\n\nfunction entry(type, value, params, parent) {\n  return new Entry(type, value, params, parent);\n}\n\nfunction operator(value, params) {\n  return entry('Operator', value, params);\n}\n\n// -----\n\nfunction ref(op) {\n  var ref = {$ref: op.id};\n  // if operator not yet registered, cache ref to resolve later\n  if (op.id < 0) (op.refs = op.refs || []).push(ref);\n  return ref;\n}\n\nfunction fieldRef$1(field, name) {\n  return name ? {$field: field, $name: name} : {$field: field};\n}\n\nvar keyFieldRef = fieldRef$1('key');\n\nfunction compareRef(fields, orders) {\n  return {$compare: fields, $order: orders};\n}\n\nfunction keyRef(fields) {\n  return {$key: fields};\n}\n\n// -----\n\nvar Ascending  = 'ascending';\n\nvar Descending = 'descending';\n\nfunction sortKey(sort) {\n  return !isObject(sort) ? ''\n    : (sort.order === Descending ? '-' : '+')\n      + aggrField(sort.op, sort.field);\n}\n\nfunction aggrField(op, field) {\n  return (op && op.signal ? '$' + op.signal : op || '')\n    + (op && field ? '_' : '')\n    + (field && field.signal ? '$' + field.signal : field || '');\n}\n\n// -----\n\nfunction isSignal(_) {\n  return _ && _.signal;\n}\n\nfunction transform$1(name) {\n  return function(params, value, parent) {\n    return entry(name, value, params || undefined, parent);\n  };\n}\n\nvar Aggregate$1 = transform$1('Aggregate');\nvar AxisTicks$1 = transform$1('AxisTicks');\nvar Bound$1 = transform$1('Bound');\nvar Collect$1 = transform$1('Collect');\nvar Compare$1 = transform$1('Compare');\nvar DataJoin$1 = transform$1('DataJoin');\nvar Encode$1 = transform$1('Encode');\nvar Facet$1 = transform$1('Facet');\nvar Field$1 = transform$1('Field');\nvar Key$1 = transform$1('Key');\nvar LegendEntries$1 = transform$1('LegendEntries');\nvar Mark$1 = transform$1('Mark');\nvar MultiExtent$1 = transform$1('MultiExtent');\nvar MultiValues$1 = transform$1('MultiValues');\nvar Params$1 = transform$1('Params');\nvar PreFacet$1 = transform$1('PreFacet');\nvar Projection$1 = transform$1('Projection');\nvar Proxy$1 = transform$1('Proxy');\nvar Relay$1 = transform$1('Relay');\nvar Render$1 = transform$1('Render');\nvar Scale$1 = transform$1('Scale');\nvar Sieve$1 = transform$1('Sieve');\nvar SortItems$1 = transform$1('SortItems');\nvar ViewLayout$1 = transform$1('ViewLayout');\nvar Values$1 = transform$1('Values');\n\nvar FIELD_REF_ID = 0;\n\nvar types = [\n  'identity',\n  'ordinal', 'band', 'point',\n  'bin-linear', 'bin-ordinal',\n  'linear', 'pow', 'sqrt', 'log', 'sequential',\n  'time', 'utc',\n  'quantize', 'quantile', 'threshold'\n];\n\nvar allTypes = toSet(types);\nvar ordinalTypes = toSet(types.slice(1, 6));\nfunction isOrdinal(type) {\n  return ordinalTypes.hasOwnProperty(type);\n}\n\nfunction isQuantile(type) {\n  return type === 'quantile';\n}\n\nfunction initScale(spec, scope) {\n  var type = spec.type || 'linear';\n\n  if (!allTypes.hasOwnProperty(type)) {\n    error('Unrecognized scale type: ' + $$2(type));\n  }\n\n  scope.addScale(spec.name, {\n    type:   type,\n    domain: undefined\n  });\n}\n\nfunction parseScale(spec, scope) {\n  var params = scope.getScale(spec.name).params,\n      key;\n\n  params.domain = parseScaleDomain(spec.domain, spec, scope);\n\n  if (spec.range != null) {\n    params.range = parseScaleRange(spec, scope, params);\n  }\n\n  if (spec.interpolate != null) {\n    parseScaleInterpolate(spec.interpolate, params);\n  }\n\n  for (key in spec) {\n    if (params.hasOwnProperty(key) || key === 'name') continue;\n    params[key] = parseLiteral(spec[key], scope);\n  }\n}\n\nfunction parseLiteral(v, scope) {\n  return !isObject(v) ? v\n    : v.signal ? scope.signalRef(v.signal)\n    : error('Unsupported object: ' + $$2(v));\n}\n\nfunction parseArray(v, scope) {\n  return v.signal\n    ? scope.signalRef(v.signal)\n    : v.map(function(v) { return parseLiteral(v, scope); });\n}\n\nfunction dataLookupError(name) {\n  error('Can not find data set: ' + $$2(name));\n}\n\n// -- SCALE DOMAIN ----\n\nfunction parseScaleDomain(domain, spec, scope) {\n  if (!domain) {\n    if (spec.domainMin != null || spec.domainMax != null) {\n      error('No scale domain defined for domainMin/domainMax to override.');\n    }\n    return; // default domain\n  }\n\n  return domain.signal ? scope.signalRef(domain.signal)\n    : (isArray(domain) ? explicitDomain\n    : domain.fields ? multipleDomain\n    : singularDomain)(domain, spec, scope);\n}\n\nfunction explicitDomain(domain, spec, scope) {\n  return domain.map(function(v) {\n    return parseLiteral(v, scope);\n  });\n}\n\nfunction singularDomain(domain, spec, scope) {\n  var data = scope.getData(domain.data);\n  if (!data) dataLookupError(domain.data);\n\n  return isOrdinal(spec.type)\n      ? data.valuesRef(scope, domain.field, parseSort(domain.sort, false))\n      : isQuantile(spec.type) ? data.domainRef(scope, domain.field)\n      : data.extentRef(scope, domain.field);\n}\n\nfunction multipleDomain(domain, spec, scope) {\n  var data = domain.data,\n      fields = domain.fields.reduce(function(dom, d) {\n        d = isString(d) ? {data: data, field: d}\n          : (isArray(d) || d.signal) ? fieldRef(d, scope)\n          : d;\n        return dom.push(d), dom;\n      }, []);\n\n  return (isOrdinal(spec.type) ? ordinalMultipleDomain\n    : isQuantile(spec.type) ? quantileMultipleDomain\n    : numericMultipleDomain)(domain, scope, fields);\n}\n\nfunction fieldRef(data, scope) {\n  var name = '_:vega:_' + (FIELD_REF_ID++),\n      coll = Collect$1({});\n\n  if (isArray(data)) {\n    coll.value = {$ingest: data};\n  } else if (data.signal) {\n    scope.signalRef('modify(' + $$2(name)\n      + ',' + data.signal + ', true)');\n  }\n  scope.addDataPipeline(name, [coll, Sieve$1({})]);\n  return {data: name, field: 'data'};\n}\n\nfunction ordinalMultipleDomain(domain, scope, fields) {\n  var counts, a, c, v;\n\n  // get value counts for each domain field\n  counts = fields.map(function(f) {\n    var data = scope.getData(f.data);\n    if (!data) dataLookupError(f.data);\n    return data.countsRef(scope, f.field);\n  });\n\n  // sum counts from all fields\n  a = scope.add(Aggregate$1({\n    groupby: keyFieldRef,\n    ops:['sum'], fields: [scope.fieldRef('count')], as:['count'],\n    pulse: counts\n  }));\n\n  // collect aggregate output\n  c = scope.add(Collect$1({pulse: ref(a)}));\n\n  // extract values for combined domain\n  v = scope.add(Values$1({\n    field: keyFieldRef,\n    sort:  scope.sortRef(parseSort(domain.sort, true)),\n    pulse: ref(c)\n  }));\n\n  return ref(v);\n}\n\nfunction parseSort(sort, multidomain) {\n  if (sort) {\n    if (!sort.field && !sort.op) {\n      if (isObject(sort)) sort.field = 'key';\n      else sort = {field: 'key'};\n    } else if (!sort.field && sort.op !== 'count') {\n      error('No field provided for sort aggregate op: ' + sort.op);\n    } else if (multidomain && sort.field) {\n      error('Multiple domain scales can not sort by field.');\n    } else if (multidomain && sort.op && sort.op !== 'count') {\n      error('Multiple domain scales support op count only.');\n    }\n  }\n  return sort;\n}\n\nfunction quantileMultipleDomain(domain, scope, fields) {\n  // get value arrays for each domain field\n  var values = fields.map(function(f) {\n    var data = scope.getData(f.data);\n    if (!data) dataLookupError(f.data);\n    return data.domainRef(scope, f.field);\n  });\n\n  // combine value arrays\n  return ref(scope.add(MultiValues$1({values: values})));\n}\n\nfunction numericMultipleDomain(domain, scope, fields) {\n  // get extents for each domain field\n  var extents = fields.map(function(f) {\n    var data = scope.getData(f.data);\n    if (!data) dataLookupError(f.data);\n    return data.extentRef(scope, f.field);\n  });\n\n  // combine extents\n  return ref(scope.add(MultiExtent$1({extents: extents})));\n}\n\n// -- SCALE INTERPOLATION -----\n\nfunction parseScaleInterpolate(interpolate, params) {\n  params.interpolate = parseLiteral(interpolate.type || interpolate);\n  if (interpolate.gamma != null) {\n    params.interpolateGamma = parseLiteral(interpolate.gamma);\n  }\n}\n\n// -- SCALE RANGE -----\n\nfunction parseScaleRange(spec, scope, params) {\n  var range = spec.range,\n      config = scope.config.range;\n\n  if (range.signal) {\n    return scope.signalRef(range.signal);\n  } else if (isString(range)) {\n    if (config && config.hasOwnProperty(range)) {\n      spec = extend({}, spec, {range: config[range]});\n      return parseScaleRange(spec, scope, params);\n    } else if (range === 'width') {\n      range = [0, {signal: 'width'}]\n    } else if (range === 'height') {\n      range = isOrdinal(spec.type)\n        ? [0, {signal: 'height'}]\n        : [{signal: 'height'}, 0]\n    } else {\n      error('Unrecognized scale range value: ' + $$2(range));\n    }\n  } else if (range.scheme) {\n    params.scheme = parseLiteral(range.scheme, scope);\n    if (range.extent) params.schemeExtent = parseArray(range.extent, scope);\n    if (range.count) params.schemeCount = parseLiteral(range.count, scope);\n    return;\n  } else if (range.step) {\n    params.rangeStep = parseLiteral(range.step, scope);\n    return;\n  } else if (isOrdinal(spec.type) && !isArray(range)) {\n    return parseScaleDomain(range, spec, scope);\n  } else if (!isArray(range)) {\n    error('Unsupported range type: ' + $$2(range));\n  }\n\n  return range.map(function(v) {\n    return parseLiteral(v, scope);\n  });\n}\n\nfunction parseProjection(proj, scope) {\n  var params = {};\n\n  for (var name in proj) {\n    if (name === 'name') continue;\n    params[name] = parseParameter(proj[name], scope);\n  }\n\n  scope.addProjection(proj.name, params);\n}\n\nfunction parseParameter(_, scope) {\n  return isArray(_) ? _.map(function(_) { return parseParameter(_, scope); })\n    : !isObject(_) ? _\n    : _.signal ? scope.signalRef(_.signal)\n    : error('Unsupported parameter object: ' + $$2(_));\n}\n\nvar Skip = toSet(['rule']);\nvar Swap = toSet(['group', 'image', 'rect']);\nfunction adjustSpatial(encode, marktype) {\n  var code = '';\n\n  if (Skip[marktype]) return code;\n\n  if (encode.x2) {\n    if (encode.x) {\n      if (Swap[marktype]) {\n        code += 'if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;';\n      }\n      code += 'o.width=o.x2-o.x;';\n    } else if (encode.width) {\n      code += 'o.x=o.x2-o.width;';\n    } else {\n      code += 'o.x=o.x2;';\n    }\n  }\n\n  if (encode.xc) {\n    if (encode.width) {\n      code += 'o.x=o.xc-o.width/2;';\n    } else {\n      code += 'o.x=o.xc;';\n    }\n  }\n\n  if (encode.y2) {\n    if (encode.y) {\n      if (Swap[marktype]) {\n        code += 'if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;';\n      }\n      code += 'o.height=o.y2-o.y;';\n    } else if (encode.height) {\n      code += 'o.y=o.y2-o.height;';\n    } else {\n      code += 'o.y=o.y2;';\n    }\n  }\n\n  if (encode.yc) {\n    if (encode.height) {\n      code += 'o.y=o.yc-o.height/2;';\n    } else {\n      code += 'o.y=o.yc;';\n    }\n  }\n\n  return code;\n}\n\nfunction color$1(enc, scope, params, fields) {\n  function color(type, x, y, z) {\n    var a = entry$1(null, x, scope, params, fields),\n        b = entry$1(null, y, scope, params, fields),\n        c = entry$1(null, z, scope, params, fields);\n    return 'this.' + type + '(' + [a, b, c].join(',') + ').toString()';\n  }\n\n  return (enc.c) ? color('hcl', enc.h, enc.c, enc.l)\n    : (enc.h || enc.s) ? color('hsl', enc.h, enc.s, enc.l)\n    : (enc.l || enc.a) ? color('lab', enc.l, enc.a, enc.b)\n    : (enc.r || enc.g || enc.b) ? color('rgb', enc.r, enc.g, enc.b)\n    : null;\n}\n\nfunction expression(code, scope, params, fields) {\n  var expr = parseExpression(code, scope);\n  expr.$fields.forEach(function(name) { fields[name] = 1; });\n  extend(params, expr.$params);\n  return expr.$expr;\n}\n\nfunction field$1(ref, scope, params, fields) {\n  return resolve$1(isObject(ref) ? ref : {datum: ref}, scope, params, fields);\n}\n\nfunction resolve$1(ref, scope, params, fields) {\n  var object, level, field;\n\n  if (ref.signal) {\n    object = 'datum';\n    field = expression(ref.signal, scope, params, fields);\n  } else if (ref.group || ref.parent) {\n    level = Math.max(1, ref.level || 1);\n    object = 'item';\n\n    while (level-- > 0) {\n      object += '.mark.group';\n    }\n\n    if (ref.parent) {\n      field = ref.parent;\n      object += '.datum';\n    } else {\n      field = ref.group;\n    }\n  } else if (ref.datum) {\n    object = 'datum';\n    field = ref.datum;\n  } else {\n    error('Invalid field reference: ' + $$2(ref));\n  }\n\n  if (!ref.signal) {\n    if (isString(field)) {\n      fields[field] = 1; // TODO review field tracking?\n      field = splitAccessPath(field).map($$2).join('][');\n    } else {\n      field = resolve$1(field, scope, params, fields);\n    }\n  }\n\n  return object + '[' + field + ']';\n}\n\nfunction scale$3(enc, value, scope, params, fields) {\n  var scale = getScale$1(enc.scale, scope, params, fields),\n      interp, func, flag;\n\n  if (enc.range != null) {\n    // pull value from scale range\n    interp = +enc.range;\n    func = scale + '.range()';\n    value = (interp === 0) ? (func + '[0]')\n      : '($=' + func + ',' + ((interp === 1) ? '$[$.length-1]'\n      : '$[0]+' + interp + '*($[$.length-1]-$[0])') + ')';\n  } else {\n    // run value through scale and/or pull scale bandwidth\n    if (value !== undefined) value = scale + '(' + value + ')';\n\n    if (enc.band && (flag = hasBandwidth(enc.scale, scope))) {\n      func = scale + '.bandwidth';\n      interp = +enc.band;\n      interp = func + '()' + (interp===1 ? '' : '*' + interp);\n\n      // if we don't know the scale type, check for bandwidth\n      if (flag < 0) interp = '(' + func + '?' + interp + ':0)';\n\n      value = (value ? value + '+' : '') + interp;\n\n      if (enc.extra) {\n        // include logic to handle extraneous elements\n        value = '(datum.extra?' + scale + '(datum.extra.value):' + value + ')';\n      }\n    }\n\n    if (value == null) value = '0';\n  }\n\n  return value;\n}\n\nfunction hasBandwidth(name, scope) {\n  if (!isString(name)) return -1;\n  var type = scope.scaleType(name);\n  return type === 'band' || type === 'point' ? 1 : 0;\n}\n\nfunction getScale$1(name, scope, params, fields) {\n  var scaleName;\n\n  if (isString(name)) {\n    // direct scale lookup; add scale as parameter\n    scaleName = scalePrefix + name;\n    if (!params.hasOwnProperty(scaleName)) {\n      params[scaleName] = scope.scaleRef(name);\n    }\n    scaleName = $$2(scaleName);\n  } else {\n    // indirect scale lookup; add all scales as parameters\n    for (scaleName in scope.scales) {\n      params[scalePrefix + scaleName] = scope.scaleRef(scaleName);\n    }\n    scaleName = $$2(scalePrefix) + '+'\n      + (name.signal\n        ? '(' + expression(name.signal, scope, params, fields) + ')'\n        : field$1(name, scope, params, fields));\n  }\n\n  return '_[' + scaleName + ']';\n}\n\nfunction gradient$1(enc, scope, params, fields) {\n  return 'this.gradient('\n    + getScale$1(enc.gradient, scope, params, fields)\n    + ',' + $$2(enc.start)\n    + ',' + $$2(enc.stop)\n    + ',' + $$2(enc.count)\n    + ')';\n}\n\nfunction property(property, scope, params, fields) {\n  return isObject(property)\n      ? '(' + entry$1(null, property, scope, params, fields) + ')'\n      : property;\n}\n\nfunction entry$1(channel, enc, scope, params, fields) {\n  if (enc.gradient != null) {\n    return gradient$1(enc, scope, params, fields);\n  }\n\n  var value = enc.signal ? expression(enc.signal, scope, params, fields)\n    : enc.color ? color$1(enc.color, scope, params, fields)\n    : enc.field != null ? field$1(enc.field, scope, params, fields)\n    : enc.value !== undefined ? $$2(enc.value)\n    : undefined;\n\n  if (enc.scale != null) {\n    value = scale$3(enc, value, scope, params, fields);\n  }\n\n  if (value === undefined) {\n    value = null;\n  }\n\n  if (enc.exponent != null) {\n    value = 'Math.pow(' + value + ','\n      + property(enc.exponent, scope, params, fields) + ')';\n  }\n\n  if (enc.mult != null) {\n    value += '*' + property(enc.mult, scope, params, fields);\n  }\n\n  if (enc.offset != null) {\n    value += '+' + property(enc.offset, scope, params, fields);\n  }\n\n  if (enc.round) {\n    value = 'Math.round(' + value + ')';\n  }\n\n  return value;\n}\n\nfunction set$2(obj, key, value) {\n  return obj + '[' + $$2(key) + ']=' + value + ';';\n}\n\nfunction rule$1(channel, rules, scope, params, fields) {\n  var code = '';\n\n  rules.forEach(function(rule) {\n    var value = entry$1(channel, rule, scope, params, fields);\n    code += rule.test\n      ? expression(rule.test, scope, params, fields) + '?' + value + ':'\n      : value;\n  });\n\n  return set$2('o', channel, code);\n}\n\nfunction parseEncode(encode, marktype, params, scope) {\n  var fields = {},\n      code = 'var o=item,datum=o.datum,$;',\n      channel, enc, value;\n\n  for (channel in encode) {\n    enc = encode[channel];\n    if (isArray(enc)) { // rule\n      code += rule$1(channel, enc, scope, params, fields);\n    } else {\n      value = entry$1(channel, enc, scope, params, fields);\n      code += set$2('o', channel, value);\n    }\n  }\n\n  code += adjustSpatial(encode, marktype);\n  code += 'return 1;';\n\n  return {\n    $expr:   code,\n    $fields: Object.keys(fields),\n    $output: Object.keys(encode)\n  };\n}\n\nvar MarkRole = 'mark';\nvar FrameRole$1 = 'frame';\nvar ScopeRole$1 = 'scope';\n\nvar AxisRole$2 = 'axis';\nvar AxisDomainRole = 'axis-domain';\nvar AxisGridRole = 'axis-grid';\nvar AxisLabelRole = 'axis-label';\nvar AxisTickRole = 'axis-tick';\nvar AxisTitleRole = 'axis-title';\n\nvar LegendRole$2 = 'legend';\nvar LegendEntryRole = 'legend-entry';\nvar LegendGradientRole = 'legend-gradient';\nvar LegendLabelRole = 'legend-label';\nvar LegendSymbolRole = 'legend-symbol';\nvar LegendTitleRole = 'legend-title';\n\nvar TitleRole$1 = 'title';\n\nfunction encoder(_) {\n  return isObject(_) ? _ : {value: _};\n}\n\nfunction addEncode(object, name, value) {\n  return value != null ? (object[name] = {value: value}, 1) : 0;\n}\n\nfunction extendEncode(encode, extra, skip) {\n  for (var name in extra) {\n    if (skip && skip.hasOwnProperty(name)) continue;\n    encode[name] = extend(encode[name] || {}, extra[name]);\n  }\n  return encode;\n}\n\nfunction encoders(encode, type, role, scope, params) {\n  var enc, key;\n  params = params || {};\n  params.encoders = {$encode: (enc = {})};\n\n  encode = applyDefaults(encode, type, role, scope.config);\n\n  for (key in encode) {\n    enc[key] = parseEncode(encode[key], type, params, scope);\n  }\n\n  return params;\n}\n\nfunction applyDefaults(encode, type, role, config) {\n  var enter, key, skip;\n\n  // ignore legend and axis\n  if (role == 'legend' || String(role).indexOf('axis') === 0) {\n    role = null;\n  }\n\n  config = role === FrameRole$1 ? config.group\n    : (role === MarkRole || config[type = role]) ? extend({}, config.mark, config[type])\n    : {};\n\n  enter = {};\n  for (key in config) {\n    // do not apply defaults if relevant fields are defined\n    skip = has(key, encode)\n      || (key === 'fill' || key === 'stroke')\n      && (has('fill', encode) || has('stroke', encode));\n\n    if (!skip) enter[key] = {value: config[key]};\n  }\n\n  encode = extend({}, encode); // defensive copy\n  encode.enter = extend(enter, encode.enter);\n\n  return encode;\n}\n\nfunction has(key, encode) {\n  return (encode.enter && encode.enter[key])\n    || (encode.update && encode.update[key]);\n}\n\nvar skip = {name: 1, interactive: 1};\n\nfunction guideMark(type, role, key, dataRef, encode, extras) {\n  return {\n    type: type,\n    name: extras ? extras.name : undefined,\n    role: role,\n    key:  key,\n    from: dataRef,\n    interactive: !!(extras && extras.interactive),\n    encode: extendEncode(encode, extras, skip)\n  };\n}\n\nvar GroupMark = 'group';\nvar RectMark = 'rect';\nvar RuleMark = 'rule';\nvar SymbolMark = 'symbol';\nvar TextMark = 'text';\n\nfunction legendGradient(scale, config, userEncode) {\n  var zero = {value: 0},\n      encode = {}, enter, update;\n\n  encode.enter = enter = {\n    opacity: zero,\n    x: zero,\n    y: zero\n  };\n  addEncode(enter, 'width', config.gradientWidth);\n  addEncode(enter, 'height', config.gradientHeight);\n  addEncode(enter, 'stroke', config.gradientStrokeColor);\n  addEncode(enter, 'strokeWidth', config.gradientStrokeWidth);\n\n  encode.exit = {\n    opacity: zero\n  };\n\n  encode.update = update = {\n    x: zero,\n    y: zero,\n    fill: {gradient: scale},\n    opacity: {value: 1}\n  };\n  addEncode(update, 'width', config.gradientWidth);\n  addEncode(update, 'height', config.gradientHeight);\n\n  return guideMark(RectMark, LegendGradientRole, undefined, undefined, encode, userEncode);\n}\n\nvar Top = 'top';\nvar Left = 'left';\nvar Right = 'right';\nvar Bottom = 'bottom';\n\nvar Index  = 'index';\nvar Label  = 'label';\nvar Offset = 'offset';\nvar Perc   = 'perc';\nvar Size   = 'size';\nvar Total  = 'total';\nvar Value  = 'value';\n\nvar LegendScales = [\n  'shape',\n  'size',\n  'fill',\n  'stroke',\n  'strokeDash',\n  'opacity'\n];\n\nvar alignExpr = 'datum.' + Perc + '<=0?\"left\"'\n  + ':datum.' + Perc + '>=1?\"right\":\"center\"';\n\nfunction legendGradientLabels(spec, config, userEncode, dataRef) {\n  var zero = {value: 0},\n      encode = {}, enter, update;\n\n  encode.enter = enter = {\n    opacity: zero,\n    text: {field: Label}\n  };\n  addEncode(enter, 'fill', config.labelColor);\n  addEncode(enter, 'font', config.labelFont);\n  addEncode(enter, 'fontSize', config.labelFontSize);\n  addEncode(enter, 'baseline', config.gradientLabelBaseline);\n  addEncode(enter, 'limit', config.gradientLabelLimit);\n\n  encode.exit = {\n    opacity: zero\n  };\n\n  encode.update = update = {\n    opacity: {value: 1}\n  };\n\n  enter.x = update.x = {\n    field: Perc,\n    mult: config.gradientWidth\n  };\n\n  enter.y = update.y = {\n    value: config.gradientHeight,\n    offset: config.gradientLabelOffset\n  };\n\n  enter.align = update.align = {signal: alignExpr};\n\n  return guideMark(TextMark, LegendLabelRole, Perc, dataRef, encode, userEncode);\n}\n\nfunction legendLabels(spec, config, userEncode, dataRef) {\n  var zero = {value: 0},\n      encode = {}, enter, update;\n\n  encode.enter = enter = {\n    opacity: zero,\n    text: {field: Label}\n  };\n  addEncode(enter, 'align', config.labelAlign);\n  addEncode(enter, 'baseline', config.labelBaseline);\n  addEncode(enter, 'fill', config.labelColor);\n  addEncode(enter, 'font', config.labelFont);\n  addEncode(enter, 'fontSize', config.labelFontSize);\n  addEncode(enter, 'limit', config.labelLimit);\n\n  encode.exit = {\n    opacity: zero\n  };\n\n  encode.update = update = {\n    opacity: {value: 1}\n  };\n\n  enter.x = update.x = {\n    field:  Offset,\n    offset: config.labelOffset\n  };\n\n  enter.y = update.y = {\n    field:  Size,\n    mult:   0.5,\n    offset: {\n      field: Total,\n      offset: {\n        field: {group: 'entryPadding'},\n        mult: {field: Index}\n      }\n    }\n  };\n\n  return guideMark(TextMark, LegendLabelRole, Value, dataRef, encode, userEncode);\n}\n\nfunction legendSymbols(spec, config, userEncode, dataRef) {\n  var zero = {value: 0},\n      encode = {}, enter, update;\n\n  encode.enter = enter = {\n    opacity: zero\n  };\n  addEncode(enter, 'shape', config.symbolType);\n  addEncode(enter, 'size', config.symbolSize);\n  addEncode(enter, 'strokeWidth', config.symbolStrokeWidth);\n  if (!spec.fill) addEncode(enter, 'stroke', config.symbolColor);\n\n  encode.exit = {\n    opacity: zero\n  };\n\n  encode.update = update = {\n    opacity: {value: 1}\n  };\n\n  enter.x = update.x = {\n    field: Offset,\n    mult:  0.5\n  };\n\n  enter.y = update.y = {\n    field: Size,\n    mult:  0.5,\n    offset: {\n      field: Total,\n      offset: {\n        field: {group: 'entryPadding'},\n        mult: {field: Index}\n      }\n    }\n  };\n\n  LegendScales.forEach(function(scale) {\n    if (spec[scale]) {\n      update[scale] = enter[scale] = {scale: spec[scale], field: Value};\n    }\n  });\n\n  return guideMark(SymbolMark, LegendSymbolRole, Value, dataRef, encode, userEncode);\n}\n\nfunction legendTitle(spec, config, userEncode, dataRef) {\n  var zero = {value: 0},\n      title = spec.title,\n      encode = {}, enter;\n\n  encode.enter = enter = {\n    x: {field: {group: 'padding'}},\n    y: {field: {group: 'padding'}},\n    opacity: zero\n  };\n  addEncode(enter, 'align', config.titleAlign);\n  addEncode(enter, 'baseline', config.titleBaseline);\n  addEncode(enter, 'fill', config.titleColor);\n  addEncode(enter, 'font', config.titleFont);\n  addEncode(enter, 'fontSize', config.titleFontSize);\n  addEncode(enter, 'fontWeight', config.titleFontWeight);\n  addEncode(enter, 'limit', config.titleLimit);\n\n  encode.exit = {\n    opacity: zero\n  };\n\n  encode.update = {\n    opacity: {value: 1},\n    text: title && title.signal ? {signal: title.signal} : {value: title + ''}\n  };\n\n  return guideMark(TextMark, LegendTitleRole, null, dataRef, encode, userEncode);\n}\n\nfunction guideGroup(role, name, dataRef, interactive, encode, marks) {\n  return {\n    type: GroupMark,\n    name: name,\n    role: role,\n    from: dataRef,\n    interactive: interactive,\n    encode: encode,\n    marks: marks\n  };\n}\n\nfunction role(spec) {\n  var role = spec.role || '';\n  return (!role.indexOf('axis') || !role.indexOf('legend'))\n    ? role\n    : spec.type === GroupMark ? ScopeRole$1 : (role || MarkRole);\n}\n\nfunction definition$1(spec) {\n  return {\n    clip:        spec.clip || false,\n    interactive: spec.interactive === false ? false : true,\n    marktype:    spec.type,\n    name:        spec.name || undefined,\n    role:        spec.role || role(spec),\n    zindex:      +spec.zindex || undefined\n  };\n}\n\nfunction dataName(name) {\n  return name;\n}\n\n/**\n * Parse a data transform specification.\n */\nfunction parseTransform(spec, scope) {\n  var def = definition(spec.type);\n  if (!def) error('Unrecognized transform type: ' + $$2(spec.type));\n\n  var t = entry(def.type, null, parseParameters(def, spec, scope));\n  if (spec.signal) scope.addSignal(spec.signal, scope.proxy(t));\n  return t.metadata = def.metadata || {}, t;\n}\n\n/**\n * Parse all parameters of a data transform.\n */\nfunction parseParameters(def, spec, scope) {\n  var params = {}, pdef, i, n;\n  for (i=0, n=def.params.length; i<n; ++i) {\n    pdef = def.params[i];\n    params[pdef.name] = parseParameter$1(pdef, spec, scope);\n  }\n  return params;\n}\n\n/**\n * Parse a data transform parameter.\n */\nfunction parseParameter$1(def, spec, scope) {\n  var type = def.type,\n      value = spec[def.name];\n\n  if (type === 'index') {\n    return parseIndexParameter(def, spec, scope);\n  } else if (value === undefined) {\n    if (def.required) {\n      error('Missing required ' + $$2(spec.type)\n          + ' parameter: ' + $$2(def.name));\n    }\n    return;\n  } else if (type === 'param') {\n    return parseSubParameters(def, spec, scope);\n  } else if (type === 'projection') {\n    return scope.projectionRef(spec[def.name]);\n  }\n\n  return def.array && !isSignal(value)\n    ? value.map(function(v) { return parameterValue(def, v, scope); })\n    : parameterValue(def, value, scope);\n}\n\n/**\n * Parse a single parameter value.\n */\nfunction parameterValue(def, value, scope) {\n  var type = def.type;\n\n  if (isSignal(value)) {\n    return isExpr(type) ? error('Expression references can not be signals.')\n         : isField(type) ? scope.fieldRef(value)\n         : isCompare(type) ? scope.compareRef(value)\n         : scope.signalRef(value.signal);\n  } else {\n    var expr = def.expr || isField(type);\n    return expr && outerExpr(value) ? parseExpression(value.expr, scope)\n         : expr && outerField(value) ? fieldRef$1(value.field)\n         : isExpr(type) ? parseExpression(value, scope)\n         : isData(type) ? ref(scope.getData(value).values)\n         : isField(type) ? fieldRef$1(value)\n         : isCompare(type) ? scope.compareRef(value)\n         : value;\n  }\n}\n\n/**\n * Parse parameter for accessing an index of another data set.\n */\nfunction parseIndexParameter(def, spec, scope) {\n  if (!isString(spec.from)) {\n    error('Lookup \"from\" parameter must be a string literal.');\n  }\n  return scope.getData(spec.from).lookupRef(scope, spec.key);\n}\n\n/**\n * Parse a parameter that contains one or more sub-parameter objects.\n */\nfunction parseSubParameters(def, spec, scope) {\n  var value = spec[def.name];\n\n  if (def.array) {\n    if (!isArray(value)) { // signals not allowed!\n      error('Expected an array of sub-parameters. Instead: ' + $$2(value));\n    }\n    return value.map(function(v) {\n      return parseSubParameter(def, v, scope);\n    });\n  } else {\n    return parseSubParameter(def, value, scope);\n  }\n}\n\n/**\n * Parse a sub-parameter object.\n */\nfunction parseSubParameter(def, value, scope) {\n  var params, pdef, k, i, n;\n\n  // loop over defs to find matching key\n  for (i=0, n=def.params.length; i<n; ++i) {\n    pdef = def.params[i];\n    for (k in pdef.key) {\n      if (pdef.key[k] !== value[k]) { pdef = null; break; }\n    }\n    if (pdef) break;\n  }\n  // raise error if matching key not found\n  if (!pdef) error('Unsupported parameter: ' + $$2(value));\n\n  // parse params, create Params transform, return ref\n  params = extend(parseParameters(pdef, value, scope), pdef.key);\n  return ref(scope.add(Params$1(params)));\n}\n\n// -- Utilities -----\n\nfunction outerExpr(_) {\n  return _ && _.expr;\n}\n\nfunction outerField(_) {\n  return _ && _.field;\n}\n\nfunction isData(_) {\n  return _ === 'data';\n}\n\nfunction isExpr(_) {\n  return _ === 'expr';\n}\n\nfunction isField(_) {\n  return _ === 'field';\n}\n\nfunction isCompare(_) {\n  return _ === 'compare'\n}\n\nfunction parseData(from, group, scope) {\n  var facet, key, op, dataRef, parent;\n\n  // if no source data, generate singleton datum\n  if (!from) {\n    dataRef = ref(scope.add(Collect$1(null, [{}])));\n  }\n\n  // if faceted, process facet specification\n  else if (facet = from.facet) {\n    if (!group) error('Only group marks can be faceted.');\n\n    // use pre-faceted source data, if available\n    if (facet.field != null) {\n      dataRef = parent = ref(scope.getData(facet.data).output);\n    } else {\n      key = scope.keyRef(facet.groupby);\n\n      // generate facet aggregates if no direct data specification\n      if (!from.data) {\n        op = parseTransform(extend({\n          type:    'aggregate',\n          groupby: array(facet.groupby)\n        }, facet.aggregate));\n        op.params.key = key;\n        op.params.pulse = ref(scope.getData(facet.data).output);\n        dataRef = parent = ref(scope.add(op));\n      } else {\n        parent = ref(scope.getData(from.data).aggregate);\n      }\n    }\n  }\n\n  // if not yet defined, get source data reference\n  if (!dataRef) {\n    dataRef = from.$ref ? from\n      : from.mark ? ref(scope.getData(dataName(from.mark)).output)\n      : ref(scope.getData(from.data).output);\n  }\n\n  return {\n    key: key,\n    pulse: dataRef,\n    parent: parent\n  };\n}\n\nfunction DataScope(scope, input, output, values, aggr) {\n  this.scope = scope;   // parent scope object\n  this.input = input;   // first operator in pipeline (tuple input)\n  this.output = output; // last operator in pipeline (tuple output)\n  this.values = values; // operator for accessing tuples (but not tuple flow)\n\n  // last aggregate in transform pipeline\n  this.aggregate = aggr;\n\n  // lookup table of field indices\n  this.index = {};\n}\n\nDataScope.fromEntries = function(scope, entries) {\n  var n = entries.length,\n      i = 1,\n      input  = entries[0],\n      values = entries[n-1],\n      output = entries[n-2],\n      aggr = null;\n\n  // add operator entries to this scope, wire up pulse chain\n  scope.add(entries[0]);\n  for (; i<n; ++i) {\n    entries[i].params.pulse = ref(entries[i-1]);\n    scope.add(entries[i]);\n    if (entries[i].type === 'Aggregate') aggr = entries[i];\n  }\n\n  return new DataScope(scope, input, output, values, aggr);\n};\n\nvar prototype$72 = DataScope.prototype;\n\nprototype$72.countsRef = function(scope, field, sort) {\n  var ds = this,\n      cache = ds.counts || (ds.counts = {}),\n      k = fieldKey(field), v, a, p;\n\n  if (k != null) {\n    scope = ds.scope;\n    v = cache[k];\n  }\n\n  if (!v) {\n    p = {\n      groupby: scope.fieldRef(field, 'key'),\n      pulse: ref(ds.output)\n    };\n    if (sort && sort.field) addSortField(scope, p, sort);\n    a = scope.add(Aggregate$1(p));\n    v = scope.add(Collect$1({pulse: ref(a)}));\n    v = {agg: a, ref: ref(v)};\n    if (k != null) cache[k] = v;\n  } else if (sort && sort.field) {\n    addSortField(scope, v.agg.params, sort);\n  }\n\n  return v.ref;\n};\n\nfunction fieldKey(field) {\n  return isString(field) ? field : null;\n}\n\nfunction addSortField(scope, p, sort) {\n  var as = aggrField(sort.op, sort.field), s;\n\n  if (p.ops) {\n    for (var i=0, n=p.as.length; i<n; ++i) {\n      if (p.as[i] === as) return;\n    }\n  } else {\n    p.ops = ['count'];\n    p.fields = [null];\n    p.as = ['count'];\n  }\n  if (sort.op) {\n    p.ops.push((s=sort.op.signal) ? scope.signalRef(s) : sort.op);\n    p.fields.push(scope.fieldRef(sort.field));\n    p.as.push(as);\n  }\n}\n\nfunction cache(scope, ds, name, optype, field, counts, index) {\n  var cache = ds[name] || (ds[name] = {}),\n      sort = sortKey(counts),\n      k = fieldKey(field), v, op;\n\n  if (k != null) {\n    scope = ds.scope;\n    k = k + (sort ? '|' + sort : '');\n    v = cache[k];\n  }\n\n  if (!v) {\n    var params = counts\n      ? {field: keyFieldRef, pulse: ds.countsRef(scope, field, counts)}\n      : {field: scope.fieldRef(field), pulse: ref(ds.output)};\n    if (sort) params.sort = scope.sortRef(counts);\n    op = scope.add(entry(optype, undefined, params));\n    if (index) ds.index[field] = op;\n    v = ref(op);\n    if (k != null) cache[k] = v;\n  }\n  return v;\n}\n\nprototype$72.tuplesRef = function() {\n  return ref(this.values);\n};\n\nprototype$72.extentRef = function(scope, field) {\n  return cache(scope, this, 'extent', 'Extent', field, false);\n};\n\nprototype$72.domainRef = function(scope, field) {\n  return cache(scope, this, 'domain', 'Values', field, false);\n};\n\nprototype$72.valuesRef = function(scope, field, sort) {\n  return cache(scope, this, 'vals', 'Values', field, sort || true);\n};\n\nprototype$72.lookupRef = function(scope, field) {\n  return cache(scope, this, 'lookup', 'TupleIndex', field, false);\n};\n\nprototype$72.indataRef = function(scope, field) {\n  return cache(scope, this, 'indata', 'TupleIndex', field, true, true);\n};\n\nfunction parseFacet(spec, scope, group) {\n  var facet = spec.from.facet,\n      name = facet.name,\n      data = ref(scope.getData(facet.data).output),\n      subscope, source, values, op;\n\n  if (!facet.name) {\n    error('Facet must have a name: ' + $$2(facet));\n  }\n  if (!facet.data) {\n    error('Facet must reference a data set: ' + $$2(facet));\n  }\n\n  if (facet.field) {\n    op = scope.add(PreFacet$1({\n      field: scope.fieldRef(facet.field),\n      pulse: data\n    }));\n  } else if (facet.groupby) {\n    op = scope.add(Facet$1({\n      key:   scope.keyRef(facet.groupby),\n      group: ref(scope.proxy(group.parent)),\n      pulse: data\n    }));\n  } else {\n    error('Facet must specify groupby or field: ' + $$2(facet));\n  }\n\n  // initialize facet subscope\n  subscope = scope.fork();\n  source = subscope.add(Collect$1());\n  values = subscope.add(Sieve$1({pulse: ref(source)}));\n  subscope.addData(name, new DataScope(subscope, source, source, values));\n  subscope.addSignal('parent', null);\n\n  // parse faceted subflow\n  op.params.subflow = {\n    $subflow: parseSpec(spec, subscope).toRuntime()\n  };\n}\n\nfunction parseSubflow(spec, scope, input) {\n  var op = scope.add(PreFacet$1({pulse: input.pulse})),\n      subscope = scope.fork();\n\n  subscope.add(Sieve$1());\n  subscope.addSignal('parent', null);\n\n  // parse group mark subflow\n  op.params.subflow = {\n    $subflow: parseSpec(spec, subscope).toRuntime()\n  };\n}\n\nfunction parseTrigger(spec, scope, name) {\n  var remove = spec.remove,\n      insert = spec.insert,\n      toggle = spec.toggle,\n      modify = spec.modify,\n      values = spec.values,\n      op = scope.add(operator()),\n      update, expr;\n\n  update = 'if(' + spec.trigger + ',modify(\"'\n    + name + '\",'\n    + [insert, remove, toggle, modify, values]\n        .map(function(_) { return _ == null ? 'null' : _; })\n        .join(',')\n    + '),0)';\n\n  expr = parseExpression(update, scope);\n  op.update = expr.$expr;\n  op.params = expr.$params;\n}\n\nfunction parseMark(spec, scope) {\n  var role$$ = role(spec),\n      group = spec.type === GroupMark,\n      facet = spec.from && spec.from.facet,\n      layout = spec.layout || role$$ === ScopeRole$1 || role$$ === FrameRole$1,\n      nested = role$$ === MarkRole || layout || facet,\n      ops, op, input, store, bound, render, sieve, name,\n      joinRef, markRef, encodeRef, layoutRef, boundRef;\n\n  // resolve input data\n  input = parseData(spec.from, group, scope);\n\n  // data join to map tuples to visual items\n  op = scope.add(DataJoin$1({\n    key:   input.key || (spec.key ? fieldRef$1(spec.key) : undefined),\n    pulse: input.pulse,\n    clean: !group\n  }));\n  joinRef = ref(op);\n\n  // collect visual items\n  op = store = scope.add(Collect$1({pulse: joinRef}));\n\n  // connect visual items to scenegraph\n  op = scope.add(Mark$1({\n    markdef:   definition$1(spec),\n    context:   {$context: true},\n    groups:    scope.lookup(),\n    parent:    scope.signals.parent ? scope.signalRef('parent') : null,\n    index:     scope.markpath(),\n    pulse:     ref(op)\n  }));\n  markRef = ref(op);\n\n  // add visual encoders\n  op = scope.add(Encode$1(\n    encoders(spec.encode, spec.type, role$$, scope, {pulse: markRef})\n  ));\n\n  // monitor parent marks to propagate changes\n  op.params.parent = scope.encode();\n\n  // add post-encoding transforms, if defined\n  if (spec.transform) {\n    spec.transform.forEach(function(_) {\n      var tx = parseTransform(_, scope);\n      if (tx.metadata.generates || tx.metadata.changes) {\n        error('Mark transforms should not generate new data.');\n      }\n      tx.params.pulse = ref(op);\n      scope.add(op = tx);\n    });\n  }\n\n  // if item sort specified, perform post-encoding\n  if (spec.sort) {\n    op = scope.add(SortItems$1({\n      sort:  scope.compareRef(spec.sort),\n      pulse: ref(op)\n    }));\n  }\n\n  encodeRef = ref(op);\n\n  // add view layout operator if needed\n  if (facet || layout) {\n    layout = scope.add(ViewLayout$1({\n      layout:       scope.objectProperty(spec.layout),\n      legendMargin: scope.config.legendMargin,\n      mark:         markRef,\n      pulse:        encodeRef\n    }));\n    layoutRef = ref(layout);\n  }\n\n  // compute bounding boxes\n  bound = scope.add(Bound$1({mark: markRef, pulse: layoutRef || encodeRef}));\n  boundRef = ref(bound);\n\n  // if group mark, recurse to parse nested content\n  if (group) {\n    // juggle layout & bounds to ensure they run *after* any faceting transforms\n    if (nested) { ops = scope.operators; ops.pop(); if (layout) ops.pop(); }\n\n    scope.pushState(encodeRef, layoutRef || boundRef, joinRef);\n    facet ? parseFacet(spec, scope, input)          // explicit facet\n        : nested ? parseSubflow(spec, scope, input) // standard mark group\n        : parseSpec(spec, scope); // guide group, we can avoid nested scopes\n    scope.popState();\n\n    if (nested) { if (layout) ops.push(layout); ops.push(bound); }\n  }\n\n  // render / sieve items\n  render = scope.add(Render$1({pulse: boundRef}));\n  sieve = scope.add(Sieve$1({pulse: boundRef}, undefined, scope.parent()));\n\n  // if mark is named, make accessible as reactive geometry\n  // add trigger updates if defined\n  if (spec.name != null) {\n    name = dataName(spec.name);\n    scope.addData(name, new DataScope(scope, store, render, sieve));\n    if (spec.on) spec.on.forEach(function(on) {\n      if (on.insert || on.remove || on.toggle) {\n        error('Marks only support modify triggers.');\n      }\n      parseTrigger(on, scope, name);\n    });\n  }\n}\n\nfunction parseLegend(spec, scope) {\n  var type = spec.type || 'symbol',\n      config = scope.config.legend,\n      name = spec.name || undefined,\n      encode = spec.encode || {},\n      interactive = !!spec.interactive,\n      datum, dataRef, entryRef, group, title,\n      legendEncode, entryEncode, children;\n\n  // resolve 'canonical' scale name\n  var scale = spec.size || spec.shape || spec.fill || spec.stroke\n           || spec.strokeDash || spec.opacity;\n\n  if (!scale) {\n    error('Missing valid scale for legend.');\n  }\n\n  // single-element data source for axis group\n  datum = {\n    orient: value(spec.orient, config.orient),\n    title:  spec.title != null\n  };\n  dataRef = ref(scope.add(Collect$1(null, [datum])));\n\n  // encoding properties for legend group\n\n  legendEncode = extendEncode({\n    enter: legendEnter(config),\n    update: {\n      offset:        encoder(value(spec.offset, config.offset)),\n      padding:       encoder(value(spec.padding, config.padding)),\n      titlePadding:  encoder(value(spec.titlePadding, config.titlePadding))\n    }\n  }, encode.legend);\n\n  // encoding properties for legend entry sub-group\n  entryEncode = {\n    update: {\n      x: {field: {group: 'padding'}},\n      y: {field: {group: 'padding'}},\n      entryPadding: encoder(value(spec.entryPadding, config.entryPadding))\n    }\n  };\n\n  if (type === 'gradient') {\n    // data source for gradient labels\n    entryRef = ref(scope.add(LegendEntries$1({\n      type:   'gradient',\n      scale:  scope.scaleRef(scale),\n      count:  scope.property(spec.tickCount),\n      values: scope.objectProperty(spec.values),\n      formatSpecifier: scope.property(spec.format)\n    })));\n\n    children = [\n      legendGradient(scale, config, encode.gradient),\n      legendGradientLabels(spec, config, encode.labels, entryRef)\n    ];\n  }\n\n  else {\n    // data source for legend entries\n    entryRef = ref(scope.add(LegendEntries$1({\n      size:   sizeExpression(spec, config, encode.labels),\n      scale:  scope.scaleRef(scale),\n      count:  scope.property(spec.tickCount),\n      values: scope.property(spec.values),\n      formatSpecifier: scope.property(spec.format)\n    })));\n\n    children = [\n      legendSymbols(spec, config, encode.symbols, entryRef),\n      legendLabels(spec, config, encode.labels, entryRef)\n    ];\n  }\n\n  // generate legend marks\n  children = [\n    guideGroup(LegendEntryRole, null, dataRef, interactive, entryEncode, children)\n  ];\n\n  // include legend title if defined\n  if (datum.title) {\n    title = legendTitle(spec, config, encode.title, dataRef);\n    entryEncode.update.y.offset = {\n      field: {group: 'titlePadding'},\n      offset: title.encode.update.fontSize || title.encode.enter.fontSize\n    };\n    children.push(title);\n  }\n\n  // build legend specification\n  group = guideGroup(LegendRole$2, name, dataRef, interactive, legendEncode, children);\n  if (spec.zindex) group.zindex = spec.zindex;\n\n  // parse legend specification\n  return parseMark(group, scope);\n}\n\nfunction value(value, defaultValue) {\n  return value != null ? value : defaultValue;\n}\n\nfunction sizeExpression(spec, config, encode) {\n  // TODO get override for symbolSize?\n  var symbolSize = +config.symbolSize, fontSize;\n  fontSize = encode && encode.update && encode.update.fontSize;\n  if (!fontSize) fontSize = encode && encode.enter && encode.enter.fontSize;\n  if (fontSize) fontSize = fontSize.value; // TODO support signal?\n  if (!fontSize) fontSize = +config.labelFontSize;\n\n  return spec.size\n    ? {$expr: 'Math.max(Math.ceil(Math.sqrt(_.scale(datum))),' + fontSize + ')'}\n    : Math.max(Math.ceil(Math.sqrt(symbolSize)), fontSize);\n}\n\nfunction legendEnter(config) {\n  var enter = {},\n      count = addEncode(enter, 'fill', config.fillColor)\n            + addEncode(enter, 'stroke', config.strokeColor)\n            + addEncode(enter, 'strokeWidth', config.strokeWidth)\n            + addEncode(enter, 'strokeDash', config.strokeDash)\n            + addEncode(enter, 'cornerRadius', config.cornerRadius)\n  return count ? enter : undefined;\n}\n\nfunction parseTitle(spec, scope) {\n  spec = isString(spec) ? {text: spec} : spec;\n\n  var config = scope.config.title,\n      encode = extend({}, spec.encode),\n      datum, dataRef, title;\n\n  // single-element data source for group title\n  datum = {\n    orient: spec.orient != null ? spec.orient : config.orient\n  };\n  dataRef = ref(scope.add(Collect$1(null, [datum])));\n\n  // build title specification\n  encode.name = spec.name;\n  encode.interactive = spec.interactive;\n  title = buildTitle(spec, config, encode, dataRef);\n  if (spec.zindex) title.zindex = spec.zindex;\n\n  // parse title specification\n  return parseMark(title, scope);\n}\n\nfunction buildTitle(spec, config, userEncode, dataRef) {\n  var title = spec.text,\n      orient = spec.orient || config.orient,\n      anchor = spec.anchor || config.anchor,\n      sign = (orient === Left || orient === Top) ? -1 : 1,\n      horizontal = (orient === Top || orient === Bottom),\n      extent = {group: (horizontal ? 'width' : 'height')},\n      encode = {}, enter, update, pos, opp, mult, align;\n\n  encode.enter = enter = {\n    opacity: {value: 0}\n  };\n  addEncode(enter, 'fill', config.color);\n  addEncode(enter, 'font', config.font);\n  addEncode(enter, 'fontSize', config.fontSize);\n  addEncode(enter, 'fontWeight', config.fontWeight);\n\n  encode.exit = {\n    opacity: {value: 0}\n  };\n\n  encode.update = update = {\n    opacity: {value: 1},\n    text: isObject(title) ? title : {value: title + ''},\n    offset: encoder(spec.offset || 0)\n  };\n\n  (anchor === 'start') ? (mult = 0, align = 'left')\n    : (anchor === 'end') ? (mult = 1, align = 'right')\n    : (mult = 0.5, align = 'center');\n\n  pos = {field: extent, mult: mult};\n\n  opp = sign < 0 ? {value: 0}\n    : horizontal ? {field: {group: 'height'}}\n    : {field: {group: 'width'}};\n\n  if (horizontal) {\n    update.x = pos;\n    update.y = opp;\n    update.angle = {value: 0};\n    update.baseline = {value: orient === Top ? 'bottom' : 'top'};\n  } else {\n    update.x = opp;\n    update.y = pos;\n    update.angle = {value: sign * 90};\n    update.baseline = {value: 'bottom'};\n  }\n  update.align = {value: align};\n  update.limit = {field: extent};\n\n  addEncode(update, 'angle', config.angle);\n  addEncode(update, 'baseline', config.baseline);\n  addEncode(update, 'limit', config.limit);\n\n  return guideMark(TextMark, TitleRole$1, null, dataRef, encode, userEncode);\n}\n\nfunction parseData$1(data, scope) {\n  var transforms = [];\n\n  if (data.transform) {\n    data.transform.forEach(function(tx) {\n      transforms.push(parseTransform(tx, scope));\n    });\n  }\n\n  if (data.on) {\n    data.on.forEach(function(on) {\n      parseTrigger(on, scope, data.name);\n    });\n  }\n\n  scope.addDataPipeline(data.name, analyze(data, scope, transforms));\n}\n\n/**\n * Analyze a data pipeline, add needed operators.\n */\nfunction analyze(data, scope, ops) {\n  // POSSIBLE TODOs:\n  // - error checking for treesource on tree operators (BUT what if tree is upstream?)\n  // - this is local analysis, perhaps some tasks better for global analysis...\n\n  var output = [],\n      source = null,\n      modify = false,\n      generate = false,\n      upstream, i, n, t, m;\n\n  if (data.values) {\n    // hard-wired input data set\n    output.push(source = collect({$ingest: data.values, $format: data.format}));\n  } else if (data.url) {\n    // load data from external source\n    output.push(source = collect({$request: data.url, $format: data.format}));\n  } else if (data.source) {\n    // derives from another data set\n    upstream = scope.getData(data.source);\n    source = upstream.output;\n    output.push(null); // populate later\n  }\n\n  // scan data transforms, add collectors as needed\n  for (i=0, n=ops.length; i<n; ++i) {\n    t = ops[i];\n    m = t.metadata;\n\n    if (!source && !m.source) {\n      output.push(source = collect());\n    }\n    output.push(t);\n\n    if (m.generates) generate = true;\n    if (m.modifies && !generate) modify = true;\n\n    if (m.source) source = t;\n    else if (m.changes) source = null;\n  }\n\n  if (upstream) {\n    output[0] = Relay$1({derive: modify, pulse: ref(upstream.output)});\n    if (modify) output.splice(1, 0, collect()); // collect derived tuples\n  }\n\n  if (!source) output.push(collect());\n  output.push(Sieve$1({}));\n  return output;\n}\n\nfunction collect(values) {\n  var s = Collect$1({}, values);\n  return s.metadata = {source: true}, s;\n}\n\nfunction axisConfig(spec, scope) {\n  var config = scope.config,\n      orient = spec.orient,\n      xy = (orient === Top || orient === Bottom) ? config.axisX : config.axisY,\n      or = config['axis' + orient[0].toUpperCase() + orient.slice(1)],\n      band = scope.scaleType(spec.scale) === 'band' && config.axisBand;\n\n  return (xy || or || band)\n    ? extend({}, config.axis, xy, or, band)\n    : config.axis;\n}\n\nfunction axisDomain(spec, config, userEncode, dataRef) {\n  var orient = spec.orient,\n      zero = {value: 0},\n      encode = {}, enter, update, u, u2, v;\n\n  encode.enter = enter = {\n    opacity: zero\n  };\n  addEncode(enter, 'stroke', config.domainColor);\n  addEncode(enter, 'strokeWidth', config.domainWidth);\n\n  encode.exit = {\n    opacity: zero\n  };\n\n  encode.update = update = {\n    opacity: {value: 1}\n  };\n\n  (orient === Top || orient === Bottom)\n    ? (u = 'x', v = 'y')\n    : (u = 'y', v = 'x');\n  u2 = u + '2',\n\n  enter[v] = zero;\n  update[u] = enter[u] = position(spec, 0);\n  update[u2] = enter[u2] = position(spec, 1);\n\n  return guideMark(RuleMark, AxisDomainRole, null, dataRef, encode, userEncode);\n}\n\nfunction position(spec, pos) {\n  return {scale: spec.scale, range: pos};\n}\n\nfunction axisGrid(spec, config, userEncode, dataRef) {\n  var orient = spec.orient,\n      vscale = spec.gridScale,\n      sign = (orient === Left || orient === Top) ? 1 : -1,\n      offset = sign * spec.offset || 0,\n      zero = {value: 0},\n      encode = {}, enter, exit, update, tickPos, u, v, v2, s;\n\n  encode.enter = enter = {\n    opacity: zero\n  };\n  addEncode(enter, 'stroke', config.gridColor);\n  addEncode(enter, 'strokeWidth', config.gridWidth);\n  addEncode(enter, 'strokeDash', config.gridDash);\n\n  encode.exit = exit = {\n    opacity: zero\n  };\n\n  encode.update = update = {};\n  addEncode(update, 'opacity', config.gridOpacity);\n\n  tickPos = {\n    scale:  spec.scale,\n    field:  Value,\n    band:   config.bandPosition,\n    round:  config.tickRound,\n    extra:  config.tickExtra\n  };\n\n  (orient === Top || orient === Bottom)\n    ? (u = 'x', v = 'y', s = 'height')\n    : (u = 'y', v = 'x', s = 'width');\n  v2 = v + '2',\n\n  update[u] = enter[u] = exit[u] = tickPos;\n\n  if (vscale) {\n    enter[v] = {scale: vscale, range: 0, mult: sign, offset: offset};\n    update[v2] = enter[v2] = {scale: vscale, range: 1, mult: sign, offset: offset};\n  } else {\n    enter[v] = {value: offset};\n    update[v2] = enter[v2] = {signal: s, mult: sign, offset: offset};\n  }\n\n  return guideMark(RuleMark, AxisGridRole, Value, dataRef, encode, userEncode);\n}\n\nfunction axisTicks(spec, config, userEncode, dataRef, size) {\n  var orient = spec.orient,\n      sign = (orient === Left || orient === Top) ? -1 : 1,\n      zero = {value: 0},\n      encode = {}, enter, exit, update, tickSize, tickPos;\n\n  encode.enter = enter = {\n    opacity: zero\n  };\n  addEncode(enter, 'stroke', config.tickColor);\n  addEncode(enter, 'strokeWidth', config.tickWidth);\n\n  encode.exit = exit = {\n    opacity: zero\n  };\n\n  encode.update = update = {\n    opacity: {value: 1}\n  };\n\n  tickSize = encoder(size);\n  tickSize.mult = sign;\n\n  tickPos = {\n    scale:  spec.scale,\n    field:  Value,\n    band:   config.bandPosition,\n    round:  config.tickRound,\n    extra:  config.tickExtra\n  };\n\n  if (orient === Top || orient === Bottom) {\n    update.y = enter.y = zero;\n    update.y2 = enter.y2 = tickSize;\n    update.x = enter.x = exit.x = tickPos;\n  } else {\n    update.x = enter.x = zero;\n    update.x2 = enter.x2 = tickSize;\n    update.y = enter.y = exit.y = tickPos;\n  }\n\n  return guideMark(RuleMark, AxisTickRole, Value, dataRef, encode, userEncode);\n}\n\nfunction axisLabels(spec, config, userEncode, dataRef, size) {\n  var orient = spec.orient,\n      sign = (orient === Left || orient === Top) ? -1 : 1,\n      pad = spec.labelPadding != null ? spec.labelPadding : config.labelPadding,\n      zero = {value: 0},\n      encode = {}, enter, exit, update, tickSize, tickPos;\n\n  encode.enter = enter = {\n    opacity: zero\n  };\n  addEncode(enter, 'angle', config.labelAngle);\n  addEncode(enter, 'fill', config.labelColor);\n  addEncode(enter, 'font', config.labelFont);\n  addEncode(enter, 'fontSize', config.labelFontSize);\n  addEncode(enter, 'limit', config.labelLimit);\n\n  encode.exit = exit = {\n    opacity: zero\n  };\n\n  encode.update = update = {\n    opacity: {value: 1},\n    text: {field: Label}\n  };\n\n  tickSize = encoder(size);\n  tickSize.mult = sign;\n  tickSize.offset = encoder(pad);\n  tickSize.offset.mult = sign;\n\n  tickPos = {\n    scale: spec.scale,\n    field: Value,\n    band: 0.5\n  };\n\n  if (orient === Top || orient === Bottom) {\n    update.y = enter.y = tickSize;\n    update.x = enter.x = exit.x = tickPos;\n    addEncode(update, 'align', 'center');\n    addEncode(update, 'baseline', orient === Top ? 'bottom' : 'top');\n  } else {\n    update.x = enter.x = tickSize;\n    update.y = enter.y = exit.y = tickPos;\n    addEncode(update, 'align', orient === Right ? 'left' : 'right');\n    addEncode(update, 'baseline', 'middle');\n  }\n\n  return guideMark(TextMark, AxisLabelRole, Value, dataRef, encode, userEncode);\n}\n\nfunction axisTitle(spec, config, userEncode, dataRef) {\n  var orient = spec.orient,\n      title = spec.title,\n      sign = (orient === Left || orient === Top) ? -1 : 1,\n      horizontal = (orient === Top || orient === Bottom),\n      encode = {}, enter, update, titlePos;\n\n  encode.enter = enter = {\n    opacity: {value: 0}\n  };\n  addEncode(enter, 'align', config.titleAlign);\n  addEncode(enter, 'fill', config.titleColor);\n  addEncode(enter, 'font', config.titleFont);\n  addEncode(enter, 'fontSize', config.titleFontSize);\n  addEncode(enter, 'fontWeight', config.titleFontWeight);\n  addEncode(enter, 'limit', config.titleLimit);\n\n  encode.exit = {\n    opacity: {value: 0}\n  };\n\n  encode.update = update = {\n    opacity: {value: 1},\n    text: title && title.signal ? {signal: title.signal} : {value: title + ''}\n  };\n\n  titlePos = {\n    scale: spec.scale,\n    range: 0.5\n  };\n\n  if (horizontal) {\n    update.x = titlePos;\n    update.angle = {value: 0};\n    update.baseline = {value: orient === Top ? 'bottom' : 'top'};\n  } else {\n    update.y = titlePos;\n    update.angle = {value: sign * 90};\n    update.baseline = {value: 'bottom'};\n  }\n\n  addEncode(update, 'angle', config.titleAngle);\n  addEncode(update, 'baseline', config.titleBaseline);\n\n  !addEncode(update, 'x', config.titleX)\n    && horizontal && !has(userEncode, 'x')\n    && (encode.enter.auto = {value: true});\n\n  !addEncode(update, 'y', config.titleY)\n    && !horizontal && !has(userEncode, 'y')\n    && (encode.enter.auto = {value: true});\n\n  return guideMark(TextMark, AxisTitleRole, null, dataRef, encode, userEncode);\n}\n\nfunction parseAxis(spec, scope) {\n  var config = axisConfig(spec, scope),\n      name = spec.name || undefined,\n      encode = spec.encode || {},\n      interactive = !!spec.interactive,\n      datum, dataRef, ticksRef, size, group, axisEncode, children;\n\n  // single-element data source for axis group\n  datum = {\n    orient: spec.orient,\n    ticks:  spec.ticks  != null ? !!spec.ticks  : config.ticks,\n    labels: spec.labels != null ? !!spec.labels : config.labels,\n    grid:   spec.grid   != null ? !!spec.grid   : config.grid,\n    domain: spec.domain != null ? !!spec.domain : config.domain,\n    title:  spec.title  != null\n  };\n  dataRef = ref(scope.add(Collect$1({}, [datum])));\n\n  // encoding properties for axis group item\n  axisEncode = extendEncode({\n    update: {\n      range:        {signal: 'abs(span(range(\"' + spec.scale + '\")))'},\n      offset:       encoder(spec.offset || 0),\n      position:     encoder(spec.position || 0),\n      titlePadding: encoder(spec.titlePadding || config.titlePadding),\n      minExtent:    encoder(spec.minExtent || config.minExtent),\n      maxExtent:    encoder(spec.maxExtent || config.maxExtent)\n    }\n  }, encode.axis);\n\n  // data source for axis ticks\n  ticksRef = ref(scope.add(AxisTicks$1({\n    scale:  scope.scaleRef(spec.scale),\n    extra:  config.tickExtra,\n    count:  scope.property(spec.tickCount),\n    values: scope.objectProperty(spec.values),\n    formatSpecifier: scope.property(spec.format)\n  })));\n\n  // generate axis marks\n  children = [];\n\n  // include axis gridlines if requested\n  if (datum.grid) {\n    children.push(axisGrid(spec, config, encode.grid, ticksRef));\n  }\n\n  // include axis ticks if requested\n  if (datum.ticks) {\n    size = spec.tickSize != null ? spec.tickSize : config.tickSize;\n    children.push(axisTicks(spec, config, encode.ticks, ticksRef, size));\n  }\n\n  // include axis labels if requested\n  if (datum.labels) {\n    size = datum.ticks ? size : 0;\n    children.push(axisLabels(spec, config, encode.labels, ticksRef, size));\n  }\n\n  // include axis domain path if requested\n  if (datum.domain) {\n    children.push(axisDomain(spec, config, encode.domain, dataRef));\n  }\n\n  // include axis title if defined\n  if (datum.title) {\n    children.push(axisTitle(spec, config, encode.title, dataRef));\n  }\n\n  // build axis specification\n  group = guideGroup(AxisRole$2, name, dataRef, interactive, axisEncode, children);\n  if (spec.zindex) group.zindex = spec.zindex;\n\n  // parse axis specification\n  return parseMark(group, scope);\n}\n\nfunction parseSpec(spec, scope, preprocessed) {\n  var signals = array(spec.signals),\n      scales = array(spec.scales);\n\n  if (!preprocessed) signals.forEach(function(_) {\n    parseSignal(_, scope);\n  });\n\n  array(spec.projections).forEach(function(_) {\n    parseProjection(_, scope);\n  });\n\n  scales.forEach(function(_) {\n    initScale(_, scope);\n  });\n\n  array(spec.data).forEach(function(_) {\n    parseData$1(_, scope);\n  });\n\n  scales.forEach(function(_) {\n    parseScale(_, scope);\n  });\n\n  signals.forEach(function(_) {\n    parseSignalUpdates(_, scope);\n  });\n\n  array(spec.axes).forEach(function(_) {\n    parseAxis(_, scope);\n  });\n\n  array(spec.marks).forEach(function(_) {\n    parseMark(_, scope);\n  });\n\n  array(spec.legends).forEach(function(_) {\n    parseLegend(_, scope);\n  });\n\n  if (spec.title) {\n    parseTitle(spec.title, scope);\n  }\n\n  return scope.parseLambdas(), scope;\n}\n\nvar defined = toSet(['width', 'height', 'padding']);\n\nfunction parseView(spec, scope) {\n  var config = scope.config,\n      op, input, encode, parent, root;\n\n  scope.background = spec.background || config.background;\n  root = ref(scope.root = scope.add(operator()));\n  scope.addSignal('width', spec.width || -1);\n  scope.addSignal('height', spec.height || -1);\n  scope.addSignal('padding', parsePadding(spec.padding, config));\n\n  array(spec.signals).forEach(function(_) {\n    if (!defined[_.name]) parseSignal(_, scope);\n  });\n\n  // Store root group item\n  input = scope.add(Collect$1());\n\n  // Encode root group item\n  encode = extendEncode({\n    enter: { x: {value: 0}, y: {value: 0} },\n    update: { width: {signal: 'width'}, height: {signal: 'height'} }\n  }, spec.encode);\n\n  encode = scope.add(Encode$1(\n    encoders(encode, GroupMark, FrameRole$1, scope, {pulse: ref(input)}))\n  );\n\n  // Perform view layout\n  parent = scope.add(ViewLayout$1({\n    layout:       scope.objectProperty(spec.layout),\n    legendMargin: config.legendMargin,\n    autosize:     parseAutosize(spec.autosize, config),\n    mark:         root,\n    pulse:        ref(encode)\n  }));\n  scope.operators.pop();\n\n  // Parse remainder of specification\n  scope.pushState(ref(encode), ref(parent), null);\n  parseSpec(spec, scope, true);\n  scope.operators.push(parent);\n\n  // Bound / render / sieve root item\n  op = scope.add(Bound$1({mark: root, pulse: ref(parent)}));\n  op = scope.add(Render$1({pulse: ref(op)}));\n  op = scope.add(Sieve$1({pulse: ref(op)}));\n\n  // Track metadata for root item\n  scope.addData('root', new DataScope(scope, input, input, op));\n\n  return scope;\n}\n\nfunction Scope(config) {\n  this.config = config;\n\n  this.bindings = [];\n  this.field = {};\n  this.signals = {};\n  this.lambdas = {};\n  this.scales = {};\n  this.events = {};\n  this.data = {};\n\n  this.streams = [];\n  this.updates = [];\n  this.operators = [];\n  this.background = null;\n\n  this._id = 0;\n  this._subid = 0;\n  this._nextsub = [0];\n\n  this._parent = [];\n  this._encode = [];\n  this._lookup = [];\n  this._markpath = [];\n}\n\nfunction Subscope(scope) {\n  this.config = scope.config;\n\n  this.field = Object.create(scope.field);\n  this.signals = Object.create(scope.signals);\n  this.lambdas = Object.create(scope.lambdas);\n  this.scales = Object.create(scope.scales);\n  this.events = Object.create(scope.events);\n  this.data = Object.create(scope.data);\n\n  this.streams = [];\n  this.updates = [];\n  this.operators = [];\n\n  this._id = 0;\n  this._subid = ++scope._nextsub[0];\n  this._nextsub = scope._nextsub;\n\n  this._parent = scope._parent.slice();\n  this._encode = scope._encode.slice();\n  this._lookup = scope._lookup.slice();\n  this._markpath = scope._markpath;\n}\n\nvar prototype$73 = Scope.prototype = Subscope.prototype;\n\n// ----\n\nprototype$73.fork = function() {\n  return new Subscope(this);\n};\n\nprototype$73.toRuntime = function() {\n  return this.finish(), {\n    background: this.background,\n    operators:  this.operators,\n    streams:    this.streams,\n    updates:    this.updates,\n    bindings:   this.bindings\n  };\n};\n\nprototype$73.id = function() {\n  return (this._subid ? this._subid + ':' : 0) + this._id++;\n};\n\nprototype$73.add = function(op) {\n  this.operators.push(op);\n  op.id = this.id();\n  // if pre-registration references exist, resolve them now\n  if (op.refs) {\n    op.refs.forEach(function(ref) { ref.$ref = op.id; });\n    op.refs = null;\n  }\n  return op;\n};\n\nprototype$73.proxy = function(op) {\n  var vref = op instanceof Entry ? ref(op) : op;\n  return this.add(Proxy$1({value: vref}));\n};\n\nprototype$73.addStream = function(stream) {\n  return this.streams.push(stream), stream.id = this.id(), stream;\n};\n\nprototype$73.addUpdate = function(update) {\n  return this.updates.push(update), update;\n};\n\n// Apply metadata\nprototype$73.finish = function() {\n  var name, ds;\n\n  // annotate root\n  if (this.root) this.root.root = true;\n\n  // annotate signals\n  for (name in this.signals) {\n    this.signals[name].signal = name;\n  }\n\n  // annotate scales\n  for (name in this.scales) {\n    this.scales[name].scale = name;\n  }\n\n  // annotate data sets\n  function annotate(op, name, type) {\n    var data, list;\n    if (op) {\n      data = op.data || (op.data = {});\n      list = data[name] || (data[name] = []);\n      list.push(type);\n    }\n  }\n  for (name in this.data) {\n    ds = this.data[name];\n    annotate(ds.input,  name, 'input');\n    annotate(ds.output, name, 'output');\n    annotate(ds.values, name, 'values');\n    for (var field in ds.index) {\n      annotate(ds.index[field], name, 'index:' + field);\n    }\n  }\n\n  return this;\n};\n\n// ----\n\nprototype$73.pushState = function(encode, parent, lookup) {\n  this._encode.push(ref(this.add(Sieve$1({pulse: encode}))));\n  this._parent.push(parent);\n  this._lookup.push(lookup ? ref(this.proxy(lookup)) : null);\n  this._markpath.push(-1);\n};\n\nprototype$73.popState = function() {\n  this._encode.pop();\n  this._parent.pop();\n  this._lookup.pop();\n  this._markpath.pop();\n};\n\nprototype$73.parent = function() {\n  return peek(this._parent);\n};\n\nprototype$73.encode = function() {\n  return peek(this._encode);\n};\n\nprototype$73.lookup = function() {\n  return peek(this._lookup);\n};\n\nprototype$73.markpath = function() {\n  var p = this._markpath;\n  return ++p[p.length-1];\n};\n\n// ----\n\nprototype$73.fieldRef = function(field, name) {\n  if (isString(field)) return fieldRef$1(field, name);\n  if (!field.signal) {\n    error('Unsupported field reference: ' + $$2(field));\n  }\n\n  var s = field.signal,\n      f = this.field[s],\n      params;\n\n  if (!f) { // TODO: replace with update signalRef?\n    params = {name: this.signalRef(s)}\n    if (name) params.as = name;\n    this.field[s] = f = ref(this.add(Field$1(params)));\n  }\n  return f;\n};\n\nprototype$73.compareRef = function(cmp) {\n  function check(_) {\n    return isSignal(_) ? (signal = true, ref(sig[_.signal])) : _;\n  }\n\n  var sig = this.signals,\n      signal = false,\n      fields = array(cmp.field).map(check),\n      orders = array(cmp.order).map(check);\n\n  return signal\n    ? ref(this.add(Compare$1({fields: fields, orders: orders})))\n    : compareRef(fields, orders);\n};\n\nprototype$73.keyRef = function(fields) {\n  function check(_) {\n    return isSignal(_) ? (signal = true, ref(sig[_.signal])) : _;\n  }\n\n  var sig = this.signals,\n      signal = false;\n  fields = array(fields).map(check);\n\n  return signal\n    ? ref(this.add(Key$1({fields: fields})))\n    : keyRef(fields);\n};\n\nprototype$73.sortRef = function(sort) {\n  if (!sort) return sort;\n\n  // including id ensures stable sorting\n  // TODO review? enable multi-field sorts?\n  var a = [aggrField(sort.op, sort.field), '_id'],\n      o = sort.order || Ascending;\n\n  return o.signal\n    ? ref(this.add(Compare$1({\n        fields: a,\n        orders: [o = this.signalRef(o.signal), o]\n      })))\n    : compareRef(a, [o, o]);\n};\n\n// ----\n\nprototype$73.event = function(source, type) {\n  var key = source + ':' + type;\n  if (!this.events[key]) {\n    var id = this.id();\n    this.streams.push({\n      id: id,\n      source: source,\n      type: type\n    });\n    this.events[key] = id;\n  }\n  return this.events[key];\n};\n\n// ----\n\nprototype$73.addSignal = function(name, value) {\n  if (this.signals.hasOwnProperty(name)) {\n    error('Duplicate signal name: ' + $$2(name));\n  }\n  var op = value instanceof Entry ? value : this.add(operator(value));\n  return this.signals[name] = op;\n};\n\nprototype$73.getSignal = function(name) {\n  if (!this.signals[name]) {\n    error('Unrecognized signal name: ' + $$2(name));\n  }\n  return this.signals[name];\n};\n\nprototype$73.signalRef = function(s) {\n  if (this.signals[s]) {\n    return ref(this.signals[s]);\n  } else if (!this.lambdas[s]) {\n    this.lambdas[s] = this.add(operator(null));\n  }\n  return ref(this.lambdas[s]);\n};\n\nprototype$73.parseLambdas = function() {\n  var code = Object.keys(this.lambdas);\n  for (var i=0, n=code.length; i<n; ++i) {\n    var s = code[i],\n        e = parseExpression(s, this),\n        op = this.lambdas[s];\n    op.params = e.$params;\n    op.update = e.$expr;\n  }\n};\n\nprototype$73.property = function(spec) {\n  return spec && spec.signal ? this.signalRef(spec.signal) : spec;\n};\n\nprototype$73.objectProperty = function(spec) {\n  return (!spec || !isObject(spec)) ? spec\n    : this.signalRef(spec.signal || propertyLambda(spec));\n};\n\nfunction propertyLambda(spec) {\n  return (isArray(spec) ? arrayLambda : objectLambda)(spec);\n}\n\nfunction arrayLambda(array) {\n  var code = '[',\n      i = 0,\n      n = array.length,\n      value;\n\n  for (; i<n; ++i) {\n    value = array[i];\n    code += (i > 0 ? ',' : '')\n      + (isObject(value)\n        ? (value.signal || propertyLambda(value))\n        : $$2(value));\n  }\n  return code + ']';\n}\n\nfunction objectLambda(obj) {\n  var code = '{',\n      i = 0,\n      key, value;\n\n  for (key in obj) {\n    value = obj[key];\n    code += (++i > 1 ? ',' : '')\n      + $$2(key) + ':'\n      + (isObject(value)\n        ? (value.signal || propertyLambda(value))\n        : $$2(value));\n  }\n  return code + '}';\n}\n\nprototype$73.addBinding = function(name, bind) {\n  if (!this.bindings) {\n    error('Nested signals do not support binding: ' + $$2(name));\n  }\n  this.bindings.push(extend({signal: name}, bind));\n};\n\n// ----\n\nprototype$73.addScaleProj = function(name, transform) {\n  if (this.scales.hasOwnProperty(name)) {\n    error('Duplicate scale or projection name: ' + $$2(name));\n  }\n  this.scales[name] = this.add(transform);\n}\n\nprototype$73.addScale = function(name, params) {\n  this.addScaleProj(name, Scale$1(params));\n};\n\nprototype$73.addProjection = function(name, params) {\n  this.addScaleProj(name, Projection$1(params));\n};\n\nprototype$73.getScale = function(name) {\n  if (!this.scales[name]) {\n    error('Unrecognized scale name: ' + $$2(name));\n  }\n  return this.scales[name];\n};\n\nprototype$73.projectionRef =\nprototype$73.scaleRef = function(name) {\n  return ref(this.getScale(name));\n};\n\nprototype$73.projectionType =\nprototype$73.scaleType = function(name) {\n  return this.getScale(name).params.type;\n};\n\n// ----\n\nprototype$73.addData = function(name, dataScope) {\n  if (this.data.hasOwnProperty(name)) {\n    error('Duplicate data set name: ' + $$2(name));\n  }\n  return (this.data[name] = dataScope);\n};\n\nprototype$73.getData = function(name) {\n  if (!this.data[name]) {\n    error('Undefined data set name: ' + $$2(name));\n  }\n  return this.data[name];\n};\n\nprototype$73.addDataPipeline = function(name, entries) {\n  if (this.data.hasOwnProperty(name)) {\n    error('Duplicate data set name: ' + $$2(name));\n  }\n  return this.addData(name, DataScope.fromEntries(this, entries));\n};\n\nfunction defaults(userConfig) {\n  var config = defaults$1(), key;\n  for (key in userConfig) {\n    config[key] = isObject(config[key])\n      ? extend(config[key], userConfig[key])\n      : config[key] = userConfig[key];\n  }\n  return config;\n}\n\nvar defaultSymbolSize = 30;\nvar defaultStrokeWidth = 2;\nvar defaultColor = '#4c78a8';\nvar black = \"#000\";\nvar gray = '#888';\nvar lightGray = '#ddd';\n/**\n * Standard configuration defaults for Vega specification parsing.\n * Users can provide their own (sub-)set of these default values\n * by passing in a config object to the top-level parse method.\n */\nfunction defaults$1() {\n  return {\n    // default padding around visualization\n    padding: 0,\n\n    // default for automatic sizing; options: \"none\", \"pad\", \"fit\"\n    // or provide an object (e.g., {\"type\": \"pad\", \"resize\": true})\n    autosize: 'pad',\n\n    // default view background color\n    // covers the entire view component\n    background: null,\n\n    // defaults for top-level group marks\n    // accepts mark properties (fill, stroke, etc)\n    // covers the data rectangle within group width/height\n    group: null,\n\n    // defaults for basic mark types\n    // each subset accepts mark properties (fill, stroke, etc)\n    mark: null,\n    arc: { fill: defaultColor },\n    area: { fill: defaultColor },\n    image: null,\n    line: {\n      stroke: defaultColor,\n      strokeWidth: defaultStrokeWidth\n    },\n    path: { stroke: defaultColor },\n    rect: { fill: defaultColor },\n    rule: { stroke: black },\n    shape: { stroke: defaultColor },\n    symbol: {\n      fill: defaultColor,\n      size: 64\n    },\n    text: {\n      fill: black,\n      font: 'sans-serif',\n      fontSize: 11\n    },\n\n    // defaults for marks using special roles\n    point: {\n      size: defaultSymbolSize,\n      strokeWidth: defaultStrokeWidth,\n      shape: 'circle'\n    },\n    circle: {\n      size: defaultSymbolSize,\n      strokeWidth: defaultStrokeWidth\n    },\n    square: {\n      size: defaultSymbolSize,\n      strokeWidth: defaultStrokeWidth\n    },\n\n    // defaults for axes\n    axis: {\n      minExtent: 0,\n      maxExtent: 200,\n      bandPosition: 0.5,\n      domain: true,\n      domainWidth: 1,\n      domainColor: black,\n      grid: false,\n      gridWidth: 1,\n      gridColor: lightGray,\n      gridDash: [],\n      gridOpacity: 1,\n      labels: true,\n      labelAngle: 0,\n      labelColor: black,\n      labelFont: 'sans-serif',\n      labelFontSize: 10,\n      labelPadding: 2,\n      labelLimit: 180,\n      ticks: true,\n      tickRound: true,\n      tickSize: 5,\n      tickWidth: 1,\n      tickColor: black,\n      titleAlign: 'center',\n      titlePadding: 2,\n      titleColor: black,\n      titleFont: 'sans-serif',\n      titleFontSize: 11,\n      titleFontWeight: 'bold'\n    },\n\n    // defaults for legends\n    legend: {\n      orient: 'right',\n      offset: 18,\n      padding: 0,\n      entryPadding: 5,\n      titlePadding: 5,\n      gradientWidth: 100,\n      gradientHeight: 20,\n      gradientStrokeColor: lightGray,\n      gradientStrokeWidth: 0,\n      gradientLabelBaseline: 'top',\n      gradientLabelOffset: 2,\n      labelColor: black,\n      labelFontSize: 10,\n      labelFont: 'sans-serif',\n      labelAlign: 'left',\n      labelBaseline: 'middle',\n      labelOffset: 8,\n      labelLimit: 160,\n      symbolType: 'circle',\n      symbolSize: 100,\n      symbolColor: gray,\n      symbolStrokeWidth: 1.5,\n      titleColor: black,\n      titleFont: 'sans-serif',\n      titleFontSize: 11,\n      titleFontWeight: 'bold',\n      titleAlign: 'left',\n      titleBaseline: 'top',\n      titleLimit: 180\n    },\n\n    // defaults for group title\n    title: {\n      orient: 'top',\n      anchor: 'middle',\n      offset: 2,\n      color: black,\n      font: 'sans-serif',\n      fontSize: 13,\n      fontWeight: 'bold'\n    },\n\n    // defaults for scale ranges\n    range: {\n      category: {\n        scheme: 'tableau10'\n      },\n      ordinal: {\n        scheme: 'blues',\n        extent: [0.2, 1]\n      },\n      heatmap: {\n        scheme: 'viridis'\n      },\n      ramp: {\n        scheme: 'blues',\n        extent: [0.2, 1]\n      },\n      diverging: {\n        scheme: 'blueorange'\n      },\n      symbol: [\n        'circle',\n        'square',\n        'triangle-up',\n        'cross',\n        'diamond',\n        'triangle-right',\n        'triangle-down',\n        'triangle-left'\n      ]\n    }\n  };\n}\n\nfunction parse$2(spec, config) {\n  if (!isObject(spec)) error('Input Vega specification must be an object.');\n  return parseView(spec, new Scope(defaults(config || spec.config)))\n    .toRuntime();\n}\n\n/**\n * Parse an expression given the argument signature and body code.\n */\nfunction expression$1(args, code, ctx) {\n  // wrap code in return statement if expression does not terminate\n  if (code[code.length-1] !== ';') {\n    code = 'return(' + code + ');';\n  }\n  var fn = Function.apply(null, args.concat(code));\n  return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;\n}\n\n/**\n * Parse an expression used to update an operator value.\n */\nfunction operatorExpression(code, ctx) {\n  return expression$1(['_'], code, ctx);\n}\n\n/**\n * Parse an expression provided as an operator parameter value.\n */\nfunction parameterExpression(code, ctx) {\n  return expression$1(['datum', '_'], code, ctx);\n}\n\n/**\n * Parse an expression applied to an event stream.\n */\nfunction eventExpression(code, ctx) {\n  return expression$1(['event'], code, ctx);\n}\n\n/**\n * Parse an expression used to handle an event-driven operator update.\n */\nfunction handlerExpression(code, ctx) {\n  return expression$1(['_', 'event'], code, ctx);\n}\n\n/**\n * Parse an expression that performs visual encoding.\n */\nfunction encodeExpression(code, ctx) {\n  return expression$1(['item', '_'], code, ctx);\n}\n\n/**\n * Parse a set of operator parameters.\n */\nfunction parseParameters$1(spec, ctx, params) {\n  params = params || {};\n  var key, value;\n\n  for (key in spec) {\n    value = spec[key];\n\n    if (value && value.$expr && value.$params) {\n      // if expression, parse its parameters\n      parseParameters$1(value.$params, ctx, params);\n    }\n\n    params[key] = isArray(value)\n      ? value.map(function(v) { return parseParameter$2(v, ctx); })\n      : parseParameter$2(value, ctx);\n  }\n  return params;\n}\n\n/**\n * Parse a single parameter.\n */\nfunction parseParameter$2(spec, ctx) {\n  if (!spec || !isObject(spec)) return spec;\n\n  for (var i=0, n=PARSERS.length, p; i<n; ++i) {\n    p = PARSERS[i];\n    if (spec.hasOwnProperty(p.key)) {\n      return p.parse(spec, ctx);\n    }\n  }\n  return spec;\n}\n\n/** Reference parsers. */\nvar PARSERS = [\n  {key: '$ref',      parse: getOperator},\n  {key: '$key',      parse: getKey},\n  {key: '$expr',     parse: getExpression},\n  {key: '$field',    parse: getField$1},\n  {key: '$encode',   parse: getEncode},\n  {key: '$compare',  parse: getCompare},\n  {key: '$context',  parse: getContext},\n  {key: '$subflow',  parse: getSubflow}\n];\n\n/**\n * Resolve an operator reference.\n */\nfunction getOperator(_, ctx) {\n  return ctx.get(_.$ref) || error('Operator not defined: ' + _.$ref);\n}\n\n/**\n * Resolve an expression reference.\n */\nfunction getExpression(_, ctx) {\n  var k = 'e:' + _.$expr;\n  return ctx.fn[k]\n    || (ctx.fn[k] = accessor(parameterExpression(_.$expr, ctx), _.$fields, _.$name));\n}\n\n/**\n * Resolve a key accessor reference.\n */\nfunction getKey(_, ctx) {\n  var k = 'k:' + _.$key;\n  return ctx.fn[k] || (ctx.fn[k] = key(_.$key));\n}\n\n/**\n * Resolve a field accessor reference.\n */\nfunction getField$1(_, ctx) {\n  var k = 'f:' + _.$field + '_' + _.$name;\n  return ctx.fn[k] || (ctx.fn[k] = field(_.$field, _.$name));\n}\n\n/**\n * Resolve a comparator function reference.\n */\nfunction getCompare(_, ctx) {\n  var k = 'c:' + _.$compare + '_' + _.$order;\n  return ctx.fn[k] || (ctx.fn[k] = compare(_.$compare, _.$order));\n}\n\n/**\n * Resolve an encode operator reference.\n */\nfunction getEncode(_, ctx) {\n  var spec = _.$encode,\n      encode = {}, name, enc;\n\n  for (name in spec) {\n    enc = spec[name];\n    encode[name] = accessor(encodeExpression(enc.$expr, ctx), enc.$fields);\n    encode[name].output = enc.$output;\n  }\n  return encode;\n}\n\n/**\n * Resolve an context reference.\n */\nfunction getContext(_, ctx) {\n  return ctx;\n}\n\n/**\n * Resolve a recursive subflow specification.\n */\nfunction getSubflow(_, ctx) {\n  var spec = _.$subflow;\n  return function(dataflow, key, parent) {\n    var subctx = parseDataflow(spec, ctx.fork()),\n        op = subctx.get(spec.operators[0].id),\n        p = subctx.signals.parent;\n    if (p) p.set(parent);\n    return op;\n  };\n}\n\n/**\n * Parse a dataflow operator.\n */\nfunction parseOperator(spec, ctx) {\n  if (spec.type === 'Operator' || !spec.type) {\n    ctx.operator(spec,\n      spec.update ? operatorExpression(spec.update, ctx) : null);\n  } else {\n    ctx.transform(spec, spec.type);\n  }\n}\n\n/**\n * Parse and assign operator parameters.\n */\nfunction parseOperatorParameters(spec, ctx) {\n  var op, params;\n  if (spec.params) {\n    if (!(op = ctx.get(spec.id))) {\n      error('Invalid operator id: ' + spec.id);\n    }\n    params = parseParameters$1(spec.params, ctx);\n    ctx.dataflow.connect(op, op.parameters(params));\n  }\n}\n\n/**\n * Parse an event stream specification.\n */\nfunction parseStream$3(spec, ctx) {\n  var filter = spec.filter != null ? eventExpression(spec.filter, ctx) : undefined,\n      stream = spec.stream != null ? ctx.get(spec.stream) : undefined,\n      args;\n\n  if (spec.source) {\n    stream = ctx.events(spec.source, spec.type, filter);\n  }\n  else if (spec.merge) {\n    args = spec.merge.map(ctx.get.bind(ctx));\n    stream = args[0].merge.apply(args[0], args.slice(1));\n  }\n\n  if (spec.between) {\n    args = spec.between.map(ctx.get.bind(ctx));\n    stream = stream.between(args[0], args[1]);\n  }\n\n  if (spec.filter) {\n    stream = stream.filter(filter);\n  }\n\n  if (spec.throttle != null) {\n    stream = stream.throttle(+spec.throttle);\n  }\n\n  if (spec.debounce != null) {\n    stream = stream.debounce(+spec.debounce);\n  }\n\n  if (stream == null) {\n    error('Invalid stream definition: ' + JSON.stringify(spec));\n  }\n\n  if (spec.consume) stream.consume(true);\n\n  ctx.stream(spec, stream);\n}\n\n/**\n * Parse an event-driven operator update.\n */\nfunction parseUpdate$1(spec, ctx) {\n  var source = ctx.get(spec.source),\n      target = null,\n      update = spec.update,\n      params = undefined;\n\n  if (!source) error('Source not defined: ' + spec.source);\n\n  if (spec.target && spec.target.$expr) {\n    target = eventExpression(spec.target.$expr, ctx);\n  } else {\n    target = ctx.get(spec.target);\n  }\n\n  if (update && update.$expr) {\n    if (update.$params) {\n      params = parseParameters$1(update.$params, ctx);\n    }\n    update = handlerExpression(update.$expr, ctx);\n  }\n\n  ctx.update(spec, source, target, update, params);\n}\n\n/**\n * Parse a serialized dataflow specification.\n */\nfunction parseDataflow(spec, ctx) {\n  var operators = spec.operators || [];\n\n  // parse background\n  if (spec.background) {\n    ctx.background = spec.background;\n  }\n\n  // parse operators\n  operators.forEach(function(entry) {\n    parseOperator(entry, ctx);\n  });\n\n  // parse operator parameters\n  operators.forEach(function(entry) {\n    parseOperatorParameters(entry, ctx);\n  });\n\n  // parse streams\n  (spec.streams || []).forEach(function(entry) {\n    parseStream$3(entry, ctx);\n  });\n\n  // parse updates\n  (spec.updates || []).forEach(function(entry) {\n    parseUpdate$1(entry, ctx);\n  });\n\n  return ctx.resolve();\n}\n\nvar SKIP$3 = {skip: true};\n\nfunction getState(options) {\n  var ctx = this,\n      state = {};\n\n  if (options.signals) {\n    var signals = (state.signals = {});\n    Object.keys(ctx.signals).forEach(function(key) {\n      var op = ctx.signals[key];\n      if (options.signals(key, op)) {\n        signals[key] = op.value;\n      }\n    });\n  }\n\n  if (options.data) {\n    var data = (state.data = {});\n    Object.keys(ctx.data).forEach(function(key) {\n      var dataset = ctx.data[key];\n      if (options.data(key, dataset)) {\n        data[key] = dataset.input.value;\n      }\n    });\n  }\n\n  if (ctx.subcontext && options.recurse !== false) {\n    state.subcontext = ctx.subcontext.map(function(ctx) {\n      return ctx.getState(options);\n    });\n  }\n\n  return state;\n}\n\nfunction setState(state) {\n  var ctx = this,\n      df = ctx.dataflow,\n      data = state.data,\n      signals = state.signals;\n\n  Object.keys(signals || {}).forEach(function(key) {\n    df.update(ctx.signals[key], signals[key], SKIP$3);\n  });\n\n  Object.keys(data || {}).forEach(function(key) {\n    df.pulse(\n      ctx.data[key].input,\n      df.changeset().remove(truthy).insert(data[key])\n    );\n  });\n\n  (state.subcontext  || []).forEach(function(substate, i) {\n    var ctx = ctx.subcontext[i];\n    if (ctx) ctx.setState(substate);\n  });\n}\n\n/**\n * Context objects store the current parse state.\n * Enables lookup of parsed operators, event streams, accessors, etc.\n * Provides a 'fork' method for creating child contexts for subflows.\n */\nfunction context$2(df, transforms, functions) {\n  return new Context(df, transforms, functions);\n}\n\nfunction Context(df, transforms, functions) {\n  this.dataflow = df;\n  this.transforms = transforms;\n  this.events = df.events.bind(df);\n  this.signals = {};\n  this.scales = {};\n  this.nodes = {};\n  this.data = {};\n  this.fn = {};\n  if (functions) {\n    this.functions = Object.create(functions);\n    this.functions.context = this;\n  }\n}\n\nfunction ContextFork(ctx) {\n  this.dataflow = ctx.dataflow;\n  this.transforms = ctx.transforms;\n  this.functions = ctx.functions;\n  this.events = ctx.events;\n  this.signals = Object.create(ctx.signals);\n  this.scales = Object.create(ctx.scales);\n  this.nodes = Object.create(ctx.nodes);\n  this.data = Object.create(ctx.data);\n  this.fn = Object.create(ctx.fn);\n  if (ctx.functions) {\n    this.functions = Object.create(ctx.functions);\n    this.functions.context = this;\n  }\n}\n\nContext.prototype = ContextFork.prototype = {\n  fork: function() {\n    var ctx = new ContextFork(this);\n    (this.subcontext || (this.subcontext = [])).push(ctx);\n    return ctx;\n  },\n  get: function(id) {\n    return this.nodes[id];\n  },\n  set: function(id, node) {\n    return this.nodes[id] = node;\n  },\n  add: function(spec, op) {\n    var ctx = this,\n        df = ctx.dataflow,\n        data;\n\n    ctx.set(spec.id, op);\n\n    if (spec.type === 'Collect' && (data = spec.value)) {\n      if (data.$ingest) {\n        df.ingest(op, data.$ingest, data.$format);\n      } else if (data.$request) {\n        df.request(op, data.$request, data.$format);\n      } else {\n        df.pulse(op, df.changeset().insert(data));\n      }\n    }\n\n    if (spec.root) {\n      ctx.root = op;\n    }\n\n    if (spec.parent) {\n      var p = ctx.get(spec.parent.$ref);\n      if (p) {\n        df.connect(p, [op]);\n        op.targets().add(p);\n      } else {\n        (ctx.unresolved = ctx.unresolved || []).push(function() {\n          p = ctx.get(spec.parent.$ref);\n          df.connect(p, [op]);\n          op.targets().add(p);\n        });\n      }\n    }\n\n    if (spec.signal) {\n      ctx.signals[spec.signal] = op;\n    }\n\n    if (spec.scale) {\n      ctx.scales[spec.scale] = op;\n    }\n\n    if (spec.data) {\n      for (var name in spec.data) {\n        data = ctx.data[name] || (ctx.data[name] = {});\n        spec.data[name].forEach(function(role) { data[role] = op; });\n      }\n    }\n  },\n  resolve: function() {\n    (this.unresolved || []).forEach(function(fn) { fn(); });\n    delete this.unresolved;\n    return this;\n  },\n  operator: function(spec, update, params) {\n    this.add(spec, this.dataflow.add(spec.value, update, params, spec.react));\n  },\n  transform: function(spec, type, params) {\n    this.add(spec, this.dataflow.add(this.transforms[type], params));\n  },\n  stream: function(spec, stream) {\n    this.set(spec.id, stream);\n  },\n  update: function(spec, stream, target, update, params) {\n    this.dataflow.on(stream, target, update, params, spec.options);\n  },\n  getState: getState,\n  setState: setState\n};\n\nfunction runtime(view, spec, functions) {\n  var fn = functions || functionContext;\n  return parseDataflow(spec, context$2(view, transforms, fn));\n}\n\nfunction resizer(view, field) {\n  var op = view.add(null,\n    function(_) {\n      view['_' + field] = _.size;\n      view._autosize = view._resize = 1;\n    },\n    {size: view._signals[field]}\n  );\n  // set rank to ensure operator runs as soon as possible\n  // size parameters should be reset prior to view layout\n  return op.rank = 0, op;\n}\n\nfunction autosize(viewWidth, viewHeight, width, height, origin, auto) {\n  this.runAfter(function(view) {\n    var rerun = 0;\n\n    // reset autosize flag\n    view._autosize = 0;\n\n    // width value changed: update signal, skip resize op\n    if (view.width() !== width) {\n      rerun = 1;\n      view.width(width);\n      view._resizeWidth.skip(true);\n    }\n\n    // height value changed: update signal, skip resize op\n    if (view.height() !== height) {\n      rerun = 1;\n      view.height(height);\n      view._resizeHeight.skip(true);\n    }\n\n    // view width changed: update view property, set resize flag\n    if (view._width !== viewWidth) {\n      view._resize = 1;\n      view._width = viewWidth;\n    }\n\n    // view height changed: update view property, set resize flag\n    if (view._height !== viewHeight) {\n      view._resize = 1;\n      view._height = viewHeight;\n    }\n\n    // origin changed: update view property, set resize flag\n    if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {\n      view._resize = 1;\n      view._origin = origin;\n    }\n\n    // run dataflow on width/height signal change\n    if (rerun) view.run('enter');\n    if (auto) view.runAfter(function() { view._autosize = 1; });\n  });\n}\n\n/**\n * Get the current view state, consisting of signal values and/or data sets.\n * @param {object} [options] - Options flags indicating which state to export.\n *   If unspecified, all signals and data sets will be exported.\n * @param {function(string, Operator):boolean} [options.signals] - Optional\n *   predicate function for testing if a signal should be included in the\n *   exported state. If unspecified, all signals will be included, except for\n *   those named 'parent' or those which refer to a Transform value.\n * @param {function(string, object):boolean} [options.data] - Optional\n *   predicate function for testing if a data set's input should be included\n *   in the exported state. If unspecified, all data sets that have been\n *   explicitly modified will be included.\n * @param {boolean} [options.recurse=true] - Flag indicating if the exported\n *   state should recursively include state from group mark sub-contexts.\n * @return {object} - An object containing the exported state values.\n */\nfunction getState$1(options) {\n  return this._runtime.getState(options || {\n    data:    dataTest,\n    signals: signalTest,\n    recurse: true\n  });\n}\n\nfunction dataTest(name, data) {\n  return data.modified\n      && isArray(data.input.value)\n      && name.indexOf('_:vega:_');\n}\n\nfunction signalTest(name, op) {\n  return !(name === 'parent' || op instanceof transforms.Proxy);\n}\n\n/**\n * Sets the current view state and updates the view by invoking run.\n * @param {object} state - A state object containing signal and/or\n *   data set values, following the format used by the getState method.\n * @return {View} - This view instance.\n */\nfunction setState$1(state) {\n  var view = this;\n  view._trigger = false;\n  view._runtime.setState(state);\n  view.run().runAfter(function() { view._trigger = true; });\n  return this;\n}\n\n/**\n * Create a new View instance from a Vega dataflow runtime specification.\n * The generated View will not immediately be ready for display. Callers\n * should also invoke the initialize method (e.g., to set the parent\n * DOM element in browser-based deployment) and then invoke the run\n * method to evaluate the dataflow graph. Rendering will automatically\n * be peformed upon dataflow runs.\n * @constructor\n * @param {object} spec - The Vega dataflow runtime specification.\n */\nfunction View(spec, options) {\n  options = options || {};\n\n  Dataflow.call(this);\n  this.loader(options.loader || this._loader);\n  this.logLevel(options.logLevel || 0);\n\n  this._el = null;\n  this._renderType = options.renderer || RenderType.Canvas;\n  this._scenegraph = new Scenegraph();\n  var root = this._scenegraph.root;\n\n  // initialize renderer, handler and event management\n  this._renderer = null;\n  this._redraw = true;\n  this._handler = new CanvasHandler().scene(root);\n  this._eventListeners = [];\n  this._preventDefault = true;\n\n  // initialize dataflow graph\n  var ctx = runtime(this, spec, options.functions);\n  this._runtime = ctx;\n  this._signals = ctx.signals;\n  this._bind = (spec.bindings || []).map(function(_) {\n    return {\n      state: null,\n      param: extend({}, _)\n    };\n  });\n\n  // initialize scenegraph\n  if (ctx.root) ctx.root.set(root);\n  root.source = ctx.data.root.input;\n  this.pulse(\n    ctx.data.root.input,\n    this.changeset().insert(root.items)\n  );\n\n  // initialize background color\n  this._background = ctx.background || null;\n\n  // initialize view size\n  this._width = this.width();\n  this._height = this.height();\n  this._origin = [0, 0];\n  this._resize = 0;\n  this._autosize = 1;\n\n  // initialize resize operators\n  this._resizeWidth = resizer(this, 'width');\n  this._resizeHeight = resizer(this, 'height');\n\n  // initialize cursor\n  cursor(this);\n}\n\nvar prototype$71 = inherits(View, Dataflow);\n\n// -- DATAFLOW / RENDERING ----\n\nprototype$71.run = function(encode) {\n  Dataflow.prototype.run.call(this, encode);\n  if (this._redraw || this._resize) this.render();\n  return this;\n};\n\nprototype$71.render = function() {\n  if (this._renderer) {\n    if (this._resize) this._resize = 0, resizeRenderer(this);\n    this._renderer.render(this._scenegraph.root);\n  }\n  this._redraw = false;\n  return this;\n};\n\nprototype$71.dirty = function(item) {\n  this._redraw = true;\n  this._renderer && this._renderer.dirty(item);\n};\n\n// -- GET / SET ----\n\nfunction lookupSignal(view, name) {\n  return view._signals.hasOwnProperty(name)\n    ? view._signals[name]\n    : view.error('Unrecognized signal name: ' + $$2(name));\n}\n\nprototype$71.signal = function(name, value, options) {\n  var op = lookupSignal(this, name);\n  return arguments.length === 1\n    ? op.value\n    : this.update(op, value, options);\n};\n\nprototype$71.scenegraph = function() {\n  return this._scenegraph;\n};\n\nprototype$71.background = function(_) {\n  return arguments.length ? (this._background = _, this._resize = 1, this) : this._background;\n};\n\nprototype$71.width = function(_) {\n  return arguments.length ? this.signal('width', _) : this.signal('width');\n};\n\nprototype$71.height = function(_) {\n  return arguments.length ? this.signal('height', _) : this.signal('height');\n};\n\nprototype$71.padding = function(_) {\n  return arguments.length ? this.signal('padding', _) : this.signal('padding');\n};\n\nprototype$71.renderer = function(type) {\n  if (!arguments.length) return this._renderType;\n  if (!renderModule(type)) this.error('Unrecognized renderer type: ' + type);\n  if (type !== this._renderType) {\n    this._renderType = type;\n    if (this._renderer) {\n      this._renderer = null;\n      this.initialize(this._el);\n    }\n  }\n  return this;\n};\n\nprototype$71.loader = function(loader) {\n  if (!arguments.length) return this._loader;\n  if (loader !== this._loader) {\n    Dataflow.prototype.loader.call(this, loader);\n    if (this._renderer) {\n      this._renderer = null;\n      this.initialize(this._el);\n    }\n  }\n  return this;\n};\n\n// -- EVENT HANDLING ----\n\nprototype$71.addEventListener = function(type, handler) {\n  this._handler.on(type, handler);\n};\n\nprototype$71.removeEventListener = function(type, handler) {\n  this._handler.off(type, handler);\n};\n\nprototype$71.addSignalListener = function(name, handler) {\n  var s = lookupSignal(this, name),\n      h = function() { handler(name, s.value); };\n  this.on(s, null, (h.handler = handler, h));\n};\n\nprototype$71.removeSignalListener = function(name, handler) {\n  var s = lookupSignal(this, name),\n      t = s._targets || [],\n      h = t.filter(function(op) {\n            var u = op._update;\n            return u && u.handler === handler;\n          });\n  if (h.length) t.remove(h[0]);\n};\n\nprototype$71.preventDefault = function(_) {\n  return arguments.length ? (this._preventDefault = _, this) : this._preventDefault;\n};\n\nprototype$71.tooltipHandler = function(_) {\n  var h = this._handler;\n  return !arguments.length ? h.handleTooltip\n    : (h.handleTooltip = (_ || Handler.prototype.handleTooltip), this);\n};\n\nprototype$71.events = events$1;\nprototype$71.finalize = finalize;\nprototype$71.hover = hover;\n\n// -- SIZING ----\nprototype$71.autosize = autosize;\n\n// -- DATA ----\nprototype$71.data = data;\nprototype$71.change = change;\nprototype$71.insert = insert;\nprototype$71.remove = remove;\n\n// -- INITIALIZATION ----\nprototype$71.initialize = initialize$1;\n\n// -- HEADLESS RENDERING ----\nprototype$71.toImageURL = renderToImageURL;\nprototype$71.toCanvas = renderToCanvas;\nprototype$71.toSVG = renderToSVG;\n\n// -- SAVE / RESTORE STATE ----\nprototype$71.getState = getState$1;\nprototype$71.setState = setState$1;\n\ntransform('Bound', Bound);\ntransform('Mark', Mark);\ntransform('Render', Render);\ntransform('ViewLayout', ViewLayout);\n\n/* eslint-disable no-unused-vars */\n\nexports.version = version;\nexports.Dataflow = Dataflow;\nexports.EventStream = EventStream;\nexports.Parameters = Parameters;\nexports.Pulse = Pulse;\nexports.MultiPulse = MultiPulse;\nexports.Operator = Operator;\nexports.Transform = Transform;\nexports.changeset = changeset;\nexports.ingest = ingest;\nexports.register = register;\nexports.definition = definition;\nexports.definitions = definitions;\nexports.transform = transform;\nexports.transforms = transforms;\nexports.tupleid = tupleid;\nexports.scale = scale$1;\nexports.scheme = getScheme;\nexports.interpolate = getInterpolate;\nexports.interpolateRange = interpolateRange;\nexports.projection = projection;\nexports.View = View;\nexports.parse = parse$2;\nexports.expressionFunction = expressionFunction;\nexports.formatLocale = d3Format.formatDefaultLocale;\nexports.timeFormatLocale = d3TimeFormat.timeFormatDefaultLocale;\nexports.runtime = parseDataflow;\nexports.runtimeContext = context$2;\nexports.bin = bin$1;\nexports.bootstrapCI = bootstrapCI;\nexports.randomInteger = integer;\nexports.randomKDE = randomKDE;\nexports.randomMixture = randomMixture;\nexports.randomNormal = randomNormal;\nexports.randomUniform = randomUniform;\nexports.quartiles = quartiles;\nexports.accessor = accessor;\nexports.accessorName = accessorName;\nexports.accessorFields = accessorFields;\nexports.id = id;\nexports.identity = identity;\nexports.zero = zero;\nexports.one = one;\nexports.truthy = truthy;\nexports.falsy = falsy;\nexports.logger = logger;\nexports.None = None;\nexports.Warn = Warn;\nexports.Info = Info;\nexports.Debug = Debug;\nexports.array = array;\nexports.compare = compare;\nexports.constant = constant;\nexports.error = error;\nexports.extend = extend;\nexports.extentIndex = extentIndex;\nexports.fastmap = fastmap;\nexports.field = field;\nexports.inherits = inherits;\nexports.isArray = isArray;\nexports.isBoolean = isBoolean;\nexports.isDate = isDate;\nexports.isFunction = isFunction;\nexports.isNumber = isNumber;\nexports.isObject = isObject;\nexports.isRegExp = isRegExp;\nexports.isString = isString;\nexports.key = key;\nexports.merge = merge;\nexports.pad = pad;\nexports.peek = peek;\nexports.repeat = repeat;\nexports.splitAccessPath = splitAccessPath;\nexports.stringValue = $$2;\nexports.toBoolean = toBoolean;\nexports.toDate = toDate;\nexports.toNumber = toNumber;\nexports.toString = toString;\nexports.toSet = toSet;\nexports.truncate = truncate;\nexports.visitArray = visitArray;\nexports.loader = loader;\nexports.read = read;\nexports.inferType = inferType;\nexports.inferTypes = inferTypes;\nexports.typeParsers = typeParsers;\nexports.formats = formats$1;\nexports.Bounds = Bounds;\nexports.Gradient = Gradient;\nexports.GroupItem = GroupItem;\nexports.ResourceLoader = ResourceLoader;\nexports.Item = Item;\nexports.Scenegraph = Scenegraph;\nexports.Handler = Handler;\nexports.Renderer = Renderer;\nexports.CanvasHandler = CanvasHandler;\nexports.CanvasRenderer = CanvasRenderer;\nexports.SVGHandler = SVGHandler;\nexports.SVGRenderer = SVGRenderer;\nexports.SVGStringRenderer = SVGStringRenderer;\nexports.RenderType = RenderType;\nexports.renderModule = renderModule;\nexports.Marks = Marks;\nexports.boundContext = context;\nexports.boundStroke = boundStroke;\nexports.boundItem = boundItem;\nexports.boundMark = boundMark;\nexports.pathCurves = curves;\nexports.pathSymbols = symbols;\nexports.pathRectangle = vg_rect;\nexports.pathTrail = vg_trail;\nexports.pathParse = pathParse;\nexports.pathRender = pathRender;\nexports.point = point;\nexports.canvas = Canvas$1;\nexports.domCreate = domCreate;\nexports.domFind = domFind;\nexports.domChild = domChild;\nexports.domClear = domClear;\nexports.openTag = openTag;\nexports.closeTag = closeTag;\nexports.font = font;\nexports.textMetrics = textMetrics;\nexports.sceneEqual = sceneEqual;\nexports.pathEqual = pathEqual;\nexports.sceneToJSON = sceneToJSON;\nexports.sceneFromJSON = sceneFromJSON;\nexports.sceneZOrder = zorder;\nexports.sceneVisit = visit;\nexports.scenePickVisit = pickVisit;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));"

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = create;

var _chartRegistry = __webpack_require__(1);

var _constants = __webpack_require__(0);

var constants = _interopRequireWildcard(_constants);

var _datagraph = __webpack_require__(2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LINE_VEGA_SPEC = {
  $schema: "https://vega.github.io/schema/vega/v3.0.json",
  width: 750,
  height: 200,
  padding: 15,
  title: "# Records by Departure Month",
  signals: [{
    name: "brush",
    value: [50, 100],
    on: [{
      events: "@overview:mousedown",
      update: "[x(), x()]"
    }, {
      events: "[@overview:mousedown, window:mouseup] > window:mousemove!",
      update: "[brush[0], clamp(x(), 0, width)]"
    }, {
      events: { signal: "delta" },
      update: "clampRange([anchor[0] + delta, anchor[1] + delta], 0, width)"
    }]
  }, {
    name: "anchor",
    value: null,
    on: [{ events: "@brush:mousedown", update: "slice(brush)" }]
  }, {
    name: "xdown",
    value: 0,
    on: [{ events: "@brush:mousedown", update: "x()" }]
  }, {
    name: "delta",
    value: 0,
    on: [{
      events: "[@brush:mousedown, window:mouseup] > window:mousemove!",
      update: "x() - xdown"
    }]
  }],

  data: [{
    name: constants.DATA_NAME,
    values: [],
    parse: { x: 'utc:"%Y"' }
  }],

  scales: [{
    name: "x",
    type: "utc",
    range: "width",
    domain: { data: constants.DATA_NAME, field: "x" }
  }, {
    name: "y",
    type: "linear",
    range: "height",
    nice: true,
    zero: true,
    domain: { data: constants.DATA_NAME, field: "y" }
  }],

  axes: [{
    orient: "bottom",
    scale: "x",
    format: "%m-%Y",
    title: "date_trunc(month, dep_timestamp)"
  }, { orient: "left", scale: "y", title: "# of Records" }],

  marks: [{
    type: "line",
    name: "overview",
    from: { data: constants.DATA_NAME },
    encode: {
      enter: {
        x: { scale: "x", field: "x" },
        y: { scale: "y", field: "y" },
        stroke: { value: "steelblue" },
        strokeWidth: { value: 2 }
      },
      update: {
        fillOpacity: { value: 1 }
      },
      hover: {
        fillOpacity: { value: 0.5 }
      }
    }
  }, {
    type: "rect",
    name: "brush",
    encode: {
      enter: {
        y: { value: 0 },
        height: { value: 200 },
        fill: { value: "steelblue" },
        fillOpacity: { value: 0.2 }
      },
      update: {
        x: { signal: "brush[0]" },
        x2: { signal: "brush[1]" }
      }
    }
  }, {
    type: "rect",
    interactive: false,
    encode: {
      enter: {
        y: { value: 0 },
        height: { value: 200 },
        width: { value: 1 },
        fill: { value: "firebrick" }
      },
      update: {
        x: { signal: "brush[0]" }
      }
    }
  }, {
    type: "rect",
    interactive: false,
    encode: {
      enter: {
        y: { value: 0 },
        height: { value: 200 },
        width: { value: 1 },
        fill: { value: "firebrick" }
      },
      update: {
        x: { signal: "brush[1]" }
      }
    }
  }, {
    name: "bubble",
    type: "symbol",
    from: { data: constants.DATA_NAME },
    encode: {
      update: {
        x: { scale: "x", field: "x" },
        y: { scale: "y", field: "y" },
        size: { value: 20 },
        shape: { value: "circle" },
        strokeWidth: { value: 2 },
        fill: { value: "red" }
      }
    }
  }]
};

var view = null;

function render(data) {
  var _this = this;

  LINE_VEGA_SPEC.data[0].values = data;

  var extent = [data[0].x, data[data.length - 1].x];
  var scale = d3.scaleTime().domain(extent).range([0, 750]);

  var runtime = vega.parse(LINE_VEGA_SPEC);
  view = new vega.View(runtime);

  view.initialize(document.querySelector("#chart3")).logLevel(vega.Warn).renderer("svg").run();

  view.addSignalListener("brush", function (signal, range) {
    _this.filter({
      type: "filter.range",
      id: constants.LINE,
      field: "dep_timestamp",
      filter: [scale.invert(range[0]), scale.invert(range[1])]
    });
  });
}

function redraw(data) {
  view.setState({ data: _defineProperty({}, constants.DATA_NAME, data) });
}

function filterAll() {
  // view.setState({ data: { selected: [] } })
}

function reduceFilters(filters, _ref) {
  var filter = _ref.filter;

  var formatTime = d3.timeFormat("%Y-%m-%d %-I:%M:%S");
  return ["TIMESTAMP(0) '" + formatTime(filter[0]) + "'", "TIMESTAMP(0) '" + formatTime(filter[1]) + "'"];
}

function create() {
  var chart = (0, _chartRegistry.register)(constants.LINE);
  chart.on("render", render);
  chart.on("redraw", redraw);
  chart.on("filterAll", filterAll);
  chart.data(_datagraph.lineDataNode);
  chart.filterReduce(reduceFilters);
}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = create;

var _chartRegistry = __webpack_require__(1);

var _constants = __webpack_require__(0);

var constants = _interopRequireWildcard(_constants);

var _datagraph = __webpack_require__(2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ROW_VEGA_SPEC = {
  $schema: "https://vega.github.io/schema/vega/v3.0.json",
  width: 350,
  height: 350,
  padding: 5,
  title: "# Records by Destination State",
  data: [{ name: constants.DATA_NAME, values: [] }, {
    name: "selected",
    on: [{ trigger: "clicked", toggle: "clicked" }]
  }],

  signals: [{
    name: "filter",
    value: null,
    on: [{
      events: "@bars:click",
      update: "{value: datum.dest_state, selected: indata('selected', 'value', datum.dest_state)}",
      force: true
    }]
  }, {
    name: "clicked",
    value: null,
    on: [{
      events: "@bars:click",
      update: "{value: datum.dest_state}",
      force: true
    }]
  }],

  scales: [{
    name: "xscale",
    type: "band",
    domain: { data: constants.DATA_NAME, field: "dest_state" },
    range: "width"
  }, {
    name: "yscale",
    domain: { data: constants.DATA_NAME, field: "records" },
    nice: true,
    range: "height"
  }],

  axes: [{ orient: "bottom", scale: "xscale", title: "Destination State" }, { orient: "left", scale: "yscale", title: "# of Records" }],

  marks: [{
    type: "rect",
    name: "bars",
    interactive: true,
    from: { data: constants.DATA_NAME },
    encode: {
      enter: {
        x: { scale: "xscale", field: "dest_state", offset: 1 },
        width: { scale: "xscale", band: 1, offset: -1 },
        y: { scale: "yscale", field: "records" },
        y2: { scale: "yscale", value: 0 }
      },
      update: {
        fill: [{
          test: "!length(data('selected')) || indata('selected', 'value', datum.dest_state)",
          value: "steelblue"
        }, { value: "#D3D3D3" }]
      },
      hover: {
        fill: { value: "red" }
      }
    }
  }, {
    type: "text",
    encode: {
      enter: {
        align: { value: "center" },
        baseline: { value: "bottom" },
        fill: { value: "#333" }
      }
    }
  }]
};

var view = null;

function render(data) {
  var _this = this;

  ROW_VEGA_SPEC.data[0].values = data;
  var runtime = vega.parse(ROW_VEGA_SPEC);
  view = new vega.View(runtime);

  view.initialize(document.querySelector("#chart")).logLevel(vega.Warn).renderer("svg").run();

  view.addSignalListener("filter", function (signal, filter) {
    _this.filter({
      type: "filter.exact",
      id: constants.ROW,
      field: "dest_state",
      filter: filter
    });
  });
}

function redraw(data) {
  view.setState({ data: _defineProperty({}, constants.DATA_NAME, data) });
}

function filterAll() {
  view.setState({ data: { selected: [] } });
}

function reduceFilters(filters, filterAction) {
  if (filterAction.filter.selected) {
    var index = filters.indexOf(filterAction.filter.value);
    var nextFilters = filters.slice();
    nextFilters.splice(index, 1);
    return nextFilters;
  } else {
    return filters.concat(filterAction.filter.value);
  }
}

function create() {
  var chart = (0, _chartRegistry.register)(constants.ROW);
  chart.on("render", render);
  chart.on("redraw", redraw);
  chart.on("filterAll", filterAll);
  chart.data(_datagraph.rowDataNode);
  chart.filterReduce(reduceFilters);
}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = create;

var _chartRegistry = __webpack_require__(1);

var _constants = __webpack_require__(0);

var constants = _interopRequireWildcard(_constants);

var _datagraph = __webpack_require__(2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SCATTER_VEGA_SPEC = {
  $schema: "https://vega.github.io/schema/vega/v3.0.json",
  width: 350,
  height: 350,
  padding: 5,
  autosize: "pad",
  title: "Average Arrival and Departure Delay by Carrier Name",
  data: [{ name: constants.DATA_NAME, values: [] }, {
    name: "selected",
    on: [{ trigger: "clicked", toggle: "clicked" }]
  }],

  signals: [{
    name: "filter",
    value: null,
    on: [{
      events: "@bubble:click",
      update: "{value: datum.key0, selected: indata('selected', 'value', datum.key0)}",
      force: true
    }]
  }, {
    name: "clicked",
    value: null,
    on: [{
      events: "@bubble:click",
      update: "{value: datum.key0}",
      force: true
    }]
  }],
  scales: [{
    name: "x",
    type: "linear",
    round: true,
    nice: true,
    zero: true,
    domain: { data: constants.DATA_NAME, field: "x" },
    range: [0, 350]
  }, {
    name: "y",
    type: "linear",
    round: true,
    nice: true,
    zero: true,
    domain: { data: constants.DATA_NAME, field: "y" },
    range: [350, 0]
  }, {
    name: "size",
    type: "linear",
    round: true,
    nice: false,
    zero: true,
    domain: { data: constants.DATA_NAME, field: "size" },
    range: [4, 361]
  }, {
    name: "color",
    type: "ordinal",
    range: { scheme: "category10" },
    domain: { data: constants.DATA_NAME, field: "key0" }
  }],

  axes: [{
    scale: "x",
    grid: true,
    domain: false,
    orient: "bottom",
    tickCount: 5,
    title: "AVG(depdelay)"
  }, {
    scale: "y",
    grid: true,
    domain: false,
    orient: "left",
    titlePadding: 5,
    title: "AVG(arrdelay)"
  }],

  legends: [
    // {
    //   size: "size",
    //   title: "size",
    //   format: "s",
    //   encode: {
    //     symbols: {
    //       update: {
    //         strokeWidth: { value: 2 },
    //         opacity: { value: 0.5 },
    //         stroke: { value: "#4682b4" },
    //         shape: { value: "circle" }
    //       }
    //     }
    //   }
    // }
  ],

  marks: [{
    name: "bubble",
    type: "symbol",
    from: { data: constants.DATA_NAME },
    encode: {
      update: {
        x: { scale: "x", field: "x" },
        y: { scale: "y", field: "y" },
        size: { scale: "size", field: "size" },
        shape: { value: "circle" },
        strokeWidth: { value: 2 },
        fill: [{
          test: "!length(data('selected')) || indata('selected', 'value', datum.key0)",
          scale: "color",
          field: "key0"
        }, { value: "#D3D3D3" }]
      }
    }
  }]
};

// function handleFilterSignal(signal, filter) {
//   dispatch.call("filter", this, {
//     type: "exact",
//     id: constants.SCATTER,
//     field: "carrier_name",
//     filter
//   });
// }
//
// export function render(data) {
//   SCATTER_VEGA_SPEC.data[0].values = data;
//   const runtime = vega.parse(SCATTER_VEGA_SPEC);
//   const view = new vega.View(runtime);
//   dispatch.call("render", view, { id: constants.SCATTER, node: "#chart2" });
//   view.addSignalListener("filter", handleFilterSignal);
// }

var view = null;

function render(data) {
  var _this = this;

  SCATTER_VEGA_SPEC.data[0].values = data;
  var runtime = vega.parse(SCATTER_VEGA_SPEC);
  view = new vega.View(runtime);

  view.initialize(document.querySelector("#chart2")).logLevel(vega.Warn).renderer("svg").run();

  view.addSignalListener("filter", function (signal, filter) {
    _this.filter({
      type: "filter.exact",
      id: constants.SCATTER,
      field: "carrier_name",
      filter: filter
    });
  });
}

function redraw(data) {
  view.setState({ data: _defineProperty({}, constants.DATA_NAME, data) });
}

function filterAll() {
  view.setState({ data: { selected: [] } });
}

function reduceFilters(filters, filterAction) {
  if (filterAction.filter.selected) {
    var index = filters.indexOf(filterAction.filter.value);
    var nextFilters = filters.slice();
    nextFilters.splice(index, 1);
    return nextFilters;
  } else {
    return filters.concat(filterAction.filter.value);
  }
}

function create() {
  var chart = (0, _chartRegistry.register)(constants.SCATTER);
  chart.on("render", render);
  chart.on("redraw", redraw);
  chart.on("filterAll", filterAll);
  chart.data(_datagraph.scatterDataNode);
  chart.filterReduce(reduceFilters);
}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.filter = filter;

var _datagraph = __webpack_require__(2);

function filter(id, filter) {
  var _xfilterDataNode$getS = _datagraph.xfilterDataNode.getState(),
      transform = _xfilterDataNode$getS.transform;

  var xfilters = transform[0].filter;
  var index = xfilters.findIndex(function (f) {
    return f.id === id;
  });
  console.log(filter);
  if (index !== -1) {
    xfilters[index] = _extends({
      id: id
    }, filter);
  } else {
    xfilters.push(_extends({
      id: id
    }, filter));
  }
}

function filterAll() {
  var _xfilterDataNode$getS2 = _datagraph.xfilterDataNode.getState(),
      transform = _xfilterDataNode$getS2.transform;

  transform[0].filter = [];
}

exports.default = {
  filter: filter,
  filterAll: filterAll
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDataGraph = createDataGraph;

var _dataNode = __webpack_require__(17);

var _dataNode2 = _interopRequireDefault(_dataNode);

var _invariant = __webpack_require__(5);

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createDataGraph(connector) {
  var initialState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  (0, _invariant2.default)(typeof connector.query === "function", "invalid connector");

  var context = {
    state: initialState,
    connector: connector
  };

  var _nodes = [];

  return {
    nodes: function nodes() {
      return _nodes;
    },
    getState: function getState() {
      return context.state;
    },
    data: function data(state) {
      var dataNode = (0, _dataNode2.default)(context, state);
      context.state[state.name] = dataNode.getState();
      _nodes.push(dataNode);
      return dataNode;
    }
  };
}

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createDataNode;

var _nodePathUtils = __webpack_require__(18);

var _invariant = __webpack_require__(5);

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createDataNode(context, initialState) {
  (0, _invariant2.default)(typeof initialState.name === "string", "must have name and source");

  (0, _invariant2.default)(initialState.source, "must have name and source");

  var state = _extends({}, initialState, {
    transform: initialState.transform || []
  });

  return {
    getState: function getState() {
      return state;
    },
    transform: function transform(_transform) {
      if (typeof _transform === "function") {
        state.transform = _transform(state.transform);
      } else if (Array.isArray(_transform)) {
        state.transform = state.transform.concat(_transform);
      } else if ((typeof _transform === "undefined" ? "undefined" : _typeof(_transform)) === "object") {
        state.transform.push(_transform);
      } else {
        (0, _invariant2.default)(true, "invalid transform");
      }
      return this;
    },
    toSQL: function toSQL() {
      return (0, _nodePathUtils.nodePathToSQL)(context.state, state.name);
    },
    values: function values() {
      return context.connector.query((0, _nodePathUtils.nodePathToSQL)(context.state, state.name));
    }
  };
}

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.walk = walk;
exports.reduceNodes = reduceNodes;
exports.resolveFilters = resolveFilters;
exports.nodePathToSQL = nodePathToSQL;

var _writeSql = __webpack_require__(26);

var _writeSql2 = _interopRequireDefault(_writeSql);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var identity = function identity(a) {
  return a;
};


function createNodeReducer(state) {
  return function reduceNode(leftNode, rightNode) {
    return {
      name: "",
      source: state.hasOwnProperty(rightNode.source) ? leftNode.source : rightNode.source,
      transform: leftNode.transform.concat(rightNode.transform)
    };
  };
}

function walk(state, name, iterator, xform, accum) {
  var node = state[name];
  var source = node.source;

  accum = xform(accum, iterator(node));
  return state.hasOwnProperty(source) ? walk(state, source, iterator, xform, accum) : accum;
}

function reduceNodes(state, name) {
  return walk(state, name, identity, createNodeReducer(state), {
    name: "",
    source: "",
    transform: []
  });
}

var resolvedFilter = function resolvedFilter(transforms, signal) {
  return transforms.filter(function (transform) {
    return transform.type === "resolvefilter" && transform.filter.signal === signal;
  })[0];
};

function resolveFilters(state) {
  function reduceXFilters(transforms, transform) {
    if (transform.type === "crossfilter") {
      var resolved = resolvedFilter(state.transform, transform.signal);
      if (resolved.type === "resolvefilter") {
        transform.filter.forEach(function (filter) {
          if (Array.isArray(resolved.ignore) && resolved.ignore.indexOf(filter.id) === -1) {
            transforms.push(filter);
          } else if (typeof resolved.ignore === "string" && resolved.ignore !== filter.id) {
            transforms.push(filter);
          }
        });
      }
      return transforms;
    } else {
      return transforms.concat(transform);
    }
  }

  state.transform = state.transform.reduce(reduceXFilters, []).filter(function (transform) {
    return transform.type !== "resolvefilter";
  });

  return state;
}

function nodePathToSQL(state, source) {
  return (0, _writeSql2.default)(resolveFilters(reduceNodes(state, source)));
}

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseAggregate;
var AGGREGATES = {
  average: "AVG",
  count: "COUNT",
  min: "MIN",
  max: "MAX",
  sum: "SUM"
};

function parseAggregate(sql, transform) {
  transform.fields.forEach(function (field, index) {
    var as = Array.isArray(transform.as) ? transform.as[index] : null;
    if (Array.isArray(transform.ops)) {
      sql.select.push(aggregateField(transform.ops[index], field, as));
    } else {
      sql.select.push(aggregateField(null, field, as));
    }
  });

  if (typeof transform.groupby === "string") {
    sql.groupby.push(transform.groupby);
  } else if (Array.isArray(transform.groupby)) {
    sql.groupby = sql.groupby.concat(transform.groupby);
  }

  return sql;
}

function aggregateField(op, field, as) {
  var str = "";
  if (op === null) {
    str += field;
  } else if (AGGREGATES[op]) {
    str += AGGREGATES[op] + "(" + field + ")";
  }
  return str + ("" + (as ? " as " + as : ""));
}

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseBin;
function parseBin(sql, _ref) {
  var field = _ref.field,
      as = _ref.as,
      extent = _ref.extent,
      maxbins = _ref.maxbins;

  sql.select.push("cast((cast(" + field + " as float) - " + extent[0] + ") * " + maxbins / (extent[1] - extent[0]) + " as int) as " + as);
  sql.where.push("((" + field + " >= " + extent[0] + " AND " + field + " <= " + extent[1] + ") OR (" + field + " IS NULL))");
  sql.groupby.push(as);
  sql.having.push("(" + as + " >= 0 AND " + as + " < " + maxbins + " OR " + as + " IS NULL)");
  return sql;
}

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseCollect;
var ORDERINGS = {
  ascending: "ASC",
  descending: "DESC"
};

function parseSort(sql, transform) {
  transform.sort.field.forEach(function (field, index) {
    sql.orderby.push(field + (Array.isArray(transform.sort.order) ? " " + ORDERINGS[transform.sort.order[index]] : ""));
  });
  return sql;
}

function parseCollect(sql, transform) {
  switch (transform.type) {
    case "collect.sort":
      return parseSort(sql, transform);
    case "collect.limit":
      sql.limit += transform.limit.row;
      sql.offset += transform.limit.offset || sql.offset;
      return sql;
    default:
      return sql;
  }
}

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseFilter;
function parseFilterExact(sql, transform) {
  if (typeof transform.equals === "string") {
    sql.where.push("(" + transform.field + " = " + "'" + transform.equals + "'" + ")");
  } else if (Array.isArray(transform.equals) && transform.equals.length) {
    var stmt = transform.equals.map(function (equal) {
      return transform.field + " = " + "'" + equal + "'";
    }).join(" OR ");

    sql.where.push("(" + stmt + ")");
  }
  return sql;
}

function parseFilterRange(sql, transform) {
  sql.where.push("(" + transform.field + " >= " + transform.range[0] + " AND " + transform.field + " <= " + transform.range[1] + ")");

  return sql;
}

function parseFilter(sql, transform) {
  switch (transform.type) {
    case "filter":
      sql.where.push("(" + transform.expr + ")");
      return sql;
    case "filter.range":
      return parseFilterRange(sql, transform);
    case "filter.exact":
      return parseFilterExact(sql, transform);
    default:
      return sql;
  }
}

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formula;
function formula(sql, transform) {
  if (transform.type === "formula") {
    sql.select.push(transform.expr + " as " + transform.as);
  } else if (transform.type === "formula.date_trunc") {
    sql.select.push("date_trunc(" + transform.unit + ", " + transform.field + ") as " + transform.as);
  } else if (transform.type === "formula.extract") {
    sql.select.push("extract(" + transform.unit + " from " + transform.field + ") as " + transform.as);
  }

  return sql;
}

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sample;
function sample(sql, transform) {
  return sql;
}

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parse;

var _parseAggregate = __webpack_require__(19);

var _parseAggregate2 = _interopRequireDefault(_parseAggregate);

var _parseBin = __webpack_require__(20);

var _parseBin2 = _interopRequireDefault(_parseBin);

var _parseCollect = __webpack_require__(21);

var _parseCollect2 = _interopRequireDefault(_parseCollect);

var _parseFilter = __webpack_require__(22);

var _parseFilter2 = _interopRequireDefault(_parseFilter);

var _parseFormula = __webpack_require__(23);

var _parseFormula2 = _interopRequireDefault(_parseFormula);

var _parseSample = __webpack_require__(24);

var _parseSample2 = _interopRequireDefault(_parseSample);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(_ref) {
  var source = _ref.source,
      transform = _ref.transform;

  var initialSQL = {
    select: [],
    from: source,
    where: [],
    groupby: [],
    having: [],
    orderby: [],
    limit: "",
    offset: ""
  };

  return transform.reduce(function (sql, t) {
    switch (t.type) {
      case "aggregate":
        return (0, _parseAggregate2.default)(sql, t);
      case "bin":
        return (0, _parseBin2.default)(sql, t);
      case "collect.sort":
      case "collect.limit":
        return (0, _parseCollect2.default)(sql, t);
      case "filter":
      case "filter.exact":
      case "filter.range":
        return (0, _parseFilter2.default)(sql, t);
      case "formula":
      case "formula.date_trunc":
      case "formula.extract":
        return (0, _parseFormula2.default)(sql, t);
      case "sample":
        return (0, _parseSample2.default)(sql, t);
      default:
        return sql;
    }
  }, initialSQL);
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = writeSQL;

var _parseTransform = __webpack_require__(25);

var _parseTransform2 = _interopRequireDefault(_parseTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function writeSQL(state) {
  return write((0, _parseTransform2.default)(state));
}


function write(sql) {
  return writeSelect(sql.select) + writeFrom(sql.from) + writeWhere(sql.where) + writeGroupby(sql.groupby) + writeHaving(sql.having) + writeOrderBy(sql.orderby) + writeLimit(sql.limit) + writeOffset(sql.offset);
}

function writeSelect(select) {
  return select.length ? "SELECT " + select.join(", ") : "SELECT *";
}

function writeFrom(from) {
  return " FROM " + from;
}

function writeWhere(where) {
  return where.length ? " WHERE " + where.join(" AND ") : "";
}

function writeGroupby(groupby) {
  return groupby.length ? " GROUP BY " + groupby.join(", ") : "";
}

function writeHaving(having) {
  return having.length ? " HAVING " + having.join(" AND ") : "";
}

function writeOrderBy(orderby) {
  return orderby.length ? " ORDER BY " + orderby.join(", ") : "";
}

function writeLimit(limit) {
  return limit.length ? " LIMIT " + limit : "";
}

function writeOffset(offset) {
  return offset.length ? " OFFSET " + offset : "";
}

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(6);
__webpack_require__(7);
module.exports = __webpack_require__(8);


/***/ })
/******/ ]);
//# sourceMappingURL=bundle.js.map